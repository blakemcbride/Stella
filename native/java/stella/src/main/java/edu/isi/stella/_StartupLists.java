//  -*- Mode: Java -*-
//
// _StartupLists.java

/*
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
*/

package edu.isi.stella;

import edu.isi.stella.javalib.*;

public class _StartupLists {
  static void helpStartupLists1() {
    {
      Stella.defineFunctionObject("DEFINED-LIST?", "(DEFUN (DEFINED-LIST? BOOLEAN) ((SELF LIST)) :PUBLIC? TRUE :DOCUMENTATION \"Return TRUE unless `self' is NULL or the `NIL-LIST'.\")", Native.find_java_method("edu.isi.stella.List", "definedListP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineFunctionObject("NULL-LIST?", "(DEFUN (NULL-LIST? BOOLEAN) ((SELF LIST)) :PUBLIC? TRUE :DOCUMENTATION \"Return TRUE iff `self' is NULL or the `NIL-LIST'.\")", Native.find_java_method("edu.isi.stella.List", "nullListP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineMethodObject("(DEFMETHOD (EMPTY? BOOLEAN) ((SELF LIST)) :PUBLIC? TRUE :DOCUMENTATION \"Return TRUE if the list `self' has no members.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "emptyP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NON-EMPTY? BOOLEAN) ((SELF LIST)) :PUBLIC? TRUE :DOCUMENTATION \"Return TRUE if the list `self' has at least one member.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "nonEmptyP", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("TERMINATE-LIST?", "(DEFUN (TERMINATE-LIST? BOOLEAN) ((SELF LIST)))", Native.find_java_method("edu.isi.stella.List", "terminateListP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineMethodObject("(DEFMETHOD (MEMBER? BOOLEAN) ((SELF LIST) (OBJECT OBJECT)) :DOCUMENTATION \"Return TRUE iff `object' is a member of the list\n`self' (uses an `eql?' test).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "memberP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (MEMB? BOOLEAN) ((SELF LIST) (OBJECT (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Return TRUE iff `object' is a member of the cons list\n`self' (uses an 'eq?' test).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "membP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FIRST (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Return the first item in the list `self', or NULL if empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "first", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (SECOND (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Return the second item in the list `self', or NULL if empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "second", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (THIRD (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Return the third item in the list `self', or NULL if empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "third", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (FOURTH (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Return the fourth item in the list `self', or NULL if empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "fourth", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (FIFTH (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Return the fifth item in the list `self', or NULL if empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "fifth", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH (LIKE (ANY-VALUE SELF))) ((SELF LIST) (POSITION INTEGER)) :DOCUMENTATION \"Return the nth item in the list `self', or NULL if empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "nth", new java.lang.Class [] {java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (LAST (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Return the last element of `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "last", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (REST (CONS OF (LIKE (ANY-VALUE SELF)))) ((SELF LIST)) :DOCUMENTATION \"Return a cons list of all but the first item in the list `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "rest", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (FIRST-SETTER (LIKE (ANY-VALUE SELF))) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "firstSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (SECOND-SETTER (LIKE (ANY-VALUE SELF))) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "secondSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (THIRD-SETTER (LIKE (ANY-VALUE SELF))) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "thirdSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FOURTH-SETTER (LIKE (ANY-VALUE SELF))) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "fourthSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FIFTH-SETTER (LIKE (ANY-VALUE SELF))) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "fifthSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (NTH-SETTER (LIKE (ANY-VALUE SELF))) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF))) (POSITION INTEGER)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "nthSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (LENGTH INTEGER) ((SELF LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "length", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (POSITION INTEGER) ((SELF LIST) (OBJECT OBJECT) (START INTEGER)) :DOCUMENTATION \"Return the position of `object' within the list\n`self' (counting from zero); or return NULL if `object' does not occur within \n`self' (uses an `eql?' test).  If `start' was supplied as non-NULL, only \nconsider the sublist starting at `start', however, the returned position \nwill always be relative to the entire list.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "position", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (LAST-POSITION INTEGER) ((SELF LIST) (OBJECT OBJECT) (END INTEGER)) :DOCUMENTATION \"Return the position of `object' within the list\n`self' (counting from zero); or return NULL if `object' does not occur within \n`self' (uses an `eql?' test).  If `end' was supplied as non-NULL, only \nconsider the sublist ending at `end', however, the returned position \nwill always be relative to the entire list.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "lastPosition", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD INSERT ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Add `value' to the front of the list `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "insert", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Add `value' to the front of the list `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "push", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD INSERT-NEW ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Add `value' to the front of the list `self' unless its \nalready a member.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "insertNew", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD INSERT-LAST ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Insert `value' as the last entry in the list `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "insertLast", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE (LIKE SELF)) ((SELF LIST) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Destructively remove all entries in `self' that match `value'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "remove", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE-IF (LIKE SELF)) ((SELF LIST) (TEST? FUNCTION-CODE)) :DOCUMENTATION \"Destructively remove all members of the list `self' for which\n'test?' evaluates to TRUE.  `test' takes a single argument of type OBJECT and\nreturns TRUE or FALSE.  Returns `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "removeIf", new java.lang.Class [] {Native.find_java_class("java.lang.reflect.Method")})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE-DUPLICATES (LIKE SELF)) ((SELF LIST)) :DOCUMENTATION \"Destructively remove duplicates from `self' and return the result.\nPreserves the original order of the remaining members.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "removeDuplicates", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE-DUPLICATES-EQUAL (LIKE SELF)) ((SELF LIST)) :DOCUMENTATION \"`remove-duplicates' (which see) using an `equal?' test.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "removeDuplicatesEqual", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (POP (LIKE (ANY-VALUE SELF))) ((SELF LIST)) :DOCUMENTATION \"Remove and return the first element in the list `self'.\nReturn NULL if the list is empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "pop", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (REVERSE (LIKE SELF)) ((SELF LIST)) :DOCUMENTATION \"Reverse the members of `self' (in place).\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "reverse", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (SUBSTITUTE (LIKE SELF)) ((SELF LIST) (INVALUE OBJECT) (OUTVALUE OBJECT)) :DOCUMENTATION \"Destructively replace each appearance of `outValue' by\n`inValue' in the list `self'.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "substitute", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONCATENATE LIST) ((LIST1 LIST) (LIST2 LIST) |&REST| (OTHERLISTS LIST)) :DOCUMENTATION \"Copy `list2' and all `otherLists' onto the end of `list1'.\nThe operation is destructive wrt `list1', but leaves all other lists intact.\nThe two mandatory parameters allow us to optimize the common binary case by\nnot relying on the somewhat less efficient variable arguments mechanism.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "concatenate", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("edu.isi.stella.Cons")})), null);
      Stella.defineMethodObject("(DEFMETHOD (PREPEND (LIKE SELF)) ((SELF LIST) (LIST2 LIST)) :DOCUMENTATION \"Copy `list2' onto the front of the list `self'.\nThe operation is destructive wrt `self', but leaves `list2' intact.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "prepend", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineFunctionObject("CREATE-DERIVED-LIST", "(DEFUN (CREATE-DERIVED-LIST LIST) ((SELF LIST)) :DOCUMENTATION \"Create a new list object with the same type as `self'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.List", "createDerivedList", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineMethodObject("(DEFMETHOD (COPY (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF LIST)) :DOCUMENTATION \"Return a copy of the list `self'.  The conses in the copy are\nfreshly allocated.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "copy", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR ((SELF LIST)) :DOCUMENTATION \"Make `self' an empty list.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "clear", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (SORT (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF LIST) (PREDICATE FUNCTION-CODE)) :PUBLIC? TRUE :DOCUMENTATION \"Perform a stable, destructive sort of `self' according to\n`predicate', and return the result.  If `predicate' has a '<' semantics, the\nresult will be in ascending order.  If `predicate' is NULL, a suitable\n'<' predicate is chosen depending on the first element of `self', and it \nis assumed that all elements of `self' have the same type (supported\nelement types are GENERALIZED-SYMBOL, STRING, INTEGER, and FLOAT).\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "sort", new java.lang.Class [] {Native.find_java_class("java.lang.reflect.Method")})), null);
      Stella.defineFunctionObject("MAP-NULL-TO-NIL-LIST", "(DEFUN (MAP-NULL-TO-NIL-LIST LIST) ((SELF LIST)) :DOCUMENTATION \"Return NIL-LIST iff `self' is NULL or `self' otherwise.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (CHOOSE (NULL? SELF) NIL-LIST SELF)))", Native.find_java_method("edu.isi.stella.List", "mapNullToNilList", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineMethodObject("(DEFMETHOD (OBJECT-EQUAL? BOOLEAN) ((X LIST) (Y OBJECT)) :DOCUMENTATION \"Return TRUE iff the lists `x' and `y' are structurally\nequivalent.  Uses `equal?' to test equality of elements.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "objectEqualP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (EQUAL-HASH-CODE INTEGER) ((SELF LIST)) :DOCUMENTATION \"Return an `equal?' hash code for `self'.  Note that this\nis O(N) in the number of elements of `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "equalHashCode", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (ALLOCATE-ITERATOR (LIST-ITERATOR OF (LIKE (ANY-VALUE SELF)))) ((SELF LIST)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "allocateIterator", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("TERMINATE-LIST-ITERATOR?", "(DEFUN (TERMINATE-LIST-ITERATOR? BOOLEAN) ((SELF LIST-ITERATOR)))", Native.find_java_method("edu.isi.stella.ListIterator", "terminateListIteratorP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.ListIterator")}), null);
      Stella.defineMethodObject("(DEFMETHOD (NEXT? BOOLEAN) ((SELF LIST-ITERATOR)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.ListIterator", "nextP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (EMPTY? BOOLEAN) ((SELF LIST-ITERATOR)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.ListIterator", "emptyP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (VALUE-SETTER OBJECT) ((SELF LIST-ITERATOR) (VALUE (LIKE (ANY-VALUE SELF)))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.ListIterator", "valueSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (BUT-LAST (ITERATOR OF (LIKE (ANY-VALUE SELF)))) ((SELF LIST)) :DOCUMENTATION \"Generate all but the last element of the list `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "butLast", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE-DELETED-MEMBERS (LIKE SELF)) ((SELF LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "removeDeletedMembers", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD INITIALIZE-OBJECT ((SELF PROPERTY-LIST)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "initializeObject", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("SEARCH-PLIST", "(DEFUN (SEARCH-PLIST OBJECT) ((PLIST CONS) (KEY OBJECT)))", Native.find_java_method("edu.isi.stella.Cons", "searchPlist", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LOOKUP (LIKE (ANY-VALUE SELF))) ((SELF PROPERTY-LIST) (KEY (LIKE (ANY-KEY SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "lookup", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (LOOKUP-WITH-DEFAULT (LIKE (ANY-VALUE SELF))) ((SELF PROPERTY-LIST) (KEY (LIKE (ANY-KEY SELF))) (DEFAULT (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Lookup `key' in `self' and return the result.\nReturn `default' if no value was found.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "lookupWithDefault", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (LENGTH INTEGER) ((SELF PROPERTY-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "length", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD INSERT-AT ((SELF PROPERTY-LIST) (KEY (LIKE (ANY-KEY SELF))) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Insert the entry <`key', `value'> into the property list `self'.\nIf a previous entry existed with key `key', that entry is replaced.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "insertAt", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE-AT OBJECT) ((SELF PROPERTY-LIST) (KEY (LIKE (ANY-KEY SELF)))) :DOCUMENTATION \"Remove the entry that matches the key `key'.  Return the\nvalue of the matching entry, or NULL if there is no matching entry.  Assumes that at\nmost one entry matches `key'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "removeAt", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (EMPTY? BOOLEAN) ((SELF PROPERTY-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "emptyP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NON-EMPTY? BOOLEAN) ((SELF PROPERTY-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "nonEmptyP", new java.lang.Class [] {})), null);
    }
  }

  static void helpStartupLists2() {
    {
      Stella.defineMethodObject("(DEFMETHOD (COPY (LIKE SELF)) ((SELF PROPERTY-LIST)) :DOCUMENTATION \"Return a copy of the list `self'.  The conses in the copy are\nfreshly allocated.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "copy", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR ((SELF PROPERTY-LIST)) :DOCUMENTATION \"Make `self' an empty property list.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "clear", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (OBJECT-EQUAL? BOOLEAN) ((X PROPERTY-LIST) (Y OBJECT)) :DOCUMENTATION \"Return TRUE if `x' and `y' represent the same set of key/value pairs..\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "objectEqualP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (EQUAL-HASH-CODE INTEGER) ((SELF PROPERTY-LIST)) :DOCUMENTATION \"Return an `equal?' hash code for `self'.  Note that this\nis O(N) in the number of entries of `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "equalHashCode", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (SUBSET? BOOLEAN) ((SELF LIST) (OTHERLIST LIST)) :DOCUMENTATION \"Return true if every element of `self' also occurs in `otherList'.\nUses an `eql?' test and a simple quadratic-time algorithm.  Note that\nthis does not check whether `self' and `otherList' actually are sets.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "subsetP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineMethodObject("(DEFMETHOD (EQUIVALENT-SETS? BOOLEAN) ((SELF LIST) (OTHERLIST LIST)) :DOCUMENTATION \"Return true if every element of `self' occurs in `otherList' and vice versa.\nUses an `eql?' test and a simple quadratic-time algorithm.  Note that\nthis does not check whether `self' and `otherList' actually are sets.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "equivalentSetsP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineMethodObject("(DEFMETHOD (INTERSECTION LIST) ((SELF LIST) (OTHERLIST LIST)) :DOCUMENTATION \"Return the set intersection of `self' and `otherList'.  Uses an `eql?'\ntest and a simple quadratic-time algorithm.  Note that the result is only\nguaranteed to be a set if both `self' and `otherList' are sets.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "intersection", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineMethodObject("(DEFMETHOD (UNION LIST) ((SELF LIST) (OTHERLIST LIST)) :DOCUMENTATION \"Return the set union of `self' and `otherList'.  Uses an `eql?' test\nand a simple quadratic-time algorithm.  Note that the result is only\nguaranteed to be a set if both `self' and `otherList' are sets.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "union", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineMethodObject("(DEFMETHOD (DIFFERENCE LIST) ((SELF LIST) (OTHERLIST LIST)) :DOCUMENTATION \"Return the set difference of `self' and `otherList' (i.e., all elements\nthat are in `self' but not in `otherSet').  Uses an `eql?' test and a simple\nquadratic-time algorithm.  Note that the result is only guaranteed to be a\nset if both `self' and `otherList' are sets.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "difference", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineMethodObject("(DEFMETHOD (SUBTRACT LIST) ((SELF LIST) (OTHERLIST LIST)) :DOCUMENTATION \"Return the set difference of `self' and `otherList' by destructively\nremoving elements from `self' that also occur in `otherList'.  Uses an `eql?'\ntest and a simple quadratic-time algorithm.  Note that the result is only\nguaranteed to be a set if `self' is a set.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "subtract", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List")})), null);
      Stella.defineMethodObject("(DEFMETHOD (ALLOCATE-ITERATOR (PROPERTY-LIST-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE SELF)))) ((SELF PROPERTY-LIST)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyList", "allocateIterator", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NEXT? BOOLEAN) ((SELF PROPERTY-LIST-ITERATOR)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyListIterator", "nextP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (VALUE-SETTER (LIKE (ANY-VALUE SELF))) ((SELF PROPERTY-LIST-ITERATOR) (VALUE (LIKE (ANY-VALUE SELF)))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyListIterator", "valueSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (KEY-SETTER (LIKE (ANY-KEY SELF))) ((SELF PROPERTY-LIST-ITERATOR) (KEY (LIKE (ANY-KEY SELF)))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.PropertyListIterator", "keySetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineFunctionObject("KV-CONS", "(DEFUN (KV-CONS KV-CONS) ((KEY OBJECT) (VALUE OBJECT) (REST KV-CONS)) :DOCUMENTATION \"Create, fill-in, and return a new KV-CONS.\" :CONSTRUCTOR? TRUE)", Native.find_java_method("edu.isi.stella.KvCons", "kvCons", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LOOKUP (LIKE (ANY-VALUE SELF))) ((SELF KV-CONS) (KEY (LIKE (ANY-KEY SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KvCons", "lookup", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (LENGTH INTEGER) ((SELF KV-CONS)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KvCons", "length", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("FREE-KV-CONS", "(DEFUN FREE-KV-CONS ((KVCONS KV-CONS)))", Native.find_java_method("edu.isi.stella.KvCons", "freeKvCons", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LOOKUP (LIKE (ANY-VALUE SELF))) ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "lookup", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (LOOKUP-WITH-DEFAULT (LIKE (ANY-VALUE SELF))) ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF))) (DEFAULT (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Lookup `key' in `self' and return the result.\nReturn `default' if no value was found.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "lookupWithDefault", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (LENGTH INTEGER) ((SELF KEY-VALUE-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "length", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD INSERT-AT ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF))) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE :DOCUMENTATION \"Insert the entry <`key', `value'> into the association\n`self'. If a previous entry existed with key `key', that entry is replaced.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "insertAt", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (REMOVE-AT OBJECT) ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF)))) :PUBLIC? TRUE :DOCUMENTATION \"Remove the entry that matches the key `key'.\nReturn the value of the matching entry, or NULL if there is no matching entry.\nAssumes that at most one entry matches `key'.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "removeAt", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD INSERT-ENTRY ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF))) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE :DOCUMENTATION \"Insert an entry <`key',`value'> to `self' unless an identical\nentry already exists.  This can generate duplicate entries for `key'.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "insertEntry", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD REMOVE-ENTRY ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF))) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE :DOCUMENTATION \"Remove the entry that matches <`key',`value'>.\nAssumes that more than one entry can match `key'.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "removeEntry", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD PUSH ((SELF KEY-VALUE-LIST) (VALUE KV-CONS)) :DOCUMENTATION \"Make `value' be the new first element of `self'.  Note that\nthe `rest' slot of `value' should be `null', since it will be overwritten.\nThis might duplicate an existing entry. If a previous entry existed with the\nsame key as `value', that entry is retained, but shadowed by this new entry.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "push", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KvCons")})), null);
      Stella.defineMethodObject("(DEFMETHOD KV-PUSH ((SELF KEY-VALUE-LIST) (KEY (LIKE (ANY-KEY SELF))) (VALUE (LIKE (ANY-VALUE SELF)))) :DOCUMENTATION \"Add a new entry <`key', `value'> to the front of the association\n`self'. This might duplicate an existing entry. If a previous entry existed with key\n`key', that entry is retained, but shadowed by this new entry.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "kvPush", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (POP (LIKE (ANY-VALUE SELF))) ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Remove and return the value of the first element of the\nkv-list `self'.  It does NOT return the KV-CONS object.  Return `null' if\nthe list is empty.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "pop", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (REVERSE (LIKE SELF)) ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Destructively reverse the members of the list `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "reverse", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (EMPTY? BOOLEAN) ((SELF KEY-VALUE-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "emptyP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NON-EMPTY? BOOLEAN) ((SELF KEY-VALUE-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "nonEmptyP", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("COPY-KV-CONS-LIST", "(DEFUN (COPY-KV-CONS-LIST KV-CONS) ((KVCONSLIST KV-CONS)) :DOCUMENTATION \"Return a copy of the cons list `consList'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.KvCons", "copyKvConsList", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineMethodObject("(DEFMETHOD (COPY (LIKE SELF)) ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Return a copy of the kv-list `self'.  The kv-conses in\nthe copy are freshly allocated.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "copy", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Make `self' an empty dictionary.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "clear", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (OBJECT-EQUAL? BOOLEAN) ((X KEY-VALUE-LIST) (Y OBJECT)) :DOCUMENTATION \"Return TRUE if `x' and `y' represent the same set of key/value pairs.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "objectEqualP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (EQUAL-HASH-CODE INTEGER) ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Return an `equal?' hash code for `self'.  Note that this\nis O(N) in the number of entries of `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "equalHashCode", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (ALLOCATE-ITERATOR (KV-LIST-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE SELF)))) ((SELF KEY-VALUE-LIST)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "allocateIterator", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (NEXT? BOOLEAN) ((SELF KV-LIST-ITERATOR)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KvListIterator", "nextP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (VALUE-SETTER (LIKE (ANY-VALUE SELF))) ((SELF KV-LIST-ITERATOR) (VALUE (LIKE (ANY-VALUE SELF)))) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KvListIterator", "valueSetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineMethodObject("(DEFMETHOD (KEY-SETTER OBJECT) ((SELF KV-LIST-ITERATOR) (KEY OBJECT)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KvListIterator", "keySetter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineFunctionObject("KVLIST-TO-PLIST", "(DEFUN (KVLIST-TO-PLIST (PROPERTY-LIST OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE SELF)))) ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Convert `self' into a property list with identical and identically\nordered keys and values.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.KeyValueList", "kvlistToPlist", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KeyValueList")}), null);
      Stella.defineFunctionObject("PLIST-TO-KVLIST", "(DEFUN (PLIST-TO-KVLIST (KEY-VALUE-LIST OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE SELF)))) ((SELF PROPERTY-LIST)) :DOCUMENTATION \"Convert `self' into a key-value list with identical and identically\nordered keys and values.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.PropertyList", "plistToKvlist", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.PropertyList")}), null);
      Stella.defineMethodObject("(DEFMETHOD (MEMBER? BOOLEAN) ((SELF SEQUENCE) (VALUE OBJECT)) :DOCUMENTATION \"Return TRUE if `value' is a member of the sequence `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Sequence", "memberP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")})), null);
      Stella.defineFunctionObject("LIST", "(DEFUN (LIST LIST) (|&REST| (VALUES OBJECT)) :DOCUMENTATION \"Return a list containing `values', in order.\" :PUBLIC? TRUE :CONSTRUCTOR? TRUE)", Native.find_java_method("edu.isi.stella.List", "list", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("SEQUENCE", "(DEFUN (SEQUENCE (SEQUENCE OF OBJECT)) ((COLLECTIONTYPE TYPE) |&REST| (VALUES OBJECT)) :DOCUMENTATION \"Return a sequence containing `values', in order.\" :PUBLIC? TRUE :CONSTRUCTOR? TRUE)", Native.find_java_method("edu.isi.stella.Sequence", "sequence", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("DICTIONARY", "(DEFUN (DICTIONARY (ABSTRACT-DICTIONARY OF OBJECT OBJECT)) ((COLLECTIONTYPE TYPE) |&REST| (ALTERNATINGKEYSANDVALUES OBJECT)) :DOCUMENTATION \"Return a dictionary of `collectionType' containing `values', in order.\nCurrently supported `collectionType's are @HASH-TABLE, @STELLA-HASH-TABLE,\n@KEY-VALUE-LIST, @KEY-VALUE-MAP and @PROPERTY-LIST.\" :PUBLIC? TRUE :CONSTRUCTOR? TRUE)", Native.find_java_method("edu.isi.stella.AbstractDictionary", "dictionary", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineMethodObject("(DEFMETHOD (LISTIFY (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF LIST)) :DOCUMENTATION \"Return `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.List", "listify", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (LISTIFY (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF CONS)) :DOCUMENTATION \"Return a list of elements in `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Cons", "listify", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (LISTIFY (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF KEY-VALUE-LIST)) :DOCUMENTATION \"Return a list of key-value pairs in `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.KeyValueList", "listify", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (LISTIFY (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF VECTOR)) :DOCUMENTATION \"Return a list of elements in `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Vector", "listify", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (LISTIFY (LIST OF (LIKE (ANY-VALUE SELF)))) ((SELF ITERATOR)) :DOCUMENTATION \"Return a list of elements generated by `self'.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Iterator", "listify", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("PRINT-KEY-VALUE-LIST", "(DEFUN PRINT-KEY-VALUE-LIST ((SELF KEY-VALUE-LIST) (STREAM NATIVE-OUTPUT-STREAM)))", Native.find_java_method("edu.isi.stella.KeyValueList", "printKeyValueList", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KeyValueList"), Native.find_java_class("edu.isi.stella.javalib.NativeOutputStream")}), null);
      Stella.defineFunctionObject("STARTUP-LISTS", "(DEFUN STARTUP-LISTS () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella._StartupLists", "startupLists", new java.lang.Class [] {}), null);
      { MethodSlot function = Symbol.lookupFunction(Stella.SYM_STELLA_STARTUP_LISTS);

        KeyValueList.setDynamicSlotValue(function.dynamicSlots, Stella.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupLists"), Stella.NULL_STRING_WRAPPER);
      }
    }
  }

  public static void startupLists() {
    if (Stella.currentStartupTimePhaseP(0)) {
      if (!(Stella.NIL_LIST != null)) {
        Stella.NIL_LIST = new List();
      }
      Stella.NIL_LIST.theConsList = Stella.NIL;
    }
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.$STELLA_MODULE$);
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          Stella.SGT_STELLA_STELLA_HASH_TABLE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("STELLA-HASH-TABLE", null, 1)));
          Stella.SGT_STELLA_KEY_VALUE_MAP = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("KEY-VALUE-MAP", null, 1)));
          Stella.SYM_STELLA_STARTUP_LISTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-LISTS", null, 0)));
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          _StartupLists.helpStartupLists1();
          _StartupLists.helpStartupLists2();
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("/STELLA")))));
          Stella.defineGlobalVariableObject("(DEFGLOBAL NIL-LIST LIST NULL :PUBLIC? TRUE)", null);
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
