//  -*- Mode: Java -*-
//
// _StartupXml.java

/*
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
*/

package edu.isi.stella;

import edu.isi.stella.javalib.*;

public class _StartupXml {
  static void helpStartupXml1() {
    {
      Stella.SGT_STELLA_XML_OBJECT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-OBJECT", null, 1)));
      Stella.SYM_STELLA_SURFACE_FORM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SURFACE-FORM", null, 0)));
      Stella.SGT_STELLA_XML_ELEMENT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-ELEMENT", null, 1)));
      Stella.SYM_STELLA_NAMESPACE_NAME = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NAMESPACE-NAME", null, 0)));
      Stella.SYM_STELLA_NAMESPACE_URI = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NAMESPACE-URI", null, 0)));
      Stella.SYM_STELLA_ELEMENT_DICTIONARY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ELEMENT-DICTIONARY", null, 0)));
      Stella.SGT_STELLA_XML_LOCAL_ATTRIBUTE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-LOCAL-ATTRIBUTE", null, 1)));
      Stella.SYM_STELLA_PARENT_ELEMENT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PARENT-ELEMENT", null, 0)));
      Stella.SGT_STELLA_XML_GLOBAL_ATTRIBUTE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-GLOBAL-ATTRIBUTE", null, 1)));
      Stella.SGT_STELLA_XML_PROCESSING_INSTRUCTION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-PROCESSING-INSTRUCTION", null, 1)));
      Stella.SYM_STELLA_DATA = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DATA", null, 0)));
      Stella.SGT_STELLA_XML_DECLARATION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-DECLARATION", null, 1)));
      Stella.SGT_STELLA_XML_DOCTYPE_DECLARATION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-DOCTYPE-DECLARATION", null, 1)));
      Stella.SGT_STELLA_XML_SPECIAL = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-SPECIAL", null, 1)));
      Stella.SGT_STELLA_XML_COMMENT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-COMMENT", null, 1)));
      Stella.SGT_STELLA_XML_DOCTYPE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-DOCTYPE", null, 1)));
      Stella.SYM_STELLA_ENTITY_TABLE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ENTITY-TABLE", null, 0)));
      Stella.SYM_STELLA_PARAMETER_ENTITY_TABLE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PARAMETER-ENTITY-TABLE", null, 0)));
      Stella.KWD_SKIP_WHITESPACE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SKIP-WHITESPACE", null, 2)));
      Stella.KWD_OPEN_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-TAG", null, 2)));
      Stella.KWD_CONTENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CONTENT", null, 2)));
      Stella.KWD_START_TAG_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START-TAG-END", null, 2)));
      Stella.KWD_OPEN_END_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-END-TAG", null, 2)));
      Stella.KWD_OPEN_PI_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-PI-TAG", null, 2)));
      Stella.KWD_OPEN_DECLARATION_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-DECLARATION-TAG", null, 2)));
      Stella.KWD_START_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START-TAG", null, 2)));
      Stella.KWD_OPEN_EMPTY_TAG_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-EMPTY-TAG-END", null, 2)));
      Stella.KWD_SKIP_TO_ATTRIBUTE_NAME = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SKIP-TO-ATTRIBUTE-NAME", null, 2)));
      Stella.KWD_START_PI_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START-PI-TAG", null, 2)));
      Stella.KWD_OPEN_PI_TAG_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-PI-TAG-END", null, 2)));
      Stella.KWD_PI_TAG_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PI-TAG-DATA", null, 2)));
      Stella.KWD_PI_TAG_DATA_OR_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PI-TAG-DATA-OR-END", null, 2)));
      Stella.KWD_EMPTY_TAG_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("EMPTY-TAG-END", null, 2)));
      Stella.KWD_END_TAG_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("END-TAG-END", null, 2)));
      Stella.KWD_END_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("END-TAG", null, 2)));
      Stella.KWD_ATTRIBUTE_NAME = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ATTRIBUTE-NAME", null, 2)));
      Stella.KWD_SKIP_TO_ATTRIBUTE_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SKIP-TO-ATTRIBUTE-VALUE", null, 2)));
      Stella.KWD_SINGLE_QUOTED_ATTRIBUTE_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SINGLE-QUOTED-ATTRIBUTE-VALUE", null, 2)));
      Stella.KWD_DOUBLE_QUOTED_ATTRIBUTE_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DOUBLE-QUOTED-ATTRIBUTE-VALUE", null, 2)));
      Stella.KWD_UNQUOTED_ATTRIBUTE_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("UNQUOTED-ATTRIBUTE-VALUE", null, 2)));
      Stella.KWD_QUOTED_ATTRIBUTE_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUOTED-ATTRIBUTE-VALUE", null, 2)));
      Stella.KWD_START_TAG_OR_COMMENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START-TAG-OR-COMMENT", null, 2)));
      Stella.KWD_OPEN_SPECIAL_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-SPECIAL-TAG", null, 2)));
      Stella.KWD_START_DECLARATION_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START-DECLARATION-TAG", null, 2)));
      Stella.KWD_DECLARATION_WHITESPACE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DECLARATION-WHITESPACE", null, 2)));
      Stella.KWD_DECLARATION_TAG_MARKUP_DATA_START = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DECLARATION-TAG-MARKUP-DATA-START", null, 2)));
      Stella.KWD_SINGLE_QUOTED_DECLARATION_TAG_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SINGLE-QUOTED-DECLARATION-TAG-DATA", null, 2)));
      Stella.KWD_DOUBLE_QUOTED_DECLARATION_TAG_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DOUBLE-QUOTED-DECLARATION-TAG-DATA", null, 2)));
      Stella.KWD_DECLARATION_TAG_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DECLARATION-TAG-DATA", null, 2)));
      Stella.KWD_QUOTED_DECLARATION_TAG_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUOTED-DECLARATION-TAG-DATA", null, 2)));
      Stella.KWD_DECLARATION_TAG_MARKUP_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DECLARATION-TAG-MARKUP-DATA", null, 2)));
      Stella.KWD_START_SPECIAL_TAG = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START-SPECIAL-TAG", null, 2)));
      Stella.KWD_SPECIAL_TAG_DATA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SPECIAL-TAG-DATA", null, 2)));
      Stella.KWD_SPECIAL_TAG_DATA_OR_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SPECIAL-TAG-DATA-OR-END", null, 2)));
      Stella.KWD_SPECIAL_TAG_DATA_OR_END2 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SPECIAL-TAG-DATA-OR-END2", null, 2)));
      Stella.KWD_DATA_TAG_END = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DATA-TAG-END", null, 2)));
      Stella.KWD_COMMENT_BODY = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("COMMENT-BODY", null, 2)));
      Stella.KWD_END_COMMENT_OR_COMMENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("END-COMMENT-OR-COMMENT", null, 2)));
      Stella.KWD_END_COMMENT_OR_COMMENT2 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("END-COMMENT-OR-COMMENT2", null, 2)));
      Stella.KWD_ATTRIBUTE_VALUE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ATTRIBUTE-VALUE", null, 2)));
    }
  }

  static void helpStartupXml2() {
    {
      Stella.SGT_STELLA_XML_EXPRESSION_ITERATOR = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-EXPRESSION-ITERATOR", null, 1)));
      Stella.SYM_STELLA_REGION_TAG = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("REGION-TAG", null, 0)));
      Stella.SYM_STELLA_REGION_MATCH_FUNCTION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("REGION-MATCH-FUNCTION", null, 0)));
      Stella.SYM_STELLA_DOCTYPE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DOCTYPE", null, 0)));
      Stella.SYM_STELLA_DOCTYPE_ITERATORp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DOCTYPE-ITERATOR?", null, 0)));
      Stella.SGT_STELLA_XML_ATTRIBUTE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-ATTRIBUTE", null, 1)));
      Stella.SYM_STELLA_XML_ELEMENT_MATCHp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-ELEMENT-MATCH?", null, 0)));
      Stella.SYM_STELLA_XML_ELEMENT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("XML-ELEMENT", null, 0)));
      Stella.SYM_STELLA_STARTUP_XML = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-XML", null, 0)));
    }
  }

  static void helpStartupXml3() {
    {
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-OBJECT", "(DEFCLASS XML-OBJECT (STANDARD-OBJECT) :PUBLIC-SLOTS ((NAME :TYPE STRING) (SURFACE-FORM :TYPE STRING)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlObject", "newXmlObject", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlObject", "accessXmlObjectSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlObject"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-ELEMENT", "(DEFCLASS XML-ELEMENT (XML-OBJECT) :PUBLIC-SLOTS ((NAMESPACE-NAME :TYPE STRING) (NAMESPACE-URI :TYPE STRING) (ELEMENT-DICTIONARY :TYPE (KEY-VALUE-LIST OF STRING-WRAPPER XML-ATTRIBUTE))) :PRINT-FORM (PRINT-NATIVE-STREAM STREAM \"<\" (SURFACE-FORM SELF) \">\"))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlElement", "newXmlElement", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlElement", "accessXmlElementSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlElement"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      Stella.defineClassFromStringifiedSource("XML-ATTRIBUTE", "(DEFCLASS XML-ATTRIBUTE (XML-OBJECT) :ABSTRACT? TRUE :PUBLIC-SLOTS ((NAME :TYPE STRING) (SURFACE-FORM :TYPE STRING)) :PRINT-FORM (PRINT-NATIVE-STREAM STREAM \"<\" (SURFACE-FORM SELF) \">\"))");
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-LOCAL-ATTRIBUTE", "(DEFCLASS XML-LOCAL-ATTRIBUTE (XML-ATTRIBUTE) :PUBLIC-SLOTS ((PARENT-ELEMENT :TYPE XML-ELEMENT)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlLocalAttribute", "newXmlLocalAttribute", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlLocalAttribute", "accessXmlLocalAttributeSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlLocalAttribute"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-GLOBAL-ATTRIBUTE", "(DEFCLASS XML-GLOBAL-ATTRIBUTE (XML-ATTRIBUTE) :PUBLIC-SLOTS ((NAMESPACE-NAME :TYPE STRING) (NAMESPACE-URI :TYPE STRING)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlGlobalAttribute", "newXmlGlobalAttribute", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlGlobalAttribute", "accessXmlGlobalAttributeSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlGlobalAttribute"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-PROCESSING-INSTRUCTION", "(DEFCLASS XML-PROCESSING-INSTRUCTION (XML-OBJECT) :PUBLIC-SLOTS ((DATA :TYPE STRING)) :PRINT-FORM (IF (NULL? (DATA SELF)) (PRINT-NATIVE-STREAM STREAM \"<?\" (SURFACE-FORM SELF) \">\") (PRINT-NATIVE-STREAM STREAM \"<?\" (SURFACE-FORM SELF) \" \" (DATA SELF) \">\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlProcessingInstruction", "newXmlProcessingInstruction", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlProcessingInstruction", "accessXmlProcessingInstructionSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlProcessingInstruction"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-DECLARATION", "(DEFCLASS XML-DECLARATION (XML-OBJECT) :PUBLIC-SLOTS ((DATA :TYPE STRING)) :PRINT-FORM (IF (NULL? (DATA SELF)) (PRINT-NATIVE-STREAM STREAM \"<!\" (SURFACE-FORM SELF) \">\") (PRINT-NATIVE-STREAM STREAM \"<!\" (SURFACE-FORM SELF) \" \" (DATA SELF) \">\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlDeclaration", "newXmlDeclaration", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlDeclaration", "accessXmlDeclarationSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDeclaration"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-DOCTYPE-DECLARATION", "(DEFCLASS XML-DOCTYPE-DECLARATION (XML-DECLARATION) :PRINT-FORM (IF (NULL? (DATA SELF)) (PRINT-NATIVE-STREAM STREAM \"<!\" (SURFACE-FORM SELF) \">\") (PRINT-NATIVE-STREAM STREAM \"<!\" (SURFACE-FORM SELF) \" ...>\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlDoctypeDeclaration", "newXmlDoctypeDeclaration", new java.lang.Class [] {});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-SPECIAL", "(DEFCLASS XML-SPECIAL (XML-OBJECT) :PUBLIC-SLOTS ((DATA :TYPE STRING)) :PRINT-FORM (PRINT-NATIVE-STREAM STREAM \"<!\" (SURFACE-FORM SELF) \">\"))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlSpecial", "newXmlSpecial", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlSpecial", "accessXmlSpecialSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlSpecial"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-COMMENT", "(DEFCLASS XML-COMMENT (XML-OBJECT) :PRINT-FORM (IF (NULL? (SURFACE-FORM SELF)) (PRINT-NATIVE-STREAM STREAM \"<!-- -->\") (PRINT-NATIVE-STREAM STREAM \"<!-- \" (LENGTH (SURFACE-FORM SELF)) \" chars -->\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlComment", "newXmlComment", new java.lang.Class [] {});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-DOCTYPE", "(DEFCLASS XML-DOCTYPE (STANDARD-OBJECT) :PUBLIC-SLOTS ((NAME :TYPE STRING) (ENTITY-TABLE :TYPE (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER) :INITIALLY (NEW KEY-VALUE-LIST)) (PARAMETER-ENTITY-TABLE :TYPE (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER) :INITIALLY (NEW KEY-VALUE-LIST))) :PRINT-FORM (PRINT-NATIVE-STREAM STREAM \"<!DOCTYPE \" (NAME SELF) \">\"))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlDoctype", "newXmlDoctype", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlDoctype", "accessXmlDoctypeSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDoctype"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("XML-EXPRESSION-ITERATOR", "(DEFCLASS XML-EXPRESSION-ITERATOR (STREAM-ITERATOR) :DOCUMENTATION \"Iterator that yields XML expressions from an input stream.\nIf the value of `region-tag' is non-`null', only XML expressions enclosed within\nmatching region tags will be returned (there can be multiple such regions).\nWhat is a match is determined by `region-match-function'.  Usually, region tags\nwill/should be at the top level, but this is not necessarily so and also not\nenforced by the iterator.\" :PARAMETERS ((ANY-VALUE :TYPE OBJECT)) :PUBLIC? TRUE :SLOTS ((REGION-TAG :TYPE CONS) (REGION-MATCH-FUNCTION :TYPE FUNCTION-CODE :INITIALLY (THE-CODE :FUNCTION XML-REGION-MATCHES?)) (DOCTYPE :TYPE XML-DOCTYPE) (DOCTYPE-ITERATOR? :TYPE BOOLEAN :INITIALLY FALSE :DOCUMENTATION \"Set to `true' when iterating over a DTD definition.\")))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.XmlExpressionIterator", "newXmlExpressionIterator", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.XmlExpressionIterator", "accessXmlExpressionIteratorSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlExpressionIterator"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
    }
  }

  static void helpStartupXml4() {
    {
      Stella.defineFunctionObject("RESET-XML-HASH-TABLES", "(DEFUN RESET-XML-HASH-TABLES () :PUBLIC? TRUE :DOCUMENTATION \"Resets Hashtables used for interning XML elements and global\nattribute objects.  This will allow garbage collection of no-longer used\nobjects, but will also mean that newly parsed xml elements and global attributes\nwill not be eq? to already existing ones with the same name.\")", Native.find_java_method("edu.isi.stella.Stella", "resetXmlHashTables", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("MAKE-NAMESPACE-TABLE", "(DEFUN (MAKE-NAMESPACE-TABLE (KV-CONS OF STRING-WRAPPER STRING-WRAPPER)) ())", Native.find_java_method("edu.isi.stella.Stella", "makeNamespaceTable", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("MAKE-XML-CDATA-FORM", "(DEFUN (MAKE-XML-CDATA-FORM CONS) ((THE-DATA STRING)))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlCdataForm", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-XMLNS-ATTRIBUTE", "(DEFUN (MAKE-XMLNS-ATTRIBUTE XML-ATTRIBUTE) ((NAME STRING)))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlnsAttribute", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-XML-ELEMENT-INTERNAL", "(DEFUN (MAKE-XML-ELEMENT-INTERNAL XML-ELEMENT) ((NAME STRING) (NAMESPACE-NAME STRING) (NAMESPACE STRING) (SURFACE-FORM STRING)))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlElementInternal", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-XML-ELEMENT", "(DEFUN (MAKE-XML-ELEMENT XML-ELEMENT) ((NAME STRING) (NAMESPACE-NAME STRING) (NAMESPACE STRING)) :PUBLIC? TRUE :DOCUMENTATION \"Creates and interns an XML element object `name' using `namespace-name'\nto refer to  `namespace'.  If `namespace' is `null', then the element will\nbe interned in the null namespace.   `namespace' must otherwise be a URI.\")", Native.find_java_method("edu.isi.stella.Stella", "makeXmlElement", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-XML-ELEMENT-RESPECTING-NAMESPACE", "(DEFUN (MAKE-XML-ELEMENT-RESPECTING-NAMESPACE XML-ELEMENT) ((NAME STRING) (NAMESPACE-TABLE (KV-CONS OF STRING-WRAPPER STRING-WRAPPER))))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlElementRespectingNamespace", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineFunctionObject("MAKE-XML-GLOBAL-ATTRIBUTE-INTERNAL", "(DEFUN (MAKE-XML-GLOBAL-ATTRIBUTE-INTERNAL XML-GLOBAL-ATTRIBUTE) ((NAME STRING) (NAMESPACE-NAME STRING) (NAMESPACE-URI STRING) (SURFACE-FORM STRING)))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlGlobalAttributeInternal", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-XML-GLOBAL-ATTRIBUTE", "(DEFUN (MAKE-XML-GLOBAL-ATTRIBUTE XML-GLOBAL-ATTRIBUTE) ((NAME STRING) (NAMESPACE-NAME STRING) (NAMESPACE STRING)) :PUBLIC? TRUE :DOCUMENTATION \"Creates and interns an XML global attribute object with `name' using \n`namespace-name' to refer to  `namespace'.  `namespace'must be a URI.\")", Native.find_java_method("edu.isi.stella.Stella", "makeXmlGlobalAttribute", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-XML-GLOBAL-ATTRIBUTE-RESPECTING-NAMESPACE", "(DEFUN (MAKE-XML-GLOBAL-ATTRIBUTE-RESPECTING-NAMESPACE XML-GLOBAL-ATTRIBUTE) ((NAME STRING) (NAMESPACE-NAME STRING) (SURFACE-FORM STRING) (NAMESPACE-TABLE (KV-CONS OF STRING-WRAPPER STRING-WRAPPER))))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlGlobalAttributeRespectingNamespace", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineFunctionObject("MAKE-XML-LOCAL-ATTRIBUTE", "(DEFUN (MAKE-XML-LOCAL-ATTRIBUTE XML-LOCAL-ATTRIBUTE) ((NAME STRING) (ELEMENT XML-ELEMENT)) :PUBLIC? TRUE :DOCUMENTATION \"Make an XML-LOCAL-ATTRIBUTE named `name' associated with `element'\")", Native.find_java_method("edu.isi.stella.Stella", "makeXmlLocalAttribute", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.XmlElement")}), null);
      Stella.defineFunctionObject("MAKE-XML-ATTRIBUTE-RESPECTING-NAMESPACE", "(DEFUN (MAKE-XML-ATTRIBUTE-RESPECTING-NAMESPACE XML-ATTRIBUTE) ((NAME STRING) (ELEMENT XML-ELEMENT) (NAMESPACE-TABLE (KV-CONS OF STRING-WRAPPER STRING-WRAPPER))))", Native.find_java_method("edu.isi.stella.Stella", "makeXmlAttributeRespectingNamespace", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.XmlElement"), Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineFunctionObject("XMLNS-ATTRIBUTE?", "(DEFUN (XMLNS-ATTRIBUTE? BOOLEAN) ((ATTRIBUTE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlnsAttributeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XMLNS-ATTRIBUTE-NAME?", "(DEFUN (XMLNS-ATTRIBUTE-NAME? BOOLEAN) ((NAME STRING)))", Native.find_java_method("edu.isi.stella.Stella", "xmlnsAttributeNameP", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("EXTRACT-XMLNS-NAME", "(DEFUN (EXTRACT-XMLNS-NAME STRING) ((KEYNAME STRING)))", Native.find_java_method("edu.isi.stella.Stella", "extractXmlnsName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("ADD-XML-REFERENCE", "(DEFUN ADD-XML-REFERENCE ((NAME STRING) (SUBSTITUTION STRING) (TABLE (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))) :GLOBALLY-INLINE? TRUE (INSERT-AT TABLE NAME SUBSTITUTION))", Native.find_java_method("edu.isi.stella.Stella", "addXmlReference", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.KeyValueList")}), null);
      Stella.defineFunctionObject("MAKE-XML-ENTITY-TABLE", "(DEFUN (MAKE-XML-ENTITY-TABLE (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER)) ())", Native.find_java_method("edu.isi.stella.Stella", "makeXmlEntityTable", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("DECODE-XML-CHAR-REF", "(DEFUN (DECODE-XML-CHAR-REF STRING) ((DIGITS STRING)))", Native.find_java_method("edu.isi.stella.Stella", "decodeXmlCharRef", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("INTERNAL-DTD-DEFINITION?", "(DEFUN (INTERNAL-DTD-DEFINITION? BOOLEAN) ((DEFINITION STRING)) :PUBLIC? FALSE)", Native.find_java_method("edu.isi.stella.Stella", "internalDtdDefinitionP", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("GET-DOCTYPE-DEFINITION", "(DEFUN (GET-DOCTYPE-DEFINITION INPUT-STREAM) ((DOCTYPE CONS)) :PUBLIC? FALSE)", Native.find_java_method("edu.isi.stella.Cons", "getDoctypeDefinition", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("EXTERNAL-ID-HEAD?", "(DEFUN (EXTERNAL-ID-HEAD? BOOLEAN) ((ATTRIBUTE OBJECT)) :PUBLIC? FALSE :DOCUMENTATION \"Checks to see if this `attribute' is the literal marking either\na PUBLIC or SYSTEM literal for an XML Elternal ID.  (See 4.2.2)\")", Native.find_java_method("edu.isi.stella.Stella_Object", "externalIdHeadP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("DECODE-XML-ENTITY-REF", "(DEFUN (DECODE-XML-ENTITY-REF STRING) ((DOCTYPE XML-DOCTYPE) (NAME STRING) (PE-REFERENCE-ALLOWED? BOOLEAN)))", Native.find_java_method("edu.isi.stella.XmlDoctype", "decodeXmlEntityRef", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDoctype"), Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("DECODE-XML-PARAMETER-ENTITY-REF", "(DEFUN (DECODE-XML-PARAMETER-ENTITY-REF STRING) ((DOCTYPE XML-DOCTYPE) (NAME STRING) (PE-REFERENCE-ALLOWED? BOOLEAN)))", Native.find_java_method("edu.isi.stella.XmlDoctype", "decodeXmlParameterEntityRef", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDoctype"), Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("DECODE-XML-REFERENCE", "(DEFUN (DECODE-XML-REFERENCE STRING) ((DOCTYPE XML-DOCTYPE) (REFERENCE STRING) (PE-REFERENCE-ALLOWED? BOOLEAN)))", Native.find_java_method("edu.isi.stella.XmlDoctype", "decodeXmlReference", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDoctype"), Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("FIND-REFERENCE-START", "(DEFUN (FIND-REFERENCE-START INTEGER) ((INPUT STRING) (START INTEGER) (END INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "findReferenceStart", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("DECODE-XML-STRING", "(DEFUN (DECODE-XML-STRING STRING) ((DOCTYPE XML-DOCTYPE) (INPUT STRING) (PE-REFERENCE-ALLOWED? BOOLEAN)))", Native.find_java_method("edu.isi.stella.XmlDoctype", "decodeXmlString", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDoctype"), Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("NORMALIZE-ATTRIBUTE-VALUE", "(DEFUN (NORMALIZE-ATTRIBUTE-VALUE STRING) ((DOCTYPE XML-DOCTYPE) (INPUT STRING) (PE-REFERENCE-ALLOWED? BOOLEAN)))", Native.find_java_method("edu.isi.stella.XmlDoctype", "normalizeAttributeValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlDoctype"), Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("PROCESS-DOCTYPE", "(DEFUN (PROCESS-DOCTYPE XML-DOCTYPE) ((DOCTYPE-DECLARATION CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Takes an S-Expression representing a doctype and processes into\na DOCTYPE object.\")", Native.find_java_method("edu.isi.stella.Cons", "processDoctype", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-XML-WHITESPACE-PRESERVING-TOKENIZER-TABLE", "(DEFUN (GET-XML-WHITESPACE-PRESERVING-TOKENIZER-TABLE TOKENIZER-TABLE) ())", Native.find_java_method("edu.isi.stella.Stella", "getXmlWhitespacePreservingTokenizerTable", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-XML-TOKENIZER-TABLE", "(DEFUN (GET-XML-TOKENIZER-TABLE TOKENIZER-TABLE) ())", Native.find_java_method("edu.isi.stella.Stella", "getXmlTokenizerTable", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TOKENIZE-XML-EXPRESSION", "(DEFUN (TOKENIZE-XML-EXPRESSION TOKENIZER-TOKEN BOOLEAN) ((STREAM INPUT-STREAM) (TOKENLIST TOKENIZER-TOKEN) (REGIONTAGNAME STRING) (SKIPTOREGION? BOOLEAN)))", Native.find_java_method("edu.isi.stella.InputStream", "tokenizeXmlExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("edu.isi.stella.TokenizerToken"), Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("PROCESS-ATTRIBUTE-LIST", "(DEFUN (PROCESS-ATTRIBUTE-LIST CONS) ((REVERSEATTRIBUTELIST CONS) (ELEMENT XML-ELEMENT) (NAMESPACE-TABLE (KV-CONS OF STRING-WRAPPER STRING-WRAPPER))))", Native.find_java_method("edu.isi.stella.Cons", "processAttributeList", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.XmlElement"), Native.find_java_class("edu.isi.stella.KvCons")}), null);
      Stella.defineFunctionObject("XML-TOKEN-LIST-TO-S-EXPRESSION", "(DEFUN (XML-TOKEN-LIST-TO-S-EXPRESSION OBJECT) ((TOKENLIST TOKENIZER-TOKEN) (DOCTYPE XML-DOCTYPE) (DOCTYPE-DEFINITION? BOOLEAN)) :DOCUMENTATION \"Convert the XML `tokenList' (using `doctype' for guidance) into a\nrepresentative s-expression and return the result.    The `doctype' argument is\ncurrently only used for expansion of entity references.  It can be 'null'.  The\nflag `doctype-definition?' should be true only when processing the DTD definition\nof a DOCTYPE tag, since it enables substitution of parameter entity values.\n\nEvery XML tag is represented as a cons-list starting with the tag as its header,\nfollowed by a possibly empty list of keyword value pairs representing tag attributes,\nfollowed by a possibly empty list of content expressions which might themselves\nbe XML expressions.  For example, the expression\n\n    <a a1=v1 a2='v2'> foo <b a3=v3/> bar </a>\n\nbecomes\n\n   (<a> (<a1> \\\"v1\\\" <a2> \\\"v2\\\") \\\"foo\\\" (<b> (<a3> \\\"v3\\\")) \\\"bar\\\")\n\nwhen represented as an s-expression.  The tag names are subtypes of XML-OBJECT\nsuch as XML-ELEMENT, XML-LOCAL-ATTRIBUTE, XML-GLOBAL-ATTRIBUTE, etc.\n?, ! and [ prefixed tags are encoded as their own subtypes of XML-OBJECT, namely\nXML-PROCESSING-INSTRUCTION, XML-DECLARATION, XML-SPECIAL, XML-COMMENT, etc.\nCDATA is an XML-SPECIAL tag with a name of CDATA.\n\nThe name is available using class accessors.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.TokenizerToken", "xmlTokenListToSExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerToken"), Native.find_java_class("edu.isi.stella.XmlDoctype"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("READ-XML-EXPRESSION", "(DEFUN (READ-XML-EXPRESSION OBJECT BOOLEAN) ((STREAM INPUT-STREAM) (START-TAG OBJECT)) :DOCUMENTATION \"Read one balanced XML expression from `stream' and return\nits s-expression representation (see `xml-token-list-to-s-expression').  If\n`startTagName' is non-`null', skip all tags until a start tag matching `start-tag'\nis encountered.  XML namespaces are ignored for outside of the start tag.\nUse s-expression representation to specify `start-tag', e.g., '(KIF (:version \\\"1.0\\\"))'.\nThe tag can be an XML element object, a symbol, a string or a cons.  If the tag is a cons\nthe first element can also be (name namespace) pair.\n\nReturn `true' as the second value on EOF.\n\nCHANGE WARNING:  It is anticipated that this function will change to\n a) Properly take XML namespaces into account and\n b) require XML element objects instead of strings as the second argument.\nThis change will not be backwards-compatible.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.InputStream", "readXmlExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("READ-XML-EXPRESSIONS", "(DEFUN (READ-XML-EXPRESSIONS CONS) ((FILENAME STRING)) :DOCUMENTATION \"Read all of the top-level XML expressions from `filename' and\nreturn them in a list.\")", Native.find_java_method("edu.isi.stella.Stella", "readXmlExpressions", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineMethodObject("(DEFMETHOD (NEXT? BOOLEAN) ((SELF XML-EXPRESSION-ITERATOR)) :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.XmlExpressionIterator", "nextP", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (CONSIFY CONS) ((ITER XML-EXPRESSION-ITERATOR)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.XmlExpressionIterator", "consify", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("XML-REGION-MATCHES?", "(DEFUN (XML-REGION-MATCHES? BOOLEAN) ((REGIONSPEC CONS) (REGIONTAG CONS)))", Native.find_java_method("edu.isi.stella.Cons", "xmlRegionMatchesP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("COERCE-TO-XML-ELEMENT", "(DEFUN (COERCE-TO-XML-ELEMENT XML-ELEMENT) ((REGIONTAG OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "coerceToXmlElement", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-EXPRESSIONS", "(DEFUN (XML-EXPRESSIONS XML-EXPRESSION-ITERATOR) ((STREAM INPUT-STREAM) (REGIONTAG OBJECT)) :DOCUMENTATION \"Return an XML-expression-iterator (which see) reading from\n`stream'.  `regionTag' can be used to define delimited regions from which\nexpressions should be considered. Use s-expression representation to specify\n`regionTag', e.g., '(KIF (:version \\\"1.0\\\"))'.  The tag can be an XML element\nobject, a symbol, a string or a cons.  If the tag is a cons the first element\ncan also be (name namespace) pair.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.InputStream", "xmlExpressions", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-CDATA?", "(DEFUN (XML-CDATA? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML CDATA tag object\")", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlCdataP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-ELEMENT?", "(DEFUN (XML-ELEMENT? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML element object\" (RETURN (ISA? ITEM @XML-ELEMENT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlElementP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-ATTRIBUTE?", "(DEFUN (XML-ATTRIBUTE? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML attribute object\" (RETURN (ISA? ITEM @XML-ATTRIBUTE)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlAttributeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-GLOBAL-ATTRIBUTE?", "(DEFUN (XML-GLOBAL-ATTRIBUTE? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML attribute object\" (RETURN (ISA? ITEM @XML-GLOBAL-ATTRIBUTE)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlGlobalAttributeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-LOCAL-ATTRIBUTE?", "(DEFUN (XML-LOCAL-ATTRIBUTE? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML attribute object\" (RETURN (ISA? ITEM @XML-LOCAL-ATTRIBUTE)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlLocalAttributeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-BASE-ATTRIBUTE?", "(DEFUN (XML-BASE-ATTRIBUTE? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML attribute object\" (RETURN (AND (XML-GLOBAL-ATTRIBUTE? ITEM) (STRING-EQL? \"base\" (NAME (CAST ITEM XML-GLOBAL-ATTRIBUTE))) (STRING-EQL? *XML-URN* (NAMESPACE-URI (CAST ITEM XML-GLOBAL-ATTRIBUTE))))))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlBaseAttributeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-DECLARATION?", "(DEFUN (XML-DECLARATION? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML declaration object\" (RETURN (ISA? ITEM @XML-DECLARATION)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlDeclarationP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-PROCESSING-INSTRUCTION?", "(DEFUN (XML-PROCESSING-INSTRUCTION? BOOLEAN) ((ITEM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `item' is an XML processing instruction object\" (RETURN (ISA? ITEM @XML-PROCESSING-INSTRUCTION)))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlProcessingInstructionP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-ELEMENT-FORM?", "(DEFUN (XML-ELEMENT-FORM? BOOLEAN) ((FORM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `form' is a CONS headed by an XML ELEMENT tag\" (RETURN (AND (ISA? FORM @CONS) (XML-ELEMENT? (FIRST (CAST FORM CONS))))))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlElementFormP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-PROCESSING-INSTRUCTION-FORM?", "(DEFUN (XML-PROCESSING-INSTRUCTION-FORM? BOOLEAN) ((FORM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `form' is a CONS headed by an XML PROCESSING INSTRUCTION tag\" (RETURN (AND (ISA? FORM @CONS) (XML-PROCESSING-INSTRUCTION? (FIRST (CAST FORM CONS))))))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlProcessingInstructionFormP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-DECLARATION-FORM?", "(DEFUN (XML-DECLARATION-FORM? BOOLEAN) ((FORM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `form' is a CONS headed by an XML DECLARATION tag\" (RETURN (AND (ISA? FORM @CONS) (XML-DECLARATION? (FIRST (CAST FORM CONS))))))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlDeclarationFormP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-DOCTYPE-FORM?", "(DEFUN (XML-DOCTYPE-FORM? BOOLEAN) ((FORM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `form' is a CONS headed by a DOCTYPE tag\" (RETURN (AND (XML-DECLARATION-FORM? FORM) (STRING-EQL? (NAME (CAST (FIRST (CAST FORM CONS)) XML-DECLARATION)) \"DOCTYPE\"))))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlDoctypeFormP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("XML-CDATA-FORM?", "(DEFUN (XML-CDATA-FORM? BOOLEAN) ((FORM OBJECT)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return `true' if `form' is a CONS headed by a CDATA tag\" (RETURN (AND (ISA? FORM @CONS) (XML-CDATA? (FIRST (CAST FORM CONS))))))", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlCdataFormP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("GET-XML-TAG", "(DEFUN (GET-XML-TAG XML-ELEMENT) ((EXPRESSION CONS)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return the XML tag object of an XML `expression'.\" (RETURN (FIRST EXPRESSION)))", Native.find_java_method("edu.isi.stella.Cons", "getXmlTag", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-XML-ATTRIBUTES", "(DEFUN (GET-XML-ATTRIBUTES CONS) ((EXPRESSION CONS)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return the list of attributes of an XML `expression' (may be empty).\" (RETURN (SECOND EXPRESSION)))", Native.find_java_method("edu.isi.stella.Cons", "getXmlAttributes", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-XML-BASE-ATTRIBUTE-VALUE", "(DEFUN (GET-XML-BASE-ATTRIBUTE-VALUE STRING) ((EXPRESSION CONS)) :PUBLIC? TRUE :DOCUMENTATION \"Return the last base url attribute in the attribute list of this\nelement if it exists.  Otherwise NULL.\")", Native.find_java_method("edu.isi.stella.Cons", "getXmlBaseAttributeValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-XML-CONTENT", "(DEFUN (GET-XML-CONTENT CONS) ((EXPRESSION CONS)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return the list of content elements of an XML `expression' (may be empty).\" (RETURN (REST (REST EXPRESSION))))", Native.find_java_method("edu.isi.stella.Cons", "getXmlContent", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-XML-CDATA-CONTENT", "(DEFUN (GET-XML-CDATA-CONTENT STRING) ((FORM CONS)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return the CDATA content of a CDATA `form'.  Does NOT make sure that `form'\nactually is a CDATA form, so bad things can happen if it is given wrong input.\" (RETURN (UNWRAP-STRING (FIRST (CAST (SECOND FORM) CONS)))))", Native.find_java_method("edu.isi.stella.Cons", "getXmlCdataContent", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineMethodObject("(DEFMETHOD (XML-ELEMENT-MATCH? BOOLEAN) ((TAG XML-ELEMENT) (NAME STRING) (NAMESPACE STRING)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Returns `true' if `tag' is an XML element with the name `name'\nin namespace `namespace'.  Note that `namespace' is the full URI, not an abbreviation.\nAlso, `namespace' may be `null', in which case `tag' must not have a namespace\nassociated with it.\" (RETURN (AND (EQL? (NAME TAG) NAME) (EQL? (NAMESPACE-URI TAG) NAMESPACE))))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.XmlElement", "xmlElementMatchP", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")})), null);
      Stella.defineMethodObject("(DEFMETHOD (XML-ATTRIBUTE-MATCH? BOOLEAN) ((ATTRIBUTE XML-ATTRIBUTE) (NAME STRING) (NAMESPACE STRING)) :PUBLIC? TRUE :DOCUMENTATION \"Return `true' if `attribute' is an XML attribute with name `name'\nin namespace `namespace'.  Note that `namespace' is the full URI, not an\nabbreviation.  Also, `namespace' may be `null', in which case `attribute'\nmust not have a namespace associated with it.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.XmlAttribute", "xmlAttributeMatchP", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")})), null);
    }
  }

  public static void startupXml() {
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.$STELLA_MODULE$);
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          _StartupXml.helpStartupXml1();
          _StartupXml.helpStartupXml2();
        }
        if (Stella.currentStartupTimePhaseP(4)) {
          Stella.$XML_ELEMENT_NULL_NAMESPACE_TABLE$ = StringHashTable.newStringHashTable();
          Stella.$XML_ELEMENT_HASH_TABLE$ = StringHashTable.newStringHashTable();
          Stella.$XML_GLOBAL_ATTRIBUTE_HASH_TABLE$ = StringHashTable.newStringHashTable();
          Stella.$XML_BASE_ENTITY_TABLE$ = Stella.makeXmlEntityTable();
          Stella.$XML_TOKENIZER_TABLE_DEFINITION$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_SKIP_WHITESPACE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SKIP_WHITESPACE, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_SKIP_WHITESPACE, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("<"), Cons.cons(Stella.KWD_OPEN_TAG, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_CONTENT, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CONTENT, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("<"), Cons.cons(Stella.KWD_OPEN_TAG, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_CONTENT, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_OPEN_END_TAG, Cons.cons(StringWrapper.wrapString("?"), Cons.cons(Stella.KWD_OPEN_PI_TAG, Cons.cons(StringWrapper.wrapString("!"), Cons.cons(Stella.KWD_OPEN_DECLARATION_TAG, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_OPEN_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_OPEN_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_NAME, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_PI_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_START_PI_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START_PI_TAG, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("?"), Cons.cons(Stella.KWD_OPEN_PI_TAG_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_PI_TAG_DATA, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_PI_TAG, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_PI_TAG_DATA, Cons.cons(StringWrapper.wrapString("?"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_PI_TAG_DATA_OR_END, Cons.cons(Stella.KWD_PI_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_PI_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_PI_TAG_DATA_OR_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_PI_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_PI_TAG_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_END_TAG, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_END_TAG_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_END_TAG, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_END_TAG, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_END_TAG_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_END_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_NAME, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_OPEN_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_NAME, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ATTRIBUTE_NAME, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ATTRIBUTE_NAME, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_OPEN_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter('='), Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_VALUE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ATTRIBUTE_NAME, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_VALUE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_OPEN_EMPTY_TAG_END, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter('='), Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_VALUE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("'"), Cons.cons(Stella.KWD_SINGLE_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_DOUBLE_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_UNQUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SINGLE_QUOTED_ATTRIBUTE_VALUE, Cons.cons(StringWrapper.wrapString("'"), Cons.cons(Stella.KWD_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SINGLE_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DOUBLE_QUOTED_ATTRIBUTE_VALUE, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_DOUBLE_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_NAME, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_UNQUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_OPEN_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_SKIP_TO_ATTRIBUTE_NAME, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_UNQUOTED_ATTRIBUTE_VALUE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_DECLARATION_TAG, Cons.cons(StringWrapper.wrapString("-"), Cons.cons(Stella.KWD_START_TAG_OR_COMMENT, Cons.cons(StringWrapper.wrapString("["), Cons.cons(Stella.KWD_OPEN_SPECIAL_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_DECLARATION_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START_DECLARATION_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_DECLARATION_WHITESPACE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_DECLARATION_TAG, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DECLARATION_WHITESPACE, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_DECLARATION_WHITESPACE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("["), Cons.cons(Stella.KWD_DECLARATION_TAG_MARKUP_DATA_START, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("'"), Cons.cons(Stella.KWD_SINGLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_DOUBLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_DECLARATION_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DECLARATION_TAG_DATA, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_DECLARATION_WHITESPACE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("["), Cons.cons(Stella.KWD_DECLARATION_TAG_MARKUP_DATA_START, Cons.cons(StringWrapper.wrapString("'"), Cons.cons(Stella.KWD_SINGLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_DOUBLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_DECLARATION_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SINGLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(StringWrapper.wrapString("'"), Cons.cons(Stella.KWD_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SINGLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DOUBLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_DOUBLE_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUOTED_DECLARATION_TAG_DATA, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DECLARATION_WHITESPACE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DECLARATION_TAG_MARKUP_DATA_START, Cons.cons(StringWrapper.wrapString("]"), Cons.cons(Stella.KWD_DECLARATION_TAG_MARKUP_DATA, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_DECLARATION_TAG_MARKUP_DATA_START, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DECLARATION_TAG_MARKUP_DATA, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_SPECIAL_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_START_SPECIAL_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START_SPECIAL_TAG, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("["), Cons.cons(Stella.KWD_SPECIAL_TAG_DATA, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_SPECIAL_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SPECIAL_TAG_DATA, Cons.cons(StringWrapper.wrapString("]"), Cons.cons(Stella.KWD_SPECIAL_TAG_DATA_OR_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SPECIAL_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SPECIAL_TAG_DATA_OR_END, Cons.cons(StringWrapper.wrapString("]"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SPECIAL_TAG_DATA_OR_END2, Cons.cons(Stella.KWD_SPECIAL_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SPECIAL_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SPECIAL_TAG_DATA_OR_END2, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_DATA_TAG_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SPECIAL_TAG_DATA, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START_TAG_OR_COMMENT, Cons.cons(StringWrapper.wrapString("-"), Cons.cons(Stella.KWD_COMMENT_BODY, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_START_TAG, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_COMMENT_BODY, Cons.cons(StringWrapper.wrapString("-"), Cons.cons(Stella.KWD_END_COMMENT_OR_COMMENT, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_COMMENT_BODY, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_END_COMMENT_OR_COMMENT, Cons.cons(StringWrapper.wrapString("-"), Cons.cons(Stella.KWD_END_COMMENT_OR_COMMENT2, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_COMMENT_BODY, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_END_COMMENT_OR_COMMENT2, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_COMMENT, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_COMMENT, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START_TAG_END, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DATA_TAG_END, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_END_TAG_END, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_EMPTY_TAG_END, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(">"), Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_EMPTY_TAG_END, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))))))))))))))))))))));
          Stella.$XML_PRESERVE_ALL_WHITESPACEp$.setDefaultValue(new Boolean(false));
        }
        if (Stella.currentStartupTimePhaseP(5)) {
          _StartupXml.helpStartupXml3();
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          _StartupXml.helpStartupXml4();
          Stella.defineMethodObject("(DEFMETHOD (XML-ATTRIBUTE-MATCH? BOOLEAN) ((ATTRIBUTE XML-GLOBAL-ATTRIBUTE) (NAME STRING) (NAMESPACE STRING)) :PUBLIC? TRUE :DOCUMENTATION \"Return `true' if `attribute' is a global  XML attribute with name `name'\nin namespace `namespace'.  Note that `namespace' is the full URI, not an\nabbreviation.  Also, `namespace' may be `null', in which case `attribute'\nmust not have a namespace associated with it.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.XmlGlobalAttribute", "xmlAttributeMatchP", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")})), null);
          Stella.defineMethodObject("(DEFMETHOD (XML-ATTRIBUTE-MATCH? BOOLEAN) ((ATTRIBUTE XML-LOCAL-ATTRIBUTE) (NAME STRING) (NAMESPACE STRING)) :PUBLIC? TRUE :DOCUMENTATION \"Return `true' if `attribute' is a local XML attribute with name `name'.\nNote that `namespace' must be `null' and that the `attribute's parent element\nelement is not considered by the match.  To take the parent element into\naccount use `xml-local-attribute-match?'.\")", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.XmlLocalAttribute", "xmlAttributeMatchP", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")})), null);
          Stella.defineFunctionObject("XML-GLOBAL-ATTRIBUTE-MATCH?", "(DEFUN (XML-GLOBAL-ATTRIBUTE-MATCH? BOOLEAN) ((ATTRIBUTE XML-GLOBAL-ATTRIBUTE) (NAME STRING) (NAMESPACE STRING)) :GLOBALLY-INLINE? TRUE (RETURN (AND (STRING-EQL? (NAME ATTRIBUTE) NAME) (EQL? (NAMESPACE-URI ATTRIBUTE) NAMESPACE))))", Native.find_java_method("edu.isi.stella.XmlGlobalAttribute", "xmlGlobalAttributeMatchP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlGlobalAttribute"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("XML-LOCAL-ATTRIBUTE-MATCH?", "(DEFUN (XML-LOCAL-ATTRIBUTE-MATCH? BOOLEAN) ((ATTRIBUTE XML-LOCAL-ATTRIBUTE) (NAME STRING) (ELEMENT-NAME STRING) (ELEMENT-NAMESPACE STRING)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Return true if `attribute' is a local attribute with `name' and whose\nparent element matches `element-name' and `element-namespace'.\" (RETURN (AND (STRING-EQL? (NAME ATTRIBUTE) NAME) (XML-ELEMENT-MATCH? (PARENT-ELEMENT ATTRIBUTE) ELEMENT-NAME ELEMENT-NAMESPACE))))", Native.find_java_method("edu.isi.stella.XmlLocalAttribute", "xmlLocalAttributeMatchP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.XmlLocalAttribute"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("XML-LOOKUP-ATTRIBUTE", "(DEFUN (XML-LOOKUP-ATTRIBUTE STRING) ((ATTRIBUTES CONS) (NAME STRING) (NAMESPACE STRING)) :DOCUMENTATION \"Find the XML attribute in `attributes' with `name' and `namespace' and\nreturn its value.  Note that it is assumed that all `attributes' come from\nthe same known tag, hence, the parent elements of any local attributes are\nnot considered by the lookup.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "xmlLookupAttribute", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("EXPAND-XML-TAG-CASE", "(DEFUN (EXPAND-XML-TAG-CASE CONS) ((ITEM SYMBOL) (CLAUSES (CONS OF CONS))))", Native.find_java_method("edu.isi.stella.Symbol", "expandXmlTagCase", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Cons")}), null);
          Stella.defineFunctionObject("XML-TAG-CASE", "(DEFUN XML-TAG-CASE ((ITEM OBJECT) |&BODY| (CLAUSES CONS)) :TYPE OBJECT :MACRO? TRUE :PUBLIC? TRUE :DOCUMENTATION \"A case form for matching `item' against XML element tags.  Each\nelement of `clauses' should be a clause with the form\n  (\\\"tagname\\\" ...)     or\n  ((\\\"tagname\\\" \\\"namespace-uri\\\") ...)\nThe clause heads can optionally be symbols instead of strings.  The key forms the\nparameters to the method `xml-element-match?', with a missing namespace argument\npassed as NULL.\n\nThe namespace argument will be evaluated, so one can use bound variables in\nplace of a fixed string.   As a special case, if the namespace argument is\n:ANY, then the test will be done for a match on the tag name alone.\")", Native.find_java_method("edu.isi.stella.Stella_Object", "xmlTagCase", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Cons")}), null);
          Stella.defineFunctionObject("PRINT-XML-NON-ELEMENT-ATTRIBUTES", "(DEFUN PRINT-XML-NON-ELEMENT-ATTRIBUTES ((STREAM OUTPUT-STREAM) (ATTRIBUTES CONS)))", Native.find_java_method("edu.isi.stella.OutputStream", "printXmlNonElementAttributes", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.OutputStream"), Native.find_java_class("edu.isi.stella.Cons")}), null);
          Stella.defineFunctionObject("PRINT-XML-ELEMENT-ATTRIBUTES", "(DEFUN PRINT-XML-ELEMENT-ATTRIBUTES ((STREAM OUTPUT-STREAM) (ATTRIBUTES CONS)))", Native.find_java_method("edu.isi.stella.OutputStream", "printXmlElementAttributes", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.OutputStream"), Native.find_java_class("edu.isi.stella.Cons")}), null);
          Stella.defineFunctionObject("PRINT-XML-EXPRESSION", "(DEFUN PRINT-XML-EXPRESSION ((STREAM OUTPUT-STREAM) (XML-EXPRESSION CONS) (INDENT INTEGER)) :DOCUMENTATION \"Prints `xml-expression' on `stream'.  Indentation begins with the\nvalue of `indent'.  If this is the `null' integer, no indentation is\nperformed.  Otherwise it should normally be specified as 0 (zero) for\ntop-level calls.\n\nIt is assumed that the `xml-expression' is a well-formed CONS-list\nrepresentation of an XML  form.  It expects a form like that form\nreturned by `read-XML-expression'.\n\nAlso handles a list of xml forms such as that returned by `XML-expressions'.\nIn that case, each of the forms is indented by `indent' spaces.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.OutputStream", "printXmlExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.OutputStream"), Native.find_java_class("edu.isi.stella.Cons"), java.lang.Integer.TYPE}), null);
          Stella.defineFunctionObject("STARTUP-XML", "(DEFUN STARTUP-XML () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella._StartupXml", "startupXml", new java.lang.Class [] {}), null);
          { MethodSlot function = Symbol.lookupFunction(Stella.SYM_STELLA_STARTUP_XML);

            KeyValueList.setDynamicSlotValue(function.dynamicSlots, Stella.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupXml"), Stella.NULL_STRING_WRAPPER);
          }
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("/STELLA")))));
          Stella.defineGlobalVariableObject("(DEFCONSTANT *XML-URN* STRING \"http://www.w3.org/XML/1998/namespaces\")", null);
          Stella.defineGlobalVariableObject("(DEFCONSTANT *HTML-V4-0-URN* STRING \"http://www.w3.org/TR/REC-html40\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-ELEMENT-NULL-NAMESPACE-TABLE* (STRING-HASH-TABLE OF STRING XML-ELEMENT) (NEW (STRING-HASH-TABLE OF STRING XML-ELEMENT)) :DOCUMENTATION \"Hash Table for interning XML elements that don't appear in any namespace.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-ELEMENT-HASH-TABLE* (STRING-HASH-TABLE OF STRING (STRING-HASH-TABLE OF STRING XML-ELEMENT)) (NEW (STRING-HASH-TABLE OF STRING (STRING-HASH-TABLE OF STRING XML-ELEMENT))) :DOCUMENTATION \"Hash Table mapping URI's (for namespaces) to a Hash Table\nfor interning XML elements.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-GLOBAL-ATTRIBUTE-HASH-TABLE* (STRING-HASH-TABLE OF STRING (STRING-HASH-TABLE OF STRING XML-ATTRIBUTE)) (NEW (STRING-HASH-TABLE OF STRING (STRING-HASH-TABLE OF STRING XML-ATTRIBUTE))) :DOCUMENTATION \"Hash Table mapping URI's (for namespaces) to a Hash Table\nfor interning XML global attributes.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-BASE-ENTITY-TABLE* (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER) (MAKE-XML-ENTITY-TABLE))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-TOKENIZER-TABLE-DEFINITION* CONS (BQUOTE ((:START :INCLUDE :SKIP-WHITESPACE) (:SKIP-WHITESPACE ! (#\\  #\\Tab #\\Linefeed #\\Return) :SKIP-WHITESPACE ! \"<\" :OPEN-TAG :EOF :EOF * :OTHERWISE :CONTENT) (:CONTENT ! \"<\" :OPEN-TAG :EOF :EOF :OTHERWISE :CONTENT) (:OPEN-TAG * \">\" :START-TAG-END ! \"/\" :OPEN-END-TAG \"?\" :OPEN-PI-TAG \"!\" :OPEN-DECLARATION-TAG (#\\  #\\Tab #\\Linefeed #\\Return) :OPEN-TAG * :OTHERWISE :START-TAG) (:START-TAG * \">\" :START-TAG-END ! \"/\" :OPEN-EMPTY-TAG-END ! (#\\  #\\Tab #\\Linefeed #\\Return) :SKIP-TO-ATTRIBUTE-NAME :OTHERWISE :START-TAG) (:OPEN-PI-TAG * :ANY :START-PI-TAG) (:START-PI-TAG ! \"?\" :OPEN-PI-TAG-END * (#\\  #\\Tab #\\Linefeed #\\Return) :PI-TAG-DATA :OTHERWISE :START-PI-TAG) (:PI-TAG-DATA \"?\" (:PI-TAG-DATA-OR-END :PI-TAG-DATA) :OTHERWISE :PI-TAG-DATA) (:PI-TAG-DATA-OR-END * \">\" :EMPTY-TAG-END :OTHERWISE :PI-TAG-DATA) (:OPEN-PI-TAG-END * \">\" :EMPTY-TAG-END :OTHERWISE :ERROR) (:OPEN-END-TAG ! \">\" :END-TAG-END * :OTHERWISE :END-TAG) (:END-TAG ! \">\" :END-TAG-END :OTHERWISE :END-TAG) (:SKIP-TO-ATTRIBUTE-NAME * \">\" :START-TAG-END ! \"/\" :OPEN-EMPTY-TAG-END ! (#\\  #\\Tab #\\Linefeed #\\Return) :SKIP-TO-ATTRIBUTE-NAME * :OTHERWISE :ATTRIBUTE-NAME) (:ATTRIBUTE-NAME * \">\" :START-TAG-END ! \"/\" :OPEN-EMPTY-TAG-END ! (#\\= #\\  #\\Tab #\\Linefeed #\\Return) :SKIP-TO-ATTRIBUTE-VALUE :OTHERWISE :ATTRIBUTE-NAME) (:SKIP-TO-ATTRIBUTE-VALUE * \">\" :START-TAG-END ! \"/\" :OPEN-EMPTY-TAG-END (#\\= #\\  #\\Tab #\\Linefeed #\\Return) :SKIP-TO-ATTRIBUTE-VALUE * \"'\" :SINGLE-QUOTED-ATTRIBUTE-VALUE * \"\\\"\" :DOUBLE-QUOTED-ATTRIBUTE-VALUE * :OTHERWISE :UNQUOTED-ATTRIBUTE-VALUE) (:SINGLE-QUOTED-ATTRIBUTE-VALUE \"'\" :QUOTED-ATTRIBUTE-VALUE :OTHERWISE :SINGLE-QUOTED-ATTRIBUTE-VALUE) (:DOUBLE-QUOTED-ATTRIBUTE-VALUE \"\\\"\" :QUOTED-ATTRIBUTE-VALUE :OTHERWISE :DOUBLE-QUOTED-ATTRIBUTE-VALUE) (:QUOTED-ATTRIBUTE-VALUE :INCLUDE :SKIP-TO-ATTRIBUTE-NAME) (:UNQUOTED-ATTRIBUTE-VALUE * \">\" :START-TAG-END ! \"/\" :OPEN-EMPTY-TAG-END ! (#\\  #\\Tab #\\Linefeed #\\Return) :SKIP-TO-ATTRIBUTE-NAME :OTHERWISE :UNQUOTED-ATTRIBUTE-VALUE) (:OPEN-DECLARATION-TAG \"-\" :START-TAG-OR-COMMENT \"[\" :OPEN-SPECIAL-TAG * :OTHERWISE :START-DECLARATION-TAG) (:START-DECLARATION-TAG * \">\" :EMPTY-TAG-END ! (#\\  #\\Tab #\\Linefeed #\\Return) :DECLARATION-WHITESPACE :OTHERWISE :START-DECLARATION-TAG) (:DECLARATION-WHITESPACE ! (#\\  #\\Tab #\\Linefeed #\\Return) :DECLARATION-WHITESPACE * \">\" :EMPTY-TAG-END * \"[\" :DECLARATION-TAG-MARKUP-DATA-START * \"'\" :SINGLE-QUOTED-DECLARATION-TAG-DATA * \"\\\"\" :DOUBLE-QUOTED-DECLARATION-TAG-DATA * :OTHERWISE :DECLARATION-TAG-DATA) (:DECLARATION-TAG-DATA ! (#\\  #\\Tab #\\Linefeed #\\Return) :DECLARATION-WHITESPACE * \">\" :EMPTY-TAG-END * \"[\" :DECLARATION-TAG-MARKUP-DATA-START \"'\" :SINGLE-QUOTED-DECLARATION-TAG-DATA \"\\\"\" :DOUBLE-QUOTED-DECLARATION-TAG-DATA :OTHERWISE :DECLARATION-TAG-DATA) (:SINGLE-QUOTED-DECLARATION-TAG-DATA \"'\" :QUOTED-DECLARATION-TAG-DATA :OTHERWISE :SINGLE-QUOTED-DECLARATION-TAG-DATA) (:DOUBLE-QUOTED-DECLARATION-TAG-DATA \"\\\"\" :QUOTED-DECLARATION-TAG-DATA :OTHERWISE :DOUBLE-QUOTED-DECLARATION-TAG-DATA) (:QUOTED-DECLARATION-TAG-DATA :INCLUDE :DECLARATION-WHITESPACE) (:DECLARATION-TAG-MARKUP-DATA-START \"]\" :DECLARATION-TAG-MARKUP-DATA :OTHERWISE :DECLARATION-TAG-MARKUP-DATA-START) (:DECLARATION-TAG-MARKUP-DATA * \">\" :EMPTY-TAG-END :OTHERWISE :ERROR) (:OPEN-SPECIAL-TAG * :ANY :START-SPECIAL-TAG) (:START-SPECIAL-TAG * \"[\" :SPECIAL-TAG-DATA :OTHERWISE :START-SPECIAL-TAG) (:SPECIAL-TAG-DATA \"]\" :SPECIAL-TAG-DATA-OR-END :OTHERWISE :SPECIAL-TAG-DATA) (:SPECIAL-TAG-DATA-OR-END \"]\" (:SPECIAL-TAG-DATA-OR-END2 :SPECIAL-TAG-DATA) :OTHERWISE :SPECIAL-TAG-DATA) (:SPECIAL-TAG-DATA-OR-END2 * \">\" :DATA-TAG-END :OTHERWISE :SPECIAL-TAG-DATA) (:START-TAG-OR-COMMENT \"-\" :COMMENT-BODY * :OTHERWISE :START-TAG) (:COMMENT-BODY \"-\" :END-COMMENT-OR-COMMENT :OTHERWISE :COMMENT-BODY) (:END-COMMENT-OR-COMMENT \"-\" :END-COMMENT-OR-COMMENT2 :OTHERWISE :COMMENT-BODY) (:END-COMMENT-OR-COMMENT2 \">\" :COMMENT :OTHERWISE :ERROR) (:COMMENT :INCLUDE :START) (:START-TAG-END :INCLUDE :START) (:DATA-TAG-END :INCLUDE :START) (:END-TAG-END :INCLUDE :START) (:OPEN-EMPTY-TAG-END * \">\" :EMPTY-TAG-END :OTHERWISE :ERROR) (:EMPTY-TAG-END :INCLUDE :START) (:ERROR :INCLUDE :START))))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-TOKENIZER-TABLE* TOKENIZER-TABLE NULL)", null);
          Stella.$XML_TOKENIZER_TABLE$ = Cons.parseTokenizerDefinition(Stella.$XML_TOKENIZER_TABLE_DEFINITION$);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *XML-PRESERVE-ALL-WHITESPACE?* BOOLEAN FALSE :DOCUMENTATION \"If true, all whitespace between tags (newlines, trailing WP, etc.)\nwill be preserved.  This is a kludge to allow us to read certain `illegal' XML files\nwhere this whitespace is significant but not appropriately encoded.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *XML-WHITESPACE-PRESERVING-TOKENIZER-TABLE* TOKENIZER-TABLE NULL)", null);
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
