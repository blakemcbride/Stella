//  -*- Mode: Java -*-
//
// _StartupWalk.java

/*
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
*/

package edu.isi.stella;

import edu.isi.stella.javalib.*;

public class _StartupWalk {
  static void helpStartupWalk1() {
    {
      Stella.KWD_WARN_ABOUT_UNDEFINED_METHODS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("WARN-ABOUT-UNDEFINED-METHODS", null, 2)));
      Stella.KWD_WARN_ABOUT_MISSING_METHODS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("WARN-ABOUT-MISSING-METHODS", null, 2)));
      Stella.KWD_SUPPRESS_WARNINGS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SUPPRESS-WARNINGS", null, 2)));
      Stella.KWD_USE_HARDCODED_SYMBOLS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("USE-HARDCODED-SYMBOLS", null, 2)));
      Stella.KWD_USE_COMMON_LISP_CONSES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("USE-COMMON-LISP-CONSES", null, 2)));
      Stella.KWD_USE_CPP_GARBAGE_COLLECTOR = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("USE-CPP-GARBAGE-COLLECTOR", null, 2)));
      Stella.KWD_MINIMIZE_JAVA_PREFIXES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("MINIMIZE-JAVA-PREFIXES", null, 2)));
      Stella.KWD_TRANSLATE_WITH_COPYRIGHT_HEADER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("TRANSLATE-WITH-COPYRIGHT-HEADER", null, 2)));
      Stella.KWD_SUPPORT_UNEXEC = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SUPPORT-UNEXEC", null, 2)));
      Stella.SYM_STELLA_MEMBp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MEMB?", null, 0)));
      Stella.SYM_STELLA_$TRACED_KEYWORDS$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*TRACED-KEYWORDS*", null, 0)));
      Stella.SYM_STELLA_PRINT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PRINT", null, 0)));
      Stella.SYM_STELLA_FLUSH_OUTPUT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FLUSH-OUTPUT", null, 0)));
      Stella.SGT_STELLA_F_GET_QUOTED_TREE_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("F-GET-QUOTED-TREE-MEMO-TABLE-000", null, 1)));
      Stella.SGT_STELLA_TRANSLATION_UNIT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TRANSLATION-UNIT", null, 1)));
      Stella.SYM_STELLA_TU_HOME_MODULE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TU-HOME-MODULE", null, 0)));
      Stella.SYM_STELLA_THE_OBJECT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("THE-OBJECT", null, 0)));
      Stella.SYM_STELLA_CATEGORY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CATEGORY", null, 0)));
      Stella.SYM_STELLA_ANNOTATION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ANNOTATION", null, 0)));
      Stella.SYM_STELLA_AUXILIARYp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("AUXILIARY?", null, 0)));
      Stella.SYM_STELLA_CODE_REGISTER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CODE-REGISTER", null, 0)));
      Stella.SYM_STELLA_TRANSLATION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TRANSLATION", null, 0)));
      Stella.SYM_STELLA_REFERENCED_GLOBALS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("REFERENCED-GLOBALS", null, 0)));
      Stella.SYM_STELLA_CLASS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CLASS", null, 0)));
      Stella.SYM_STELLA_METHOD = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("METHOD", null, 0)));
      Stella.SYM_STELLA_GLOBAL_VARIABLE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GLOBAL-VARIABLE", null, 0)));
      Stella.SYM_STELLA_DEFCLASS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFCLASS", null, 0)));
      Stella.SYM_STELLA_DEFSLOT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFSLOT", null, 0)));
      Stella.SYM_STELLA_DEFOPERATOR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFOPERATOR", null, 0)));
      Stella.SYM_STELLA_DEFTYPE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFTYPE", null, 0)));
      Stella.SYM_STELLA_DEFMODULE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFMODULE", null, 0)));
      Stella.SYM_STELLA_DEFMACRO = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFMACRO", null, 0)));
      Stella.SYM_STELLA_STARTUP_TIME_PROGN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-TIME-PROGN", null, 0)));
      Stella.SYM_STELLA_MODULE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MODULE", null, 0)));
      Stella.SYM_STELLA_PRINT_METHOD = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PRINT-METHOD", null, 0)));
      Stella.SYM_STELLA_SLOT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SLOT", null, 0)));
      Stella.KWD_JAVA_STANDALONE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("JAVA-STANDALONE", null, 2)));
      Stella.KWD_DEFINE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFINE", null, 2)));
      Stella.KWD_FINALIZE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FINALIZE", null, 2)));
      Stella.KWD_WALK = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("WALK", null, 2)));
      Stella.KWD_TRANSLATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("TRANSLATE", null, 2)));
      Stella.SGT_STELLA_TYPE_SPEC = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TYPE-SPEC", null, 1)));
      Stella.SYM_STELLA_LOG_FUNCTION_CALL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOG-FUNCTION-CALL", null, 0)));
      Stella.SYM_STELLA_START_FUNCTION_CALL_LOGGING = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("START-FUNCTION-CALL-LOGGING", null, 0)));
      Stella.SYM_STELLA_STOP_FUNCTION_CALL_LOGGING = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STOP-FUNCTION-CALL-LOGGING", null, 0)));
      Stella.SYM_STELLA_SET_CALL_LOG_BREAK_POINT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SET-CALL-LOG-BREAK-POINT", null, 0)));
      Stella.SYM_STELLA_BREAK_PROGRAM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("BREAK-PROGRAM", null, 0)));
      Stella.SYM_STELLA_TERMINATE_PROGRAM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TERMINATE-PROGRAM", null, 0)));
      Stella.SYM_STELLA_PO = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PO", null, 0)));
      Stella.SYM_STELLA_g = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule(">", null, 0)));
      Stella.SYM_STELLA_ge = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule(">=", null, 0)));
      Stella.SGT_STELLA_LISP_CODE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("LISP-CODE", null, 1)));
      Stella.SGT_STELLA_NATIVE_OUTPUT_STREAM = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NATIVE-OUTPUT-STREAM", null, 1)));
      Stella.SYM_STELLA_INLINE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INLINE", null, 0)));
      Stella.SGT_STELLA_UNINITIALIZED = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("UNINITIALIZED", null, 1)));
      Stella.KWD_SECOND_CLASS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SECOND-CLASS", null, 2)));
      Stella.KWD_ALIAS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ALIAS", null, 2)));
      Stella.SYM_STELLA_ILLEGAL_EXPRESSION_FLAGGED_BY_THE_TRANSLATOR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ILLEGAL-EXPRESSION-FLAGGED-BY-THE-TRANSLATOR", null, 0)));
      Stella.SYM_STELLA_BAD_SYS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("BAD-SYS", null, 0)));
      Stella.SGT_STELLA_NUMBER = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NUMBER", null, 1)));
    }
  }

  static void helpStartupWalk2() {
    {
      Stella.SYM_STELLA_INTEGER_TO_BOOLEAN_WRAPPER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTEGER-TO-BOOLEAN-WRAPPER", null, 0)));
      Stella.SYM_STELLA_INTEGER_TO_BOOLEAN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTEGER-TO-BOOLEAN", null, 0)));
      Stella.SYM_STELLA_MUTABLE_STRING_TO_STRING = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MUTABLE-STRING-TO-STRING", null, 0)));
      Stella.SYM_STELLA_STRING_TO_MUTABLE_STRING = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STRING-TO-MUTABLE-STRING", null, 0)));
      Stella.SYM_STELLA_INTERN_SYMBOL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTERN-SYMBOL", null, 0)));
      Stella.SYM_STELLA_CHARACTER_TO_STRING = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CHARACTER-TO-STRING", null, 0)));
      Stella.SYM_STELLA_INLINE_UNWRAP_BOOLEAN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INLINE-UNWRAP-BOOLEAN", null, 0)));
      Stella.SYM_STELLA_NUMBER_WRAPPER_TO_FLOAT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NUMBER-WRAPPER-TO-FLOAT", null, 0)));
      Stella.SGT_STELLA_NATIVE_INPUT_STREAM = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("NATIVE-INPUT-STREAM", null, 1)));
      Stella.SYM_STELLA_NATIVE_STREAM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NATIVE-STREAM", null, 0)));
      Stella.SYM_STELLA_lXg = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("<X>", null, 0)));
      Stella.SGT_STELLA_SINGLE_FLOAT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("SINGLE-FLOAT", null, 1)));
      Stella.SYM_STELLA_IDENTITY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("IDENTITY", null, 0)));
      Stella.SGT_STELLA_DOUBLE_FLOAT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("DOUBLE-FLOAT", null, 1)));
      Stella.SGT_STELLA_SHORT_INTEGER = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("SHORT-INTEGER", null, 1)));
      Stella.SGT_STELLA_UNSIGNED_SHORT_INTEGER = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("UNSIGNED-SHORT-INTEGER", null, 1)));
      Stella.SGT_STELLA_UNSIGNED_LONG_INTEGER = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("UNSIGNED-LONG-INTEGER", null, 1)));
      Stella.SYM_STELLA_SYS_CALL_FUNCTION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-CALL-FUNCTION", null, 0)));
      Stella.SYM_STELLA_SYS_INLINE_CALL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-INLINE-CALL", null, 0)));
      Stella.SYM_STELLA_SAFE_CAST = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SAFE-CAST", null, 0)));
      Stella.SYM_STELLA_VOID_SYS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("VOID-SYS", null, 0)));
      Stella.SYM_STELLA_SYS_SET_DEFAULT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-SET-DEFAULT", null, 0)));
      Stella.SYM_STELLA_SLOT_VALUE_SETTER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SLOT-VALUE-SETTER", null, 0)));
      Stella.SYM_STELLA_AREF = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("AREF", null, 0)));
      Stella.SYM_STELLA_AREF_SETTER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("AREF-SETTER", null, 0)));
      Stella.SYM_STELLA_WITH_PROCESS_LOCK = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("WITH-PROCESS-LOCK", null, 0)));
      Stella.SYM_STELLA_VALUES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("VALUES", null, 0)));
      Stella.SYM_STELLA_SYS_SPECIAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-SPECIAL", null, 0)));
      Stella.SYM_STELLA_MV_BIND = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MV-BIND", null, 0)));
      Stella.SYM_STELLA_CONTINUE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CONTINUE", null, 0)));
      Stella.SYM_STELLA_SETOF = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SETOF", null, 0)));
      Stella.SYM_STELLA_SET_OF = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SET-OF", null, 0)));
      Stella.SYM_STELLA_SELECT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SELECT", null, 0)));
      Stella.SYM_STELLA_CHOOSE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CHOOSE", null, 0)));
      Stella.SYM_STELLA_i = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("+", null, 0)));
      Stella.SYM_STELLA_$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*", null, 0)));
      Stella.SYM_STELLA_s = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("/", null, 0)));
      Stella.SYM_STELLA_BQUOTE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("BQUOTE", null, 0)));
      Stella.SYM_STELLA_PRINT_NATIVE_STREAM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PRINT-NATIVE-STREAM", null, 0)));
      Stella.SYM_STELLA_ALLOCATE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ALLOCATE", null, 0)));
      Stella.SYM_STELLA_LOCAL_NEW = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOCAL-NEW", null, 0)));
      Stella.SYM_STELLA_FUNCALL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FUNCALL", null, 0)));
      Stella.SYM_STELLA_SYS_CALL_FUNCTION_CODE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-CALL-FUNCTION-CODE", null, 0)));
      Stella.SYM_STELLA_SYS_CALL_METHOD_CODE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-CALL-METHOD-CODE", null, 0)));
      Stella.SYM_STELLA_CALL_SUPER_METHOD = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CALL-SUPER-METHOD", null, 0)));
      Stella.SYM_STELLA_EXCEPTION_CASE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EXCEPTION-CASE", null, 0)));
      Stella.SYM_STELLA_SYS_UNWIND_PROTECT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-UNWIND-PROTECT", null, 0)));
      Stella.SYM_STELLA_SYS_SLOT_VALUE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-SLOT-VALUE", null, 0)));
      Stella.SYM_STELLA_SYS_SLOT_VALUE_SETTER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-SLOT-VALUE-SETTER", null, 0)));
      Stella.SYM_STELLA_SYS_CALL_SUPER_METHOD = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-CALL-SUPER-METHOD", null, 0)));
      Stella.SYM_STELLA_SYS_CALL_METHOD_SETTER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-CALL-METHOD-SETTER", null, 0)));
      Stella.SYM_STELLA_SYS_NEW = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-NEW", null, 0)));
      Stella.KWD_SYMBOLS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOLS", null, 2)));
      Stella.SYM_STELLA_INTERN_RIGID_SYMBOL_WRT_MODULE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTERN-RIGID-SYMBOL-WRT-MODULE", null, 0)));
      Stella.SYM_STELLA_GET_STELLA_MODULE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-STELLA-MODULE", null, 0)));
      Stella.SYM_STELLA_INTERN_SYMBOL_AT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTERN-SYMBOL-AT", null, 0)));
      Stella.SYM_STELLA_INTERN_SURROGATE_AT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTERN-SURROGATE-AT", null, 0)));
      Stella.SYM_STELLA_INTERN_KEYWORD_AT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTERN-KEYWORD-AT", null, 0)));
      Stella.KWD_INLINE_ARGUMENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("INLINE-ARGUMENT", null, 2)));
      Stella.KWD_PLACE_WHERE_VRLET_WAS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PLACE-WHERE-VRLET-WAS", null, 2)));
    }
  }

  static void helpStartupWalk3() {
    {
      Stella.KWD_PLACE_WHERE_LAST_EXPRESSION_WAS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PLACE-WHERE-LAST-EXPRESSION-WAS", null, 2)));
      Stella.SYM_STELLA_IT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("IT", null, 0)));
      Stella.SYM_STELLA_WRAPPEDVALUE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("WRAPPEDVALUE", null, 0)));
      Stella.SYM_STELLA_DYNAMICSLOTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DYNAMICSLOTS", null, 0)));
      Stella.SYM_STELLA_NEWVALUE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NEWVALUE", null, 0)));
      Stella.SYM_STELLA_FOUNDMATCHINGENTRYp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FOUNDMATCHINGENTRY?", null, 0)));
      Stella.SYM_STELLA_KV_CONS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("KV-CONS", null, 0)));
      Stella.SYM_STELLA_OLDVALUE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("OLDVALUE", null, 0)));
      Stella.KWD_DONT_INHERITp = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("DONT-INHERIT?", null, 2)));
      Stella.SYM_STELLA_ACCESS_IN_CONTEXT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ACCESS-IN-CONTEXT", null, 0)));
      Stella.SYM_STELLA_HOME_CONTEXT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("HOME-CONTEXT", null, 0)));
      Stella.KWD_COPY_TO_CHILDRENp = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("COPY-TO-CHILDREN?", null, 2)));
      Stella.SYM_STELLA_UPDATE_IN_CONTEXT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("UPDATE-IN-CONTEXT", null, 0)));
      Stella.SYM_STELLA_CS_VALUEp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CS-VALUE?", null, 0)));
      Stella.SYM_STELLA_VARIABLE_DECLARATION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("VARIABLE-DECLARATION", null, 0)));
      Stella.SYM_STELLA_ILLEGAL_VARIABLE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ILLEGAL-VARIABLE", null, 0)));
      Stella.KWD_UNBIND_WITH_DESTRUCTORS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("UNBIND-WITH-DESTRUCTORS", null, 2)));
      Stella.KWD_UNWIND_PROTECT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("UNWIND-PROTECT", null, 2)));
      Stella.SYM_STELLA_GENERALIZED_SYMBOL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GENERALIZED-SYMBOL", null, 0)));
      Stella.SYM_STELLA_BOOLEANp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("BOOLEAN?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_BOOLEANp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-BOOLEAN?", null, 0)));
      Stella.SYM_STELLA_INTEGERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INTEGER?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_INTEGERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-INTEGER?", null, 0)));
      Stella.SYM_STELLA_LONG_INTEGERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LONG-INTEGER?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_LONG_INTEGERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-LONG-INTEGER?", null, 0)));
      Stella.SYM_STELLA_FLOATp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FLOAT?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_FLOATp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-FLOAT?", null, 0)));
      Stella.SYM_STELLA_STRINGp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STRING?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_STRINGp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-STRING?", null, 0)));
      Stella.SYM_STELLA_CHARACTERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CHARACTER?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_CHARACTERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-CHARACTER?", null, 0)));
      Stella.SYM_STELLA_WRAPPERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("WRAPPER?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_WRAPPERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-WRAPPER?", null, 0)));
      Stella.SYM_STELLA_VERBATIM_STRINGp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("VERBATIM-STRING?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_VERBATIM_STRINGp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-VERBATIM-STRING?", null, 0)));
      Stella.SYM_STELLA_SURROGATEp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SURROGATE?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_SURROGATEp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-SURROGATE?", null, 0)));
      Stella.SGT_STELLA_TYPE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TYPE", null, 1)));
      Stella.SYM_STELLA_TYPEp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TYPE?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_TYPEp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-TYPE?", null, 0)));
      Stella.SYM_STELLA_SYMBOLp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_SYMBOLp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-SYMBOL?", null, 0)));
      Stella.SYM_STELLA_TRANSIENT_SYMBOLp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TRANSIENT-SYMBOL?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_TRANSIENT_SYMBOLp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-TRANSIENT-SYMBOL?", null, 0)));
      Stella.SYM_STELLA_KEYWORDp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("KEYWORD?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_KEYWORDp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-KEYWORD?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_CONSp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-CONS?", null, 0)));
      Stella.SYM_STELLA_STELLA_CLASSp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STELLA-CLASS?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_CLASSp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-CLASS?", null, 0)));
      Stella.SYM_STELLA_STORAGE_SLOTp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STORAGE-SLOT?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_STORAGE_SLOTp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-STORAGE-SLOT?", null, 0)));
      Stella.SYM_STELLA_METHOD_SLOTp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("METHOD-SLOT?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_METHOD_SLOTp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-METHOD-SLOT?", null, 0)));
      Stella.SYM_STELLA_ANCHORED_TYPE_SPECIFIERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ANCHORED-TYPE-SPECIFIER?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_ANCHORED_TYPE_SPECIFIERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-ANCHORED-TYPE-SPECIFIER?", null, 0)));
      Stella.SYM_STELLA_PARAMETRIC_TYPE_SPECIFIERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PARAMETRIC-TYPE-SPECIFIER?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OF_PARAMETRIC_TYPE_SPECIFIERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER?", null, 0)));
      Stella.SYM_STELLA_ISAp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ISA?", null, 0)));
      Stella.SYM_STELLA_SUBTYPE_OFp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SUBTYPE-OF?", null, 0)));
      Stella.SYM_STELLA_STRING_EQLp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STRING-EQL?", null, 0)));
    }
  }

  static void helpStartupWalk4() {
    {
      Stella.SYM_STELLA_SAFE_PRIMARY_TYPE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SAFE-PRIMARY-TYPE", null, 0)));
      Stella.SGT_STELLA_PROCESS_LOCK_OBJECT = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("PROCESS-LOCK-OBJECT", null, 1)));
      Stella.SYM_STELLA_EQL_TO_BOOLEANp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EQL-TO-BOOLEAN?", null, 0)));
      Stella.SYM_STELLA_EQL_TO_INTEGERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EQL-TO-INTEGER?", null, 0)));
      Stella.SYM_STELLA_EQL_TO_LONG_INTEGERp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EQL-TO-LONG-INTEGER?", null, 0)));
      Stella.SYM_STELLA_EQL_TO_FLOATp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EQL-TO-FLOAT?", null, 0)));
      Stella.SYM_STELLA_EQL_TO_STRINGp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EQL-TO-STRING?", null, 0)));
      Stella.SYM_STELLA_GET_QUOTED_TREE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-QUOTED-TREE", null, 0)));
      Stella.SYM_STELLA_CONS_LIST = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CONS-LIST", null, 0)));
      Stella.SYM_STELLA_COPY_CONS_TREE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("COPY-CONS-TREE", null, 0)));
      Stella.SYM_STELLA_CACHED_INLINABLE_METHOD_BODY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CACHED-INLINABLE-METHOD-BODY", null, 0)));
      Stella.KWD_INLINE_REFERENCES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("INLINE-REFERENCES", null, 2)));
      Stella.SYM_STELLA_INLINE_CALL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INLINE-CALL", null, 0)));
      Stella.SYM_STELLA_MAIN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MAIN", null, 0)));
      Stella.SYM_STELLA_FORWARD_DECLARATIONp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FORWARD-DECLARATION?", null, 0)));
      Stella.SYM_STELLA_C_CALLABLE_WRAPPER_CODE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("C-CALLABLE-WRAPPER-CODE", null, 0)));
      Stella.SYM_STELLA_LOOKUP_FUNCTION_BY_NAME = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOOKUP-FUNCTION-BY-NAME", null, 0)));
      Stella.KWD_EMBEDDED = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("EMBEDDED", null, 2)));
      Stella.SYM_STELLA_CLASS_AUXILIARY_METHODS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CLASS-AUXILIARY-METHODS", null, 0)));
      Stella.SYM_STELLA_AUXILIARY_METHOD_REASON = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("AUXILIARY-METHOD-REASON", null, 0)));
      Stella.KWD_FIRST_CLASS_WITH_TYPECASE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FIRST-CLASS-WITH-TYPECASE", null, 2)));
      Stella.SYM_STELLA_PRINT_OBJECT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PRINT-OBJECT", null, 0)));
      Stella.SYM_STELLA_STREAM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STREAM", null, 0)));
      Stella.SYM_STELLA_NATIVE_OUTPUT_STREAM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NATIVE-OUTPUT-STREAM", null, 0)));
      Stella.KWD_CLASSES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CLASSES", null, 2)));
      Stella.KWD_FINALIZE_CLASSES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FINALIZE-CLASSES", null, 2)));
      Stella.SYM_STELLA_FINALIZE_CLASSES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FINALIZE-CLASSES", null, 0)));
      Stella.KWD_FINALIZE_METHODS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FINALIZE-METHODS", null, 2)));
      Stella.SYM_STELLA_FINALIZE_SLOTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("FINALIZE-SLOTS", null, 0)));
      Stella.SYM_STELLA_CLEANUP_UNFINALIZED_CLASSES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CLEANUP-UNFINALIZED-CLASSES", null, 0)));
      Stella.SYM_STELLA_DEFINE_EXTERNAL_SLOT_FROM_STRINGIFIED_SOURCE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFINE-EXTERNAL-SLOT-FROM-STRINGIFIED-SOURCE", null, 0)));
      Stella.KWD_MACROp = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("MACRO?", null, 2)));
      Stella.KWD_GLOBALS = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("GLOBALS", null, 2)));
      Stella.SYM_STELLA_DEFINE_GLOBAL_VARIABLE_OBJECT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFINE-GLOBAL-VARIABLE-OBJECT", null, 0)));
      Stella.SYM_STELLA_DEFINE_STELLA_TYPE_FROM_STRINGIFIED_SOURCE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DEFINE-STELLA-TYPE-FROM-STRINGIFIED-SOURCE", null, 0)));
      Stella.KWD_FINAL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FINAL", null, 2)));
      Stella.SYM_STELLA_CURRENT_STARTUP_TIME_PHASEp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CURRENT-STARTUP-TIME-PHASE?", null, 0)));
      Stella.KWD_MODULES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("MODULES", null, 2)));
      Stella.SYM_STELLA_WITHIN_MODULE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("WITHIN-MODULE", null, 0)));
      Stella.SYM_STELLA_$STELLA_MODULE$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*STELLA-MODULE*", null, 0)));
      Stella.SYM_STELLA_$STARTUP_TIME_PHASE$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*STARTUP-TIME-PHASE*", null, 0)));
      Stella.KWD_C_NAMESPACE_PREFIX = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("C-NAMESPACE-PREFIX", null, 2)));
      Stella.SYM_STELLA_LOOKUP_FUNCTION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOOKUP-FUNCTION", null, 0)));
      Stella.SYM_STELLA_$BOOTSTRAP_LOCK$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*BOOTSTRAP-LOCK*", null, 0)));
      Stella.SGT_STELLA_STELLA_ROOT_EXCEPTION = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("STELLA-ROOT-EXCEPTION", null, 1)));
      Stella.SYM_STELLA_SYS_SIGNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-SIGNAL", null, 0)));
      Stella.SYM_STELLA_SYS_HANDLER_CASE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-HANDLER-CASE", null, 0)));
      Stella.SYM_STELLA_SYS_HANDLE_EXCEPTION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SYS-HANDLE-EXCEPTION", null, 0)));
      Stella.KWD_OTHERWISE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OTHERWISE", null, 2)));
      Stella.SYM_STELLA_INITIAL_ELEMENT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("INITIAL-ELEMENT", null, 0)));
      Stella.SGT_STELLA_CODE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("CODE", null, 1)));
      Stella.SGT_STELLA_COMPOUND_TYPE_SPECIFIER = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("COMPOUND-TYPE-SPECIFIER", null, 1)));
      Stella.SYM_STELLA_EXPRESSION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("EXPRESSION", null, 0)));
      Stella.SYM_STELLA_$IGNORETRANSLATIONERRORSp$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*IGNORETRANSLATIONERRORS?*", null, 0)));
      Stella.SYM_STELLA_CL_INCREMENTALLY_TRANSLATE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CL-INCREMENTALLY-TRANSLATE", null, 0)));
      Stella.SYM_STELLA_REGISTER_NATIVE_NAME = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("REGISTER-NATIVE-NAME", null, 0)));
      Stella.SYM_STELLA_METHOD_C_NAMESPACE_PREFIX = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("METHOD-C-NAMESPACE-PREFIX", null, 0)));
      Stella.SYM_STELLA_$C_API_RESULT_BUFFER$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*C-API-RESULT-BUFFER*", null, 0)));
      Stella.SYM_STELLA_NATIVE_OBJECT_POINTER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NATIVE-OBJECT-POINTER", null, 0)));
      Stella.SYM_STELLA_METHOD_THROWS_EXCEPTIONSp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("METHOD-THROWS-EXCEPTIONS?", null, 0)));
    }
  }

  static void helpStartupWalk5() {
    {
      Stella.SYM_STELLA_NATIVE_EXCEPTION = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NATIVE-EXCEPTION", null, 0)));
      Stella.SYM_STELLA_E = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("E", null, 0)));
      Stella.SYM_STELLA_CALL_GLOBAL_EXCEPTION_HANDLER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CALL-GLOBAL-EXCEPTION-HANDLER", null, 0)));
      Stella.SYM_STELLA_CPP_VAR_ARGS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CPP_VAR_ARGS", null, 0)));
      Stella.SYM_STELLA_NTH_REST = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NTH-REST", null, 0)));
      Stella.SYM_STELLA_ARGUMENTS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ARGUMENTS", null, 0)));
      Stella.SYM_STELLA_RESULT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("RESULT", null, 0)));
      Stella.SYM_STELLA_APPEND = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("APPEND", null, 0)));
      Stella.SYM_STELLA_STARTUP_WALK = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-WALK", null, 0)));
    }
  }

  static void helpStartupWalk6() {
    {
      Stella.$AVAILABLE_STELLA_FEATURES$ = List.list(Cons.cons(Stella.KWD_WARN_ABOUT_UNDEFINED_METHODS, Cons.cons(Stella.KWD_WARN_ABOUT_MISSING_METHODS, Cons.cons(Stella.KWD_SUPPRESS_WARNINGS, Cons.cons(Stella.KWD_USE_HARDCODED_SYMBOLS, Cons.cons(Stella.KWD_USE_COMMON_LISP_STRUCTS, Cons.cons(Stella.KWD_USE_COMMON_LISP_CONSES, Cons.cons(Stella.KWD_USE_CPP_GARBAGE_COLLECTOR, Cons.cons(Stella.KWD_MINIMIZE_JAVA_PREFIXES, Cons.cons(Stella.KWD_TRANSLATE_WITH_COPYRIGHT_HEADER, Cons.cons(Stella.KWD_SUPPORT_UNEXEC, Stella.NIL)))))))))));
      Stella.$CURRENT_STELLA_FEATURES$.setDefaultValue(List.list(Stella.NIL));
      Stella.$DEFAULT_STELLA_FEATURES$ = List.list(Cons.cons(Stella.KWD_WARN_ABOUT_UNDEFINED_METHODS, Cons.cons(Stella.KWD_WARN_ABOUT_MISSING_METHODS, Cons.cons(Stella.KWD_USE_CPP_GARBAGE_COLLECTOR, Cons.cons(Stella.KWD_USE_COMMON_LISP_CONSES, Cons.cons(Stella.KWD_MINIMIZE_JAVA_PREFIXES, Stella.NIL))))));
      Stella.resetStellaFeatures();
      Stella.$SAFETY$.setDefaultValue(new Integer(3));
      Stella.$DEBUGLEVEL$.setDefaultValue(new Integer(3));
      Stella.$OPTIMIZESPEEDLEVEL$.setDefaultValue(new Integer(3));
      Stella.$OPTIMIZESPACELEVEL$.setDefaultValue(new Integer(3));
      Stella.$TRANSLATIONUNITS$.setDefaultValue(null);
      Stella.$CURRENTTRANSLATIONUNIT$.setDefaultValue(null);
      Stella.$TRANSLATIONPHASE$.setDefaultValue(null);
      Stella.$TRANSLATIONVERBOSITYLEVEL$.setDefaultValue(new Integer(1));
      Stella.$USEHARDCODEDSYMBOLSp$.setDefaultValue(new Boolean(false));
      Stella.$TRANSLATOROUTPUTLANGUAGE$.setDefaultValue(Stella.runningInLanguage());
      Stella.$LOCALVARIABLETYPETABLE$.setDefaultValue(null);
      Stella.$METHODBEINGWALKED$.setDefaultValue(null);
      Stella.$FOUNDRETURNp$.setDefaultValue(new Boolean(false));
      Stella.$TARGETTYPE$.setDefaultValue(Stella.SGT_STELLA_VOID);
      Stella.$LOCALGENSYMTABLE$.setDefaultValue(null);
      Stella.$TRANSLATIONERRORS$.setDefaultValue(new Integer(0));
      Stella.$TRANSLATIONWARNINGS$.setDefaultValue(new Integer(0));
      Stella.$TRANSLATIONNOTES$.setDefaultValue(new Integer(0));
      Stella.$LOG_BREAK_POINT_COUNTER$ = Stella.NULL_INTEGER;
      Stella.$WRAPPED_TYPE_TABLE$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER_WRAPPER, Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER_WRAPPER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT_WRAPPER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_NUMBER_WRAPPER, Cons.cons(Stella.SGT_STELLA_NUMBER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING_WRAPPER, Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING_WRAPPER, Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CHARACTER_WRAPPER, Cons.cons(Stella.SGT_STELLA_CHARACTER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_BOOLEAN_WRAPPER, Cons.cons(Stella.SGT_STELLA_BOOLEAN, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FUNCTION_CODE_WRAPPER, Cons.cons(Stella.SGT_STELLA_FUNCTION_CODE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_METHOD_CODE_WRAPPER, Cons.cons(Stella.SGT_STELLA_METHOD_CODE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.NIL, Stella.NIL))))))))))));
      Stella.$COERSION_TABLE$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_BOOLEAN, Cons.cons(Stella.SGT_STELLA_BOOLEAN_WRAPPER, Cons.cons(Stella.SYM_STELLA_INLINE_WRAP_BOOLEAN, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_INTEGER_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_BOOLEAN_WRAPPER, Cons.cons(Stella.SYM_STELLA_INTEGER_TO_BOOLEAN_WRAPPER, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_BOOLEAN, Cons.cons(Stella.SYM_STELLA_INTEGER_TO_BOOLEAN, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SGT_STELLA_FLOAT_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING, Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SYM_STELLA_MUTABLE_STRING_TO_STRING, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING, Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SGT_STELLA_STRING_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING, Cons.cons(Stella.SYM_STELLA_STRING_TO_MUTABLE_STRING, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SGT_STELLA_SYMBOL, Cons.cons(Stella.SYM_STELLA_INTERN_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CHARACTER, Cons.cons(Stella.SGT_STELLA_CHARACTER_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CHARACTER, Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SYM_STELLA_CHARACTER_TO_STRING, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FUNCTION_CODE, Cons.cons(Stella.SGT_STELLA_FUNCTION_CODE_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_METHOD_CODE, Cons.cons(Stella.SGT_STELLA_METHOD_CODE_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAP_LITERAL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_SYMBOL, Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SYM_STELLA_SYMBOL_NAME, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_BOOLEAN_WRAPPER, Cons.cons(Stella.SGT_STELLA_BOOLEAN, Cons.cons(Stella.SYM_STELLA_INLINE_UNWRAP_BOOLEAN, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER_WRAPPER, Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER_WRAPPER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER_WRAPPER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT_WRAPPER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_NUMBER_WRAPPER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SYM_STELLA_NUMBER_WRAPPER_TO_FLOAT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING_WRAPPER, Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING_WRAPPER, Cons.cons(Stella.SGT_STELLA_MUTABLE_STRING, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CHARACTER_WRAPPER, Cons.cons(Stella.SGT_STELLA_CHARACTER, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FUNCTION_CODE_WRAPPER, Cons.cons(Stella.SGT_STELLA_FUNCTION_CODE, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_METHOD_CODE_WRAPPER, Cons.cons(Stella.SGT_STELLA_METHOD_CODE, Cons.cons(Stella.SYM_STELLA_WRAPPER_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_SURROGATE, Cons.cons(Stella.SGT_STELLA_CLASS, Cons.cons(Stella.SYM_STELLA_SURROGATE_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_SURROGATE, Cons.cons(Stella.SGT_STELLA_MODULE, Cons.cons(Stella.SYM_STELLA_SURROGATE_VALUE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INPUT_STREAM, Cons.cons(Stella.SGT_STELLA_NATIVE_INPUT_STREAM, Cons.cons(Stella.SYM_STELLA_NATIVE_STREAM, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_OUTPUT_STREAM, Cons.cons(Stella.SGT_STELLA_NATIVE_OUTPUT_STREAM, Cons.cons(Stella.SYM_STELLA_NATIVE_STREAM, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_NUMBER, Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_NUMBER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_NUMBER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_SINGLE_FLOAT, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_SINGLE_FLOAT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SGT_STELLA_SINGLE_FLOAT, Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_CAST, Cons.cons(Stella.SYM_STELLA_lXg, Cons.cons(Stella.SGT_STELLA_SINGLE_FLOAT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SGT_STELLA_SINGLE_FLOAT, Cons.cons(Stella.SYM_STELLA_IDENTITY, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SGT_STELLA_DOUBLE_FLOAT, Cons.cons(Stella.SYM_STELLA_IDENTITY, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_SHORT_INTEGER, Cons.cons(Stella.SYM_STELLA_IDENTITY, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SYM_STELLA_IDENTITY, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_UNSIGNED_SHORT_INTEGER, Cons.cons(Stella.SYM_STELLA_IDENTITY, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_UNSIGNED_LONG_INTEGER, Cons.cons(Stella.SYM_STELLA_IDENTITY, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))))))))))))))))))))));
      Stella.$SYMBOL_REGISTRY$ = HashTable.newHashTable();
      Stella.$SYMBOL_SET$ = List.newList();
      Stella.$CURRENTFILENAME$.setDefaultValue(null);
      Stella.$SPECIALVARIABLESTACK$.setDefaultValue(KeyValueList.newKeyValueList());
      Stella.$SPECIALSENABLEDp$.setDefaultValue(new Boolean(true));
      Stella.$NOFSPECIALSATLOOPENTRY$.setDefaultValue(new Integer(0));
      Stella.$TYPE_PREDICATE_TABLE$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_BOOLEAN, Cons.cons(Stella.SYM_STELLA_BOOLEANp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_BOOLEANp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SYM_STELLA_INTEGERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_INTEGERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SYM_STELLA_LONG_INTEGERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_LONG_INTEGERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SYM_STELLA_FLOATp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_FLOATp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING, Cons.cons(Stella.SYM_STELLA_STRINGp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_STRINGp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CHARACTER, Cons.cons(Stella.SYM_STELLA_CHARACTERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_CHARACTERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_WRAPPER, Cons.cons(Stella.SYM_STELLA_WRAPPERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_WRAPPERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_BOOLEAN_WRAPPER, Cons.cons(Stella.SYM_STELLA_BOOLEANp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_BOOLEANp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_INTEGER_WRAPPER, Cons.cons(Stella.SYM_STELLA_INTEGERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_INTEGERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_LONG_INTEGER_WRAPPER, Cons.cons(Stella.SYM_STELLA_LONG_INTEGERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_LONG_INTEGERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_FLOAT_WRAPPER, Cons.cons(Stella.SYM_STELLA_FLOATp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_FLOATp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STRING_WRAPPER, Cons.cons(Stella.SYM_STELLA_STRINGp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_STRINGp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CHARACTER_WRAPPER, Cons.cons(Stella.SYM_STELLA_CHARACTERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_CHARACTERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_VERBATIM_STRING_WRAPPER, Cons.cons(Stella.SYM_STELLA_VERBATIM_STRINGp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_VERBATIM_STRINGp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_SURROGATE, Cons.cons(Stella.SYM_STELLA_SURROGATEp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_SURROGATEp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_TYPE, Cons.cons(Stella.SYM_STELLA_TYPEp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_TYPEp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_SYMBOL, Cons.cons(Stella.SYM_STELLA_SYMBOLp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_SYMBOLp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_TRANSIENT_SYMBOL, Cons.cons(Stella.SYM_STELLA_TRANSIENT_SYMBOLp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_TRANSIENT_SYMBOLp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_KEYWORD, Cons.cons(Stella.SYM_STELLA_KEYWORDp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_KEYWORDp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CONS, Cons.cons(Stella.SYM_STELLA_CONSp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_CONSp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_CLASS, Cons.cons(Stella.SYM_STELLA_STELLA_CLASSp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_CLASSp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_STORAGE_SLOT, Cons.cons(Stella.SYM_STELLA_STORAGE_SLOTp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_STORAGE_SLOTp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_METHOD_SLOT, Cons.cons(Stella.SYM_STELLA_METHOD_SLOTp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_METHOD_SLOTp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_ANCHORED_TYPE_SPECIFIER, Cons.cons(Stella.SYM_STELLA_ANCHORED_TYPE_SPECIFIERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_ANCHORED_TYPE_SPECIFIERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SGT_STELLA_PARAMETRIC_TYPE_SPECIFIER, Cons.cons(Stella.SYM_STELLA_PARAMETRIC_TYPE_SPECIFIERp, Cons.cons(Stella.SYM_STELLA_SUBTYPE_OF_PARAMETRIC_TYPE_SPECIFIERp, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))))))))))));
      Stella.$NUMERIC_TYPE_HIERARCHY$ = List.list(Cons.cons(Stella.SGT_STELLA_INTEGER, Cons.cons(Stella.SGT_STELLA_LONG_INTEGER, Cons.cons(Stella.SGT_STELLA_FLOAT, Cons.cons(Stella.SGT_STELLA_NUMBER, Stella.NIL)))));
      Stella.$INLININGMETHODCALLp$.setDefaultValue(new Boolean(false));
      Stella.$MIXIN_IMPLEMENTATION_STYLE$ = Stella.KWD_SECOND_CLASS;
      Stella.$NATIVE_NAME_TABLE$ = HashTable.newHashTable();
      Stella.$EVALUATIONTREE$.setDefaultValue(null);
      Stella.$EVALUATIONPARENTTREE$.setDefaultValue(null);
    }
  }

  static void helpStartupWalk7() {
    {
      Stella.defineFunctionObject("PRINT-STELLA-FEATURES", "(DEFUN PRINT-STELLA-FEATURES () :DOCUMENTATION \"Print the list of enabled and disabled STELLA features.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "printStellaFeatures", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SET-STELLA-FEATURE", "(DEFUN SET-STELLA-FEATURE (|&REST| (FEATURES KEYWORD)) :DOCUMENTATION \"Enable all listed STELLA `features'.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "setStellaFeature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.stella.Cons", "setStellaFeatureEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("UNSET-STELLA-FEATURE", "(DEFUN UNSET-STELLA-FEATURE (|&REST| (FEATURES KEYWORD)) :DOCUMENTATION \"Disable all listed STELLA `features'.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "unsetStellaFeature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.stella.Cons", "unsetStellaFeatureEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("RESET-STELLA-FEATURES", "(DEFUN RESET-STELLA-FEATURES () :DOCUMENTATION \"Reset STELLA features to their default settings.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "resetStellaFeatures", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("ENABLED-STELLA-FEATURE?", "(DEFUN (ENABLED-STELLA-FEATURE? BOOLEAN) ((FEATURE KEYWORD)) :DOCUMENTATION \"Return true if the STELLA `feature' is currently enabled.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (MEMB? *CURRENT-STELLA-FEATURES* FEATURE)))", Native.find_java_method("edu.isi.stella.Keyword", "enabledStellaFeatureP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("DISABLED-STELLA-FEATURE?", "(DEFUN (DISABLED-STELLA-FEATURE? BOOLEAN) ((FEATURE KEYWORD)) :DOCUMENTATION \"Return true if the STELLA `feature' is currently disabled.\" :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (NOT (MEMB? *CURRENT-STELLA-FEATURES* FEATURE))))", Native.find_java_method("edu.isi.stella.Keyword", "disabledStellaFeatureP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("TRACE-IF", "(DEFUN TRACE-IF ((KEYWORD OBJECT) |&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"If `keyword' is a trace keyword that has been enabled with `add-trace'\nprint all the elements in `body' to standard output.  Otherwise, do nothing.\n`keyword' can also be a list of keywords in which case printing is done if\none or more of them are trace enabled.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "traceIf", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("TRACE-KEYWORD?", "(DEFUN (TRACE-KEYWORD? BOOLEAN) ((KEYWORD OBJECT)) :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "traceKeywordP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("ADD-TRACE", "(DEFUN (ADD-TRACE LIST) (|&REST| (KEYWORDS GENERALIZED-SYMBOL)) :COMMAND? TRUE :PUBLIC? TRUE :EVALUATE-ARGUMENTS? FALSE :DOCUMENTATION \"Enable trace messages identified by any of the listed `keywords'.  After\ncalling (`add-trace' <keyword>) code guarded by (`trace-if' <keyword> ...)\nwill be executed when it is encountered.\")", Native.find_java_method("edu.isi.stella.Stella", "addTrace", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.stella.Cons", "addTraceEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("DROP-TRACE", "(DEFUN (DROP-TRACE LIST) (|&REST| (KEYWORDS GENERALIZED-SYMBOL)) :COMMAND? TRUE :PUBLIC? TRUE :EVALUATE-ARGUMENTS? FALSE :DOCUMENTATION \"Disable trace messages identified by any of the listed `keywords'.  After\ncalling (`drop-trace' <keyword>) code guarded by (`trace-if' <keyword> ...)\nwill not be executed when it is encountered.\")", Native.find_java_method("edu.isi.stella.Stella", "dropTrace", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), Native.find_java_method("edu.isi.stella.Cons", "dropTraceEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("CLEAR-TRACE", "(DEFUN CLEAR-TRACE () :COMMAND? TRUE :PUBLIC? TRUE :DOCUMENTATION \"Disable all tracing previously enabled with `add-trace'.\")", Native.find_java_method("edu.isi.stella.Stella", "clearTrace", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SET-OPTIMIZATION-LEVELS", "(DEFUN SET-OPTIMIZATION-LEVELS ((SAFETY INTEGER) (DEBUG INTEGER) (SPEED INTEGER) (SPACE INTEGER)) :DOCUMENTATION \"Set optimization levels for the qualities `safety', `debug',\n`speed', and `space'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "setOptimizationLevels", new java.lang.Class [] {java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("PRESERVE-TAIL-MERGE-OPTIMIZABILITY?", "(DEFUN (PRESERVE-TAIL-MERGE-OPTIMIZABILITY? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "preserveTailMergeOptimizabilityP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("METHOD-CALL-INLINING-ENABLED?", "(DEFUN (METHOD-CALL-INLINING-ENABLED? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "methodCallInliningEnabledP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("OPTIMIZE-BOOLEAN-TESTS?", "(DEFUN (OPTIMIZE-BOOLEAN-TESTS? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "optimizeBooleanTestsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("CHECK-FOR-ILLEGAL-RETURN?", "(DEFUN (CHECK-FOR-ILLEGAL-RETURN? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "checkForIllegalReturnP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SUPPORT-UNEXEC?", "(DEFUN (SUPPORT-UNEXEC? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "supportUnexecP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("NAME-QUOTED-TREE", "(DEFUN (NAME-QUOTED-TREE STRING) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "nameQuotedTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-QUOTED-TREE", "(DEFUN (GET-QUOTED-TREE CONS) ((TREE-NAME STRING) (MODULENAME STRING)) :DOCUMENTATION \"Return the quoted tree with name `tree-name'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getQuotedTree", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
      Surrogate.defineInlineMethodCode(Stella.SGT_STELLA_TRANSLATION_UNIT, Stella.SYM_STELLA_HOME_MODULE, MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.TranslationUnit", "homeModule", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("CLEAR-TRANSLATION-UNIT", "(DEFUN CLEAR-TRANSLATION-UNIT ((SELF TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "clearTranslationUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("PRINT-TRANSLATION-UNIT", "(DEFUN PRINT-TRANSLATION-UNIT ((SELF TRANSLATION-UNIT) (STREAM NATIVE-OUTPUT-STREAM)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "printTranslationUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit"), Native.find_java_class("edu.isi.stella.javalib.NativeOutputStream")}), null);
      Stella.defineFunctionObject("USE-HARDCODED-SYMBOLS?", "(DEFUN (USE-HARDCODED-SYMBOLS? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "useHardcodedSymbolsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATOR-OUTPUT-LANGUAGE", "(DEFUN (TRANSLATOR-OUTPUT-LANGUAGE KEYWORD) () :GLOBALLY-INLINE? TRUE (RETURN *TRANSLATOROUTPUTLANGUAGE*))", Native.find_java_method("edu.isi.stella.Stella", "translatorOutputLanguage", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATOR-OUTPUT-LANGUAGE-NAME", "(DEFUN (TRANSLATOR-OUTPUT-LANGUAGE-NAME STRING) ())", Native.find_java_method("edu.isi.stella.Stella", "translatorOutputLanguageName", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SET-TRANSLATOR-OUTPUT-LANGUAGE", "(DEFUN (SET-TRANSLATOR-OUTPUT-LANGUAGE KEYWORD) ((NEW-LANGUAGE KEYWORD)) :DOCUMENTATION \"Set output language to `new-language'.  Return previous language.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Keyword", "setTranslatorOutputLanguage", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("TRANSLATE-TO-COMMON-LISP?", "(DEFUN (TRANSLATE-TO-COMMON-LISP? BOOLEAN) () :DOCUMENTATION \"Return `true' if current output language is Common-Lisp.\")", Native.find_java_method("edu.isi.stella.Stella", "translateToCommonLispP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATE-TO-CPP?", "(DEFUN (TRANSLATE-TO-CPP? BOOLEAN) () :DOCUMENTATION \"Return `true' if current output language is C++\")", Native.find_java_method("edu.isi.stella.Stella", "translateToCppP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATE-TO-JAVA?", "(DEFUN (TRANSLATE-TO-JAVA? BOOLEAN) () :DOCUMENTATION \"Return `true' if current output language is Java\")", Native.find_java_method("edu.isi.stella.Stella", "translateToJavaP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATE-TO-SINGLE-INHERITANCE-LANGUAGE?", "(DEFUN (TRANSLATE-TO-SINGLE-INHERITANCE-LANGUAGE? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "translateToSingleInheritanceLanguageP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TOGGLE-OUTPUT-LANGUAGE", "(DEFUN (TOGGLE-OUTPUT-LANGUAGE KEYWORD) () :DOCUMENTATION \"Switch between Common Lisp and C++ as output languages.\")", Native.find_java_method("edu.isi.stella.Stella", "toggleOutputLanguage", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("USE-BOOTSTRAP-TRANSLATOR?", "(DEFUN (USE-BOOTSTRAP-TRANSLATOR? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "useBootstrapTranslatorP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TOGGLE-TRANSLATORS", "(DEFUN (TOGGLE-TRANSLATORS KEYWORD) ())", Native.find_java_method("edu.isi.stella.Stella", "toggleTranslators", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("DECLARATION-OPERATOR?", "(DEFUN (DECLARATION-OPERATOR? BOOLEAN) ((OPERATOR SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "declarationOperatorP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("DECLARATION-TREE?", "(DEFUN (DECLARATION-TREE? BOOLEAN) ((TREE CONS)) :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "declarationTreeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("CREATE-ANNOTATION", "(DEFUN (CREATE-ANNOTATION STRING) ((TOP-LEVEL-TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "createAnnotation", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-TOP-LEVEL-TREE", "(DEFUN WALK-TOP-LEVEL-TREE ((TREE CONS) (CREATEANNOTATION? BOOLEAN)) :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "walkTopLevelTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("WALK-TOP-LEVEL-EXPRESSION", "(DEFUN (WALK-TOP-LEVEL-EXPRESSION OBJECT) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkTopLevelExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-PHASE-ONE-UNIT", "(DEFUN WALK-PHASE-ONE-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkPhaseOneUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("WALK-AUXILIARY-TREE", "(DEFUN WALK-AUXILIARY-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkAuxiliaryTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("HELP-WALK-AUXILIARY-TREE", "(DEFUN (HELP-WALK-AUXILIARY-TREE TRANSLATION-UNIT) ((TREE CONS) (FINALIZE? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Cons", "helpWalkAuxiliaryTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("WALK-ALL-PHASE-ONE-UNITS", "(DEFUN WALK-ALL-PHASE-ONE-UNITS ())", Native.find_java_method("edu.isi.stella.Stella", "walkAllPhaseOneUnits", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATE-ALL-UNITS", "(DEFUN TRANSLATE-ALL-UNITS ())", Native.find_java_method("edu.isi.stella.Stella", "translateAllUnits", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("UNIT-INCLUDED-IN-OTHER-UNITS?", "(DEFUN (UNIT-INCLUDED-IN-OTHER-UNITS? BOOLEAN) ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "unitIncludedInOtherUnitsP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("COMBINE-TRANSLATED-TREES", "(DEFUN (COMBINE-TRANSLATED-TREES CONS) ())", Native.find_java_method("edu.isi.stella.Stella", "combineTranslatedTrees", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATE-WALKED-TREE", "(DEFUN (TRANSLATE-WALKED-TREE OBJECT) ((CODETREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "translateWalkedTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("INCREMENTALLY-TRANSLATE", "(DEFUN (INCREMENTALLY-TRANSLATE OBJECT) ((TREE OBJECT)) :DOCUMENTATION \"Translate a single Stella expression `tree' and return\nthe result.  For C++ and Java print the translation to standard output and\nreturn NIL instead.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "incrementallyTranslate", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("RESET-TRANSLATION-ERRORS", "(DEFUN RESET-TRANSLATION-ERRORS ())", Native.find_java_method("edu.isi.stella.Stella", "resetTranslationErrors", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SIGNAL-TRANSLATION-ERROR", "(DEFUN SIGNAL-TRANSLATION-ERROR () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "signalTranslationError", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SIGNAL-TRANSLATION-WARNING", "(DEFUN SIGNAL-TRANSLATION-WARNING () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "signalTranslationWarning", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SIGNAL-TRANSLATION-NOTE", "(DEFUN SIGNAL-TRANSLATION-NOTE () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "signalTranslationNote", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("IGNORE-TRANSLATION-ERRORS?", "(DEFUN (IGNORE-TRANSLATION-ERRORS? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "ignoreTranslationErrorsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("TRANSLATION-ERRORS?", "(DEFUN (TRANSLATION-ERRORS? BOOLEAN) () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "translationErrorsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SUMMARIZE-TRANSLATION-ERRORS", "(DEFUN SUMMARIZE-TRANSLATION-ERRORS ())", Native.find_java_method("edu.isi.stella.Stella", "summarizeTranslationErrors", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("PRINT-ERROR-CONTEXT", "(DEFUN PRINT-ERROR-CONTEXT ((PREFIX STRING) (STREAM OUTPUT-STREAM)) :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "printErrorContext", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.OutputStream")}), null);
      Stella.defineFunctionObject("LOG-FUNCTION-CALL?", "(DEFUN (LOG-FUNCTION-CALL? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "logFunctionCallP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("WRAP-BODY-WITH-LOG-FUNCTION-CALL-TREE", "(DEFUN (WRAP-BODY-WITH-LOG-FUNCTION-CALL-TREE CONS) ((METHOD METHOD-SLOT) (BODY CONS)))", Native.find_java_method("edu.isi.stella.MethodSlot", "wrapBodyWithLogFunctionCallTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("LOG-FUNCTION-CALL", "(DEFUN LOG-FUNCTION-CALL ((NAME STRING)))", Native.find_java_method("edu.isi.stella.Stella", "logFunctionCall", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("START-FUNCTION-CALL-LOGGING", "(DEFUN START-FUNCTION-CALL-LOGGING ((FILENAME STRING)) :DOCUMENTATION \"Start function call logging to `fileName'.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "startFunctionCallLogging", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), Native.find_java_method("edu.isi.stella.Cons", "startFunctionCallLoggingEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("STOP-FUNCTION-CALL-LOGGING", "(DEFUN STOP-FUNCTION-CALL-LOGGING () :DOCUMENTATION \"Stop function call logging and close the current log file.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "stopFunctionCallLogging", new java.lang.Class [] {}), null);
    }
  }

  static void helpStartupWalk8() {
    {
      Stella.defineFunctionObject("SET-CALL-LOG-BREAK-POINT", "(DEFUN SET-CALL-LOG-BREAK-POINT ((COUNT INTEGER)) :DOCUMENTATION \"Set a call log break point to `count'.  Execution will be\ninterrupted right at the entry of the `count'th logged function call.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "setCallLogBreakPoint", new java.lang.Class [] {java.lang.Integer.TYPE}), Native.find_java_method("edu.isi.stella.Cons", "setCallLogBreakPointEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("BREAK-PROGRAM", "(DEFUN BREAK-PROGRAM ((MESSAGE STRING)) :DOCUMENTATION \"Interrupt the program and print `message'.  Continue after\nconfirmation with the user.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "breakProgram", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), Native.find_java_method("edu.isi.stella.Cons", "breakProgramEvaluatorWrapper", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}));
      Stella.defineFunctionObject("TERMINATE-PROGRAM", "(DEFUN TERMINATE-PROGRAM () :DOCUMENTATION \"Terminate and exit the program with normal exit code.\" :PUBLIC? TRUE :COMMAND? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "terminateProgram", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("PO", "(DEFUN PO ((THING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "po", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("VARIABLE-EQL?", "(DEFUN (VARIABLE-EQL? BOOLEAN) ((VAR1 SYMBOL) (VAR2 SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "variableEqlP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("LOOKUP-VARIABLE-TABLE", "(DEFUN (LOOKUP-VARIABLE-TABLE (LIKE (ANY-VALUE SELF))) ((SELF (KEY-VALUE-LIST OF SYMBOL OBJECT)) (VARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.KeyValueList", "lookupVariableTable", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KeyValueList"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("INSERT-AT-VARIABLE-TABLE", "(DEFUN INSERT-AT-VARIABLE-TABLE ((SELF (KEY-VALUE-LIST OF SYMBOL OBJECT)) (VARIABLE SYMBOL) (VALUE OBJECT)))", Native.find_java_method("edu.isi.stella.KeyValueList", "insertAtVariableTable", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.KeyValueList"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("PUSH-VARIABLE-BINDING", "(DEFUN PUSH-VARIABLE-BINDING ((VARIABLE SYMBOL) (TYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Symbol", "pushVariableBinding", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("POP-VARIABLE-BINDING", "(DEFUN POP-VARIABLE-BINDING ())", Native.find_java_method("edu.isi.stella.Stella", "popVariableBinding", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("LOOKUP-VARIABLE-TYPE", "(DEFUN (LOOKUP-VARIABLE-TYPE TYPE-SPEC) ((VARIABLENAME SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "lookupVariableType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("SET-LOCAL-VARIABLE-INFO", "(DEFUN SET-LOCAL-VARIABLE-INFO ((VARIABLE SYMBOL) (KEY KEYWORD) (INFO OBJECT)))", Native.find_java_method("edu.isi.stella.Symbol", "setLocalVariableInfo", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("GET-LOCAL-VARIABLE-INFO", "(DEFUN (GET-LOCAL-VARIABLE-INFO OBJECT) ((VARIABLE SYMBOL) (KEY KEYWORD)))", Native.find_java_method("edu.isi.stella.Symbol", "getLocalVariableInfo", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("REGISTER-REFERENCE-TO-GLOBAL-VARIABLE", "(DEFUN REGISTER-REFERENCE-TO-GLOBAL-VARIABLE ((VARIABLENAME SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "registerReferenceToGlobalVariable", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("LOCAL-GENSYM", "(DEFUN (LOCAL-GENSYM SYMBOL) ((PREFIX STRING)))", Native.find_java_method("edu.isi.stella.Stella", "localGensym", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("METHOD-GENSYM", "(DEFUN (METHOD-GENSYM SYMBOL) ((PREFIX STRING)))", Native.find_java_method("edu.isi.stella.Stella", "methodGensym", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("YIELD-LOCAL-VARIABLE-ALIAS", "(DEFUN (YIELD-LOCAL-VARIABLE-ALIAS SYMBOL) ((VARIABLE SYMBOL) (LEVEL INTEGER)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldLocalVariableAlias", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("RENAME-SHADOWING-LOCAL-VARIABLES?", "(DEFUN (RENAME-SHADOWING-LOCAL-VARIABLES? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN (EQL? (TRANSLATOR-OUTPUT-LANGUAGE) :JAVA)))", Native.find_java_method("edu.isi.stella.Stella", "renameShadowingLocalVariablesP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("MAYBE-RENAME-LOCAL-VARIABLE", "(DEFUN MAYBE-RENAME-LOCAL-VARIABLE ((VARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "maybeRenameLocalVariable", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("TRUE-VARIABLE-NAME", "(DEFUN (TRUE-VARIABLE-NAME SYMBOL) ((VARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "trueVariableName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("SUPPRESS-WARNINGS?", "(DEFUN (SUPPRESS-WARNINGS? BOOLEAN) () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "suppressWarningsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("BAD-ARGUMENT-RANGE?", "(DEFUN (BAD-ARGUMENT-RANGE? BOOLEAN) ((TREE CONS) (MINARITY INTEGER) (MAXARITY INTEGER)))", Native.find_java_method("edu.isi.stella.Cons", "badArgumentRangeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("BAD-ARGUMENT-COUNT?", "(DEFUN (BAD-ARGUMENT-COUNT? BOOLEAN) ((TREE CONS) (ARITY INTEGER)))", Native.find_java_method("edu.isi.stella.Cons", "badArgumentCountP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("YIELD-ILLEGAL-STATEMENT-TREE", "(DEFUN (YIELD-ILLEGAL-STATEMENT-TREE CONS) ())", Native.find_java_method("edu.isi.stella.Stella", "yieldIllegalStatementTree", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("YIELD-ILLEGAL-EXPRESSION-TREE", "(DEFUN (YIELD-ILLEGAL-EXPRESSION-TREE OBJECT) ())", Native.find_java_method("edu.isi.stella.Stella", "yieldIllegalExpressionTree", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-DONT-CALL-ME-TREE", "(DEFUN (WALK-DONT-CALL-ME-TREE CONS TYPE-SPEC) ((TREE OBJECT) (RETURNTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkDontCallMeTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("ILLEGAL-TREE?", "(DEFUN (ILLEGAL-TREE? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "illegalTreeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("NATIVE-CLASS-METHOD-INLINING?", "(DEFUN (NATIVE-CLASS-METHOD-INLINING? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "nativeClassMethodInliningP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("PROGNIFY", "(DEFUN (PROGNIFY OBJECT) ((TREES CONS)))", Native.find_java_method("edu.isi.stella.Cons", "prognify", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("OPTIMIZE-PROGN", "(DEFUN (OPTIMIZE-PROGN OBJECT) ((PROGN-TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "optimizeProgn", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("TREE-TO-TREES", "(DEFUN (TREE-TO-TREES CONS) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "treeToTrees", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WRAPPED-TYPE-TO-TYPE", "(DEFUN (WRAPPED-TYPE-TO-TYPE TYPE) ((SELF TYPE)) :DOCUMENTATION \"Return the unwrapped type for the wrapped type `self',\nor `self' if it is not a wrapped type.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Surrogate", "wrappedTypeToType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate")}), null);
      Stella.defineFunctionObject("WRAPPER-VALUE-TYPE", "(DEFUN (WRAPPER-VALUE-TYPE TYPE) ((SELF WRAPPER)) :DOCUMENTATION \"Return the type of the value stored in the wrapper `self'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Wrapper", "wrapperValueType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Wrapper")}), null);
      Stella.defineMethodObject("(DEFMETHOD (TYPE-TO-WRAPPED-TYPE TYPE) ((SELF TYPE)) :DOCUMENTATION \"Return the wrapped type for the type `self',\nor 'self' if it is not a bare literal type.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Surrogate", "typeToWrappedType", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("LOOKUP-COERSION-METHOD", "(DEFUN (LOOKUP-COERSION-METHOD OBJECT) ((SOURCETYPE TYPE) (TARGETTYPE TYPE) (EXPRESSION OBJECT)))", Native.find_java_method("edu.isi.stella.Surrogate", "lookupCoersionMethod", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("APPLY-COERCION-METHOD", "(DEFUN (APPLY-COERCION-METHOD OBJECT TYPE-SPEC) ((EXPRESSION OBJECT) (SOURCETYPE TYPE) (TARGETTYPE TYPE) (COERCIONMETHOD OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "applyCoercionMethod", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("TRANSLATING-CODE?", "(DEFUN (TRANSLATING-CODE? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "translatingCodeP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("VERIFY-TYPE", "(DEFUN (VERIFY-TYPE TYPE) ((SELF TYPE)))", Native.find_java_method("edu.isi.stella.Surrogate", "verifyType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate")}), null);
      Stella.defineFunctionObject("SAFE-SUBTYPE-OF?", "(DEFUN (SAFE-SUBTYPE-OF? BOOLEAN) ((SUBTYPE TYPE) (SUPERTYPE TYPE)))", Native.find_java_method("edu.isi.stella.Surrogate", "safeSubtypeOfP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate")}), null);
      Stella.defineFunctionObject("WARN-ABOUT-UNKNOWN-SOURCE-TYPE", "(DEFUN WARN-ABOUT-UNKNOWN-SOURCE-TYPE ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "warnAboutUnknownSourceType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("COERCE-A-TREE", "(DEFUN (COERCE-A-TREE OBJECT TYPE-SPEC) ((TREE OBJECT) (SOURCETYPE TYPE-SPEC) (TARGETTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Stella_Object", "coerceATree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("HELP-COERCE-A-TREE", "(DEFUN (HELP-COERCE-A-TREE OBJECT TYPE-SPEC BOOLEAN) ((TREE OBJECT) (SOURCETYPE TYPE-SPEC) (TARGETTYPE TYPE-SPEC) (TESTONLY? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella_Object", "helpCoerceATree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("COERCIBLE?", "(DEFUN (COERCIBLE? BOOLEAN) ((TREE OBJECT) (SOURCETYPE TYPE-SPEC) (TARGETTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Stella_Object", "coercibleP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("WALKING-EXPRESSION?", "(DEFUN (WALKING-EXPRESSION? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "walkingExpressionP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-EXPRESSION-TREE", "(DEFUN (WALK-EXPRESSION-TREE OBJECT TYPE-SPEC) ((EXPTREE OBJECT) (TARGETTYPE TYPE-SPEC) (OPERATORNAME SYMBOL) (VRLETISOK? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkExpressionTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Symbol"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("COMPUTE-EXPRESSION-TYPE", "(DEFUN (COMPUTE-EXPRESSION-TYPE TYPE-SPEC) ((EXPRESSION OBJECT) (WRAP? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella_Object", "computeExpressionType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("WALK-WITHOUT-TYPE-TREE", "(DEFUN (WALK-WITHOUT-TYPE-TREE OBJECT) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkWithoutTypeTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-LIST-OF-TREES", "(DEFUN (WALK-LIST-OF-TREES CONS) ((TREES CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkListOfTrees", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-LIST-OF-STATEMENTS", "(DEFUN (WALK-LIST-OF-STATEMENTS CONS) ((TREES CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkListOfStatements", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-STATEMENT", "(DEFUN (WALK-STATEMENT OBJECT) ((TREE OBJECT) (WARNONATOM? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkStatement", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("ELIMINATE-VRLET-STATEMENT", "(DEFUN (ELIMINATE-VRLET-STATEMENT CONS) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "eliminateVrletStatement", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("SYS-TREE", "(DEFUN (SYS-TREE CONS TYPE-SPEC) ((TREE OBJECT) (TYPESPEC TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Stella_Object", "sysTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALKED-EXPRESSION-TYPE", "(DEFUN (WALKED-EXPRESSION-TYPE TYPE-SPEC) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkedExpressionType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALKED-EXPRESSION-EXPRESSION", "(DEFUN (WALKED-EXPRESSION-EXPRESSION OBJECT) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkedExpressionExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("NEED-IDENTICAL-METHOD-SIGNATURES?", "(DEFUN (NEED-IDENTICAL-METHOD-SIGNATURES? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "needIdenticalMethodSignaturesP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("COMPUTE-MOST-GENERAL-RETURN-TYPE", "(DEFUN (COMPUTE-MOST-GENERAL-RETURN-TYPE TYPE-SPEC) ((METHOD METHOD-SLOT) (RETURNTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.MethodSlot", "computeMostGeneralReturnType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("COMPUTE-REAL-SLOT-TYPE", "(DEFUN (COMPUTE-REAL-SLOT-TYPE TYPE-SPEC) ((SLOT STORAGE-SLOT) (FIRSTARGTYPE TYPE-SPEC) (RETURNTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StorageSlot", "computeRealSlotType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("SYS-TREE-IF-NEEDED", "(DEFUN (SYS-TREE-IF-NEEDED OBJECT TYPE-SPEC) ((SLOT SLOT) (TREE OBJECT) (FIRSTARGTYPE TYPE-SPEC) (RETURNTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Slot", "sysTreeIfNeeded", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Slot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("TARGET-LANGUAGE-TYPE", "(DEFUN (TARGET-LANGUAGE-TYPE TYPE) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "targetLanguageType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("SET-TARGET-LANGUAGE-TYPE", "(DEFUN (SET-TARGET-LANGUAGE-TYPE CONS TYPE-SPEC) ((SYSTREE CONS) (TYPE TYPE)))", Native.find_java_method("edu.isi.stella.Cons", "setTargetLanguageType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-A-TREE", "(DEFUN (WALK-A-TREE OBJECT TYPE-SPEC) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkATree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[Ljava.lang.Object;")}), null);
    }
  }

  static void helpStartupWalk9() {
    {
      Stella.defineFunctionObject("HELP-WALK-A-TREE", "(DEFUN (HELP-WALK-A-TREE OBJECT TYPE-SPEC) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "helpWalkATree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-A-CONS-TREE", "(DEFUN (WALK-A-CONS-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkAConsTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("INCREMENTAL-TRANSLATION?", "(DEFUN (INCREMENTAL-TRANSLATION? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "incrementalTranslationP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("CONSTRUCT-SYMBOL-CONSTANT-NAME", "(DEFUN (CONSTRUCT-SYMBOL-CONSTANT-NAME STRING) ((SYMBOL GENERALIZED-SYMBOL)))", Native.find_java_method("edu.isi.stella.GeneralizedSymbol", "constructSymbolConstantName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.GeneralizedSymbol")}), null);
      Stella.defineFunctionObject("YIELD-SYMBOL-CONSTANT-NAME", "(DEFUN (YIELD-SYMBOL-CONSTANT-NAME SYMBOL) ((SYMBOL GENERALIZED-SYMBOL)))", Native.find_java_method("edu.isi.stella.GeneralizedSymbol", "yieldSymbolConstantName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.GeneralizedSymbol")}), null);
      Stella.defineFunctionObject("CREATE-STARTUP-SYMBOL", "(DEFUN (CREATE-STARTUP-SYMBOL SYMBOL) ((SYMBOL GENERALIZED-SYMBOL)))", Native.find_java_method("edu.isi.stella.GeneralizedSymbol", "createStartupSymbol", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.GeneralizedSymbol")}), null);
      Stella.defineFunctionObject("REGISTER-SYMBOL", "(DEFUN (REGISTER-SYMBOL GENERALIZED-SYMBOL) ((SYMBOL GENERALIZED-SYMBOL)))", Native.find_java_method("edu.isi.stella.GeneralizedSymbol", "registerSymbol", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.GeneralizedSymbol")}), null);
      Stella.defineFunctionObject("CLEAR-SYMBOL-REGISTRY", "(DEFUN CLEAR-SYMBOL-REGISTRY ())", Native.find_java_method("edu.isi.stella.Stella", "clearSymbolRegistry", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("YIELD-HARDCODED-INTERN-REGISTERED-SYMBOLS-TREE", "(DEFUN (YIELD-HARDCODED-INTERN-REGISTERED-SYMBOLS-TREE CONS) ())", Native.find_java_method("edu.isi.stella.Stella", "yieldHardcodedInternRegisteredSymbolsTree", new java.lang.Class [] {}), null);
      Stella.defineMethodObject("(DEFMETHOD (WALK-ATOMIC-TREE OBJECT TYPE-SPEC) ((SELF OBJECT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Stella_Object", "walkAtomicTree", new java.lang.Class [] {Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineMethodObject("(DEFMETHOD (WALK-ATOMIC-TREE OBJECT TYPE-SPEC) ((SELF WRAPPER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Wrapper", "walkAtomicTree", new java.lang.Class [] {Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineFunctionObject("LOOKUP-CONSTANT-SYMBOL", "(DEFUN (LOOKUP-CONSTANT-SYMBOL TYPE) ((SELF SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "lookupConstantSymbol", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("CONSTANT-SYMBOL?", "(DEFUN (CONSTANT-SYMBOL? BOOLEAN) ((SYMBOL SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "constantSymbolP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("WALK-CONSTANT-SYMBOL", "(DEFUN (WALK-CONSTANT-SYMBOL SYMBOL TYPE) ((SELF SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "walkConstantSymbol", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineMethodObject("(DEFMETHOD (WALK-ATOMIC-TREE OBJECT TYPE-SPEC) ((SELF SYMBOL)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Symbol", "walkAtomicTree", new java.lang.Class [] {Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineMethodObject("(DEFMETHOD (WALK-ATOMIC-TREE OBJECT TYPE-SPEC) ((SELF KEYWORD)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Keyword", "walkAtomicTree", new java.lang.Class [] {Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineMethodObject("(DEFMETHOD (WALK-ATOMIC-TREE OBJECT TYPE-SPEC) ((SELF SURROGATE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Surrogate", "walkAtomicTree", new java.lang.Class [] {Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineFunctionObject("ATOMIC-EXPRESSION?", "(DEFUN (ATOMIC-EXPRESSION? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "atomicExpressionP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("VARIABLE-EXPRESSION?", "(DEFUN (VARIABLE-EXPRESSION? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "variableExpressionP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("VRLET-EXPRESSION?", "(DEFUN (VRLET-EXPRESSION? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "vrletExpressionP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("PROCEDURAL-EXPRESSION?", "(DEFUN (PROCEDURAL-EXPRESSION? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "proceduralExpressionP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("SUBSTITUTE-ONCE", "(DEFUN (SUBSTITUTE-ONCE BOOLEAN) ((EXPRESSION OBJECT) (NEWTREE OBJECT) (OLDTREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "substituteOnce", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("TRANSFORM-VRLET-EXPRESSION", "(DEFUN (TRANSFORM-VRLET-EXPRESSION CONS TYPE-SPEC) ((STATEMENT CONS) (VREXPRESSION CONS)))", Native.find_java_method("edu.isi.stella.Cons", "transformVrletExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("HELP-TRANSFORM-BOOLEAN-PROCEDURAL-EXPRESSION", "(DEFUN (HELP-TRANSFORM-BOOLEAN-PROCEDURAL-EXPRESSION CONS) ((EXPRESSION OBJECT) (TESTVARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.Stella_Object", "helpTransformBooleanProceduralExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("TRANSFORM-BOOLEAN-PROCEDURAL-EXPRESSION", "(DEFUN (TRANSFORM-BOOLEAN-PROCEDURAL-EXPRESSION CONS TYPE-SPEC) ((STATEMENT CONS) (VREXPRESSION CONS)))", Native.find_java_method("edu.isi.stella.Cons", "transformBooleanProceduralExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("PERCOLATE-OUT-BOOLEAN-VRLET-EXPRESSIONS", "(DEFUN (PERCOLATE-OUT-BOOLEAN-VRLET-EXPRESSIONS CONS) ((BOOLEANEXPRESSION CONS)))", Native.find_java_method("edu.isi.stella.Cons", "percolateOutBooleanVrletExpressions", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("TRANSFORM-PROCEDURAL-EXPRESSION", "(DEFUN (TRANSFORM-PROCEDURAL-EXPRESSION CONS TYPE-SPEC) ((STATEMENT CONS) (VREXPRESSION CONS) (TYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Cons", "transformProceduralExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("PERCOLATE-OUT-VRLET-EXPRESSION", "(DEFUN (PERCOLATE-OUT-VRLET-EXPRESSION CONS TYPE-SPEC) ((STATEMENT CONS) (VREXPRESSION CONS) (TYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Cons", "percolateOutVrletExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-SETQ-TREE", "(DEFUN (WALK-SETQ-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSetqTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-FIXED-SLOT-VALUE-SETTER-TREE", "(DEFUN (YIELD-FIXED-SLOT-VALUE-SETTER-TREE CONS) ((SLOT SLOT) (OBJECTREF OBJECT) (VALUETREE OBJECT)))", Native.find_java_method("edu.isi.stella.Slot", "yieldFixedSlotValueSetterTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Slot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-SETF-TREE", "(DEFUN (WALK-SETF-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSetfTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-DYNAMIC-SLOT-VALUE-TREE", "(DEFUN (YIELD-DYNAMIC-SLOT-VALUE-TREE CONS) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (RETURNTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldDynamicSlotValueTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-DYNAMIC-SLOT-VALUE-SETTER-TREE", "(DEFUN (YIELD-DYNAMIC-SLOT-VALUE-SETTER-TREE CONS) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (VALUEREF OBJECT) (RETURNTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldDynamicSlotValueSetterTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-NATIVE-SLOT-VALUE-TREE", "(DEFUN (YIELD-NATIVE-SLOT-VALUE-TREE CONS) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (OBJECTTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldNativeSlotValueTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-CONTEXT-SENSITIVE-SLOT-VALUE-TREE", "(DEFUN (YIELD-CONTEXT-SENSITIVE-SLOT-VALUE-TREE CONS TYPE-SPEC) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (RETURNTYPE TYPE-SPEC) (CSOPTIONS CONS)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldContextSensitiveSlotValueTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-SLOT-VALUE-TREE", "(DEFUN (YIELD-SLOT-VALUE-TREE CONS TYPE-SPEC) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (OBJECTTYPE TYPE-SPEC) (RETURNTYPE TYPE-SPEC) (CSOPTIONS CONS)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldSlotValueTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-SLOT-VALUE-TREE", "(DEFUN (WALK-SLOT-VALUE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSlotValueTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-NATIVE-SLOT-VALUE-SETTER-TREE", "(DEFUN (YIELD-NATIVE-SLOT-VALUE-SETTER-TREE CONS) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (OBJECTTYPE TYPE-SPEC) (VALUEREF OBJECT)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldNativeSlotValueSetterTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("YIELD-CONTEXT-SENSITIVE-SLOT-VALUE-SETTER-TREE", "(DEFUN (YIELD-CONTEXT-SENSITIVE-SLOT-VALUE-SETTER-TREE CONS TYPE-SPEC) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (VALUEREF OBJECT) (RETURNTYPE TYPE-SPEC) (CSOPTIONS CONS)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldContextSensitiveSlotValueSetterTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-SLOT-VALUE-SETTER-TREE", "(DEFUN (YIELD-SLOT-VALUE-SETTER-TREE CONS TYPE-SPEC) ((SLOT STORAGE-SLOT) (OBJECTREF OBJECT) (OBJECTTYPE TYPE-SPEC) (VALUEREF OBJECT) (RETURNTYPE TYPE-SPEC) (CSOPTIONS CONS)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldSlotValueSetterTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-SLOT-VALUE-SETTER-TREE", "(DEFUN (WALK-SLOT-VALUE-SETTER-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSlotValueSetterTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-AREF-TREE", "(DEFUN (WALK-AREF-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkArefTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("SAFE-YIELD-TYPE-SPECIFIER", "(DEFUN (SAFE-YIELD-TYPE-SPECIFIER TYPE-SPEC) ((TYPETREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "safeYieldTypeSpecifier", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-A-DECLARATION", "(DEFUN (WALK-A-DECLARATION CONS) ((VARIABLE SYMBOL) (TYPETREE OBJECT) (VALUE OBJECT) (INPUTPARAMETER? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Symbol", "walkADeclaration", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("WALK-VARIABLE-DECLARATIONS", "(DEFUN (WALK-VARIABLE-DECLARATIONS CONS) ((DECLARATIONS CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkVariableDeclarations", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("TRANSFORM-LET-WITH-PROCEDURAL-EXPRESSION", "(DEFUN (TRANSFORM-LET-WITH-PROCEDURAL-EXPRESSION CONS) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "transformLetWithProceduralExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("POP-LOCAL-VARIABLE-BINDINGS", "(DEFUN POP-LOCAL-VARIABLE-BINDINGS ((DECLARATIONS CONS)))", Native.find_java_method("edu.isi.stella.Cons", "popLocalVariableBindings", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-LET-TREE", "(DEFUN (WALK-LET-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkLetTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("SPECIAL-IMPLEMENTATION-STYLE", "(DEFUN (SPECIAL-IMPLEMENTATION-STYLE KEYWORD) ())", Native.find_java_method("edu.isi.stella.Stella", "specialImplementationStyle", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("PUSH-SPECIAL", "(DEFUN PUSH-SPECIAL ((VARIABLE SYMBOL) (OLDVALUEVARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "pushSpecial", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("POP-SPECIAL", "(DEFUN POP-SPECIAL ())", Native.find_java_method("edu.isi.stella.Stella", "popSpecial", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("LOOKUP-OLD-VALUE-VARIABLE", "(DEFUN (LOOKUP-OLD-VALUE-VARIABLE SYMBOL) ((VARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "lookupOldValueVariable", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("NEED-TO-UNBIND-SPECIALS?", "(DEFUN (NEED-TO-UNBIND-SPECIALS? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "needToUnbindSpecialsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("YIELD-SPECIAL-UNBIND-TREE", "(DEFUN (YIELD-SPECIAL-UNBIND-TREE CONS) ((NOFBINDINGS INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "yieldSpecialUnbindTree", new java.lang.Class [] {java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("YIELD-RETURN-SPECIAL-UNBIND-TREE", "(DEFUN (YIELD-RETURN-SPECIAL-UNBIND-TREE CONS) ())", Native.find_java_method("edu.isi.stella.Stella", "yieldReturnSpecialUnbindTree", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("YIELD-LOOP-EXIT-SPECIAL-UNBIND-TREE", "(DEFUN (YIELD-LOOP-EXIT-SPECIAL-UNBIND-TREE CONS) ())", Native.find_java_method("edu.isi.stella.Stella", "yieldLoopExitSpecialUnbindTree", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-SPECIAL-TREE", "(DEFUN (WALK-SPECIAL-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSpecialTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-CL-SPECIAL-TREE", "(DEFUN (WALK-CL-SPECIAL-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkClSpecialTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-UNWIND-PROTECT-SPECIAL-TREE", "(DEFUN (WALK-UNWIND-PROTECT-SPECIAL-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkUnwindProtectSpecialTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-CAST-TREE", "(DEFUN (WALK-CAST-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkCastTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
    }
  }

  static void helpStartupWalk10() {
    {
      Stella.defineFunctionObject("VALUES-TREE?", "(DEFUN (VALUES-TREE? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "valuesTreeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-VALUES-TREE", "(DEFUN (WALK-VALUES-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkValuesTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-MV-EXPRESSION-TREE", "(DEFUN (WALK-MV-EXPRESSION-TREE OBJECT CONS (LIST OF TYPE-SPEC)) ((TREE OBJECT) (TARGETTYPES (LIST OF TYPE-SPEC)) (OPERATOR SYMBOL)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkMvExpressionTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("LISTIFY-TYPE-SPEC", "(DEFUN (LISTIFY-TYPE-SPEC (LIST OF TYPE-SPEC)) ((TYPESPEC TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StandardObject", "listifyTypeSpec", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("SLOT-FROM-EXPRESSION-TREE", "(DEFUN (SLOT-FROM-EXPRESSION-TREE SLOT) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "slotFromExpressionTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-MV-TREE", "(DEFUN (WALK-MV-TREE OBJECT CONS (LIST OF TYPE-SPEC)) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "walkMvTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-MV-VALUES-TREE", "(DEFUN (WALK-MV-VALUES-TREE CONS CONS (LIST OF TYPE-SPEC)) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkMvValuesTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("COERCE-MV-TREE", "(DEFUN (COERCE-MV-TREE OBJECT CONS (LIST OF TYPE-SPEC)) ((TREE OBJECT) (OPERATOR SYMBOL) (SOURCETYPES (LIST OF TYPE-SPEC)) (TARGETTYPES (LIST OF TYPE-SPEC))))", Native.find_java_method("edu.isi.stella.Stella_Object", "coerceMvTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-RETURN-AND-UNBIND-SPECIALS", "(DEFUN (WALK-RETURN-AND-UNBIND-SPECIALS CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkReturnAndUnbindSpecials", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-RETURN-TREE", "(DEFUN (WALK-RETURN-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkReturnTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-MV-SETQ-TREE", "(DEFUN (WALK-MV-SETQ-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkMvSetqTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-MV-BIND-TREE", "(DEFUN (WALK-MV-BIND-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkMvBindTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-LOOP-TREE", "(DEFUN (WALK-LOOP-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkLoopTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-LOOP-EXIT-TREE", "(DEFUN (WALK-LOOP-EXIT-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkLoopExitTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-WHILE-TREE", "(DEFUN (WALK-WHILE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkWhileTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-CONDITIONAL-TREE", "(DEFUN (WALK-CONDITIONAL-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkConditionalTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-CHOOSE-TREE", "(DEFUN (WALK-CHOOSE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkChooseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-BOOLEAN-TREE", "(DEFUN (WALK-BOOLEAN-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkBooleanTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("AND-OR-NOT-TREE?", "(DEFUN (AND-OR-NOT-TREE? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "andOrNotTreeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("HELP-WALK-BOOLEAN-TREE", "(DEFUN (HELP-WALK-BOOLEAN-TREE OBJECT) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "helpWalkBooleanTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-COND-TREE", "(DEFUN (WALK-COND-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkCondTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("COND-TREE-TO-IF-TREE", "(DEFUN (COND-TREE-TO-IF-TREE CONS) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "condTreeToIfTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("YIELD-HARDCODED-CASE-SYMBOL-ID-OR-IDS", "(DEFUN (YIELD-HARDCODED-CASE-SYMBOL-ID-OR-IDS OBJECT) ((CASETEST OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "yieldHardcodedCaseSymbolIdOrIds", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-HARDCODED-SYMBOL-CASE-TREE", "(DEFUN (WALK-HARDCODED-SYMBOL-CASE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkHardcodedSymbolCaseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-ISA?-CASE-TEST", "(DEFUN (YIELD-ISA?-CASE-TEST CONS) ((CASEKEY TYPE) (TESTEXPRESSION OBJECT)))", Native.find_java_method("edu.isi.stella.Surrogate", "yieldIsaPCaseTest", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("YIELD-SUBTYPE-OF?-CASE-TEST", "(DEFUN (YIELD-SUBTYPE-OF?-CASE-TEST CONS) ((CASEKEY TYPE) (TESTEXPRESSION OBJECT)))", Native.find_java_method("edu.isi.stella.Surrogate", "yieldSubtypeOfPCaseTest", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("YIELD-COND-TEST", "(DEFUN (YIELD-COND-TEST CONS) ((CASETEST OBJECT) (TESTVARIABLE OBJECT) (EQUALITYTEST SYMBOL)))", Native.find_java_method("edu.isi.stella.Stella_Object", "yieldCondTest", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("YIELD-COND-TEST-OR-TESTS", "(DEFUN (YIELD-COND-TEST-OR-TESTS OBJECT) ((CASETEST OBJECT) (TESTVARIABLE OBJECT) (EQUALITYTEST SYMBOL)))", Native.find_java_method("edu.isi.stella.Stella_Object", "yieldCondTestOrTests", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("COUNT-CASE-TEST-CLAUSES", "(DEFUN (COUNT-CASE-TEST-CLAUSES INTEGER BOOLEAN) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "countCaseTestClauses", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("ATTACH-UNHANDLED-CASE-ERROR-CLAUSE", "(DEFUN (ATTACH-UNHANDLED-CASE-ERROR-CLAUSE CONS) ((CASETREE CONS) (TESTTREE OBJECT)))", Native.find_java_method("edu.isi.stella.Cons", "attachUnhandledCaseErrorClause", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-NON-BUILT-IN-CASE-TREE", "(DEFUN (WALK-NON-BUILT-IN-CASE-TREE CONS TYPE-SPEC) ((TREE CONS) (EQUALITYTEST SYMBOL)))", Native.find_java_method("edu.isi.stella.Cons", "walkNonBuiltInCaseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-CASE-TREE", "(DEFUN (WALK-CASE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkCaseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-TYPECASE-TREE", "(DEFUN (WALK-TYPECASE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkTypecaseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("YIELD-CASTED-TYPECASE-CLAUSE-TREES", "(DEFUN (YIELD-CASTED-TYPECASE-CLAUSE-TREES CONS) ((TESTVARIABLE SYMBOL) (CLAUSETYPE TYPE-SPEC) (CLAUSETREES CONS)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldCastedTypecaseClauseTrees", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("VERIFY-TYPECASE-CLAUSE-TYPE", "(DEFUN VERIFY-TYPECASE-CLAUSE-TYPE ((TESTTYPE TYPE) (CLAUSETYPE TYPE) (PRECEDINGCLAUSETYPES (LIST OF TYPE)) (CLAUSE CONS)))", Native.find_java_method("edu.isi.stella.Surrogate", "verifyTypecaseClauseType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-WITH-PROCESS-LOCK-TREE", "(DEFUN (WALK-WITH-PROCESS-LOCK-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkWithProcessLockTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("FINISH-WALKING-EQL-TREE", "(DEFUN (FINISH-WALKING-EQL-TREE CONS TYPE-SPEC) ((TREE CONS) (TYPE1 TYPE) (TYPE2 TYPE)))", Native.find_java_method("edu.isi.stella.Cons", "finishWalkingEqlTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("FINISH-WALKING-EQUAL-TREE", "(DEFUN (FINISH-WALKING-EQUAL-TREE CONS TYPE-SPEC) ((TREE CONS) (TYPE1 TYPE) (TYPE2 TYPE)))", Native.find_java_method("edu.isi.stella.Cons", "finishWalkingEqualTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-EQUALITY-TREE", "(DEFUN (WALK-EQUALITY-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkEqualityTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("MORE-GENERAL-NUMERIC-TYPE", "(DEFUN (MORE-GENERAL-NUMERIC-TYPE TYPE) ((TYPE1 TYPE) (TYPE2 TYPE)))", Native.find_java_method("edu.isi.stella.Surrogate", "moreGeneralNumericType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("edu.isi.stella.Surrogate")}), null);
      Stella.defineFunctionObject("YIELD-ARITHMETIC-OPERATOR-CALL-TREE", "(DEFUN (YIELD-ARITHMETIC-OPERATOR-CALL-TREE CONS) ((OPERATOR SYMBOL) (OPERANDS CONS)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldArithmeticOperatorCallTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("YIELD-NESTED-ARITHMETIC-OPERATOR-CALL-TREE", "(DEFUN (YIELD-NESTED-ARITHMETIC-OPERATOR-CALL-TREE CONS) ((OPERATOR SYMBOL) (OPERANDS CONS)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldNestedArithmeticOperatorCallTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-ARITHMETIC-TREE", "(DEFUN (WALK-ARITHMETIC-TREE OBJECT TYPE) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkArithmeticTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-QUOTED-TREE", "(DEFUN (WALK-QUOTED-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkQuotedTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-BQUOTE-TREE", "(DEFUN (WALK-BQUOTE-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkBquoteTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("EXPAND-MACRO", "(DEFUN (EXPAND-MACRO OBJECT) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "expandMacro", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-MACRO-TREE", "(DEFUN (WALK-MACRO-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkMacroTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-PRINT-STREAM-TREE", "(DEFUN (WALK-PRINT-STREAM-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkPrintStreamTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WARN-ABOUT-UNDEFINED-METHODS?", "(DEFUN (WARN-ABOUT-UNDEFINED-METHODS? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "warnAboutUndefinedMethodsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WARN-ABOUT-MISSING-METHODS?", "(DEFUN (WARN-ABOUT-MISSING-METHODS? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "warnAboutMissingMethodsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-TYPE-SPEC-IS-NATIVE-TYPE?", "(DEFUN (WALK-TYPE-SPEC-IS-NATIVE-TYPE? BOOLEAN) ((THETYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StandardObject", "walkTypeSpecIsNativeTypeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("WALK-UNDEFINED-SLOT-TREE", "(DEFUN (WALK-UNDEFINED-SLOT-TREE CONS TYPE) ((TREE CONS) (FIRSTARGTYPE TYPE-SPEC) (WARN? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Cons", "walkUndefinedSlotTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-SLOT-ON-ABSTRACT-TYPE-TREE", "(DEFUN (WALK-SLOT-ON-ABSTRACT-TYPE-TREE CONS TYPE-SPEC) ((TREE CONS) (ABSTRACTTYPE TYPE)))", Native.find_java_method("edu.isi.stella.Cons", "walkSlotOnAbstractTypeTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("FIND-PROTOTYPE-METHOD", "(DEFUN (FIND-PROTOTYPE-METHOD METHOD-SLOT) ((METHODNAME SYMBOL) (ABSTRACTTYPE TYPE)))", Native.find_java_method("edu.isi.stella.Symbol", "findPrototypeMethod", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Surrogate")}), null);
      Stella.defineFunctionObject("COMPATIBLE-REAL-METHODS", "(DEFUN (COMPATIBLE-REAL-METHODS INTEGER INTEGER BOOLEAN) ((PROTOTYPEMETHOD METHOD-SLOT) (ABSTRACTTYPE TYPE)))", Native.find_java_method("edu.isi.stella.MethodSlot", "compatibleRealMethods", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Surrogate"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineMethodObject("(DEFMETHOD (FINISH-WALKING-CALL-SLOT-TREE OBJECT TYPE-SPEC) ((SELF SLOT) (TREE CONS) (FIRSTARGTYPE TYPE-SPEC)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Slot", "finishWalkingCallSlotTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineMethodObject("(DEFMETHOD (FINISH-WALKING-CALL-SLOT-TREE OBJECT TYPE-SPEC) ((SELF STORAGE-SLOT) (TREE CONS) (FIRSTARGTYPE TYPE-SPEC)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.StorageSlot", "finishWalkingCallSlotTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineFunctionObject("STRING-CONCATENATE-METHOD?", "(DEFUN (STRING-CONCATENATE-METHOD? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "stringConcatenateMethodP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("PASS-VARIABLE-ARGUMENTS-AS-LIST?", "(DEFUN (PASS-VARIABLE-ARGUMENTS-AS-LIST? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "passVariableArgumentsAsListP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("VARIABLE-ARGUMENTS-TYPE", "(DEFUN (VARIABLE-ARGUMENTS-TYPE TYPE-SPEC) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "variableArgumentsType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
    }
  }

  static void helpStartupWalk11() {
    {
      Stella.defineFunctionObject("VARIABLE-ARGUMENTS-NAME", "(DEFUN (VARIABLE-ARGUMENTS-NAME SYMBOL) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "variableArgumentsName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-LISTIFIED-VARIABLE-ARGUMENTS-TYPE", "(DEFUN (YIELD-LISTIFIED-VARIABLE-ARGUMENTS-TYPE TYPE-SPEC) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldListifiedVariableArgumentsType", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-LISTIFIED-VARIABLE-ARGUMENTS", "(DEFUN (YIELD-LISTIFIED-VARIABLE-ARGUMENTS CONS) ((WALKEDARGS CONS) (TARGETTYPE TYPE-SPEC) (WRAPARGS? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Cons", "yieldListifiedVariableArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("FINISH-WALKING-ARGUMENT-LIST-TREE", "(DEFUN (FINISH-WALKING-ARGUMENT-LIST-TREE OBJECT TYPE-SPEC) ((SELF SLOT) (TREE CONS) (FIRSTARGTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Slot", "finishWalkingArgumentListTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Slot"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-VARIABLE-ARGUMENTS", "(DEFUN (WALK-VARIABLE-ARGUMENTS CONS) ((ARGUMENTS CONS) (METHOD METHOD-SLOT) (FIRSTARGTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.Cons", "walkVariableArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineMethodObject("(DEFMETHOD (FINISH-WALKING-CALL-SLOT-TREE OBJECT TYPE-SPEC) ((SELF METHOD-SLOT) (TREE CONS) (FIRSTARGTYPE TYPE-SPEC)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.MethodSlot", "finishWalkingCallSlotTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("[Ljava.lang.Object;")})), null);
      Stella.defineFunctionObject("QUOTE-ARGUMENTS", "(DEFUN (QUOTE-ARGUMENTS CONS) ((METHOD METHOD-SLOT) (ARGUMENTS CONS)))", Native.find_java_method("edu.isi.stella.MethodSlot", "quoteArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-FIRST-ARGUMENT-TO-FUNCTION", "(DEFUN (WALK-FIRST-ARGUMENT-TO-FUNCTION TYPE-SPEC) ((FNSLOT METHOD-SLOT) (TREE CONS)))", Native.find_java_method("edu.isi.stella.MethodSlot", "walkFirstArgumentToFunction", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-CALL-SLOT-TREE", "(DEFUN (WALK-CALL-SLOT-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkCallSlotTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("INLINE-METHOD-CALL?", "(DEFUN (INLINE-METHOD-CALL? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "inlineMethodCallP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("METHOD-INLINABLE?", "(DEFUN (METHOD-INLINABLE? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodInlinableP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("MOST-SPECIFIC-METHOD?", "(DEFUN (MOST-SPECIFIC-METHOD? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "mostSpecificMethodP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("HELP-MOST-SPECIFIC-METHOD?", "(DEFUN (HELP-MOST-SPECIFIC-METHOD? BOOLEAN) ((CLASS CLASS) (METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.Stella_Class", "helpMostSpecificMethodP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class"), Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT CACHED-INLINABLE-METHOD-BODY :TYPE OBJECT :ALLOCATION :DYNAMIC)");
      Stella.defineFunctionObject("INLINABLE-METHOD-BODY", "(DEFUN (INLINABLE-METHOD-BODY OBJECT) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "inlinableMethodBody", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("WALK-INLINE-METHOD-CALL", "(DEFUN (WALK-INLINE-METHOD-CALL OBJECT) ((METHOD METHOD-SLOT) (WALKEDARGS CONS) (FIRSTARGTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.MethodSlot", "walkInlineMethodCall", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-VERBATIM-INLINE-CALL-TREE", "(DEFUN (YIELD-VERBATIM-INLINE-CALL-TREE CONS) ((METHOD METHOD-SLOT) (WALKEDARGS CONS)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldVerbatimInlineCallTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("INLINE-VARIABLE-REFERENCE?", "(DEFUN (INLINE-VARIABLE-REFERENCE? BOOLEAN) ((SELF SYMBOL)) :GLOBALLY-INLINE? TRUE (RETURN (AND *INLININGMETHODCALL?* (DEFINED? (GET-LOCAL-VARIABLE-INFO SELF :INLINE-ARGUMENT)))))", Native.find_java_method("edu.isi.stella.Symbol", "inlineVariableReferenceP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("WALK-INLINE-VARIABLE-REFERENCE", "(DEFUN (WALK-INLINE-VARIABLE-REFERENCE CONS TYPE-SPEC) ((SELF SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "walkInlineVariableReference", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("SIDE-EFFECT-FREE-EXPRESSION?", "(DEFUN (SIDE-EFFECT-FREE-EXPRESSION? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "sideEffectFreeExpressionP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("ESTIMATED-EVALUATION-COST", "(DEFUN (ESTIMATED-EVALUATION-COST INTEGER) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "estimatedEvaluationCost", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("YIELD-SYNTHESIZED-METHOD-BODY", "(DEFUN (YIELD-SYNTHESIZED-METHOD-BODY CONS) ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "yieldSynthesizedMethodBody", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("WALK-METHOD-OBJECT", "(DEFUN (WALK-METHOD-OBJECT CONS) ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkMethodObject", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("WALK-DEFMETHOD-TREE", "(DEFUN WALK-DEFMETHOD-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDefmethodTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT FORWARD-DECLARATION? :TYPE BOOLEAN :DEFAULT FALSE :DOCUMENTATION \"Set to `true' for walked methods without a body.\nUsed to flag functions and methods that were declared but not defined.\" :ALLOCATION :DYNAMIC)");
      Stella.defineFunctionObject("METHOD-STORES-NATIVE-CODE-POINTER?", "(DEFUN (METHOD-STORES-NATIVE-CODE-POINTER? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodStoresNativeCodePointerP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("WALK-METHOD-UNIT", "(DEFUN WALK-METHOD-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkMethodUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("PRINT-UNDEFINED-METHODS", "(DEFUN PRINT-UNDEFINED-METHODS ((MODULE MODULE) (LOCAL? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Print all declared but not yet defined functions and methods\nin `module'.  If `local?' is true, do not consider any parent modules of\n`module'.  If `module' is NULL, look at all modules in the system.  This\nis handy to pinpoint forward declarations that haven't been followed up\nby actual definitions.\")", Native.find_java_method("edu.isi.stella.Module", "printUndefinedMethods", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Module"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("WALK-SYS-CALL-TREE", "(DEFUN (WALK-SYS-CALL-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSysCallTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-DEFCLASS-TREE", "(DEFUN WALK-DEFCLASS-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDefclassTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("YIELD-INITIALIZE-HARDWIRED-SLOTS", "(DEFUN (YIELD-INITIALIZE-HARDWIRED-SLOTS CONS) ((CLASS CLASS)))", Native.find_java_method("edu.isi.stella.Stella_Class", "yieldInitializeHardwiredSlots", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("YIELD-INITIAL-VALUE-EXPRESSION", "(DEFUN (YIELD-INITIAL-VALUE-EXPRESSION OBJECT) ((SLOT STORAGE-SLOT)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldInitialValueExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot")}), null);
      Stella.defineFunctionObject("YIELD-CONSTRUCTOR-ATTACHMENT", "(DEFUN (YIELD-CONSTRUCTOR-ATTACHMENT CONS) ((CLASS CLASS) (CLASSREF SYMBOL)))", Native.find_java_method("edu.isi.stella.Stella_Class", "yieldConstructorAttachment", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT CLASS CLASS-AUXILIARY-METHODS :TYPE (LIST OF METHOD-SLOT) :DEFAULT NIL-LIST :DOCUMENTATION \"Stores auxiliary method objects such as slot accessors and\ninherited mixin methods that are not attached to the class as regular methods\nbut need to be accessible by the C++ translator in order to generate the\nnecessary signatures.\" :ALLOCATION :DYNAMIC)");
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT AUXILIARY-METHOD-REASON :TYPE SLOT :ALLOCATION :DYNAMIC)");
      Stella.defineFunctionObject("CLEANUP-AUXILIARY-METHODS", "(DEFUN CLEANUP-AUXILIARY-METHODS ((CLASS CLASS)))", Native.find_java_method("edu.isi.stella.Stella_Class", "cleanupAuxiliaryMethods", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("REGISTER-AUXILIARY-METHOD", "(DEFUN REGISTER-AUXILIARY-METHOD ((METHOD METHOD-SLOT) (REASON SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "registerAuxiliaryMethod", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Slot")}), null);
      Stella.defineFunctionObject("MIXIN-TYPE-VARIABLES-ALLOWED?", "(DEFUN (MIXIN-TYPE-VARIABLES-ALLOWED? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN (OR (NOT (TRANSLATE-TO-SINGLE-INHERITANCE-LANGUAGE?)) (NOT (EQL? *MIXIN-IMPLEMENTATION-STYLE* :SECOND-CLASS)))))", Native.find_java_method("edu.isi.stella.Stella", "mixinTypeVariablesAllowedP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("CREATE-NATIVE-MIXIN-SLOT-ACCESSORS?", "(DEFUN (CREATE-NATIVE-MIXIN-SLOT-ACCESSORS? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN (AND (TRANSLATE-TO-SINGLE-INHERITANCE-LANGUAGE?) (MIXIN-TYPE-VARIABLES-ALLOWED?))))", Native.find_java_method("edu.isi.stella.Stella", "createNativeMixinSlotAccessorsP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("CREATE-ACCESSOR-UNITS-FOR-SLOT", "(DEFUN CREATE-ACCESSOR-UNITS-FOR-SLOT ((SLOT STORAGE-SLOT) (CLASS CLASS) (MIXINACCESSORS? BOOLEAN) (SIGNATURESONLY? BOOLEAN)))", Native.find_java_method("edu.isi.stella.StorageSlot", "createAccessorUnitsForSlot", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Class"), java.lang.Boolean.TYPE, java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("CREATE-ACCESSOR-UNITS-FOR-MIXIN-SLOT", "(DEFUN CREATE-ACCESSOR-UNITS-FOR-MIXIN-SLOT ((SLOT STORAGE-SLOT) (CLASS CLASS)))", Native.find_java_method("edu.isi.stella.StorageSlot", "createAccessorUnitsForMixinSlot", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("CREATE-SLOT-ACCESSOR-UNITS", "(DEFUN CREATE-SLOT-ACCESSOR-UNITS ((CLASS CLASS)))", Native.find_java_method("edu.isi.stella.Stella_Class", "createSlotAccessorUnits", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("CREATE-INLINE-METHOD-UNITS", "(DEFUN CREATE-INLINE-METHOD-UNITS ((CLASS CLASS)))", Native.find_java_method("edu.isi.stella.Stella_Class", "createInlineMethodUnits", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("YIELD-MIXIN-METHOD-TREE", "(DEFUN (YIELD-MIXIN-METHOD-TREE CONS) ((METHOD METHOD-SLOT) (CLASS CLASS)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldMixinMethodTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("CREATE-MIXIN-METHOD-UNITS", "(DEFUN CREATE-MIXIN-METHOD-UNITS ((CLASS CLASS)))", Native.find_java_method("edu.isi.stella.Stella_Class", "createMixinMethodUnits", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("CREATE-DEFPRINT-UNIT", "(DEFUN CREATE-DEFPRINT-UNIT ((CLASS CLASS)))", Native.find_java_method("edu.isi.stella.Stella_Class", "createDefprintUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Class")}), null);
      Stella.defineFunctionObject("WALK-CLASS-UNIT", "(DEFUN WALK-CLASS-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkClassUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("CREATE-FINALIZATION-UNITS", "(DEFUN CREATE-FINALIZATION-UNITS ())", Native.find_java_method("edu.isi.stella.Stella", "createFinalizationUnits", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-DEFSLOT-TREE", "(DEFUN WALK-DEFSLOT-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDefslotTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-SLOT-UNIT", "(DEFUN WALK-SLOT-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkSlotUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("LOOKUP-MACRO", "(DEFUN (LOOKUP-MACRO METHOD-SLOT) ((NAME SYMBOL)) :DOCUMENTATION \"If `name' has a macro definition, return the method object\nholding its expander function.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Symbol", "lookupMacro", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT METHOD-MACRO? :TYPE BOOLEAN :OPTION-KEYWORD :MACRO? :DOCUMENTATION \"If true, the object is a macro expander function.\" :ALLOCATION :DYNAMIC)");
      Stella.defineFunctionObject("WALK-DEFMACRO-TREE", "(DEFUN WALK-DEFMACRO-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDefmacroTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-DEFGLOBAL-TREE", "(DEFUN WALK-DEFGLOBAL-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDefglobalTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-GLOBAL-UNIT", "(DEFUN WALK-GLOBAL-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkGlobalUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("WALK-DEFTYPE-TREE", "(DEFUN WALK-DEFTYPE-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDeftypeTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-TYPE-UNIT", "(DEFUN WALK-TYPE-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkTypeUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("WALK-STARTUP-TIME-PROGN-TREE", "(DEFUN WALK-STARTUP-TIME-PROGN-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkStartupTimePrognTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("EXTRACT-STARTUP-TIME-PHASE", "(DEFUN (EXTRACT-STARTUP-TIME-PHASE KEYWORD) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "extractStartupTimePhase", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-STARTUP-TIME-PROGN-UNIT", "(DEFUN WALK-STARTUP-TIME-PROGN-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkStartupTimePrognUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
    }
  }

  static void helpStartupWalk12() {
    {
      Stella.defineFunctionObject("EARLIER-STARTUP-UNIT?", "(DEFUN (EARLIER-STARTUP-UNIT? BOOLEAN) ((UNIT1 TRANSLATION-UNIT) (UNIT2 TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "earlierStartupUnitP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit"), Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("COMBINE-STARTUP-FUNCTION-UNITS", "(DEFUN (COMBINE-STARTUP-FUNCTION-UNITS CONS) ((STARTUPFNNAME SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "combineStartupFunctionUnits", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT METHOD-STARTUP-CLASSNAME :TYPE STRING :ALLOCATION :DYNAMIC)");
      Stella.defineMethodObject("(DEFMETHOD (METHOD-STARTUP-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.MethodSlot", "methodStartupFunctionP", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("EXTRACT-STARTUP-FUNCTION-UNITS", "(DEFUN EXTRACT-STARTUP-FUNCTION-UNITS ((STARTUPUNITS (LIST OF TRANSLATION-UNIT)) (STARTUPFNNAME SYMBOL)))", Native.find_java_method("edu.isi.stella.List", "extractStartupFunctionUnits", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("YIELD-STARTUP-FUNCTION-NAME", "(DEFUN (YIELD-STARTUP-FUNCTION-NAME SYMBOL) ((FILE STRING)))", Native.find_java_method("edu.isi.stella.Stella", "yieldStartupFunctionName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("YIELD-STARTUP-FUNCTION-CLASSNAME", "(DEFUN (YIELD-STARTUP-FUNCTION-CLASSNAME STRING) ((FUNCTION-NAME SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldStartupFunctionClassname", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("CREATE-STARTUP-FUNCTION-UNITS", "(DEFUN CREATE-STARTUP-FUNCTION-UNITS ())", Native.find_java_method("edu.isi.stella.Stella", "createStartupFunctionUnits", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("DONT-GENERATE-STARTUP-CODE?", "(DEFUN (DONT-GENERATE-STARTUP-CODE? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "dontGenerateStartupCodeP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("REMOVE-ALL-STARTUP-TIME-PROGN-UNITS", "(DEFUN REMOVE-ALL-STARTUP-TIME-PROGN-UNITS ())", Native.find_java_method("edu.isi.stella.Stella", "removeAllStartupTimePrognUnits", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-SIGNAL-EXCEPTION-TREE", "(DEFUN (WALK-SIGNAL-EXCEPTION-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkSignalExceptionTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-EXCEPTION-CASE-TREE", "(DEFUN (WALK-EXCEPTION-CASE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkExceptionCaseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-EXCEPTION-HANDLER-TREES", "(DEFUN (WALK-EXCEPTION-HANDLER-TREES CONS) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkExceptionHandlerTrees", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-UNWIND-PROTECT-TREE", "(DEFUN (WALK-UNWIND-PROTECT-TREE CONS TYPE) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkUnwindProtectTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-VERBATIM-DEFINITION-TREE", "(DEFUN WALK-VERBATIM-DEFINITION-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkVerbatimDefinitionTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-VERBATIM-UNIT", "(DEFUN WALK-VERBATIM-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkVerbatimUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("WALK-VERBATIM-TREE", "(DEFUN (WALK-VERBATIM-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkVerbatimTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("LOOKUP-VERBATIM-TREE", "(DEFUN (LOOKUP-VERBATIM-TREE OBJECT) ((TREE CONS) (LANGUAGE KEYWORD)))", Native.find_java_method("edu.isi.stella.Cons", "lookupVerbatimTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("VERBATIM-TREE?", "(DEFUN (VERBATIM-TREE? BOOLEAN) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "verbatimTreeP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("WALK-DEFMODULE-TREE", "(DEFUN WALK-DEFMODULE-TREE ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkDefmoduleTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WALK-MODULE-UNIT", "(DEFUN WALK-MODULE-UNIT ((UNIT TRANSLATION-UNIT)))", Native.find_java_method("edu.isi.stella.TranslationUnit", "walkModuleUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit")}), null);
      Stella.defineFunctionObject("EXTRACT-REQUIRED-ARGUMENT-VALUES", "(DEFUN (EXTRACT-REQUIRED-ARGUMENT-VALUES CONS) ((CLASSTYPE TYPE-SPEC) (SLOTSANDVALUES (PROPERTY-LIST OF SLOT OBJECT))))", Native.find_java_method("edu.isi.stella.StandardObject", "extractRequiredArgumentValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.PropertyList")}), null);
      Stella.defineFunctionObject("PREPROCESS-ARRAY-ARGUMENTS", "(DEFUN PREPROCESS-ARRAY-ARGUMENTS ((ARRAYTYPE PARAMETRIC-TYPE-SPECIFIER) (SLOTSANDVALUES (PROPERTY-LIST OF SLOT OBJECT))))", Native.find_java_method("edu.isi.stella.ParametricTypeSpecifier", "preprocessArrayArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.ParametricTypeSpecifier"), Native.find_java_class("edu.isi.stella.PropertyList")}), null);
      Stella.defineFunctionObject("EVALUATE-ARRAY-ARGUMENT-VALUE", "(DEFUN EVALUATE-ARRAY-ARGUMENT-VALUE ((ARRAYTYPE PARAMETRIC-TYPE-SPECIFIER) (REQUIREDVALUES LIST) (SLOT SLOT) (VALUEREF OBJECT)))", Native.find_java_method("edu.isi.stella.ParametricTypeSpecifier", "evaluateArrayArgumentValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.ParametricTypeSpecifier"), Native.find_java_class("edu.isi.stella.List"), Native.find_java_class("edu.isi.stella.Slot"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("YIELD-NEW-ARGUMENTS-TREE", "(DEFUN (YIELD-NEW-ARGUMENTS-TREE CONS CONS) ((KEYWORDSANDVALUES CONS) (CLASSTYPE TYPE-SPEC) (SELFVARIABLE SYMBOL)))", Native.find_java_method("edu.isi.stella.Cons", "yieldNewArgumentsTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("GET-CURRENT-SELF-TYPE", "(DEFUN (GET-CURRENT-SELF-TYPE TYPE) ())", Native.find_java_method("edu.isi.stella.Stella", "getCurrentSelfType", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("WALK-NEW-TREE", "(DEFUN (WALK-NEW-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkNewTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-MAKE-TREE", "(DEFUN (WALK-MAKE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkMakeTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-FUNCALL-TREE", "(DEFUN (WALK-FUNCALL-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkFuncallTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-THE-CODE-TREE", "(DEFUN (WALK-THE-CODE-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkTheCodeTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("WALK-CALL-SUPER-METHOD-TREE", "(DEFUN (WALK-CALL-SUPER-METHOD-TREE CONS TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "walkCallSuperMethodTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("DE-UGLIFY-ARGUMENTS", "(DEFUN (DE-UGLIFY-ARGUMENTS CONS) ((UGLYARGUMENTS CONS)))", Native.find_java_method("edu.isi.stella.Cons", "deUglifyArguments", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("DE-UGLIFY-PARSE-TREE", "(DEFUN (DE-UGLIFY-PARSE-TREE OBJECT) ((TREE OBJECT)) :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "deUglifyParseTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("REGISTER-NATIVE-NAME", "(DEFUN REGISTER-NATIVE-NAME ((NAME SYMBOL) (LANGUAGE KEYWORD) (CATEGORY KEYWORD)))", Native.find_java_method("edu.isi.stella.Symbol", "registerNativeName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("NATIVE-NAME?", "(DEFUN (NATIVE-NAME? BOOLEAN) ((NAME SYMBOL) (LANGUAGE KEYWORD) (CATEGORY KEYWORD)))", Native.find_java_method("edu.isi.stella.Symbol", "nativeNameP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("YIELD-RENAMED-NAME-IF-NATIVE", "(DEFUN (YIELD-RENAMED-NAME-IF-NATIVE SYMBOL) ((NAME SYMBOL) (LANGUAGE KEYWORD) (CATEGORY KEYWORD)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldRenamedNameIfNative", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Keyword"), Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("METHOD-NEEDS-LISP-MACRO?", "(DEFUN (METHOD-NEEDS-LISP-MACRO? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodNeedsLispMacroP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-LISP-MACRO-TREES", "(DEFUN (YIELD-LISP-MACRO-TREES CONS CONS) ((NAME SYMBOL) (METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldLispMacroTrees", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("CREATE-LISP-MACRO-UNITS", "(DEFUN CREATE-LISP-MACRO-UNITS ((NAME SYMBOL) (METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.Symbol", "createLispMacroUnits", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT METHOD-C-NAMESPACE-PREFIX :TYPE STRING :OPTION-KEYWORD :C-NAMESPACE-PREFIX :DOCUMENTATION \"The package prefix to use for the C-callable function (defaults to C++ namespace).\" :ALLOCATION :DYNAMIC)");
      Stella.defineFunctionObject("METHOD-NEEDS-C-CALLABLE-WRAPPER?", "(DEFUN (METHOD-NEEDS-C-CALLABLE-WRAPPER? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodNeedsCCallableWrapperP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-C-CALLABLE-WRAPPER-NAME", "(DEFUN (YIELD-C-CALLABLE-WRAPPER-NAME SYMBOL) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldCCallableWrapperName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-C-CALLABLE-WRAPPER-TREE", "(DEFUN (YIELD-C-CALLABLE-WRAPPER-TREE CONS) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldCCallableWrapperTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("CREATE-C-CALLABLE-WRAPPER-UNIT", "(DEFUN (CREATE-C-CALLABLE-WRAPPER-UNIT METHOD-SLOT) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "createCCallableWrapperUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("C-CALLABLE-WRAPPER-METHOD?", "(DEFUN (C-CALLABLE-WRAPPER-METHOD? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "cCallableWrapperMethodP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-FUNCTION-CPP-SIGNATURE", "(DEFUN (YIELD-FUNCTION-CPP-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((FUNCTION METHOD-SLOT) (FIRSTARGTYPE TYPE-SPEC) (QUALIFY? BOOLEAN)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldFunctionCppSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("CPP-TYPE-TO-C-TYPE", "(DEFUN (CPP-TYPE-TO-C-TYPE STRING) ((TYPE STRING)))", Native.find_java_method("edu.isi.stella.Stella", "cppTypeToCType", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("YIELD-FUNCTION-C-SIGNATURE", "(DEFUN (YIELD-FUNCTION-C-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((FUNCTION METHOD-SLOT) (FIRSTARGTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldFunctionCSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-METHOD-CPP-SIGNATURE", "(DEFUN (YIELD-METHOD-CPP-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((METHOD METHOD-SLOT) (FIRSTARGTYPE TYPE-SPEC) (QUALIFY? BOOLEAN)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldMethodCppSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("YIELD-METHOD-C-SIGNATURE", "(DEFUN (YIELD-METHOD-C-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((METHOD METHOD-SLOT) (FIRSTARGTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldMethodCSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-STORAGE-SLOT-CPP-SIGNATURE", "(DEFUN (YIELD-STORAGE-SLOT-CPP-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((SLOT STORAGE-SLOT) (FIRSTARGTYPE TYPE-SPEC) (QUALIFY? BOOLEAN)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldStorageSlotCppSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("YIELD-STORAGE-SLOT-C-SIGNATURE", "(DEFUN (YIELD-STORAGE-SLOT-C-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((SLOT STORAGE-SLOT) (FIRSTARGTYPE TYPE-SPEC)))", Native.find_java_method("edu.isi.stella.StorageSlot", "yieldStorageSlotCSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StorageSlot"), Native.find_java_class("edu.isi.stella.StandardObject")}), null);
      Stella.defineFunctionObject("YIELD-GLOBAL-VARIABLE-CPP-SIGNATURE", "(DEFUN (YIELD-GLOBAL-VARIABLE-CPP-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((GLOBAL GLOBAL-VARIABLE) (QUALIFY? BOOLEAN)))", Native.find_java_method("edu.isi.stella.GlobalVariable", "yieldGlobalVariableCppSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.GlobalVariable"), java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("YIELD-GLOBAL-VARIABLE-C-SIGNATURE", "(DEFUN (YIELD-GLOBAL-VARIABLE-C-SIGNATURE (CONS OF (CONS OF STRING-WRAPPER))) ((GLOBAL GLOBAL-VARIABLE)))", Native.find_java_method("edu.isi.stella.GlobalVariable", "yieldGlobalVariableCSignature", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.GlobalVariable")}), null);
      Stella.defineFunctionObject("LIST-SIGNATURE-TO-STRING", "(DEFUN (LIST-SIGNATURE-TO-STRING STRING) ((SIGNATURE (CONS OF (CONS OF STRING-WRAPPER)))))", Native.find_java_method("edu.isi.stella.Cons", "listSignatureToString", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("LOOKUP-FUNCTION-CODE-BY-NAME", "(DEFUN (LOOKUP-FUNCTION-CODE-BY-NAME FUNCTION-CODE) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupFunctionCodeByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-C-CALLABLE-WRAPPER-CODE-BY-NAME", "(DEFUN (LOOKUP-C-CALLABLE-WRAPPER-CODE-BY-NAME FUNCTION-CODE) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupCCallableWrapperCodeByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-FUNCTION-CPP-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-FUNCTION-CPP-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupFunctionCppSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-FUNCTION-C-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-FUNCTION-C-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupFunctionCSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-METHOD-CODE-BY-NAME", "(DEFUN (LOOKUP-METHOD-CODE-BY-NAME CODE-WRAPPER) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupMethodCodeByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
    }
  }

  static void helpStartupWalk13() {
    {
      Stella.defineFunctionObject("LOOKUP-METHOD-CPP-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-METHOD-CPP-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupMethodCppSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-METHOD-C-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-METHOD-C-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupMethodCSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-STORAGE-SLOT-CPP-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-STORAGE-SLOT-CPP-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupStorageSlotCppSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-STORAGE-SLOT-C-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-STORAGE-SLOT-C-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupStorageSlotCSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-CLASS-CPP-TYPE-BY-NAME", "(DEFUN (LOOKUP-CLASS-CPP-TYPE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :DOCUMENTATION \"Return a namespace-qualified C++ translation of the class type\nnamed by `qualifiedName' or NULL if no such STELLA class exists.\" :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupClassCppTypeByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-GLOBAL-VARIABLE-CPP-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-GLOBAL-VARIABLE-CPP-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupGlobalVariableCppSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("LOOKUP-GLOBAL-VARIABLE-C-SIGNATURE-BY-NAME", "(DEFUN (LOOKUP-GLOBAL-VARIABLE-C-SIGNATURE-BY-NAME STRING) ((QUALIFIEDNAME STRING)) :PUBLIC? TRUE :C-CALLABLE? TRUE :THROWS-EXCEPTIONS? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "lookupGlobalVariableCSignatureByName", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineExternalSlotFromStringifiedSource("(DEFSLOT METHOD-SLOT METHOD-THROWS-EXCEPTIONS? :TYPE BOOLEAN :OPTION-KEYWORD :THROWS-EXCEPTIONS? :DOCUMENTATION \"If TRUE, this function might throw exceptions which means we need to explicitly catch and handle them in C.\" :ALLOCATION :DYNAMIC)");
      Stella.defineFunctionObject("GET-GLOBAL-EXCEPTION-HANDLER", "(DEFUN (GET-GLOBAL-EXCEPTION-HANDLER FUNCTION-CODE) () :PUBLIC? TRUE :C-CALLABLE? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getGlobalExceptionHandler", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SET-GLOBAL-EXCEPTION-HANDLER", "(DEFUN SET-GLOBAL-EXCEPTION-HANDLER ((HANDLER FUNCTION-CODE)) :PUBLIC? TRUE :C-CALLABLE? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "setGlobalExceptionHandler", new java.lang.Class [] {Native.find_java_class("java.lang.reflect.Method")}), null);
      Stella.defineFunctionObject("CALL-GLOBAL-EXCEPTION-HANDLER", "(DEFUN CALL-GLOBAL-EXCEPTION-HANDLER ((E NATIVE-EXCEPTION)))", Native.find_java_method("edu.isi.stella.Stella", "callGlobalExceptionHandler", new java.lang.Class [] {Native.find_java_class("java.lang.Exception")}), null);
      Stella.defineFunctionObject("GC-PROTECT-OBJECT", "(DEFUN (GC-PROTECT-OBJECT NATIVE-OBJECT-POINTER) ((OBJECT NATIVE-OBJECT-POINTER)) :DOCUMENTATION \"Protect `object' from garbage collection.  Returns a handle that can later\nbe passed to `gc-release-object' to release `object' from garbage collection protection.\" :PUBLIC? TRUE :C-CALLABLE? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "gcProtectObject", new java.lang.Class [] {Native.find_java_class("java.lang.Object")}), null);
      Stella.defineFunctionObject("GC-RELEASE-OBJECT", "(DEFUN (GC-RELEASE-OBJECT NATIVE-OBJECT-POINTER) ((HANDLE NATIVE-OBJECT-POINTER)) :DOCUMENTATION \"Release the object pointed to by `handle' from garbage collection protection\nand return the protected object.  This frees `handle' but does not necessarily mean that the\nobject will be garbage collected, it just can be again, once all references to it disappear.\" :PUBLIC? TRUE :C-CALLABLE? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "gcReleaseObject", new java.lang.Class [] {Native.find_java_class("java.lang.Object")}), null);
      Stella.defineFunctionObject("COMMAND?", "(DEFUN (COMMAND? BOOLEAN) ((METHOD METHOD-SLOT)) :DOCUMENTATION \"Return `true' if `method' is an evaluable command.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.MethodSlot", "commandP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("LOOKUP-COMMAND", "(DEFUN (LOOKUP-COMMAND METHOD-SLOT) ((NAME SYMBOL)) :DOCUMENTATION \"If `name' names an evaluable command return its associated\ncommand object;  otherwise, return `null'.  Currently, commands are not\npolymorphic, i.e., they can only be implemented by functions.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Symbol", "lookupCommand", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("LOOKUP-COMMAND-LIKE-FUNCTION", "(DEFUN (LOOKUP-COMMAND-LIKE-FUNCTION METHOD-SLOT) ((NAME SYMBOL)) :DOCUMENTATION \"Look up a function with `name' that can be evaluated via `apply'\njust like a command, regardless of whether it was marked as such.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Symbol", "lookupCommandLikeFunction", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("METHOD-MUST-BE-EVALUABLE?", "(DEFUN (METHOD-MUST-BE-EVALUABLE? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodMustBeEvaluableP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("METHOD-CALLABLE-VIA-APPLY?", "(DEFUN (METHOD-CALLABLE-VIA-APPLY? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodCallableViaApplyP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("METHOD-NEEDS-EVALUATOR-WRAPPER?", "(DEFUN (METHOD-NEEDS-EVALUATOR-WRAPPER? BOOLEAN) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "methodNeedsEvaluatorWrapperP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("YIELD-EVALUATOR-WRAPPER-NAME", "(DEFUN (YIELD-EVALUATOR-WRAPPER-NAME SYMBOL) ((METHODNAME SYMBOL)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldEvaluatorWrapperName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol")}), null);
      Stella.defineFunctionObject("YIELD-ARGUMENT-ACCESS-TREE", "(DEFUN (YIELD-ARGUMENT-ACCESS-TREE OBJECT) ((ARGUMENTSVARIABLE SYMBOL) (INDEX INTEGER) (RESTARGUMENT? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Symbol", "yieldArgumentAccessTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), java.lang.Integer.TYPE, java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("YIELD-EVALUATOR-WRAPPER-TREE", "(DEFUN (YIELD-EVALUATOR-WRAPPER-TREE CONS) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "yieldEvaluatorWrapperTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("CREATE-EVALUATOR-WRAPPER-UNIT", "(DEFUN (CREATE-EVALUATOR-WRAPPER-UNIT METHOD-SLOT) ((METHOD METHOD-SLOT)))", Native.find_java_method("edu.isi.stella.MethodSlot", "createEvaluatorWrapperUnit", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.MethodSlot")}), null);
      Stella.defineFunctionObject("EVALUATE", "(DEFUN (EVALUATE OBJECT) ((EXPRESSION OBJECT)) :DOCUMENTATION \"Evaluate the expression `expression' and return the result.\nCurrently, only the evaluation of (possibly nested) commands and global\nvariables is supported.  The second return value indicates the actual type \nof the result (which might have been wrapped), and the third return value\nindicates whether an error occurred during the evaluation.  Expressions\nare simple to program in Common Lisp, since they are built into the language,\nand relatively awkward in Java and C++.  Users of either of those \nlanguages are more likely to want to call `evaluate-string'.\" :COMMAND? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "evaluate", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("EVALUATE-STRING", "(DEFUN (EVALUATE-STRING OBJECT) ((EXPRESSION STRING)) :DOCUMENTATION \"Evaluate the expression represented by `expression' and return the result.\nThis is equivalent to '(evaluate (unstringify expression))'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "evaluateString", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("TRY-TO-EVALUATE", "(DEFUN (TRY-TO-EVALUATE OBJECT) ((TREE OBJECT)) :DOCUMENTATION \"Variant of `evaluate' that only evaluates `tree' if it\nrepresents an evaluable expression.  If it does not, `tree' is returned\nunmodified.  This can be used to implement commands with mixed argument\nevaluation strategies.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "tryToEvaluate", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("EVALUATE-CONS-TREE", "(DEFUN (EVALUATE-CONS-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "evaluateConsTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("EVALUATE-ARGUMENT-TREE", "(DEFUN (EVALUATE-ARGUMENT-TREE OBJECT TYPE-SPEC) ((TREE OBJECT) (EVALUATE? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella_Object", "evaluateArgumentTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("EVALUATE-ATOMIC-TREE", "(DEFUN (EVALUATE-ATOMIC-TREE OBJECT TYPE-SPEC) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "evaluateAtomicTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("MAKE-EVALUATABLE-BQUOTE-TREE", "(DEFUN (MAKE-EVALUATABLE-BQUOTE-TREE OBJECT) ((TREE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "makeEvaluatableBquoteTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("EVALUATE-BQUOTE-TREE", "(DEFUN (EVALUATE-BQUOTE-TREE OBJECT TYPE-SPEC) ((TREE CONS)))", Native.find_java_method("edu.isi.stella.Cons", "evaluateBquoteTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("COERCE-EVALUATED-TREE", "(DEFUN (COERCE-EVALUATED-TREE OBJECT TYPE-SPEC) ((TREE OBJECT) (SOURCETREE OBJECT) (SOURCETYPE TYPE-SPEC) (TARGETTYPE TYPE-SPEC) (EVALUATE? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella_Object", "coerceEvaluatedTree", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.StandardObject"), Native.find_java_class("edu.isi.stella.StandardObject"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("STARTUP-WALK", "(DEFUN STARTUP-WALK () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella._StartupWalk", "startupWalk", new java.lang.Class [] {}), null);
      { MethodSlot function = Symbol.lookupFunction(Stella.SYM_STELLA_STARTUP_WALK);

        KeyValueList.setDynamicSlotValue(function.dynamicSlots, Stella.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupWalk"), Stella.NULL_STRING_WRAPPER);
      }
    }
  }

  public static void startupWalk() {
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.$STELLA_MODULE$);
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          _StartupWalk.helpStartupWalk1();
          _StartupWalk.helpStartupWalk2();
          _StartupWalk.helpStartupWalk3();
          _StartupWalk.helpStartupWalk4();
          _StartupWalk.helpStartupWalk5();
        }
        if (Stella.currentStartupTimePhaseP(4)) {
          _StartupWalk.helpStartupWalk6();
        }
        if (Stella.currentStartupTimePhaseP(5)) {
          { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("TRANSLATION-UNIT", "(DEFCLASS TRANSLATION-UNIT (STANDARD-OBJECT) :PUBLIC? TRUE :PUBLIC-SLOTS ((TU-HOME-MODULE :TYPE MODULE :OPTION-KEYWORD :TU-HOME-MODULE) (THE-OBJECT :TYPE OBJECT) (CATEGORY :TYPE SYMBOL) (ANNOTATION :TYPE STRING) (AUXILIARY? :TYPE BOOLEAN) (CODE-REGISTER :TYPE OBJECT) (TRANSLATION :TYPE OBJECT) (REFERENCED-GLOBALS :TYPE (LIST OF GLOBAL-VARIABLE) :ALLOCATION :EMBEDDED :COMPONENT? TRUE)) :PUBLIC-METHODS ((HOME-MODULE ((SELF TRANSLATION-UNIT)) :TYPE MODULE (RETURN (TU-HOME-MODULE SELF)))) :PRINT-FORM (PRINT-TRANSLATION-UNIT SELF STREAM))");

            renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.TranslationUnit", "newTranslationUnit", new java.lang.Class [] {});
            renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.TranslationUnit", "accessTranslationUnitSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TranslationUnit"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
          }
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          _StartupWalk.helpStartupWalk7();
          _StartupWalk.helpStartupWalk8();
          _StartupWalk.helpStartupWalk9();
          _StartupWalk.helpStartupWalk10();
          _StartupWalk.helpStartupWalk11();
          _StartupWalk.helpStartupWalk12();
          _StartupWalk.helpStartupWalk13();
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("/STELLA")))));
          Stella.defineGlobalVariableObject("(DEFGLOBAL *AVAILABLE-STELLA-FEATURES* (LIST OF KEYWORD) (LIST :WARN-ABOUT-UNDEFINED-METHODS :WARN-ABOUT-MISSING-METHODS :SUPPRESS-WARNINGS :USE-HARDCODED-SYMBOLS :USE-COMMON-LISP-STRUCTS :USE-COMMON-LISP-CONSES :USE-CPP-GARBAGE-COLLECTOR :MINIMIZE-JAVA-PREFIXES :TRANSLATE-WITH-COPYRIGHT-HEADER :SUPPORT-UNEXEC) :DOCUMENTATION \"List of available STELLA features.\" :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *CURRENT-STELLA-FEATURES* (LIST OF KEYWORD) (LIST) :DOCUMENTATION \"List of currently enabled STELLA features.\" :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *DEFAULT-STELLA-FEATURES* (LIST OF KEYWORD) (LIST :WARN-ABOUT-UNDEFINED-METHODS :WARN-ABOUT-MISSING-METHODS :USE-CPP-GARBAGE-COLLECTOR :USE-COMMON-LISP-CONSES :MINIMIZE-JAVA-PREFIXES) :DOCUMENTATION \"List of STELLA features enabled by default and after resetting them\nwith `reset-stella-features'.\" :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *TRACED-KEYWORDS* (LIST OF KEYWORD) NULL :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *SAFETY* INTEGER 3 :DOCUMENTATION \"Integer between 0 and 3.  Higher levels call more\nsafety checks.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *DEBUGLEVEL* INTEGER 3 :DOCUMENTATION \"Integer between 0 and 3.  Higher levels generate more\ncode to aid debugging.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *OPTIMIZESPEEDLEVEL* INTEGER 3 :DOCUMENTATION \"Integer between 0 and 3.  Higher levels optimize for\ngreater execution speed.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *OPTIMIZESPACELEVEL* INTEGER 3 :DOCUMENTATION \"Integer between 0 and 3.  Higher levels optimize for\nless code size and memory consumption.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATIONUNITS* (LIST OF TRANSLATION-UNIT) NULL :PUBLIC? TRUE :DOCUMENTATION \"List of objects representing partially walked\ntop-level definitions and auxiliary code.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *CURRENTTRANSLATIONUNIT* TRANSLATION-UNIT NULL :PUBLIC? TRUE :DOCUMENTATION \"The translation unit currently operated on.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATIONPHASE* KEYWORD NULL :PUBLIC? TRUE :DOCUMENTATION \"Indicates the current translation phase which is one of\n:DEFINE, :FINALIZE, :WALK, or :TRANSLATE.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATIONVERBOSITYLEVEL* INTEGER 1 :PUBLIC? TRUE :DOCUMENTATION \"The higher the level, the more progress annotations are\ngenerated during the translation of Stella declarations.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *USEHARDCODEDSYMBOLS?* BOOLEAN FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATOROUTPUTLANGUAGE* KEYWORD (RUNNING-IN-LANGUAGE) :DOCUMENTATION \"Specifies the current translator output language; either\n:common-lisp, :idl, :java, :cpp, or :cpp-standalone.  The initial value\npoints to the native implementation language of this STELLA instance.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *LOCALVARIABLETYPETABLE* (KEY-VALUE-LIST OF SYMBOL STANDARD-OBJECT) NULL :DOCUMENTATION \"Table mapping local variable names their declared types\n(declared explicitly or implicitly).\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *METHODBEINGWALKED* METHOD-SLOT NULL :DOCUMENTATION \"Contains the method or function being walked, or else `null'.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *FOUNDRETURN?* BOOLEAN FALSE :DOCUMENTATION \"Indicates that one or more return statements have been found\nduring the walk of the current method.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TARGETTYPE* TYPE-SPEC @VOID :DOCUMENTATION \"Bound to the target type for an expression currently walked.\nUsed instead of an extra argument to `walk-a-tree', since only a few types\nof expressions need to know about their expected type (e.g., FUNCALL).\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *LOCALGENSYMTABLE* KEY-VALUE-LIST NULL :DOCUMENTATION \"Table that maps each prefix of a function-local gensym\nto its own gensym counter and/or to related gensyms.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATIONERRORS* INTEGER 0 :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATIONWARNINGS* INTEGER 0 :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *TRANSLATIONNOTES* INTEGER 0 :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *FUNCTION-CALL-LOG-STREAM* OUTPUT-STREAM NULL :DOCUMENTATION \"The current log file to which function calls should be logged.\nA non-NULL value indicates that function call logging is enabled.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *LOG-FUNCTION-CALLS?* BOOLEAN FALSE :DOCUMENTATION \"Translation switch which indicates that methods should\nbe instrumented to log their calls to a file.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *LOG-BREAK-POINT-COUNTER* INTEGER NULL)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *WRAPPED-TYPE-TABLE* (CONS OF CONS) (BQUOTE ((@INTEGER-WRAPPER @INTEGER) (@LONG-INTEGER-WRAPPER @LONG-INTEGER) (@FLOAT-WRAPPER @FLOAT) (@NUMBER-WRAPPER @NUMBER) (@STRING-WRAPPER @STRING) (@MUTABLE-STRING-WRAPPER @MUTABLE-STRING) (@CHARACTER-WRAPPER @CHARACTER) (@BOOLEAN-WRAPPER @BOOLEAN) (@FUNCTION-CODE-WRAPPER @FUNCTION-CODE) (@METHOD-CODE-WRAPPER @METHOD-CODE))) :DOCUMENTATION \"Table of pairs used by `wrapper-value-type' and\n`type-to-wrapped-type'.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *COERSION-TABLE* (CONS OF CONS) (BQUOTE ((@BOOLEAN @BOOLEAN-WRAPPER INLINE-WRAP-BOOLEAN) (@INTEGER @INTEGER-WRAPPER WRAP-LITERAL) (@LONG-INTEGER @LONG-INTEGER-WRAPPER WRAP-LITERAL) (@INTEGER @BOOLEAN-WRAPPER INTEGER-TO-BOOLEAN-WRAPPER) (@INTEGER @BOOLEAN INTEGER-TO-BOOLEAN) (@FLOAT @FLOAT-WRAPPER WRAP-LITERAL) (@MUTABLE-STRING @STRING MUTABLE-STRING-TO-STRING) (@MUTABLE-STRING @MUTABLE-STRING-WRAPPER WRAP-LITERAL) (@STRING @STRING-WRAPPER WRAP-LITERAL) (@STRING @MUTABLE-STRING STRING-TO-MUTABLE-STRING) (@STRING @SYMBOL INTERN-SYMBOL) (@CHARACTER @CHARACTER-WRAPPER WRAP-LITERAL) (@CHARACTER @STRING CHARACTER-TO-STRING) (@FUNCTION-CODE @FUNCTION-CODE-WRAPPER WRAP-LITERAL) (@METHOD-CODE @METHOD-CODE-WRAPPER WRAP-LITERAL) (@SYMBOL @STRING SYMBOL-NAME) (@BOOLEAN-WRAPPER @BOOLEAN INLINE-UNWRAP-BOOLEAN) (@INTEGER-WRAPPER @INTEGER WRAPPER-VALUE) (@INTEGER-WRAPPER @LONG-INTEGER WRAPPER-VALUE) (@LONG-INTEGER-WRAPPER @LONG-INTEGER WRAPPER-VALUE) (@FLOAT-WRAPPER @FLOAT WRAPPER-VALUE) (@NUMBER-WRAPPER @FLOAT NUMBER-WRAPPER-TO-FLOAT) (@STRING-WRAPPER @STRING WRAPPER-VALUE) (@MUTABLE-STRING-WRAPPER @MUTABLE-STRING WRAPPER-VALUE) (@CHARACTER-WRAPPER @CHARACTER WRAPPER-VALUE) (@FUNCTION-CODE-WRAPPER @FUNCTION-CODE WRAPPER-VALUE) (@METHOD-CODE-WRAPPER @METHOD-CODE WRAPPER-VALUE) (@SURROGATE @CLASS SURROGATE-VALUE) (@SURROGATE @MODULE SURROGATE-VALUE) (@INPUT-STREAM @NATIVE-INPUT-STREAM NATIVE-STREAM) (@OUTPUT-STREAM @NATIVE-OUTPUT-STREAM NATIVE-STREAM) (@NUMBER @INTEGER (CAST <X> @INTEGER)) (@NUMBER @LONG-INTEGER (CAST <X> @LONG-INTEGER)) (@NUMBER @FLOAT (CAST <X> @FLOAT)) (@INTEGER @FLOAT (CAST <X> @FLOAT)) (@INTEGER @SINGLE-FLOAT (CAST <X> @SINGLE-FLOAT)) (@LONG-INTEGER @FLOAT (CAST <X> @FLOAT)) (@LONG-INTEGER @SINGLE-FLOAT (CAST <X> @SINGLE-FLOAT)) (@FLOAT @SINGLE-FLOAT IDENTITY) (@FLOAT @DOUBLE-FLOAT IDENTITY) (@INTEGER @SHORT-INTEGER IDENTITY) (@INTEGER @LONG-INTEGER IDENTITY) (@INTEGER @UNSIGNED-SHORT-INTEGER IDENTITY) (@INTEGER @UNSIGNED-LONG-INTEGER IDENTITY))) :DOCUMENTATION \"Table of triples used by `lookup-coersion-method' to\nlocate a coersion method.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *SYMBOL-REGISTRY* (HASH-TABLE OF GENERALIZED-SYMBOL GENERALIZED-SYMBOL) (NEW (HASH-TABLE OF GENERALIZED-SYMBOL GENERALIZED-SYMBOL)) :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *SYMBOL-SET* (LIST OF GENERALIZED-SYMBOL) (NEW (LIST OF GENERALIZED-SYMBOL)))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *CURRENTFILENAME* STRING NULL :PUBLIC? TRUE :DOCUMENTATION \"Basename of file that is currently being translated.\nA NULL value indicates an incremental translation.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *SPECIALVARIABLESTACK* (KEY-VALUE-LIST OF SYMBOL SYMBOL) (NEW (KEY-VALUE-LIST OF SYMBOL SYMBOL)) :DOCUMENTATION \"Stack mirroring the current state of bound specials\nwith their associated old-value variables.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *SPECIALSENABLED?* BOOLEAN TRUE :DOCUMENTATION \"`true' if using specials is enabled and legal.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *NOFSPECIALSATLOOPENTRY* INTEGER 0 :DOCUMENTATION \"Number of specials bound at the most recent entry\nto a LOOP/WHILE/FOREACH construct.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *TYPE-PREDICATE-TABLE* (CONS OF CONS) (BQUOTE ((@BOOLEAN BOOLEAN? SUBTYPE-OF-BOOLEAN?) (@INTEGER INTEGER? SUBTYPE-OF-INTEGER?) (@LONG-INTEGER LONG-INTEGER? SUBTYPE-OF-LONG-INTEGER?) (@FLOAT FLOAT? SUBTYPE-OF-FLOAT?) (@STRING STRING? SUBTYPE-OF-STRING?) (@CHARACTER CHARACTER? SUBTYPE-OF-CHARACTER?) (@WRAPPER WRAPPER? SUBTYPE-OF-WRAPPER?) (@BOOLEAN-WRAPPER BOOLEAN? SUBTYPE-OF-BOOLEAN?) (@INTEGER-WRAPPER INTEGER? SUBTYPE-OF-INTEGER?) (@LONG-INTEGER-WRAPPER LONG-INTEGER? SUBTYPE-OF-LONG-INTEGER?) (@FLOAT-WRAPPER FLOAT? SUBTYPE-OF-FLOAT?) (@STRING-WRAPPER STRING? SUBTYPE-OF-STRING?) (@CHARACTER-WRAPPER CHARACTER? SUBTYPE-OF-CHARACTER?) (@VERBATIM-STRING-WRAPPER VERBATIM-STRING? SUBTYPE-OF-VERBATIM-STRING?) (@SURROGATE SURROGATE? SUBTYPE-OF-SURROGATE?) (@TYPE TYPE? SUBTYPE-OF-TYPE?) (@SYMBOL SYMBOL? SUBTYPE-OF-SYMBOL?) (@TRANSIENT-SYMBOL TRANSIENT-SYMBOL? SUBTYPE-OF-TRANSIENT-SYMBOL?) (@KEYWORD KEYWORD? SUBTYPE-OF-KEYWORD?) (@CONS CONS? SUBTYPE-OF-CONS?) (@CLASS STELLA-CLASS? SUBTYPE-OF-CLASS?) (@STORAGE-SLOT STORAGE-SLOT? SUBTYPE-OF-STORAGE-SLOT?) (@METHOD-SLOT METHOD-SLOT? SUBTYPE-OF-METHOD-SLOT?) (@ANCHORED-TYPE-SPECIFIER ANCHORED-TYPE-SPECIFIER? SUBTYPE-OF-ANCHORED-TYPE-SPECIFIER?) (@PARAMETRIC-TYPE-SPECIFIER PARAMETRIC-TYPE-SPECIFIER? SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER?))) :DOCUMENTATION \"Table of specialized type predicates for various types.\nThese predicates have to be used instead of `isa?', since they also work\nduring bootstrap when only some class objects are defined.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *NUMERIC-TYPE-HIERARCHY* (LIST OF TYPE) (LIST @INTEGER @LONG-INTEGER @FLOAT @NUMBER))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *INLININGMETHODCALL?* BOOLEAN FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *MIXIN-IMPLEMENTATION-STYLE* KEYWORD :SECOND-CLASS :DOCUMENTATION \"A keyword describing how mixin classes are handled in\nsingle-inheritance target languages.  The legal values are\n:FIRST-CLASS-WITH-METHOD, which means that variables of a mixin type\nare legal and that slot access on a mixin type is facilitated by\ninherited-down accessor methods and a catch-all method on OBJECT,\n:FIRST-CLASS-WITH-TYPECASE which is similar but replaces the catch-all\nmethod with a function using a TYPECASE, and :SECOND-CLASS, which\nmeans that variables of a mixin type are illegal and no additional\naccessors and catch-all methods are needed.\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *MAX-NUMBER-OF-STARTUP-UNITS* INTEGER 60 :DOCUMENTATION \"The maximum number of startup units that can be combined\ninto a single startup function (this avoids the construction of huge startup\nfunctions that would cause too much stress for some wimpy compilers).\")", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *NATIVE-NAME-TABLE* (HASH-TABLE OF SYMBOL (KEY-VALUE-LIST OF KEYWORD LIST)) (NEW HASH-TABLE))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *GLOBAL-EXCEPTION-HANDLER* FUNCTION-CODE NULL :DOCUMENTATION \"Handler to handle exceptions caught within a c-callable function that throws exceptions.\nIf non-NULL the handler will be called with two string arguments: message and context.\nThis is intended primarily for language environments that can't directly catch native\nexceptions (e.g., if we are in C or Python).\" :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *C-API-RESULT-BUFFER* NATIVE-OBJECT-POINTER NULL :DOCUMENTATION \"Result buffer used to support temporary protection of garbage-collectable\nobjects when a C API function is called from a non-C environment (such as Python).\" :PUBLIC? FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *EVALUATIONTREE* OBJECT NULL :PUBLIC? TRUE)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *EVALUATIONPARENTTREE* OBJECT NULL :PUBLIC? TRUE)", null);
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
