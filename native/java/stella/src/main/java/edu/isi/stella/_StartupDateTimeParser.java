//  -*- Mode: Java -*-
//
// _StartupDateTimeParser.java

/*
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
*/

package edu.isi.stella;

import edu.isi.stella.javalib.*;

public class _StartupDateTimeParser {
  static void helpStartupDateTimeParser1() {
    {
      Stella.SYM_STELLA_ITEM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ITEM", null, 0)));
      Stella.SYM_STELLA_SECOND = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SECOND", null, 0)));
      Stella.SYM_STELLA_YESTERDAY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("YESTERDAY", null, 0)));
      Stella.SYM_STELLA_TODAY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TODAY", null, 0)));
      Stella.SYM_STELLA_TOMORROW = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOMORROW", null, 0)));
      Stella.SYM_STELLA_NOW = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NOW", null, 0)));
      Stella.SYM_STELLA_BCE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("BCE", null, 0)));
      Stella.SYM_STELLA_CE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CE", null, 0)));
      Stella.SYM_STELLA_YEAR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("YEAR", null, 0)));
      Stella.SYM_STELLA_DATE_DIVIDER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DATE-DIVIDER", null, 0)));
      Stella.SYM_STELLA_MONTH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MONTH", null, 0)));
      Stella.SYM_STELLA_DAY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DAY", null, 0)));
      Stella.SYM_STELLA_NOON_MIDN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NOON-MIDN", null, 0)));
      Stella.SYM_STELLA_WEEKDAY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("WEEKDAY", null, 0)));
      Stella.SYM_STELLA_DATE_TIME_DIVIDER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("DATE-TIME-DIVIDER", null, 0)));
      Stella.SYM_STELLA_HOUR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("HOUR", null, 0)));
      Stella.SYM_STELLA_TIME_DIVIDER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TIME-DIVIDER", null, 0)));
      Stella.SYM_STELLA_MINUTE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MINUTE", null, 0)));
      Stella.SYM_STELLA_SECONDP = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SECONDP", null, 0)));
      Stella.SYM_STELLA_AM_PM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("AM-PM", null, 0)));
      Stella.SYM_STELLA_ZONE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ZONE", null, 0)));
      Stella.SYM_STELLA_ZONE_MINUTE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ZONE-MINUTE", null, 0)));
      Stella.SYM_STELLA_AM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("AM", null, 0)));
      Stella.SYM_STELLA_PM = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("PM", null, 0)));
      Stella.SYM_STELLA_NOON = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NOON", null, 0)));
      Stella.SYM_STELLA_MIDN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MIDN", null, 0)));
      Stella.SYM_STELLA_ERA = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ERA", null, 0)));
      Stella.SYM_STELLA_STARTUP_DATE_TIME_PARSER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-DATE-TIME-PARSER", null, 0)));
    }
  }

  static void helpStartupDateTimeParser2() {
    {
      Stella.WHITESPACE_CHARS = Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(CharacterWrapper.wrapCharacter('\f'), Cons.cons(CharacterWrapper.wrapCharacter(','), Cons.cons(CharacterWrapper.wrapCharacter('\''), Cons.cons(CharacterWrapper.wrapCharacter('`'), Cons.cons(Stella.NIL, Stella.NIL))))))))));
      Stella.TIME_DIVIDERS = Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(':'), Cons.cons(CharacterWrapper.wrapCharacter('.'), Cons.cons(Stella.NIL, Stella.NIL))));
      Stella.DATE_DIVIDERS = Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter('\\'), Cons.cons(CharacterWrapper.wrapCharacter('/'), Cons.cons(CharacterWrapper.wrapCharacter('-'), Cons.cons(CharacterWrapper.wrapCharacter('+'), Cons.cons(Stella.NIL, Stella.NIL))))));
      Stella.DATE_TIME_DIVIDERS = Cons.cons(CharacterWrapper.wrapCharacter('T'), Stella.NIL);
      Stella.$ERROR_ON_MISMATCH$.setDefaultValue(new Boolean(false));
      Stella.$WEEKDAY_STRINGS$.setDefaultValue(StringHashTable.newStringHashTable());
      Stella.$MONTH_STRINGS$.setDefaultValue(StringToIntegerHashTable.newStringToIntegerHashTable());
      Stella.$ZONE_STRINGS$.setDefaultValue(StringHashTable.newStringHashTable());
      Stella.$ERA_STRINGS$.setDefaultValue(StringHashTable.newStringHashTable());
      Stella.$SPECIAL_STRINGS$.setDefaultValue(StringHashTable.newStringHashTable());
      Stella.$SPECIAL_SYMBOLS$.setDefaultValue(Cons.list$(Cons.cons(Stella.SYM_STELLA_YESTERDAY, Cons.cons(Stella.SYM_STELLA_TODAY, Cons.cons(Stella.SYM_STELLA_TOMORROW, Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Stella.NIL, Stella.NIL)))))));
      { Cons item = null;
        Cons iter053 = ((Cons)(Cons.list$(Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("monday"), Cons.cons(Stella.KWD_MONDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("mon"), Cons.cons(Stella.KWD_MONDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("tuesday"), Cons.cons(Stella.KWD_TUESDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("tues"), Cons.cons(Stella.KWD_TUESDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("tue"), Cons.cons(Stella.KWD_TUESDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("wednesday"), Cons.cons(Stella.KWD_WEDNESDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("wednes"), Cons.cons(Stella.KWD_WEDNESDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("wed"), Cons.cons(Stella.KWD_WEDNESDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("thursday"), Cons.cons(Stella.KWD_THURSDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("thurs"), Cons.cons(Stella.KWD_THURSDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("thu"), Cons.cons(Stella.KWD_THURSDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("friday"), Cons.cons(Stella.KWD_FRIDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("fri"), Cons.cons(Stella.KWD_FRIDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("saturday"), Cons.cons(Stella.KWD_SATURDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("sat"), Cons.cons(Stella.KWD_SATURDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("sunday"), Cons.cons(Stella.KWD_SUNDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("sun"), Cons.cons(Stella.KWD_SUNDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))))));

        for (;!(iter053 == Stella.NIL); iter053 = iter053.rest) {
          item = ((Cons)(iter053.value));
          ((StringHashTable)(Stella.$WEEKDAY_STRINGS$.get())).insertAt(((StringWrapper)(item.value)).wrapperValue, item.rest.value);
        }
      }
      { Cons item = null;
        Cons iter054 = ((Cons)(Cons.list$(Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("january"), Cons.cons(IntegerWrapper.wrapInteger(1), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("jan"), Cons.cons(IntegerWrapper.wrapInteger(1), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("february"), Cons.cons(IntegerWrapper.wrapInteger(2), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("feb"), Cons.cons(IntegerWrapper.wrapInteger(2), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("march"), Cons.cons(IntegerWrapper.wrapInteger(3), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("mar"), Cons.cons(IntegerWrapper.wrapInteger(3), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("april"), Cons.cons(IntegerWrapper.wrapInteger(4), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("apr"), Cons.cons(IntegerWrapper.wrapInteger(4), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("may"), Cons.cons(IntegerWrapper.wrapInteger(5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("june"), Cons.cons(IntegerWrapper.wrapInteger(6), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("jun"), Cons.cons(IntegerWrapper.wrapInteger(6), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("july"), Cons.cons(IntegerWrapper.wrapInteger(7), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("jul"), Cons.cons(IntegerWrapper.wrapInteger(7), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("august"), Cons.cons(IntegerWrapper.wrapInteger(8), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("aug"), Cons.cons(IntegerWrapper.wrapInteger(8), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("september"), Cons.cons(IntegerWrapper.wrapInteger(9), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("sept"), Cons.cons(IntegerWrapper.wrapInteger(9), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("sep"), Cons.cons(IntegerWrapper.wrapInteger(9), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("october"), Cons.cons(IntegerWrapper.wrapInteger(10), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("oct"), Cons.cons(IntegerWrapper.wrapInteger(10), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("november"), Cons.cons(IntegerWrapper.wrapInteger(11), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("nov"), Cons.cons(IntegerWrapper.wrapInteger(11), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("december"), Cons.cons(IntegerWrapper.wrapInteger(12), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("dec"), Cons.cons(IntegerWrapper.wrapInteger(12), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))));

        for (;!(iter054 == Stella.NIL); iter054 = iter054.rest) {
          item = ((Cons)(iter054.value));
          ((StringToIntegerHashTable)(Stella.$MONTH_STRINGS$.get())).insertAt(((StringWrapper)(item.value)).wrapperValue, ((IntegerWrapper)(item.rest.value)).wrapperValue);
        }
      }
      { Cons item = null;
        Cons iter055 = ((Cons)(Cons.list$(Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("gmt"), Cons.cons(FloatWrapper.wrapFloat(0.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("utc"), Cons.cons(FloatWrapper.wrapFloat(0.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("zulu"), Cons.cons(FloatWrapper.wrapFloat(0.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("est"), Cons.cons(FloatWrapper.wrapFloat(-5.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("edt"), Cons.cons(FloatWrapper.wrapFloat(-4.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("cst"), Cons.cons(FloatWrapper.wrapFloat(-6.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("cdt"), Cons.cons(FloatWrapper.wrapFloat(-5.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("mst"), Cons.cons(FloatWrapper.wrapFloat(-7.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("mdt"), Cons.cons(FloatWrapper.wrapFloat(-6.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("pst"), Cons.cons(FloatWrapper.wrapFloat(-8.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("pdt"), Cons.cons(FloatWrapper.wrapFloat(-7.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("a"), Cons.cons(FloatWrapper.wrapFloat(1.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("b"), Cons.cons(FloatWrapper.wrapFloat(2.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("c"), Cons.cons(FloatWrapper.wrapFloat(3.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("c*"), Cons.cons(FloatWrapper.wrapFloat(3.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("d"), Cons.cons(FloatWrapper.wrapFloat(4.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("d*"), Cons.cons(FloatWrapper.wrapFloat(4.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("e"), Cons.cons(FloatWrapper.wrapFloat(5.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("e*"), Cons.cons(FloatWrapper.wrapFloat(4.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("f"), Cons.cons(FloatWrapper.wrapFloat(6.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("f*"), Cons.cons(FloatWrapper.wrapFloat(6.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("g"), Cons.cons(FloatWrapper.wrapFloat(7.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("h"), Cons.cons(FloatWrapper.wrapFloat(7.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("i"), Cons.cons(FloatWrapper.wrapFloat(9.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("i*"), Cons.cons(FloatWrapper.wrapFloat(9.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("k"), Cons.cons(FloatWrapper.wrapFloat(10.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("k*"), Cons.cons(FloatWrapper.wrapFloat(10.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("l"), Cons.cons(FloatWrapper.wrapFloat(11.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("l*"), Cons.cons(FloatWrapper.wrapFloat(11.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("m"), Cons.cons(FloatWrapper.wrapFloat(12.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("m*"), Cons.cons(FloatWrapper.wrapFloat(13.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("m%"), Cons.cons(FloatWrapper.wrapFloat(14.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("n"), Cons.cons(FloatWrapper.wrapFloat(-1.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("o"), Cons.cons(FloatWrapper.wrapFloat(-2.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("p"), Cons.cons(FloatWrapper.wrapFloat(-3.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("p*"), Cons.cons(FloatWrapper.wrapFloat(-3.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("q"), Cons.cons(FloatWrapper.wrapFloat(-4.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("r"), Cons.cons(FloatWrapper.wrapFloat(-5.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("s"), Cons.cons(FloatWrapper.wrapFloat(-6.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("t"), Cons.cons(FloatWrapper.wrapFloat(-7.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("u"), Cons.cons(FloatWrapper.wrapFloat(-8.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("u*"), Cons.cons(FloatWrapper.wrapFloat(-8.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("v"), Cons.cons(FloatWrapper.wrapFloat(-9.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("v*"), Cons.cons(FloatWrapper.wrapFloat(-9.5), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("w"), Cons.cons(FloatWrapper.wrapFloat(-10.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("x"), Cons.cons(FloatWrapper.wrapFloat(-11.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("y"), Cons.cons(FloatWrapper.wrapFloat(-12.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("z"), Cons.cons(FloatWrapper.wrapFloat(0.0), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))))))))))))))))))))))))))));

        for (;!(iter055 == Stella.NIL); iter055 = iter055.rest) {
          item = ((Cons)(iter055.value));
          ((StringHashTable)(Stella.$ZONE_STRINGS$.get())).insertAt(((StringWrapper)(item.value)).wrapperValue, item.rest.value);
        }
      }
      { Cons item = null;
        Cons iter056 = ((Cons)(Cons.list$(Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("bc"), Cons.cons(Stella.SYM_STELLA_BCE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("bce"), Cons.cons(Stella.SYM_STELLA_BCE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("ad"), Cons.cons(Stella.SYM_STELLA_CE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(StringWrapper.wrapString("ce"), Cons.cons(Stella.SYM_STELLA_CE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.NIL, Stella.NIL))))))));

        for (;!(iter056 == Stella.NIL); iter056 = iter056.rest) {
          item = ((Cons)(iter056.value));
          ((StringHashTable)(Stella.$ERA_STRINGS$.get())).insertAt(((StringWrapper)(item.value)).wrapperValue, item.rest.value);
        }
      }
      { Symbol symbol = null;
        Cons iter057 = ((Cons)(Stella.$SPECIAL_SYMBOLS$.get()));

        for (;!(iter057 == Stella.NIL); iter057 = iter057.rest) {
          symbol = ((Symbol)(iter057.value));
          ((StringHashTable)(Stella.$SPECIAL_STRINGS$.get())).insertAt(Native.stringDowncase(symbol.symbolName), symbol);
        }
      }
      Stella.$DATE_TIME_PATTERNS$.setDefaultValue(Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Stella.NIL, Stella.NIL)))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MINUTE, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_SECONDP, Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MINUTE, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MINUTE, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MONTH, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_YEAR, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_WEEKDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_MONTH, Cons.cons(Stella.SYM_STELLA_DAY, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Cons.cons(Stella.SYM_STELLA_MINUTE, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YEAR, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Cons.cons(Stella.SYM_STELLA_YESTERDAY, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_YESTERDAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Cons.cons(Stella.SYM_STELLA_TODAY, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_TODAY, Stella.NIL), Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Cons.cons(Stella.SYM_STELLA_TOMORROW, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_TOMORROW, Stella.NIL), Cons.cons(Stella.SYM_STELLA_NOW, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YESTERDAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.SYM_STELLA_YESTERDAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_TODAY, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.SYM_STELLA_TODAY, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_TOMORROW, Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Cons.cons(Stella.SYM_STELLA_NOON_MIDN, Stella.NIL), Cons.cons(Stella.SYM_STELLA_TOMORROW, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_YESTERDAY, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_TOMORROW, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.SYM_STELLA_TODAY, Cons.cons(Stella.SYM_STELLA_HOUR, Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_MINUTE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_SECONDP, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_AM_PM, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_DATE_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_TIME_DIVIDER, Stella.NIL), Cons.cons(Cons.cons(Stella.SYM_STELLA_ZONE_MINUTE, Stella.NIL), Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))))))))))))))))))))))))))))))))))))));
    }
  }

  public static void startupDateTimeParser() {
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.$STELLA_MODULE$);
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          _StartupDateTimeParser.helpStartupDateTimeParser1();
        }
        if (Stella.currentStartupTimePhaseP(4)) {
          _StartupDateTimeParser.helpStartupDateTimeParser2();
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          Stella.defineFunctionObject("HASHLIST", "(DEFUN HASHLIST ((LIST OBJECT) (TABLE OBJECT)) :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "hashlist", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("YESTERDAY", "(DEFUN YESTERDAY ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.DecodedDateTime", "yesterday", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.DecodedDateTime"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("TODAY", "(DEFUN TODAY ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.DecodedDateTime", "today", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.DecodedDateTime"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("TOMORROW", "(DEFUN TOMORROW ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.DecodedDateTime", "tomorrow", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.DecodedDateTime"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("NOW", "(DEFUN NOW ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.DecodedDateTime", "now", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.DecodedDateTime"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("AM-PM", "(DEFUN (AM-PM SYMBOL) ((STRING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "amPm", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("ERA", "(DEFUN (ERA SYMBOL) ((STRING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "era", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("NOON-MIDN", "(DEFUN (NOON-MIDN SYMBOL) ((STRING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "noonMidn", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("WEEKDAY", "(DEFUN (WEEKDAY KEYWORD) ((THING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "weekday", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("MONTH", "(DEFUN (MONTH INTEGER-WRAPPER) ((THING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "month", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("ZONE", "(DEFUN (ZONE FLOAT-WRAPPER) ((THING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "zone", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("SPECIALP", "(DEFUN (SPECIALP SYMBOL) ((STRING OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "specialp", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("SECONDP", "(DEFUN (SECONDP BOOLEAN-WRAPPER) ((NUMBER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "secondp", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("MINUTE", "(DEFUN (MINUTE BOOLEAN-WRAPPER) ((NUMBER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "minute", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("ZONE-MINUTE", "(DEFUN (ZONE-MINUTE BOOLEAN-WRAPPER) ((NUMBER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "zoneMinute", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("HOUR", "(DEFUN (HOUR BOOLEAN-WRAPPER) ((NUMBER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "hour", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("DAY", "(DEFUN (DAY BOOLEAN-WRAPPER) ((NUMBER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "day", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("YEAR", "(DEFUN (YEAR BOOLEAN-WRAPPER) ((NUMBER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "year", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("TIME-DIVIDER", "(DEFUN (TIME-DIVIDER BOOLEAN-WRAPPER) ((THECHARACTER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "timeDivider", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("DATE-DIVIDER", "(DEFUN (DATE-DIVIDER BOOLEAN-WRAPPER) ((THECHARACTER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "dateDivider", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("DATE-TIME-DIVIDER", "(DEFUN (DATE-TIME-DIVIDER BOOLEAN-WRAPPER) ((THECHARACTER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "dateTimeDivider", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("MATCH-SUBSTRING", "(DEFUN (MATCH-SUBSTRING CONS) ((SUBSTRING STRING) (PARSING-TIME? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella", "matchSubstring", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE}), null);
          Stella.defineFunctionObject("DIGIT-VALUE", "(DEFUN (DIGIT-VALUE INTEGER) ((CHAR CHARACTER)))", Native.find_java_method("edu.isi.stella.Stella", "digitValue", new java.lang.Class [] {java.lang.Character.TYPE}), null);
          Stella.defineFunctionObject("DECOMPOSE-DATE-TIME-STRING", "(DEFUN (DECOMPOSE-DATE-TIME-STRING CONS) ((STRING STRING) (START INTEGER) (END INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "decomposeDateTimeString", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
          Stella.defineFunctionObject("MATCH-PATTERN-ELEMENT", "(DEFUN (MATCH-PATTERN-ELEMENT CONS) ((PATTERN-ELEMENT SYMBOL) (DATUM-ELEMENT OBJECT)))", Native.find_java_method("edu.isi.stella.Symbol", "matchPatternElement", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
          Stella.defineFunctionObject("MATCH-PATTERN", "(DEFUN (MATCH-PATTERN CONS) ((PATTERN CONS) (DATUM CONS) (DATUM-LENGTH INTEGER)))", Native.find_java_method("edu.isi.stella.Cons", "matchPattern", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.Cons"), java.lang.Integer.TYPE}), null);
          Stella.defineFunctionObject("DEAL-WITH-NOON-MIDN", "(DEFUN DEAL-WITH-NOON-MIDN ((FORM-VALUE OBJECT) (PARSED-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.Stella_Object", "dealWithNoonMidn", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("DEAL-WITH-AM-PM", "(DEFUN DEAL-WITH-AM-PM ((FORM-VALUE OBJECT) (PARSED-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.Stella_Object", "dealWithAmPm", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("DEAL-WITH-ERA", "(DEFUN DEAL-WITH-ERA ((FORM-VALUE OBJECT) (PARSED-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.Stella_Object", "dealWithEra", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("SET-TIME-VALUES", "(DEFUN SET-TIME-VALUES ((STRING-FORM (CONS OF CONS)) (PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))", Native.find_java_method("edu.isi.stella.Cons", "setTimeValues", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons"), Native.find_java_class("edu.isi.stella.DecodedDateTime"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("MATCH-DATE-TIME-PATTERNS", "(DEFUN (MATCH-DATE-TIME-PATTERNS CONS) ((DATE-TIME-STRING STRING) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella", "matchDateTimePatterns", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE}), null);
          Stella.defineFunctionObject("HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE", "(DEFUN (HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (BASE-DATE-TIME DECODED-DATE-TIME) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN) (MERGE-NULL-FIELDS? BOOLEAN)) :PUBLIC? FALSE :CONSTRUCTOR? TRUE)", Native.find_java_method("edu.isi.stella.DecodedDateTime", "helpParseDateTimeRelativeToBase", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.DecodedDateTime"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE, java.lang.Boolean.TYPE}), null);
          Stella.defineFunctionObject("PARSE-DATE-TIME-RELATIVE-TO-BASE", "(DEFUN (PARSE-DATE-TIME-RELATIVE-TO-BASE DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (BASE-DATE-TIME DECODED-DATE-TIME) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN) (MERGE-NULL-FIELDS? BOOLEAN)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Tries very hard to make sense out of the argument `date-time-string' and\nreturns a time structure if successful.  If not, it returns `null'.\nIf `error-on-mismatch?' is true, parse-date-time will signal an error instead of\nreturning `null'.\nDefault values are passed in via `base-date-time'.  If the timezone field that\nis passed in is NULL, then the local time zone for the parsed date/time will\nbe used.\nIf `merge-null-fields?' is `true', then default values from `base-time-date'\nwill be merged into missing components.  If `false', then they won't be merged\nin for null components but can still be used as a basis for interpreatation of\nrelative time strings like \\\"now\\\" or \\\"yesterday\\\"\")", Native.find_java_method("edu.isi.stella.DecodedDateTime", "parseDateTimeRelativeToBase", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.DecodedDateTime"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE, java.lang.Boolean.TYPE}), null);
          Stella.defineFunctionObject("PARSE-DATE-TIME-IN-TIME-ZONE", "(DEFUN (PARSE-DATE-TIME-IN-TIME-ZONE DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (TIME-ZONE FLOAT) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Tries very hard to make sense out of the argument `date-time-string' and\nreturns a time structure if successful.  If not, it returns `null'.\nIf `error-on-mismatch?' is true, parse-date-time will signal an error instead of\nreturning `null'.  \nDefault values are 00:00:00 in the given timezone on the current date.  If the\ngiven `time-zone' value is `null', then the local time zone for the given date\nand time will be used as determined by the operating system.\")", Native.find_java_method("edu.isi.stella.DecodedDateTime", "parseDateTimeInTimeZone", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Double.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE}), null);
          Stella.defineFunctionObject("PARSE-DATE-TIME", "(DEFUN (PARSE-DATE-TIME DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Tries very hard to make sense out of the argument `date-time-string' and\nreturns a time structure if successful.  If not, it returns `null'.\nIf `error-on-mismatch?' is true, parse-date-time will signal an error instead of\nreturning `null'.  \nDefault values are 00:00:00 local time on the current date\" (RETURN (PARSE-DATE-TIME-IN-TIME-ZONE DATE-TIME-STRING NULL START END ERROR-ON-MISMATCH?)))", Native.find_java_method("edu.isi.stella.DecodedDateTime", "parseDateTime", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE}), null);
          Stella.defineFunctionObject("STRING-TO-DECODED-DATE-TIME", "(DEFUN (STRING-TO-DECODED-DATE-TIME DECODED-DATE-TIME) ((INPUT STRING)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Returns a decoded date-time object representing the date\nand time parsed from the `input' string.  If no valid parse is found,\n`null' is returned.\")", Native.find_java_method("edu.isi.stella.DecodedDateTime", "stringToDecodedDateTime", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("STRING-TO-CALENDAR-DATE", "(DEFUN (STRING-TO-CALENDAR-DATE CALENDAR-DATE) ((INPUT STRING)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Returns a calendar date object representing the date and time\nparsed from the `input' string.  If no valid parse is found,\n`null' is returned.\")", Native.find_java_method("edu.isi.stella.CalendarDate", "stringToCalendarDate", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("STRING-TO-CALENDAR-DATE-WITH-DEFAULT", "(DEFUN (STRING-TO-CALENDAR-DATE-WITH-DEFAULT CALENDAR-DATE) ((INPUT-DATE STRING) (DEFAULT-DATE DECODED-DATE-TIME)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Returns a calendar date object representing the date and time\nparsed from the `input-date' string.  Default values for missing fields and\nthe interpretation of relative references come from `default-date'.  If the\n`default-date' is `null', the current date will be used.  If a null set of\ndefaults is desired, use `*NULL-DECODED-DATE-TIME*'.\nIf no valid parse is found, `null' is returned.\")", Native.find_java_method("edu.isi.stella.CalendarDate", "stringToCalendarDateWithDefault", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("edu.isi.stella.DecodedDateTime")}), null);
          Stella.defineFunctionObject("STARTUP-DATE-TIME-PARSER", "(DEFUN STARTUP-DATE-TIME-PARSER () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella._StartupDateTimeParser", "startupDateTimeParser", new java.lang.Class [] {}), null);
          { MethodSlot function = Symbol.lookupFunction(Stella.SYM_STELLA_STARTUP_DATE_TIME_PARSER);

            KeyValueList.setDynamicSlotValue(function.dynamicSlots, Stella.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupDateTimeParser"), Stella.NULL_STRING_WRAPPER);
          }
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("/STELLA")))));
          Stella.defineGlobalVariableObject("(DEFCONSTANT WHITESPACE-CHARS CONS (BQUOTE (#\\  #\\Tab #\\Linefeed #\\Return #\\Page #\\, #\\' #\\`)))", null);
          Stella.defineGlobalVariableObject("(DEFCONSTANT TIME-DIVIDERS CONS (BQUOTE (#\\: #\\.)))", null);
          Stella.defineGlobalVariableObject("(DEFCONSTANT DATE-DIVIDERS CONS (BQUOTE (#\\\\ #\\/ #\\- #\\+)))", null);
          Stella.defineGlobalVariableObject("(DEFCONSTANT DATE-TIME-DIVIDERS CONS (BQUOTE (#\\T)))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *ERROR-ON-MISMATCH* BOOLEAN FALSE :PUBLIC? TRUE :DOCUMENTATION \"If TRUE, an error will be signalled if parse-date-time is unable\n   to determine the time/date format of the string.\")", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *WEEKDAY-STRINGS* (STRING-HASH-TABLE OF STRING KEYWORD) (NEW (STRING-HASH-TABLE OF STRING KEYWORD)))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *MONTH-STRINGS* STRING-TO-INTEGER-HASH-TABLE (NEW STRING-TO-INTEGER-HASH-TABLE))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *ZONE-STRINGS* (STRING-HASH-TABLE OF STRING FLOAT-WRAPPER) (NEW (STRING-HASH-TABLE OF STRING FLOAT-WRAPPER)))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *ERA-STRINGS* (STRING-HASH-TABLE OF STRING SYMBOL) (NEW (STRING-HASH-TABLE OF STRING SYMBOL)))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *SPECIAL-STRINGS* STRING-HASH-TABLE (NEW STRING-HASH-TABLE))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *SPECIAL-SYMBOLS* (CONS OF SYMBOL) (BQUOTE (YESTERDAY TODAY TOMORROW NOW)))", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *DATE-TIME-PATTERNS* CONS (BQUOTE ((YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY (NOON-MIDN)) ((NOON-MIDN) (WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR) ((NOON-MIDN) (WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR) ((NOON-MIDN) (WEEKDAY) MONTH (DATE-DIVIDER) DAY) ((NOON-MIDN) YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY) ((NOON-MIDN) MONTH (DATE-DIVIDER) YEAR) ((NOON-MIDN) YEAR (DATE-DIVIDER) MONTH) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (NOON-MIDN (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((DATE-TIME-DIVIDER) HOUR (NOON-MIDN)) (YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY NOON-MIDN (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY NOW) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (MONTH (DATE-DIVIDER) YEAR (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (MONTH (DATE-DIVIDER) YEAR (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) (WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) (WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) (WEEKDAY) MONTH (DATE-DIVIDER) DAY) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) MONTH (DATE-DIVIDER) YEAR) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) YEAR (DATE-DIVIDER) MONTH) (WEEKDAY MONTH DAY HOUR (TIME-DIVIDER) MINUTE (TIME-DIVIDER) SECONDP (AM-PM) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) YEAR) ((WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR HOUR (TIME-DIVIDER) MINUTE (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR HOUR (TIME-DIVIDER) MINUTE (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) (MONTH)) (MONTH (DATE-DIVIDER) (YEAR)) ((WEEKDAY) MONTH DAY HOUR TIME-DIVIDER MINUTE (TIME-DIVIDER) (SECONDP) YEAR) (NOW (YESTERDAY)) ((YESTERDAY) NOW) (NOW (TODAY)) ((TODAY) NOW) (NOW (TOMORROW)) ((TOMORROW) NOW) (YESTERDAY (NOON-MIDN)) ((NOON-MIDN) YESTERDAY) (TODAY (NOON-MIDN)) ((NOON-MIDN) TODAY) (TOMORROW (NOON-MIDN)) ((NOON-MIDN) TOMORROW) (YESTERDAY HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (TOMORROW HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (TODAY HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)))))", null);
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
