//  -*- Mode: Java -*-
//
// _StartupRead.java

/*
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
*/

package edu.isi.stella;

import edu.isi.stella.javalib.*;

public class _StartupRead {
  static void helpStartupRead1() {
    {
      Stella.SGT_STELLA_TOKENIZER_TABLE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TOKENIZER-TABLE", null, 1)));
      Stella.SYM_STELLA_TRANSITIONS = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TRANSITIONS", null, 0)));
      Stella.SYM_STELLA_UNIQUE_STATE_NAMES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("UNIQUE-STATE-NAMES", null, 0)));
      Stella.SYM_STELLA_STATE_NAMES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STATE-NAMES", null, 0)));
      Stella.SYM_STELLA_LEGAL_EOF_STATES = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LEGAL-EOF-STATES", null, 0)));
      Stella.SYM_STELLA_CHARACTER_SET = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CHARACTER-SET", null, 0)));
      Stella.KWD_START = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("START", null, 2)));
      Stella.KWD_EOF = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("EOF", null, 2)));
      Stella.KWD_CHARACTER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CHARACTER", null, 2)));
      Stella.SGT_STELLA_TOKENIZER_TOKEN = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TOKENIZER-TOKEN", null, 1)));
      Stella.SYM_STELLA_CONTENT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CONTENT", null, 0)));
      Stella.SYM_STELLA_NEXT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("NEXT", null, 0)));
      Stella.SGT_STELLA_TOKENIZER_STREAM_STATE = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("TOKENIZER-STREAM-STATE", null, 1)));
      Stella.SYM_STELLA_TABLE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TABLE", null, 0)));
      Stella.SYM_STELLA_STATE_DICTIONARY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STATE-DICTIONARY", null, 0)));
      Stella.SYM_STELLA_TOKEN_LIST = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOKEN-LIST", null, 0)));
      Stella.SYM_STELLA_TOK_TABLE_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_TABLE_", null, 0)));
      Stella.SYM_STELLA_TOK_TRANSITIONS_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_TRANSITIONS_", null, 0)));
      Stella.SYM_STELLA_TOK_STATENAMES_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_STATENAMES_", null, 0)));
      Stella.SYM_STELLA_TOK_TOKENSTART_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_TOKENSTART_", null, 0)));
      Stella.SYM_STELLA_TOK_ENDOFTOKENSp_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_ENDOFTOKENS?_", null, 0)));
      Stella.SYM_STELLA_TOK_STREAMSTATE_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_STREAMSTATE_", null, 0)));
      Stella.SYM_STELLA_TOKENIZER_STREAM_STATE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOKENIZER-STREAM-STATE", null, 0)));
      Stella.SYM_STELLA_TOK_BUFFER_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_BUFFER_", null, 0)));
      Stella.SYM_STELLA_STRING_TO_TOKENIZER_BYTE_ARRAY = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STRING-TO-TOKENIZER-BYTE-ARRAY", null, 0)));
      Stella.SYM_STELLA_TOK_STATE_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_STATE_", null, 0)));
      Stella.SYM_STELLA_TOK_NEXTSTATE_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_NEXTSTATE_", null, 0)));
      Stella.SYM_STELLA_TOK_CURSOR_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_CURSOR_", null, 0)));
      Stella.SYM_STELLA_TOK_SIZE_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_SIZE_", null, 0)));
      Stella.SYM_STELLA_TOK_END_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_END_", null, 0)));
      Stella.SYM_STELLA_TOK_INPUTSTREAM_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_INPUTSTREAM_", null, 0)));
      Stella.SYM_STELLA_TOK_ECHOSTREAM_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_ECHOSTREAM_", null, 0)));
      Stella.SYM_STELLA_GET_SAVED_STATE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-SAVED-STATE", null, 0)));
      Stella.SYM_STELLA_TOK_CHECKPOINT_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_CHECKPOINT_", null, 0)));
      Stella.SYM_STELLA_END_OF_TOKENSp = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("END-OF-TOKENS?", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_TEXT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-TEXT", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_TEXT_INTERNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-TEXT-INTERNAL", null, 0)));
      Stella.SYM_STELLA_COPY_TOKEN_TEXT_INTERNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("COPY-TOKEN-TEXT-INTERNAL", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_TYPE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-TYPE", null, 0)));
      Stella.SYM_STELLA_GET_NEXT_TOKEN = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-NEXT-TOKEN", null, 0)));
      Stella.SYM_STELLA_SAVE_TOKENIZER_STREAM_STATE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SAVE-TOKENIZER-STREAM-STATE", null, 0)));
      Stella.SYM_STELLA_CHARACTER_CODE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("CHARACTER-CODE", null, 0)));
      Stella.SYM_STELLA_BYTE_ARRAY_NTH = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("BYTE-ARRAY-NTH", null, 0)));
      Stella.SYM_STELLA_IF_OUTPUT_LANGUAGE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("IF-OUTPUT-LANGUAGE", null, 0)));
      Stella.SYM_STELLA_LOGOR = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOGOR", null, 0)));
      Stella.SYM_STELLA_SHIFT_LEFT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("SHIFT-LEFT", null, 0)));
      Stella.SYM_STELLA_LOGAND = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOGAND", null, 0)));
      Stella.SYM_STELLA_READ_INTO_TOKENIZER_BUFFER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("READ-INTO-TOKENIZER-BUFFER", null, 0)));
      Stella.SYM_STELLA_MOD = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("MOD", null, 0)));
      Stella.SGT_STELLA_STREAM_TOKENIZER = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("STREAM-TOKENIZER", null, 1)));
      Stella.KWD_ATOM = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ATOM", null, 2)));
      Stella.KWD_OPEN_PAREN = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-PAREN", null, 2)));
      Stella.KWD_CLOSE_PAREN = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CLOSE-PAREN", null, 2)));
      Stella.KWD_OPEN_STRING = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-STRING", null, 2)));
      Stella.KWD_STRING = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("STRING", null, 2)));
      Stella.KWD_SINGLE_QUOTE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SINGLE-QUOTE", null, 2)));
      Stella.KWD_BACK_QUOTE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("BACK-QUOTE", null, 2)));
      Stella.KWD_COMMA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("COMMA", null, 2)));
      Stella.SYM_STELLA_x = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("!", null, 0)));
      Stella.KWD_COMMENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("COMMENT", null, 2)));
    }
  }

  static void helpStartupRead2() {
    {
      Stella.KWD_HASH = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("HASH", null, 2)));
      Stella.KWD_PAREN_COMMENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PAREN-COMMENT", null, 2)));
      Stella.KWD_PAREN_COMMENT_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PAREN-COMMENT-ESCAPE", null, 2)));
      Stella.KWD_PAREN_COMMENT_BAR = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PAREN-COMMENT-BAR", null, 2)));
      Stella.KWD_ANY = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ANY", null, 2)));
      Stella.KWD_COMMA_SPLICE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("COMMA-SPLICE", null, 2)));
      Stella.KWD_SYMBOL_OR_SIGNED_NUMBER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-SIGNED-NUMBER", null, 2)));
      Stella.KWD_SYMBOL_OR_NUMBER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-NUMBER", null, 2)));
      Stella.KWD_INTEGER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("INTEGER", null, 2)));
      Stella.KWD_SYMBOL_OR_CL_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-CL-SYMBOL", null, 2)));
      Stella.KWD_OPEN_FULLY_ESCAPED_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-FULLY-ESCAPED-SYMBOL", null, 2)));
      Stella.KWD_FULLY_ESCAPED_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED-SYMBOL", null, 2)));
      Stella.KWD_ESCAPED_SYMBOL_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-SYMBOL-ESCAPE", null, 2)));
      Stella.KWD_QUALIFIED_NAME = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-NAME", null, 2)));
      Stella.KWD_OPEN_KEYWORD = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-KEYWORD", null, 2)));
      Stella.KWD_OPEN_SURROGATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("OPEN-SURROGATE", null, 2)));
      Stella.KWD_CLOSE_STRING = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CLOSE-STRING", null, 2)));
      Stella.KWD_STRING_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("STRING-ESCAPE", null, 2)));
      Stella.KWD_ESCAPED_STRING = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-STRING", null, 2)));
      Stella.KWD_CHARACTER_CONSTANT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CHARACTER-CONSTANT", null, 2)));
      Stella.KWD_SYMBOL_OR_MANTISSA = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-MANTISSA", null, 2)));
      Stella.KWD_SYMBOL_OR_MANTISSA2 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-MANTISSA2", null, 2)));
      Stella.KWD_FLOAT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FLOAT", null, 2)));
      Stella.KWD_SYMBOL_OR_EXPONENT_DELIMITER = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-EXPONENT-DELIMITER", null, 2)));
      Stella.KWD_SYMBOL_OR_EXPONENT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-EXPONENT", null, 2)));
      Stella.KWD_SYMBOL_OR_EXPONENT2 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-EXPONENT2", null, 2)));
      Stella.KWD_SYMBOL_OR_CL_SYMBOL2 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-CL-SYMBOL2", null, 2)));
      Stella.KWD_SYMBOL_OR_CL_SYMBOL3 = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("SYMBOL-OR-CL-SYMBOL3", null, 2)));
      Stella.KWD_CL_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CL-SYMBOL", null, 2)));
      Stella.KWD_ESCAPED_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-SYMBOL", null, 2)));
      Stella.KWD_CLOSE_FULLY_ESCAPED_NAME = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CLOSE-FULLY-ESCAPED-NAME", null, 2)));
      Stella.KWD_FULLY_ESCAPED_SYMBOL_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED-SYMBOL-ESCAPE", null, 2)));
      Stella.KWD_FULLY_ESCAPED_KEYWORD = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED-KEYWORD", null, 2)));
      Stella.KWD_ESCAPED_KEYWORD_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-KEYWORD-ESCAPE", null, 2)));
      Stella.KWD_ESCAPED_KEYWORD = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-KEYWORD", null, 2)));
      Stella.KWD_FULLY_ESCAPED_KEYWORD_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED-KEYWORD-ESCAPE", null, 2)));
      Stella.KWD_FULLY_ESCAPED_SURROGATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED-SURROGATE", null, 2)));
      Stella.KWD_ESCAPED_SURROGATE_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-SURROGATE-ESCAPE", null, 2)));
      Stella.KWD_ESCAPED_SURROGATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPED-SURROGATE", null, 2)));
      Stella.KWD_FULLY_ESCAPED_SURROGATE_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED-SURROGATE-ESCAPE", null, 2)));
      Stella.KWD_QUALIFIED_SURROGATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-SURROGATE", null, 2)));
      Stella.KWD_QUALIFIED_ESCAPED_SYMBOL_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-ESCAPED-SYMBOL-ESCAPE", null, 2)));
      Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-FULLY-ESCAPED-SYMBOL", null, 2)));
      Stella.KWD_QUALIFIED_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-SYMBOL", null, 2)));
      Stella.KWD_QUALIFIED_ESCAPED_SURROGATE_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-ESCAPED-SURROGATE-ESCAPE", null, 2)));
      Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-FULLY-ESCAPED-SURROGATE", null, 2)));
      Stella.KWD_QUALIFIED_ESCAPED_SYMBOL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-ESCAPED-SYMBOL", null, 2)));
      Stella.KWD_QUALIFIED_ESCAPED_SURROGATE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-ESCAPED-SURROGATE", null, 2)));
      Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-FULLY-ESCAPED-SYMBOL-ESCAPE", null, 2)));
      Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE_ESCAPE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUALIFIED-FULLY-ESCAPED-SURROGATE-ESCAPE", null, 2)));
      Stella.KWD_CLOSE_BALANCED_QUOTE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CLOSE-BALANCED-QUOTE", null, 2)));
      Stella.SYM_STELLA_WITH_TOKENIZER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("WITH-TOKENIZER", null, 0)));
      Stella.SYM_STELLA_$STELLA_TOKENIZER_TABLE$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*STELLA-TOKENIZER-TABLE*", null, 0)));
      Stella.SYM_STELLA_TOK_STELLALOGICALSTATENAMES_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_STELLALOGICALSTATENAMES_", null, 0)));
      Stella.SYM_STELLA_$STELLA_LOGICAL_STATE_NAMES$ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("*STELLA-LOGICAL-STATE-NAMES*", null, 0)));
      Stella.SYM_STELLA_TOK_STELLALOGICALSTATENAME_ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("TOK_STELLALOGICALSTATENAME_", null, 0)));
      Stella.SYM_STELLA_KEYWORD = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("KEYWORD", null, 0)));
      Stella.SYM_STELLA_GET_QUALIFIED_SYMBOL_SEPARATOR_POSITION_INTERNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-QUALIFIED-SYMBOL-SEPARATOR-POSITION-INTERNAL", null, 0)));
      Stella.KWD_FULLY_ESCAPED = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULLY-ESCAPED", null, 2)));
      Stella.SYM_STELLA_GET_TOKEN_INTEGER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-INTEGER", null, 0)));
    }
  }

  static void helpStartupRead3() {
    {
      Stella.SYM_STELLA_GET_TOKEN_INTEGER_INTERNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-INTEGER-INTERNAL", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_LONG_INTEGER = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-LONG-INTEGER", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_LONG_INTEGER_INTERNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-LONG-INTEGER-INTERNAL", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_FLOAT = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-FLOAT", null, 0)));
      Stella.SYM_STELLA_GET_TOKEN_FLOAT_INTERNAL = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("GET-TOKEN-FLOAT-INTERNAL", null, 0)));
      Stella.SGT_STELLA_STELLA_TOKEN = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("STELLA-TOKEN", null, 1)));
      Stella.SYM_STELLA_LOGICAL_TOKEN_TYPE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("LOGICAL-TOKEN-TYPE", null, 0)));
      Stella.SYM_STELLA_ESCAPE_MODE = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("ESCAPE-MODE", null, 0)));
      Stella.KWD_FULL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("FULL", null, 2)));
      Stella.KWD_PARTIAL = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PARTIAL", null, 2)));
      Stella.KWD_TEXT = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("TEXT", null, 2)));
      Stella.KWD_PUNCTUATION = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("PUNCTUATION", null, 2)));
      Stella.KWD_QUOTE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("QUOTE", null, 2)));
      Stella.SGT_STELLA_F_TOKENIZE_STRING_MEMO_TABLE_000 = ((Surrogate)(GeneralizedSymbol.internRigidSymbolWrtModule("F-TOKENIZE-STRING-MEMO-TABLE-000", null, 1)));
      Stella.KWD_INITIAL_LINEFEED = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("INITIAL-LINEFEED", null, 2)));
      Stella.KWD_INITIAL_RETURN = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("INITIAL-RETURN", null, 2)));
      Stella.KWD_LINEFEED = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("LINEFEED", null, 2)));
      Stella.KWD_RETURN = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("RETURN", null, 2)));
      Stella.KWD_RETURN_LINEFEED = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("RETURN-LINEFEED", null, 2)));
      Stella.KWD_LF = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("LF", null, 2)));
      Stella.KWD_CRLF = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CRLF", null, 2)));
      Stella.KWD_CR = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("CR", null, 2)));
      Stella.KWD_ASK = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("ASK", null, 2)));
      Stella.KWD_YES = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("YES", null, 2)));
      Stella.KWD_NO = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("NO", null, 2)));
      Stella.KWD_YES_VERBOSE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("YES-VERBOSE", null, 2)));
      Stella.KWD_NO_VERBOSE = ((Keyword)(GeneralizedSymbol.internRigidSymbolWrtModule("NO-VERBOSE", null, 2)));
      Stella.SYM_STELLA_STARTUP_READ = ((Symbol)(GeneralizedSymbol.internRigidSymbolWrtModule("STARTUP-READ", null, 0)));
    }
  }

  static void helpStartupRead4() {
    {
      Stella.$WITHTOKENIZERINPUTTYPE$.setDefaultValue(null);
      Stella.$STELLA_TOKENIZER_TABLE_DEFINITION$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_ATOM, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_DELIMITER, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("("), Cons.cons(Stella.KWD_OPEN_PAREN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(")"), Cons.cons(Stella.KWD_CLOSE_PAREN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_STRING, Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("'"), Cons.cons(Stella.KWD_SINGLE_QUOTE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("`"), Cons.cons(Stella.KWD_BACK_QUOTE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(","), Cons.cons(Stella.KWD_COMMA, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString(";"), Cons.cons(Stella.KWD_COMMENT, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(StringWrapper.wrapString("#"), Cons.cons(Stella.KWD_HASH, Cons.cons(Stella.SYM_STELLA_x, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter(' '), Cons.cons(CharacterWrapper.wrapCharacter('\t'), Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Stella.KWD_WHITE_SPACE, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_WHITE_SPACE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_COMMENT, Cons.cons(Cons.list$(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Cons.cons(CharacterWrapper.wrapCharacter('\r'), Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.KWD_START, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_COMMENT, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_PAREN_COMMENT, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_PAREN_COMMENT_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_PAREN_COMMENT_BAR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_PAREN_COMMENT, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_PAREN_COMMENT_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_PAREN_COMMENT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_PAREN_COMMENT_BAR, Cons.cons(StringWrapper.wrapString("#"), Cons.cons(Stella.KWD_START, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_PAREN_COMMENT_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_PAREN_COMMENT_BAR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_PAREN_COMMENT, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_PAREN, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CLOSE_PAREN, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SINGLE_QUOTE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_BACK_QUOTE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_COMMA, Cons.cons(StringWrapper.wrapString("."), Cons.cons(Stella.KWD_COMMA_SPLICE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("-+"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_SIGNED_NUMBER, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_NUMBER, Cons.cons(Stella.KWD_INTEGER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("cC"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(":"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_KEYWORD, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("@"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))))))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_COMMA_SPLICE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_STRING, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_CLOSE_STRING, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_STRING_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_CLOSE_STRING, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_STRING_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CLOSE_STRING, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_STRING_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_ESCAPED_STRING, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_STRING, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\""), Cons.cons(Stella.KWD_CLOSE_STRING, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_STRING_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ESCAPED_STRING, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_HASH, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_CHARACTER_CONSTANT, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_PAREN_COMMENT, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CHARACTER_CONSTANT, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_CHARACTER, Cons.cons(Stella.NIL, Stella.NIL)))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CHARACTER, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_CHARACTER, Cons.cons(Stella.NIL, Stella.NIL))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ATOM, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("-+"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_SIGNED_NUMBER, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_NUMBER, Cons.cons(Stella.KWD_INTEGER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("."), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("cC"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString(":"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_KEYWORD, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("@"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_SIGNED_NUMBER, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_NUMBER, Cons.cons(Stella.KWD_INTEGER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("."), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_NUMBER, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_NUMBER, Cons.cons(Stella.KWD_INTEGER, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("."), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA2, Cons.cons(Stella.KWD_FLOAT, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("eE"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT_DELIMITER, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA2, Cons.cons(Stella.KWD_FLOAT, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("eE"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT_DELIMITER, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA2, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_SYMBOL_OR_MANTISSA, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT_DELIMITER, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("+-"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT2, Cons.cons(Stella.KWD_FLOAT, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("0123456789"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT2, Cons.cons(Stella.KWD_FLOAT, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT2, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_SYMBOL_OR_EXPONENT, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("lL"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL2, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL2, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString(":"), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL3, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))), Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL_OR_CL_SYMBOL3, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_CL_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CL_SYMBOL, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_CL_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_KEYWORD, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_KEYWORD_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_KEYWORD_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_KEYWORD_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_ESCAPED_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_KEYWORD, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_KEYWORD_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ESCAPED_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_OPEN_SURROGATE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("@"), Cons.cons(Stella.KWD_QUALIFIED_SURROGATE, Cons.cons(StringWrapper.wrapString(":"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_SYMBOL, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_SURROGATE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE_ESCAPE, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_DELIMITER, Cons.cons(StringWrapper.wrapString("/|"), Cons.cons(Stella.KWD_ERROR, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(StringWrapper.wrapString("|"), Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(StringWrapper.wrapString("\\"), Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL)))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE_ESCAPE, Cons.cons(Stella.KWD_ANY, Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
      Stella.$STELLA_TOKENIZER_TABLE$ = Stella.unstringifyTokenizerTable("32768||64|ERROR|START|OPEN-PAREN|CLOSE-PAREN|OPEN-STRING|SINGLE-QUOTE|BACK-QUOTE|COMMA|COMMENT|HASH|WHITE-SPACE|SYMBOL-OR-SIGNED-NUMBER|SYMBOL-OR-NUMBER|SYMBOL-OR-MANTISSA|SYMBOL-OR-CL-SYMBOL|OPEN-FULLY-ESCAPED-SYMBOL|ESCAPED-SYMBOL-ESCAPE|QUALIFIED-NAME|OPEN-KEYWORD|OPEN-SURROGATE|SYMBOL|DELIMITER|PAREN-COMMENT|PAREN-COMMENT-ESCAPE|PAREN-COMMENT-BAR|COMMA-SPLICE|CLOSE-STRING|STRING-ESCAPE|STRING|ESCAPED-STRING|CHARACTER-CONSTANT|CHARACTER|ATOM|SYMBOL-OR-MANTISSA2|SYMBOL-OR-EXPONENT-DELIMITER|SYMBOL-OR-EXPONENT|SYMBOL-OR-EXPONENT2|SYMBOL-OR-CL-SYMBOL2|SYMBOL-OR-CL-SYMBOL3|CL-SYMBOL|ESCAPED-SYMBOL|CLOSE-FULLY-ESCAPED-NAME|FULLY-ESCAPED-SYMBOL-ESCAPE|FULLY-ESCAPED-SYMBOL|FULLY-ESCAPED-KEYWORD|ESCAPED-KEYWORD-ESCAPE|KEYWORD|ESCAPED-KEYWORD|FULLY-ESCAPED-KEYWORD-ESCAPE|FULLY-ESCAPED-SURROGATE|ESCAPED-SURROGATE-ESCAPE|SURROGATE|ESCAPED-SURROGATE|FULLY-ESCAPED-SURROGATE-ESCAPE|QUALIFIED-SURROGATE|QUALIFIED-ESCAPED-SYMBOL-ESCAPE|QUALIFIED-FULLY-ESCAPED-SYMBOL|QUALIFIED-SYMBOL|QUALIFIED-ESCAPED-SURROGATE-ESCAPE|QUALIFIED-FULLY-ESCAPED-SURROGATE|QUALIFIED-ESCAPED-SYMBOL|QUALIFIED-ESCAPED-SURROGATE|QUALIFIED-FULLY-ESCAPED-SYMBOL-ESCAPE|QUALIFIED-FULLY-ESCAPED-SURROGATE-ESCAPE|64|ERROR|START|OPEN-PAREN|CLOSE-PAREN|STRING|SINGLE-QUOTE|BACK-QUOTE|COMMA|COMMENT|HASH|WHITE-SPACE|SYMBOL|INTEGER|SYMBOL|SYMBOL|FULLY-ESCAPED-SYMBOL|ESCAPED-SYMBOL-ESCAPE|QUALIFIED-NAME|KEYWORD|SURROGATE|SYMBOL|DELIMITER|PAREN-COMMENT|PAREN-COMMENT-ESCAPE|PAREN-COMMENT-BAR|COMMA-SPLICE|CLOSE-STRING|STRING-ESCAPE|STRING|ESCAPED-STRING|CHARACTER-CONSTANT|CHARACTER|ATOM|FLOAT|SYMBOL|SYMBOL|FLOAT|SYMBOL|SYMBOL|CL-SYMBOL|ESCAPED-SYMBOL|CLOSE-FULLY-ESCAPED-NAME|FULLY-ESCAPED-SYMBOL-ESCAPE|FULLY-ESCAPED-SYMBOL|FULLY-ESCAPED-KEYWORD|ESCAPED-KEYWORD-ESCAPE|KEYWORD|ESCAPED-KEYWORD|FULLY-ESCAPED-KEYWORD-ESCAPE|FULLY-ESCAPED-SURROGATE|ESCAPED-SURROGATE-ESCAPE|SURROGATE|ESCAPED-SURROGATE|FULLY-ESCAPED-SURROGATE-ESCAPE|QUALIFIED-SURROGATE|QUALIFIED-ESCAPED-SYMBOL-ESCAPE|QUALIFIED-FULLY-ESCAPED-SYMBOL|QUALIFIED-SYMBOL|QUALIFIED-ESCAPED-SURROGATE-ESCAPE|QUALIFIED-FULLY-ESCAPED-SURROGATE|QUALIFIED-ESCAPED-SYMBOL|QUALIFIED-ESCAPED-SURROGATE|QUALIFIED-FULLY-ESCAPED-SYMBOL-ESCAPE|QUALIFIED-FULLY-ESCAPED-SURROGATE-ESCAPE|64|TTTTFTTTTFTTTTTFFTTTTTFFFTTFFFFTFTTTTTTTTTFFFFTTFFFTTFTFFTFFTTFF|");
      { PropertyList self065 = PropertyList.newPropertyList();

        self065.thePlist = Cons.list$(Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_QUALIFIED_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_CL_SYMBOL, Cons.cons(Stella.KWD_SYMBOL, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_QUALIFIED_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_QUALIFIED_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_QUALIFIED_FULLY_ESCAPED_SURROGATE, Cons.cons(Stella.KWD_SURROGATE, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.KWD_ESCAPED_KEYWORD, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.KWD_FULLY_ESCAPED_KEYWORD, Cons.cons(Stella.KWD_KEYWORD, Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(Stella.KWD_QUALIFIED_NAME, Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.KWD_ESCAPED_STRING, Cons.cons(Stella.KWD_STRING, Cons.cons(Stella.KWD_INTEGER, Cons.cons(Stella.KWD_INTEGER, Cons.cons(Stella.KWD_FLOAT, Cons.cons(Stella.KWD_FLOAT, Cons.cons(Stella.KWD_CHARACTER, Cons.cons(Stella.KWD_CHARACTER, Cons.cons(Stella.KWD_OPEN_PAREN, Cons.cons(Stella.KWD_OPEN_PAREN, Cons.cons(Stella.KWD_CLOSE_PAREN, Cons.cons(Stella.KWD_CLOSE_PAREN, Cons.cons(Stella.KWD_SINGLE_QUOTE, Cons.cons(Stella.KWD_SINGLE_QUOTE, Cons.cons(Stella.KWD_BACK_QUOTE, Cons.cons(Stella.KWD_BACK_QUOTE, Cons.cons(Stella.KWD_COMMA, Cons.cons(Stella.KWD_COMMA, Cons.cons(Stella.KWD_COMMA_SPLICE, Cons.cons(Stella.KWD_COMMA_SPLICE, Cons.cons(Stella.KWD_CLOSE_STRING, Cons.cons(Stella.KWD_CLOSE_BALANCED_QUOTE, Cons.cons(Stella.KWD_CLOSE_FULLY_ESCAPED_NAME, Cons.cons(Stella.KWD_CLOSE_BALANCED_QUOTE, Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        Stella.$STELLA_LOGICAL_STATE_NAMES_TABLE$ = self065;
      }
      Stella.$STELLA_LOGICAL_STATE_NAMES$ = Vector.newVector(Stella.$STELLA_TOKENIZER_TABLE$.stateNames.length());
      { int i = Stella.NULL_INTEGER;
        int iter067 = 0;
        int upperBound068 = Stella.$STELLA_LOGICAL_STATE_NAMES$.length() - 1;

        for (;iter067 <= upperBound068; iter067 = iter067 + 1) {
          i = iter067;
          (Stella.$STELLA_LOGICAL_STATE_NAMES$.theArray)[i] = (((Keyword)(Stella.$STELLA_LOGICAL_STATE_NAMES_TABLE$.lookup(((Keyword)(((GeneralizedSymbol)((Stella.$STELLA_TOKENIZER_TABLE$.stateNames.theArray)[i]))))))));
          if (((Keyword)((Stella.$STELLA_LOGICAL_STATE_NAMES$.theArray)[i])) == null) {
            (Stella.$STELLA_LOGICAL_STATE_NAMES$.theArray)[i] = Stella.KWD_ERROR;
          }
        }
      }
      Stella.$GET_TOKEN_INTEGER_CHECKPOINT$ = ((Stella.MOST_POSITIVE_INTEGER - 9) / 10);
      Stella.$GET_TOKEN_LONG_INTEGER_CHECKPOINT$ = ((Stella.MOST_POSITIVE_LONG_INTEGER - 9) / (10l));
      Stella.$STELLA_TOKENIZER_WHITE_SPACE_STATE$ = Stella.$STELLA_TOKENIZER_TABLE$.stateNames.position(Stella.KWD_WHITE_SPACE, 0);
      Stella.$READ_LINE_TOKENIZER_TABLE_DEFINITION$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_INITIAL_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_INITIAL_RETURN, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_INITIAL_LINEFEED, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_INITIAL_RETURN, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_INITIAL_RETURN, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_INITIAL_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_INITIAL_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL)))))))));
      Stella.$READ_LINE2_TOKENIZER_TABLE_DEFINITION$ = Cons.list$(Cons.cons(Cons.list$(Cons.cons(Stella.KWD_START, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_RETURN_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL)))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_RETURN_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.KWD_EOF, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\n'), Stella.NIL), Cons.cons(Stella.KWD_LINEFEED, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Cons.cons(CharacterWrapper.wrapCharacter('\r'), Stella.NIL), Cons.cons(Stella.KWD_RETURN, Cons.cons(Stella.SYM_STELLA_$, Cons.cons(Stella.KWD_OTHERWISE, Cons.cons(Stella.KWD_LINE, Cons.cons(Stella.NIL, Stella.NIL))))))))))))))), Cons.cons(Cons.list$(Cons.cons(Stella.KWD_ERROR, Cons.cons(Stella.KWD_INCLUDE, Cons.cons(Stella.KWD_START, Cons.cons(Stella.NIL, Stella.NIL))))), Cons.cons(Stella.NIL, Stella.NIL))))))));
      Stella.$USER_QUERY_ACTION$.setDefaultValue(Stella.KWD_ASK);
    }
  }

  static void helpStartupRead5() {
    {
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("TOKENIZER-TABLE", "(DEFCLASS TOKENIZER-TABLE (STANDARD-OBJECT) :SLOTS ((TRANSITIONS :TYPE STRING) (UNIQUE-STATE-NAMES :TYPE (VECTOR OF GENERALIZED-SYMBOL)) (STATE-NAMES :TYPE (VECTOR OF GENERALIZED-SYMBOL)) (LEGAL-EOF-STATES :TYPE (VECTOR OF BOOLEAN-WRAPPER))))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.TokenizerTable", "newTokenizerTable", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.TokenizerTable", "accessTokenizerTableSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerTable"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      Stella.defineStellaTypeFromStringifiedSource("(DEFTYPE CHARACTER-SET (CONS OF CHARACTER-WRAPPER))");
      Stella.defineClassFromStringifiedSource("TOKENIZER-BYTE", "(DEFCLASS TOKENIZER-BYTE () :CL-NATIVE-TYPE \"CHARACTER\" :CPP-NATIVE-TYPE \"char\" :JAVA-NATIVE-TYPE \"char\")");
      Stella.defineClassFromStringifiedSource("TOKENIZER-BYTE-ARRAY", "(DEFCLASS TOKENIZER-BYTE-ARRAY () :CL-NATIVE-TYPE \"STRING\" :CPP-NATIVE-TYPE \"char*\" :JAVA-NATIVE-TYPE \"char[]\")");
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("TOKENIZER-TOKEN", "(DEFCLASS TOKENIZER-TOKEN (STANDARD-OBJECT) :SLOTS ((TYPE :TYPE KEYWORD) (CONTENT :TYPE STRING) (NEXT :TYPE TOKENIZER-TOKEN)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.TokenizerToken", "newTokenizerToken", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.TokenizerToken", "accessTokenizerTokenSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerToken"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("TOKENIZER-STREAM-STATE", "(DEFCLASS TOKENIZER-STREAM-STATE (STANDARD-OBJECT) :SLOTS ((BUFFER :TYPE TOKENIZER-BYTE-ARRAY :INITIALLY (MAKE-TOKENIZER-BYTE-ARRAY *TOKENIZER-INITIAL-BUFFER-SIZE*)) (BUFFER-SIZE :TYPE INTEGER :INITIALLY *TOKENIZER-INITIAL-BUFFER-SIZE*) (CURSOR :TYPE INTEGER :INITIALLY *TOKENIZER-INITIAL-BUFFER-SIZE*) (END :TYPE INTEGER :INITIALLY *TOKENIZER-INITIAL-BUFFER-SIZE*) (STATE :TYPE INTEGER :INITIALLY 1) (TABLE :TYPE TOKENIZER-TABLE) (STATE-DICTIONARY :TYPE (DICTIONARY OF TOKENIZER-TABLE INTEGER-WRAPPER)) (TOKEN-LIST :TYPE TOKENIZER-TOKEN)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.TokenizerStreamState", "newTokenizerStreamState", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.TokenizerStreamState", "accessTokenizerStreamStateSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerStreamState"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("STREAM-TOKENIZER", "(DEFCLASS STREAM-TOKENIZER (ITERATOR) :DOCUMENTATION \"Iterator that generates tokens by tokenizing a `stream'\naccording to a particular tokenization `table'.\" :PUBLIC? TRUE :PARAMETERS ((ANY-VALUE :TYPE TOKENIZER-TOKEN)) :SLOTS ((STREAM :TYPE INPUT-STREAM :REQUIRED? TRUE) (TABLE :TYPE TOKENIZER-TABLE :REQUIRED? TRUE) (TOKEN :RENAMES VALUE)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.StreamTokenizer", "newStreamTokenizer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("edu.isi.stella.TokenizerTable")});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.StreamTokenizer", "accessStreamTokenizerSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StreamTokenizer"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
      { Stella_Class renamed_Class = Stella.defineClassFromStringifiedSource("STELLA-TOKEN", "(DEFCLASS STELLA-TOKEN (TOKENIZER-TOKEN) :SLOTS ((LOGICAL-TOKEN-TYPE :TYPE KEYWORD) (MODULE :TYPE STRING) (ESCAPE-MODE :TYPE KEYWORD) (NEXT :TYPE STELLA-TOKEN)))");

        renamed_Class.classConstructorCode = Native.find_java_method("edu.isi.stella.StellaToken", "newStellaToken", new java.lang.Class [] {});
        renamed_Class.classSlotAccessorCode = Native.find_java_method("edu.isi.stella.StellaToken", "accessStellaTokenSlotValue", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StellaToken"), Native.find_java_class("edu.isi.stella.Symbol"), Native.find_java_class("edu.isi.stella.Stella_Object"), java.lang.Boolean.TYPE});
      }
    }
  }

  static void helpStartupRead6() {
    {
      Stella.defineFunctionObject("PARSE-TOKENIZER-DEFINITION", "(DEFUN (PARSE-TOKENIZER-DEFINITION TOKENIZER-TABLE) ((DEFINITION (CONS OF CONS))))", Native.find_java_method("edu.isi.stella.Cons", "parseTokenizerDefinition", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("LEGAL-TOKENIZER-STATE?", "(DEFUN (LEGAL-TOKENIZER-STATE? BOOLEAN) ((X OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "legalTokenizerStateP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("LEGAL-TOKENIZER-FROM-STATE?", "(DEFUN (LEGAL-TOKENIZER-FROM-STATE? BOOLEAN) ((X OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "legalTokenizerFromStateP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("LEGAL-TOKENIZER-TO-STATE?", "(DEFUN (LEGAL-TOKENIZER-TO-STATE? BOOLEAN) ((X OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "legalTokenizerToStateP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("TOKENIZER-TO-STATE-NAME", "(DEFUN (TOKENIZER-TO-STATE-NAME GENERALIZED-SYMBOL) ((STATE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "tokenizerToStateName", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("TOKENIZER-TO-STATE-ALIAS", "(DEFUN (TOKENIZER-TO-STATE-ALIAS GENERALIZED-SYMBOL) ((STATE OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "tokenizerToStateAlias", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("PARSE-TOKENIZER-STATE-MODIFIERS", "(DEFUN (PARSE-TOKENIZER-STATE-MODIFIERS INTEGER) ((MODIFIER OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "parseTokenizerStateModifiers", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("TOKENIZER-INCLUDE-SPEC?", "(DEFUN (TOKENIZER-INCLUDE-SPEC? BOOLEAN) ((X OBJECT)))", Native.find_java_method("edu.isi.stella.Stella_Object", "tokenizerIncludeSpecP", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object")}), null);
      Stella.defineFunctionObject("PARSE-TOKENIZER-CHARACTER-SPEC", "(DEFUN (PARSE-TOKENIZER-CHARACTER-SPEC CHARACTER-SET) ((CHARACTERSPEC OBJECT) (ALLCHARACTERSETS (LIST OF CHARACTER-SET))))", Native.find_java_method("edu.isi.stella.Stella_Object", "parseTokenizerCharacterSpec", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.List")}), null);
      Stella.defineFunctionObject("STRINGIFY-TOKENIZER-TABLE", "(DEFUN (STRINGIFY-TOKENIZER-TABLE STRING) ((TABLE TOKENIZER-TABLE)))", Native.find_java_method("edu.isi.stella.TokenizerTable", "stringifyTokenizerTable", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerTable")}), null);
      Stella.defineFunctionObject("UNSTRINGIFY-TOKENIZER-TABLE", "(DEFUN (UNSTRINGIFY-TOKENIZER-TABLE TOKENIZER-TABLE) ((TABLE STRING)))", Native.find_java_method("edu.isi.stella.Stella", "unstringifyTokenizerTable", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("MAKE-TOKENIZER-BYTE-ARRAY", "(DEFUN (MAKE-TOKENIZER-BYTE-ARRAY TOKENIZER-BYTE-ARRAY) ((SIZE INTEGER)) :GLOBALLY-INLINE? TRUE :PUBLIC? TRUE (RETURN (VERBATIM :COMMON-LISP (CL:MAKE-STRING SIZE) :CPP \"new (PointerFreeGC) char[size]\" :JAVA \"new char[size]\")))", Native.find_java_method("edu.isi.stella.Stella", "makeTokenizerByteArray", new java.lang.Class [] {java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("STRING-TO-TOKENIZER-BYTE-ARRAY", "(DEFUN (STRING-TO-TOKENIZER-BYTE-ARRAY TOKENIZER-BYTE-ARRAY) ((STRING STRING)) :GLOBALLY-INLINE? TRUE :PUBLIC? TRUE (RETURN (VERBATIM :COMMON-LISP STRING :CPP \"mutableStringCopy(string)\" :JAVA \"string.toCharArray()\")))", Native.find_java_method("edu.isi.stella.Stella", "stringToTokenizerByteArray", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("TOKENIZER-BYTE-ARRAY-TO-STRING", "(DEFUN (TOKENIZER-BYTE-ARRAY-TO-STRING STRING) ((BYTES TOKENIZER-BYTE-ARRAY)) :GLOBALLY-INLINE? TRUE :PUBLIC? TRUE (RETURN (VERBATIM :COMMON-LISP BYTES :CPP \"((const char*)bytes)\" :JAVA \"new String(bytes)\")))", Native.find_java_method("edu.isi.stella.Stella", "tokenizerByteArrayToString", new java.lang.Class [] {Native.find_java_class("[C")}), null);
      Stella.defineMethodObject("(DEFMETHOD (BYTE-ARRAY-NTH CHARACTER) ((BUFFER TOKENIZER-BYTE-ARRAY) (POSITION INTEGER)) :GLOBALLY-INLINE? TRUE :PUBLIC? TRUE (RETURN (VERBATIM :COMMON-LISP (CL:SCHAR (CL:THE CL:SIMPLE-STRING BUFFER) (CL:THE CL:FIXNUM POSITION)) :CPP \"buffer[position]\" :JAVA \"buffer[position]\")))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Stella", "tokenizerByteArray_byteArrayNth", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE})), null);
      Stella.defineMethodObject("(DEFMETHOD (BYTE-ARRAY-NTH-SETTER TOKENIZER-BYTE) ((BUFFER TOKENIZER-BYTE-ARRAY) (CH CHARACTER) (POSITION INTEGER)) :GLOBALLY-INLINE? TRUE :PUBLIC? TRUE (RETURN (VERBATIM :COMMON-LISP (CL:SETF (CL:SCHAR (CL:THE CL:SIMPLE-STRING BUFFER) (CL:THE CL:FIXNUM POSITION)) (CL:THE CL:CHARACTER CH)) :CPP \"buffer[position] = ch\" :JAVA \"buffer[position] = ch\")))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.Stella", "tokenizerByteArray_byteArrayNthSetter", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Character.TYPE, java.lang.Integer.TYPE})), null);
      Stella.defineFunctionObject("NATIVE-BYTE-ARRAY-READ-SEQUENCE", "(DEFUN (NATIVE-BYTE-ARRAY-READ-SEQUENCE INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (STREAM NATIVE-INPUT-STREAM) (START INTEGER) (END INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "nativeByteArrayReadSequence", new java.lang.Class [] {Native.find_java_class("[C"), Native.find_java_class("edu.isi.stella.javalib.NativeInputStream"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("TOKENIZER-BYTE-ARRAY-READ-SEQUENCE", "(DEFUN (TOKENIZER-BYTE-ARRAY-READ-SEQUENCE INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (STREAM INPUT-STREAM) (START INTEGER) (END INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "tokenizerByteArrayReadSequence", new java.lang.Class [] {Native.find_java_class("[C"), Native.find_java_class("edu.isi.stella.InputStream"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("BYTE-ARRAY-READ-SEQUENCE", "(DEFUN (BYTE-ARRAY-READ-SEQUENCE INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (STREAM INPUT-STREAM) (START INTEGER) (END INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Read from `stream' filling `buffer' between `start' and `end' (depending\non how many characters are available).\nReturn the actual end pointer to the input read into `buffer'.  EOF is\nindicated by the return value being equal to start.\")", Native.find_java_method("edu.isi.stella.Stella", "byteArrayReadSequence", new java.lang.Class [] {Native.find_java_class("[C"), Native.find_java_class("edu.isi.stella.InputStream"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("NATIVE-BYTE-ARRAY-WRITE-SEQUENCE", "(DEFUN NATIVE-BYTE-ARRAY-WRITE-SEQUENCE ((BUFFER TOKENIZER-BYTE-ARRAY) (STREAM NATIVE-OUTPUT-STREAM) (START INTEGER) (END INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "nativeByteArrayWriteSequence", new java.lang.Class [] {Native.find_java_class("[C"), Native.find_java_class("edu.isi.stella.javalib.NativeOutputStream"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("BYTE-ARRAY-WRITE-SEQUENCE", "(DEFUN BYTE-ARRAY-WRITE-SEQUENCE ((BUFFER TOKENIZER-BYTE-ARRAY) (STREAM NATIVE-OUTPUT-STREAM) (START INTEGER) (END INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Write from `buffer' to `stream', using data in the buffer starting at position\n`start' stopping just before `end'.\")", Native.find_java_method("edu.isi.stella.Stella", "byteArrayWriteSequence", new java.lang.Class [] {Native.find_java_class("[C"), Native.find_java_class("edu.isi.stella.javalib.NativeOutputStream"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("ENSURE-TOKENIZER-BUFFER-SIZE", "(DEFUN ENSURE-TOKENIZER-BUFFER-SIZE ((STATE TOKENIZER-STREAM-STATE) (CURRENTTOKENSTART INTEGER) (REQUIREDSPACE INTEGER)))", Native.find_java_method("edu.isi.stella.TokenizerStreamState", "ensureTokenizerBufferSize", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerStreamState"), java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("READ-INTO-TOKENIZER-BUFFER", "(DEFUN (READ-INTO-TOKENIZER-BUFFER BOOLEAN) ((STREAM INPUT-STREAM) (STATE TOKENIZER-STREAM-STATE) (CURRENTTOKENSTART INTEGER)))", Native.find_java_method("edu.isi.stella.InputStream", "readIntoTokenizerBuffer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("edu.isi.stella.TokenizerStreamState"), java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("READ-CHARACTER-FROM-TOKENIZER-BUFFER", "(DEFUN (READ-CHARACTER-FROM-TOKENIZER-BUFFER CHARACTER BOOLEAN) ((STREAM INPUT-STREAM)))", Native.find_java_method("edu.isi.stella.InputStream", "readCharacterFromTokenizerBuffer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("UNREAD-CHARACTER-FROM-TOKENIZER-BUFFER", "(DEFUN UNREAD-CHARACTER-FROM-TOKENIZER-BUFFER ((CHAR CHARACTER) (STREAM INPUT-STREAM)))", Native.find_java_method("edu.isi.stella.Stella", "unreadCharacterFromTokenizerBuffer", new java.lang.Class [] {java.lang.Character.TYPE, Native.find_java_class("edu.isi.stella.InputStream")}), null);
      Stella.defineFunctionObject("READ-LINE-FROM-TOKENIZER-BUFFER", "(DEFUN (READ-LINE-FROM-TOKENIZER-BUFFER STRING) ((STREAM INPUT-STREAM)))", Native.find_java_method("edu.isi.stella.InputStream", "readLineFromTokenizerBuffer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream")}), null);
      Stella.defineMethodObject("(DEFMETHOD (BUFFERED-INPUT-LENGTH INTEGER) ((STATE TOKENIZER-STREAM-STATE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.TokenizerStreamState", "bufferedInputLength", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD CLEAR ((STATE TOKENIZER-STREAM-STATE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.TokenizerStreamState", "clear", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD RESET ((STATE TOKENIZER-STREAM-STATE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.TokenizerStreamState", "reset", new java.lang.Class [] {})), null);
      Stella.defineMethodObject("(DEFMETHOD (GET-SAVED-STATE INTEGER) ((STATE-OBJECT TOKENIZER-STREAM-STATE) (TABLE TOKENIZER-TABLE)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.TokenizerStreamState", "getSavedState", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.TokenizerTable")})), null);
      Stella.defineFunctionObject("WITH-TOKENIZER", "(DEFUN WITH-TOKENIZER ((TABLE OBJECT) (INPUT OBJECT) |&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "withTokenizer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("WITH-TOKENIZER-STRING-INPUT?", "(DEFUN (WITH-TOKENIZER-STRING-INPUT? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "withTokenizerStringInputP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("INSIDE-WITH-TOKENIZER?", "(DEFUN (INSIDE-WITH-TOKENIZER? BOOLEAN) ())", Native.find_java_method("edu.isi.stella.Stella", "insideWithTokenizerP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("END-OF-TOKENS?", "(DEFUN END-OF-TOKENS? () :TYPE OBJECT :MACRO? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "endOfTokensP", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-TOKEN-TEXT", "(DEFUN GET-TOKEN-TEXT (|&BODY| (OPTIONS CONS)) :TYPE OBJECT :MACRO? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "getTokenText", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-TOKEN-TEXT-INTERNAL", "(DEFUN (GET-TOKEN-TEXT-INTERNAL STRING) ((BUFFER TOKENIZER-BYTE-ARRAY) (START INTEGER) (END INTEGER) (SIZE INTEGER) (UPCASE? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella", "getTokenTextInternal", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE}), null);
      Stella.defineFunctionObject("COPY-TOKEN-TEXT", "(DEFUN COPY-TOKEN-TEXT ((BUFFER OBJECT) |&BODY| (OPTIONS CONS)) :TYPE OBJECT :MACRO? TRUE :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "copyTokenText", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("COPY-TOKEN-TEXT-INTERNAL", "(DEFUN (COPY-TOKEN-TEXT-INTERNAL INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (START INTEGER) (END INTEGER) (SIZE INTEGER) (UPCASE? BOOLEAN) (RESULTBUFFER STRING-BUFFER)))", Native.find_java_method("edu.isi.stella.Stella", "copyTokenTextInternal", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Boolean.TYPE, Native.find_java_class("edu.isi.stella.BufferedString")}), null);
      Stella.defineFunctionObject("GET-TOKEN-TYPE", "(DEFUN GET-TOKEN-TYPE () :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getTokenType", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("SAVE-TOKENIZER-STREAM-STATE", "(DEFUN SAVE-TOKENIZER-STREAM-STATE () :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "saveTokenizerStreamState", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("RESTORE-TOKENIZER-STREAM-STATE", "(DEFUN RESTORE-TOKENIZER-STREAM-STATE () :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "restoreTokenizerStreamState", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-NEXT-TOKEN", "(DEFUN GET-NEXT-TOKEN (|&BODY| (OPTIONS CONS)) :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "getNextToken", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("UNESCAPE-TOKEN-STRING", "(DEFUN (UNESCAPE-TOKEN-STRING STRING) ((TOKEN STRING) (ESCAPECHAR CHARACTER) (UPCASE? BOOLEAN)))", Native.find_java_method("edu.isi.stella.Stella", "unescapeTokenString", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Character.TYPE, java.lang.Boolean.TYPE}), null);
      Stella.defineMethodObject("(DEFMETHOD (NEXT? BOOLEAN) ((SELF STREAM-TOKENIZER)))", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.StreamTokenizer", "nextP", new java.lang.Class [] {})), null);
      Stella.defineFunctionObject("WITH-STELLA-TOKENIZER", "(DEFUN WITH-STELLA-TOKENIZER ((INPUT OBJECT) |&BODY| (BODY CONS)) :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Stella_Object", "withStellaTokenizer", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Stella_Object"), Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-NEXT-STELLA-TOKEN", "(DEFUN GET-NEXT-STELLA-TOKEN (|&BODY| (OPTIONS CONS)) :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "getNextStellaToken", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-STELLA-TOKEN-TYPE", "(DEFUN GET-STELLA-TOKEN-TYPE () :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getStellaTokenType", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-QUALIFIED-SYMBOL-SEPARATOR-POSITION", "(DEFUN GET-QUALIFIED-SYMBOL-SEPARATOR-POSITION (|&BODY| (ESCAPEMODE CONS)) :TYPE OBJECT :MACRO? TRUE)", Native.find_java_method("edu.isi.stella.Cons", "getQualifiedSymbolSeparatorPosition", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.Cons")}), null);
      Stella.defineFunctionObject("GET-QUALIFIED-SYMBOL-SEPARATOR-POSITION-INTERNAL", "(DEFUN (GET-QUALIFIED-SYMBOL-SEPARATOR-POSITION-INTERNAL INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (TOKENSTART INTEGER) (TOKENEND INTEGER) (SIZE INTEGER) (ESCAPEMODE KEYWORD)))", Native.find_java_method("edu.isi.stella.Stella", "getQualifiedSymbolSeparatorPositionInternal", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE, Native.find_java_class("edu.isi.stella.Keyword")}), null);
      Stella.defineFunctionObject("GET-TOKEN-INTEGER", "(DEFUN GET-TOKEN-INTEGER () :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"User-level macro to access the most recently parsed token as an integer.\nThis assumes correct signed integer syntax and only checks for overflows.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getTokenInteger", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-TOKEN-INTEGER-INTERNAL", "(DEFUN (GET-TOKEN-INTEGER-INTERNAL INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (START INTEGER) (END INTEGER) (SIZE INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "getTokenIntegerInternal", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("GET-TOKEN-LONG-INTEGER", "(DEFUN GET-TOKEN-LONG-INTEGER () :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"User-level macro to access the most recently parsed token as a long integer.\nThis assumes correct signed long-integer syntax and only checks for overflows.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getTokenLongInteger", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-TOKEN-LONG-INTEGER-INTERNAL", "(DEFUN (GET-TOKEN-LONG-INTEGER-INTERNAL LONG-INTEGER) ((BUFFER TOKENIZER-BYTE-ARRAY) (START INTEGER) (END INTEGER) (SIZE INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "getTokenLongIntegerInternal", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("GET-TOKEN-FLOAT", "(DEFUN GET-TOKEN-FLOAT () :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"User-level macro to access the most recently parsed token as a float.\nThis assumes correct signed float syntax and only checks for overflows.\nThe main benefit for this is that it doesn't generate strings and wrappers.\nFloat parsing and conversion is generally hairy and we are probably not\ncovering all special cases here; but we are fast :-)\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "getTokenFloat", new java.lang.Class [] {}), null);
      Stella.defineFunctionObject("GET-TOKEN-FLOAT-INTERNAL", "(DEFUN (GET-TOKEN-FLOAT-INTERNAL FLOAT) ((BUFFER TOKENIZER-BYTE-ARRAY) (START INTEGER) (END INTEGER) (SIZE INTEGER)))", Native.find_java_method("edu.isi.stella.Stella", "getTokenFloatInternal", new java.lang.Class [] {Native.find_java_class("[C"), java.lang.Integer.TYPE, java.lang.Integer.TYPE, java.lang.Integer.TYPE}), null);
      Stella.defineFunctionObject("TOKENIZE-S-EXPRESSION", "(DEFUN (TOKENIZE-S-EXPRESSION STELLA-TOKEN) ((STREAM INPUT-STREAM) (TOKENLIST STELLA-TOKEN)))", Native.find_java_method("edu.isi.stella.InputStream", "tokenizeSExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("edu.isi.stella.StellaToken")}), null);
      Stella.defineFunctionObject("PARSE-STELLA-NAME", "(DEFUN (PARSE-STELLA-NAME STRING STRING KEYWORD) ((NAME STRING) (ENABLECASECONVERSION? BOOLEAN)) :DOCUMENTATION \"Parse the printed representation `name' of a STELLA symbol, surrogate or\nkeyword and return its symbol name, module name and type (which is either\n:SYMBOL, :SURROGATE or :KEYWORD).  `name' can be qualified and must use the\nexact same syntax and escape characters that would be used if it were to be\nread by `read-s-expression-from-string' (or `unstringify').  If\n`enableCaseConversion?' is TRUE, the returned symbol name will be upcased if\nthe current module is case-insensitive; otherwise, it will be returned as is.\nRaises a read exception if `name' does not represent a symbol.\nThis function is available primarily for efficiency, since it is about\n10-15 times faster than `unstringify'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "parseStellaName", new java.lang.Class [] {Native.find_java_class("java.lang.String"), java.lang.Boolean.TYPE, Native.find_java_class("[Ljava.lang.Object;")}), null);
      Stella.defineFunctionObject("QUALIFIED-STELLA-NAME?", "(DEFUN (QUALIFIED-STELLA-NAME? BOOLEAN) ((NAME STRING)) :DOCUMENTATION \"Return TRUE if `name' is a symbol or surrogate qualified with a module\npathname or a module pathname ending with a `/'.  Assumes that `name'\nis the printed representation of a STELLA symbol (potentially containing\nescape characters).\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "qualifiedStellaNameP", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("PARSE-INTEGER", "(DEFUN (PARSE-INTEGER INTEGER) ((VALUE STRING)) :DOCUMENTATION \"Convert an integer `value' string into an integer.  Leading and trailing\nwhitespace is allowed.  Raise an error if we have illegal number syntax which makes it\npreferable over the naive C++ stringToInteger conversion function which just returns 0.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "parseInteger", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
      Stella.defineFunctionObject("PARSE-LONG-INTEGER", "(DEFUN (PARSE-LONG-INTEGER LONG-INTEGER) ((VALUE STRING)) :DOCUMENTATION \"Convert a long integer `value' string into a long integer.  Leading and\ntrailing whitespace is allowed.  Raise an error if we have illegal number syntax which makes it\npreferable over the naive C++ stringToInteger conversion function which just returns 0.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "parseLongInteger", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
    }
  }

  public static void startupRead() {
    { Object old$Module$000 = Stella.$MODULE$.get();
      Object old$Context$000 = Stella.$CONTEXT$.get();

      try {
        Native.setSpecial(Stella.$MODULE$, Stella.$STELLA_MODULE$);
        Native.setSpecial(Stella.$CONTEXT$, ((Module)(Stella.$MODULE$.get())));
        if (Stella.currentStartupTimePhaseP(2)) {
          _StartupRead.helpStartupRead1();
          _StartupRead.helpStartupRead2();
          _StartupRead.helpStartupRead3();
        }
        if (Stella.currentStartupTimePhaseP(4)) {
          _StartupRead.helpStartupRead4();
        }
        if (Stella.currentStartupTimePhaseP(5)) {
          _StartupRead.helpStartupRead5();
        }
        if (Stella.currentStartupTimePhaseP(6)) {
          Stella.finalizeClasses();
        }
        if (Stella.currentStartupTimePhaseP(7)) {
          _StartupRead.helpStartupRead6();
          Stella.defineFunctionObject("PARSE-FLOAT", "(DEFUN (PARSE-FLOAT FLOAT) ((VALUE STRING)) :DOCUMENTATION \"Convert a float `value' string into a float.  Leading and trailing\nwhitespace is allowed.  Raise an error if we have illegal number syntax which makes it\npreferable over the naive C++ stringToFloat conversion function which just returns 0.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "parseFloat", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("STELLA-TOKEN-LIST-TO-S-EXPRESSION", "(DEFUN (STELLA-TOKEN-LIST-TO-S-EXPRESSION OBJECT) ((TOKENLIST STELLA-TOKEN)))", Native.find_java_method("edu.isi.stella.StellaToken", "stellaTokenListToSExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StellaToken")}), null);
          Stella.defineFunctionObject("EXPAND-QUOTE-MACRO-TOKEN", "(DEFUN EXPAND-QUOTE-MACRO-TOKEN ((QUOTEDLIST STELLA-TOKEN)))", Native.find_java_method("edu.isi.stella.StellaToken", "expandQuoteMacroToken", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.StellaToken")}), null);
          Stella.defineFunctionObject("STRING-TO-CHARACTER", "(DEFUN (STRING-TO-CHARACTER CHARACTER) ((NAME STRING)))", Native.find_java_method("edu.isi.stella.Stella", "stringToCharacter", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("CREATE-TOKENIZE-STRING-TABLE", "(DEFUN (CREATE-TOKENIZE-STRING-TABLE (VECTOR OF KEYWORD)) ((PUNCTUATIONCHARS STRING) (QUOTECHARS STRING) (ESCAPECHARS STRING)))", Native.find_java_method("edu.isi.stella.Stella", "createTokenizeStringTable", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("TOKENIZE-STRING", "(DEFUN (TOKENIZE-STRING (CONS OF CONS)) ((STRING STRING) (PUNCTUATIONCHARS STRING) (QUOTECHARS STRING) (ESCAPECHARS STRING)) :DOCUMENTATION \"Simple tokenizer that is somewhere between Java's StringTokenizer\nand StreamTokenizer in functionality.  It doens't specially support number\ntokens nor comment strings/sequences even though this could be added at\nthe expense of some extra complexity.\nReturns a list of (<token-string> <token-type>) pairs, where the token\ntype is one of :TEXT, :PUNCTUATION or :QUOTE, i.e., all white space\nis ignored and escape characters are handled and removed.  For example:\n	 \n  (tokenize-string \\\"for(i='fo^'o'; i>0; i++)\\\" \\\"()=<>+-;\\\" \\\"'\\\" \\\"^\\\")\n  =>\n  ((\\\"for\\\" :TEXT) (\\\"(\\\" :PUNCTUATION) (\\\"i\\\" :TEXT)\n   (\\\"=\\\" :PUNCTUATION) (\\\"'\\\" :QUOTE) (\\\"fo'o\\\" :TEXT)\n   (\\\"'\\\" :QUOTE) (\\\";\\\" :PUNCTUATION) (\\\"i\\\" :TEXT)\n   (\\\">\\\" :PUNCTUATION) (\\\"0\\\" :TEXT) (\\\";\\\" :PUNCTUATION)\n   (\\\"i\\\" :TEXT) (\\\"++)\\\" :PUNCTUATION))\n	\nNOTE: this aggregates multiple punctuation characters that immediately\nfollow each other into a single token which is (generally) useful to pickup\nmulti-character operators such as ++, >=, etc.  It's still easy to pick them\napart in a post-processing step if necessary (e.g., for the `++)' case above),\nso we leave this for now as a feature.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "tokenizeString", new java.lang.Class [] {Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String"), Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("READ-S-EXPRESSION", "(DEFUN (READ-S-EXPRESSION OBJECT BOOLEAN) ((STREAM INPUT-STREAM)) :DOCUMENTATION \"Read one STELLA s-expression from `stream' and return\nthe result.  Return `true' as the second value on EOF.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.InputStream", "readSExpression", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("[Ljava.lang.Object;")}), null);
          Stella.defineFunctionObject("EAT-NEXT-CHARACTER-IF-WHITESPACE", "(DEFUN (EAT-NEXT-CHARACTER-IF-WHITESPACE BOOLEAN) ((STREAM INPUT-STREAM)))", Native.find_java_method("edu.isi.stella.InputStream", "eatNextCharacterIfWhitespace", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream")}), null);
          Stella.defineFunctionObject("CONSUME-WHITESPACE", "(DEFUN (CONSUME-WHITESPACE BOOLEAN) ((STREAM INPUT-STREAM)))", Native.find_java_method("edu.isi.stella.InputStream", "consumeWhitespace", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream")}), null);
          Stella.defineFunctionObject("READ-S-EXPRESSION-FROM-STRING", "(DEFUN (READ-S-EXPRESSION-FROM-STRING OBJECT) ((STRING STRING)) :DOCUMENTATION \"Read one STELLA s-expression from `string' and\nreturn the result.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "readSExpressionFromString", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("MAKE-TOKENIZER-STRING-STREAM", "(DEFUN (MAKE-TOKENIZER-STRING-STREAM STRING-INPUT-STREAM) ((STRING STRING)))", Native.find_java_method("edu.isi.stella.Stella", "makeTokenizerStringStream", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("NATIVE-READ-LINE", "(DEFUN (NATIVE-READ-LINE STRING) ((INPUTSTREAM INPUT-STREAM)) :DOCUMENTATION \"Read one line from `inputStream' using the native language\nreadline algorithm and return the result.  On EOF return `null'\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.InputStream", "nativeReadLine", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream")}), null);
          Stella.defineFunctionObject("READ-LINE", "(DEFUN (READ-LINE STRING) ((STREAM INPUT-STREAM)) :PUBLIC? TRUE :DOCUMENTATION \"Read one line from `stream' and return the result.\nThis differs from `native-read-line' in that it is not platform-dependent.\nIt recognizes any of the three common line ending formats: CR, LF, CR-LF\nin any combination.  It is not as fast as `native-read-line', however.\")", Native.find_java_method("edu.isi.stella.InputStream", "readLine", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream")}), null);
          Stella.defineFunctionObject("READ-LINE2", "(DEFUN (READ-LINE2 STRING KEYWORD) ((STREAM INPUT-STREAM)) :PUBLIC? TRUE :DOCUMENTATION \"Read one line from `stream' and return the result and\na keyword that indicates the terminator for that line ending:\n`:CR' `:LF' `:CRLF' or `:EOF'.   This is not platform-dependent\nand differs from `read-line' by returning a second value.  It\nmay hang when used on interactive streams such as terminal or\nnetwork streams with only CR line endings.  It should only be\nused on file or string input streams.\")", Native.find_java_method("edu.isi.stella.InputStream", "readLine2", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("[Ljava.lang.Object;")}), null);
          Stella.defineFunctionObject("READ-CHARACTER", "(DEFUN (READ-CHARACTER CHARACTER BOOLEAN) ((INPUTSTREAM INPUT-STREAM)) :DOCUMENTATION \"Read one character from `inputStream' and return the result.\nReturn `true' as the second value on EOF.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.InputStream", "readCharacter", new java.lang.Class [] {Native.find_java_class("edu.isi.stella.InputStream"), Native.find_java_class("[Ljava.lang.Object;")}), null);
          Stella.defineFunctionObject("UNREAD-CHARACTER", "(DEFUN UNREAD-CHARACTER ((CH CHARACTER) (INPUTSTREAM INPUT-STREAM)) :DOCUMENTATION \"Unread `ch' from `inputStream'.  Signal an error if `ch'\nwas not the last character read.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "unreadCharacter", new java.lang.Class [] {java.lang.Character.TYPE, Native.find_java_class("edu.isi.stella.InputStream")}), null);
          Stella.defineFunctionObject("YES-OR-NO?", "(DEFUN (YES-OR-NO? BOOLEAN) ((MESSAGE STRING)) :DOCUMENTATION \"Read a line of input from STANDARD-INPUT and return `true'\nif the input was `yes' or `false' if the input was `no'.  Loop until either\n`yes' or `no' was entered.  If 'message' is non-`null' prompt with it before\nthe input is read.  See also special variable `*USER-QUERY-ACTION*'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "yesOrNoP", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("Y-OR-N?", "(DEFUN (Y-OR-N? BOOLEAN) ((MESSAGE STRING)) :DOCUMENTATION \"Read a line of input from STANDARD-INPUT and return `true'\nif the input was `y' or `false' if the input was `n'.  Loop until either\n`y' or `n' was entered.  If 'message' is non-`null' prompt with it before\nthe input is read.  See also special variable `*USER-QUERY-ACTION*'.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "yOrNP", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineMethodObject("(DEFMETHOD (STREAM-TO-STRING STRING) ((FROM INPUT-STREAM)) :DOCUMENTATION \"Read all of the input from `stream' and return it as a string.\" :PUBLIC? TRUE)", MethodCodeWrapper.wrapMethodCode(Native.find_java_method("edu.isi.stella.InputStream", "streamToString", new java.lang.Class [] {})), null);
          Stella.defineFunctionObject("FILE-TO-STRING", "(DEFUN (FILE-TO-STRING STRING) ((FILE STRING)) :DOCUMENTATION \"Read the content of `file' and return it as a string.\" :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella.Stella", "fileToString", new java.lang.Class [] {Native.find_java_class("java.lang.String")}), null);
          Stella.defineFunctionObject("STARTUP-READ", "(DEFUN STARTUP-READ () :PUBLIC? TRUE)", Native.find_java_method("edu.isi.stella._StartupRead", "startupRead", new java.lang.Class [] {}), null);
          { MethodSlot function = Symbol.lookupFunction(Stella.SYM_STELLA_STARTUP_READ);

            KeyValueList.setDynamicSlotValue(function.dynamicSlots, Stella.SYM_STELLA_METHOD_STARTUP_CLASSNAME, StringWrapper.wrapString("_StartupRead"), Stella.NULL_STRING_WRAPPER);
          }
        }
        if (Stella.currentStartupTimePhaseP(8)) {
          Stella.finalizeSlots();
          Stella.cleanupUnfinalizedClasses();
        }
        if (Stella.currentStartupTimePhaseP(9)) {
          Stella_Object.inModule(((StringWrapper)(Stella_Object.copyConsTree(StringWrapper.wrapString("/STELLA")))));
          Stella.defineGlobalVariableObject("(DEFGLOBAL *MAX-TOKENIZER-STATES* INTEGER 64)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *MAX-TOKENIZER-CHARACTERS* INTEGER 256)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *TOKENIZER-INITIAL-BUFFER-SIZE* INTEGER 2048)", null);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *WITHTOKENIZERINPUTTYPE* TYPE NULL)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *TRACE-GET-NEXT-TOKEN?* BOOLEAN FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *STELLA-TOKENIZER-TABLE-DEFINITION* CONS (BQUOTE ((:START :INCLUDE :DELIMITER :INCLUDE :ATOM) (:DELIMITER * \"(\" :OPEN-PAREN * \")\" :CLOSE-PAREN * \"\\\"\" (:OPEN-STRING :STRING) * \"'\" :SINGLE-QUOTE * \"`\" :BACK-QUOTE * \",\" :COMMA ! \";\" :COMMENT ! \"#\" :HASH ! (#\\  #\\Tab #\\Linefeed #\\Return) :WHITE-SPACE :EOF :EOF) (:WHITE-SPACE :INCLUDE :START) (:COMMENT (#\\Linefeed #\\Return) :START :EOF :EOF :OTHERWISE :COMMENT) (:PAREN-COMMENT \"\\\\\" :PAREN-COMMENT-ESCAPE \"|\" :PAREN-COMMENT-BAR :OTHERWISE :PAREN-COMMENT) (:PAREN-COMMENT-ESCAPE :ANY :PAREN-COMMENT) (:PAREN-COMMENT-BAR \"#\" :START \"\\\\\" :PAREN-COMMENT-ESCAPE \"|\" :PAREN-COMMENT-BAR :OTHERWISE :PAREN-COMMENT) (:OPEN-PAREN :INCLUDE :START) (:CLOSE-PAREN :INCLUDE :START) (:SINGLE-QUOTE :INCLUDE :START) (:BACK-QUOTE :INCLUDE :START) (:COMMA \".\" :COMMA-SPLICE :INCLUDE :DELIMITER * \"-+\" (:SYMBOL-OR-SIGNED-NUMBER :SYMBOL) * \"0123456789\" (:SYMBOL-OR-NUMBER :INTEGER) * \"cC\" (:SYMBOL-OR-CL-SYMBOL :SYMBOL) * \"|\" (:OPEN-FULLY-ESCAPED-SYMBOL :FULLY-ESCAPED-SYMBOL) * \"\\\\\" :ESCAPED-SYMBOL-ESCAPE * \"/\" :QUALIFIED-NAME * \":\" (:OPEN-KEYWORD :KEYWORD) * \"@\" (:OPEN-SURROGATE :SURROGATE) * :OTHERWISE :SYMBOL) (:COMMA-SPLICE :INCLUDE :START) (:OPEN-STRING * \"\\\"\" :CLOSE-STRING \"\\\\\" :STRING-ESCAPE :OTHERWISE :STRING) (:STRING * \"\\\"\" :CLOSE-STRING \"\\\\\" :STRING-ESCAPE :OTHERWISE :STRING) (:CLOSE-STRING :INCLUDE :START) (:STRING-ESCAPE :ANY :ESCAPED-STRING) (:ESCAPED-STRING * \"\\\"\" :CLOSE-STRING \"\\\\\" :STRING-ESCAPE :OTHERWISE :ESCAPED-STRING) (:HASH \"\\\\\" :CHARACTER-CONSTANT \"|\" :PAREN-COMMENT) (:CHARACTER-CONSTANT * :ANY :CHARACTER) (:CHARACTER :INCLUDE :DELIMITER :OTHERWISE :CHARACTER) (:ATOM * \"-+\" (:SYMBOL-OR-SIGNED-NUMBER :SYMBOL) * \"0123456789\" (:SYMBOL-OR-NUMBER :INTEGER) * \".\" (:SYMBOL-OR-MANTISSA :SYMBOL) * \"cC\" (:SYMBOL-OR-CL-SYMBOL :SYMBOL) * \"|\" (:OPEN-FULLY-ESCAPED-SYMBOL :FULLY-ESCAPED-SYMBOL) * \"\\\\\" :ESCAPED-SYMBOL-ESCAPE * \"/\" :QUALIFIED-NAME * \":\" (:OPEN-KEYWORD :KEYWORD) * \"@\" (:OPEN-SURROGATE :SURROGATE) * :OTHERWISE :SYMBOL) (:SYMBOL-OR-SIGNED-NUMBER :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"0123456789\" (:SYMBOL-OR-NUMBER :INTEGER) \".\" (:SYMBOL-OR-MANTISSA :SYMBOL) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-NUMBER :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"0123456789\" (:SYMBOL-OR-NUMBER :INTEGER) \".\" (:SYMBOL-OR-MANTISSA2 :FLOAT) \"eE\" (:SYMBOL-OR-EXPONENT-DELIMITER :SYMBOL) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-MANTISSA :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"0123456789\" (:SYMBOL-OR-MANTISSA2 :FLOAT) \"eE\" (:SYMBOL-OR-EXPONENT-DELIMITER :SYMBOL) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-MANTISSA2 :INCLUDE :SYMBOL-OR-MANTISSA) (:SYMBOL-OR-EXPONENT-DELIMITER :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"+-\" (:SYMBOL-OR-EXPONENT :SYMBOL) \"0123456789\" (:SYMBOL-OR-EXPONENT2 :FLOAT) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-EXPONENT :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"0123456789\" (:SYMBOL-OR-EXPONENT2 :FLOAT) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-EXPONENT2 :INCLUDE :SYMBOL-OR-EXPONENT) (:SYMBOL-OR-CL-SYMBOL :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"lL\" (:SYMBOL-OR-CL-SYMBOL2 :SYMBOL) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-CL-SYMBOL2 :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \":\" (:SYMBOL-OR-CL-SYMBOL3 :SYMBOL) \"|\" :ERROR :OTHERWISE :SYMBOL) (:SYMBOL-OR-CL-SYMBOL3 :INCLUDE :DELIMITER \"|\" :ERROR :OTHERWISE :CL-SYMBOL) (:CL-SYMBOL :INCLUDE :DELIMITER \"|\" :ERROR :OTHERWISE :CL-SYMBOL) (:ESCAPED-SYMBOL-ESCAPE :ANY :ESCAPED-SYMBOL) (:ESCAPED-SYMBOL :INCLUDE :DELIMITER \"/|\" :ERROR \"\\\\\" :ESCAPED-SYMBOL-ESCAPE :OTHERWISE :ESCAPED-SYMBOL) (:OPEN-FULLY-ESCAPED-SYMBOL * \"|\" :CLOSE-FULLY-ESCAPED-NAME \"\\\\\" :FULLY-ESCAPED-SYMBOL-ESCAPE :OTHERWISE :FULLY-ESCAPED-SYMBOL) (:FULLY-ESCAPED-SYMBOL-ESCAPE :ANY :FULLY-ESCAPED-SYMBOL) (:FULLY-ESCAPED-SYMBOL * \"|\" :CLOSE-FULLY-ESCAPED-NAME \"\\\\\" :FULLY-ESCAPED-SYMBOL-ESCAPE :OTHERWISE :FULLY-ESCAPED-SYMBOL) (:CLOSE-FULLY-ESCAPED-NAME :INCLUDE :START) (:SYMBOL :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :ESCAPED-SYMBOL-ESCAPE \"|\" :ERROR :OTHERWISE :SYMBOL) (:OPEN-KEYWORD :INCLUDE :DELIMITER \"|\" :FULLY-ESCAPED-KEYWORD \"\\\\\" :ESCAPED-KEYWORD-ESCAPE :OTHERWISE :KEYWORD) (:KEYWORD :INCLUDE :DELIMITER \"\\\\\" :ESCAPED-KEYWORD-ESCAPE \"|\" :ERROR :OTHERWISE :KEYWORD) (:ESCAPED-KEYWORD-ESCAPE :ANY :ESCAPED-KEYWORD) (:ESCAPED-KEYWORD :INCLUDE :DELIMITER \"\\\\\" :ESCAPED-KEYWORD-ESCAPE \"|\" :ERROR :OTHERWISE :ESCAPED-KEYWORD) (:FULLY-ESCAPED-KEYWORD * \"|\" :CLOSE-FULLY-ESCAPED-NAME \"\\\\\" :FULLY-ESCAPED-KEYWORD-ESCAPE :OTHERWISE :FULLY-ESCAPED-KEYWORD) (:FULLY-ESCAPED-KEYWORD-ESCAPE :ANY :FULLY-ESCAPED-KEYWORD) (:OPEN-SURROGATE :INCLUDE :DELIMITER \"|\" :FULLY-ESCAPED-SURROGATE \"\\\\\" :ESCAPED-SURROGATE-ESCAPE :OTHERWISE :SURROGATE) (:SURROGATE :INCLUDE :DELIMITER \"/|\" :ERROR \"\\\\\" :ESCAPED-SURROGATE-ESCAPE :OTHERWISE :SURROGATE) (:ESCAPED-SURROGATE :INCLUDE :DELIMITER \"/|\" :ERROR \"\\\\\" :ESCAPED-SURROGATE-ESCAPE :OTHERWISE :ESCAPED-SURROGATE) (:ESCAPED-SURROGATE-ESCAPE :ANY :ESCAPED-SURROGATE) (:FULLY-ESCAPED-SURROGATE * \"|\" :CLOSE-FULLY-ESCAPED-NAME \"\\\\\" :FULLY-ESCAPED-SURROGATE-ESCAPE :OTHERWISE :FULLY-ESCAPED-SURROGATE) (:FULLY-ESCAPED-SURROGATE-ESCAPE :ANY :FULLY-ESCAPED-SURROGATE) (:QUALIFIED-NAME :INCLUDE :DELIMITER \"@\" :QUALIFIED-SURROGATE \":\" :ERROR \"\\\\\" :QUALIFIED-ESCAPED-SYMBOL-ESCAPE \"|\" :QUALIFIED-FULLY-ESCAPED-SYMBOL \"/\" :QUALIFIED-NAME :OTHERWISE :QUALIFIED-SYMBOL) (:QUALIFIED-SYMBOL :INCLUDE :DELIMITER \"/\" :QUALIFIED-NAME \"\\\\\" :QUALIFIED-ESCAPED-SYMBOL-ESCAPE \"|\" :ERROR :OTHERWISE :QUALIFIED-SYMBOL) (:QUALIFIED-SURROGATE :INCLUDE :DELIMITER \"/\" :ERROR \"\\\\\" :QUALIFIED-ESCAPED-SURROGATE-ESCAPE \"|\" :QUALIFIED-FULLY-ESCAPED-SURROGATE :OTHERWISE :QUALIFIED-SURROGATE) (:QUALIFIED-ESCAPED-SYMBOL :INCLUDE :DELIMITER \"/|\" :ERROR \"\\\\\" :QUALIFIED-ESCAPED-SYMBOL-ESCAPE :OTHERWISE :QUALIFIED-ESCAPED-SYMBOL) (:QUALIFIED-ESCAPED-SYMBOL-ESCAPE :ANY :QUALIFIED-ESCAPED-SYMBOL) (:QUALIFIED-ESCAPED-SURROGATE :INCLUDE :DELIMITER \"/|\" :ERROR \"\\\\\" :QUALIFIED-ESCAPED-SURROGATE-ESCAPE :OTHERWISE :QUALIFIED-ESCAPED-SURROGATE) (:QUALIFIED-ESCAPED-SURROGATE-ESCAPE :ANY :QUALIFIED-ESCAPED-SURROGATE) (:QUALIFIED-FULLY-ESCAPED-SYMBOL * \"|\" :CLOSE-FULLY-ESCAPED-NAME \"\\\\\" :QUALIFIED-FULLY-ESCAPED-SYMBOL-ESCAPE :OTHERWISE :QUALIFIED-FULLY-ESCAPED-SYMBOL) (:QUALIFIED-FULLY-ESCAPED-SYMBOL-ESCAPE :ANY :QUALIFIED-FULLY-ESCAPED-SYMBOL) (:QUALIFIED-FULLY-ESCAPED-SURROGATE * \"|\" :CLOSE-FULLY-ESCAPED-NAME \"\\\\\" :QUALIFIED-FULLY-ESCAPED-SURROGATE-ESCAPE :OTHERWISE :QUALIFIED-FULLY-ESCAPED-SURROGATE) (:QUALIFIED-FULLY-ESCAPED-SURROGATE-ESCAPE :ANY :QUALIFIED-FULLY-ESCAPED-SURROGATE) (:ERROR :INCLUDE :START))))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *STELLA-TOKENIZER-TABLE* TOKENIZER-TABLE NULL)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *STELLA-LOGICAL-STATE-NAMES* (VECTOR OF KEYWORD) NULL)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *STELLA-LOGICAL-STATE-NAMES-TABLE* (PROPERTY-LIST OF KEYWORD KEYWORD) (NEW (PROPERTY-LIST OF KEYWORD KEYWORD) :THE-PLIST (BQUOTE (:SYMBOL :SYMBOL :ESCAPED-SYMBOL :SYMBOL :FULLY-ESCAPED-SYMBOL :SYMBOL :QUALIFIED-SYMBOL :SYMBOL :QUALIFIED-ESCAPED-SYMBOL :SYMBOL :QUALIFIED-FULLY-ESCAPED-SYMBOL :SYMBOL :CL-SYMBOL :SYMBOL :SURROGATE :SURROGATE :ESCAPED-SURROGATE :SURROGATE :QUALIFIED-SURROGATE :SURROGATE :QUALIFIED-ESCAPED-SURROGATE :SURROGATE :FULLY-ESCAPED-SURROGATE :SURROGATE :QUALIFIED-FULLY-ESCAPED-SURROGATE :SURROGATE :KEYWORD :KEYWORD :ESCAPED-KEYWORD :KEYWORD :FULLY-ESCAPED-KEYWORD :KEYWORD :QUALIFIED-NAME :QUALIFIED-NAME :STRING :STRING :ESCAPED-STRING :STRING :INTEGER :INTEGER :FLOAT :FLOAT :CHARACTER :CHARACTER :OPEN-PAREN :OPEN-PAREN :CLOSE-PAREN :CLOSE-PAREN :SINGLE-QUOTE :SINGLE-QUOTE :BACK-QUOTE :BACK-QUOTE :COMMA :COMMA :COMMA-SPLICE :COMMA-SPLICE :CLOSE-STRING :CLOSE-BALANCED-QUOTE :CLOSE-FULLY-ESCAPED-NAME :CLOSE-BALANCED-QUOTE :ERROR :ERROR))))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *GET-TOKEN-INTEGER-CHECKPOINT* INTEGER (DIV (- MOST-POSITIVE-INTEGER 9) 10))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *GET-TOKEN-LONG-INTEGER-CHECKPOINT* LONG-INTEGER (DIV (- MOST-POSITIVE-LONG-INTEGER 9) 10))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *STELLA-TOKENIZER-WHITE-SPACE-STATE* INTEGER (POSITION (STATE-NAMES *STELLA-TOKENIZER-TABLE*) :WHITE-SPACE 0))", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *READ-LINE-TOKENIZER-TABLE-DEFINITION* CONS (BQUOTE ((:START * (#\\Linefeed) :INITIAL-LINEFEED * (#\\Return) :INITIAL-RETURN :EOF :EOF * :OTHERWISE :LINE) (:INITIAL-LINEFEED :INCLUDE :LINEFEED) (:INITIAL-RETURN :INCLUDE :RETURN) (:RETURN * (#\\Linefeed) :LINEFEED * (#\\Return) :INITIAL-RETURN :EOF :EOF * :OTHERWISE :LINE) (:LINEFEED :EOF :EOF * (#\\Linefeed) :INITIAL-LINEFEED * (#\\Return) :INITIAL-RETURN * :OTHERWISE :LINE) (:LINE * (#\\Linefeed) :LINEFEED * (#\\Return) :RETURN * :EOF :EOF :OTHERWISE :LINE) (:ERROR :INCLUDE :START))) :PUBLIC? FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *READ-LINE2-TOKENIZER-TABLE-DEFINITION* CONS (BQUOTE ((:START * (#\\Linefeed) :LINEFEED * (#\\Return) :RETURN :EOF :EOF * :OTHERWISE :LINE) (:LINE * (#\\Linefeed) :LINEFEED * (#\\Return) :RETURN * :EOF :EOF :OTHERWISE :LINE) (:RETURN * :EOF :EOF (#\\Linefeed) :RETURN-LINEFEED * (#\\Return) :RETURN * :OTHERWISE :LINE) (:LINEFEED :EOF :EOF * (#\\Linefeed) :LINEFEED * (#\\Return) :RETURN * :OTHERWISE :LINE) (:RETURN-LINEFEED * :EOF :EOF * (#\\Linefeed) :LINEFEED * (#\\Return) :RETURN * :OTHERWISE :LINE) (:ERROR :INCLUDE :START))) :PUBLIC? FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *READ-LINE-TOKENIZER-TABLE* TOKENIZER-TABLE NULL :PUBLIC? FALSE)", null);
          Stella.defineGlobalVariableObject("(DEFGLOBAL *READ-LINE2-TOKENIZER-TABLE* TOKENIZER-TABLE NULL :PUBLIC? FALSE)", null);
          Stella.$READ_LINE_TOKENIZER_TABLE$ = Cons.parseTokenizerDefinition(Stella.$READ_LINE_TOKENIZER_TABLE_DEFINITION$);
          Stella.$READ_LINE2_TOKENIZER_TABLE$ = Cons.parseTokenizerDefinition(Stella.$READ_LINE2_TOKENIZER_TABLE_DEFINITION$);
          Stella.defineGlobalVariableObject("(DEFSPECIAL *USER-QUERY-ACTION* KEYWORD :ASK :PUBLIC? TRUE :DOCUMENTATION \"Controls the behavior of interactive queries.  The default is :ASK\nwhich asks the user.  Other options are :YES, :NO, :YES-VERBOSE, :NO-VERBOSE.  These\nreturn the answer indicated, with the verbose versions printing the message and answer.\")", null);
        }

      } finally {
        Stella.$CONTEXT$.set(old$Context$000);
        Stella.$MODULE$.set(old$Module$000);
      }
    }
  }

}
