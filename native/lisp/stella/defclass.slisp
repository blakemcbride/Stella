;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; defclass.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-DEFCLASS-STELLA-LITERAL NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-SECOND-CLASS-OBJECT NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-NULL NULL)
(CL:DEFVAR KWD-DEFCLASS-COMMON-LISP NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-DEFINE-CLASS-FROM-STRINGIFIED-SOURCE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-CL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-DEFCLASS-IDL NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-IDL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-DEFCLASS-JAVA NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-JAVA-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-DEFCLASS-CPP NULL)
(CL:DEFVAR KWD-DEFCLASS-CPP-STANDALONE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-CPP-NATIVE-TYPE NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-NON-OBJECT NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-NATIVE-EXCEPTION NULL)
(CL:DEFVAR KWD-DEFCLASS-DYNAMIC NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SLOT-INITIAL-VALUE NULL)
(CL:DEFVAR KWD-DEFCLASS-BIT NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-BOOLEAN NULL)
(CL:DEFVAR KWD-DEFCLASS-CLASS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SLOT-RENAMES NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-UNKNOWN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-ANCHORED-TYPE-SPECIFIER NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT NULL)
(CL:DEFVAR KWD-DEFCLASS-FREE-LIST NULL)
(CL:DEFVAR KWD-DEFCLASS-FREE-AND-SWEEP-LIST NULL)
(CL:DEFVAR KWD-DEFCLASS-SWEEP-LIST NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-CREATOR NULL)
(CL:DEFVAR KWD-DEFCLASS-USE-COMMON-LISP-STRUCTS NULL)
(CL:DEFVAR KWD-DEFCLASS-USE-COMMON-LISP-VECTOR-STRUCTS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-DEFGLOBAL NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-RECYCLE-LIST NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-OF NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CREATE-RECYCLE-LIST NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SETQ NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SELF NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-MAKE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-WHEN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-DEFINED? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-FREE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-DYNAMIC-SLOTS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLEAR NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-UNLESS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-RETURN NULL)
(CL:DEFVAR KWD-DEFCLASS-FORCE-NULL-VALUE NULL)
(CL:DEFVAR KWD-DEFCLASS-NULL-VALUE-ONLY NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-AND NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?* NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-COND NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA--- NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CURRENT-LENGTH NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-OTHERWISE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-RECYCLED-ITEMS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-POP NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-LIST-OF-RECYCLED-ITEMS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SETF NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-UNUSED-ITEMS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-ALL-ITEMS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-++ NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-= NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-*RECYCLE-LISTS-MAINTENANCE-TIMER* NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-MAINTAIN-RECYCLE-LISTS NULL)
(CL:DEFVAR KWD-DEFCLASS-INITIAL-VALUE-ONLY NULL)
(CL:DEFVAR KWD-DEFCLASS-ANY-INITIAL-VALUE NULL)
(CL:DEFVAR KWD-DEFCLASS-CONTEXT-SENSITIVE? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-FALSE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-INITIALIZER NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-RUN-CONSTRUCTOR-DEMONS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-DEFUN NULL)
(CL:DEFVAR KWD-DEFCLASS-CONSTRUCTOR? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-TRUE NULL)
(CL:DEFVAR KWD-DEFCLASS-PUBLIC? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-LET NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-MESSAGE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-DESTRUCTOR NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-DEFMETHOD NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-STANDARD-OBJECT NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-PUSH NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SWEEP NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-UNUSED NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-WHILE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-NOT NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-EQL? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-UNMAKE NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-VOID NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-TRANSIENT-MIXIN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-RECYCLE-LIST-DEBUGGING-ENABLED? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-REGISTER-RECYCLED-ITEM NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-UNREGISTER-RECYCLED-ITEM NULL)
(CL:DEFVAR KWD-DEFCLASS-NULL-WRAPPER NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-INLINE-WRAP-BOOLEAN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-FALSE-WRAPPER NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-ANSWER NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-IF NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-NULL? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-PROGN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-ERROR NULL)
(CL:DEFVAR KWD-DEFCLASS-AUXILIARY? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-VALUE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-IGNORE NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-OBJECT NULL)
(CL:DEFVAR KWD-DEFCLASS-WRAP-FUNCTION NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CAST NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SETVALUE? NULL)
(CL:DEFVAR SGT-DEFCLASS-STELLA-DYNAMIC-SLOTS-MIXIN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SLOTNAME NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-QUOTE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CASE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SET-DYNAMIC-SLOT-VALUE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-LOOKUP NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-SYMBOL NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-BOOLEAN NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-CLASS-SLOT-ACCESSOR-CODE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-THE-CODE NULL)
(CL:DEFVAR KWD-DEFCLASS-FUNCTION NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-TYPECASE NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-EQ? NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-OTHER NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-EQUAL NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-STARTUP-DEFCLASS NULL)
(CL:DEFVAR SYM-DEFCLASS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* STANDARD-WARNING STANDARD-OUTPUT
  *RECYCLE-LISTS-MAINTENANCE-TIMER*
  *RECYCLE-LISTS-MAINTENANCE-INTERVAL* TRUE-WRAPPER FALSE-WRAPPER
  NULL-INTEGER *CURRENT-STELLA-FEATURES*
  *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?* *CURRENTLY-RECYCLED-ITEMS*
  STANDARD-ERROR EOL NULL-STRING-WRAPPER *TRANSLATOROUTPUTLANGUAGE*
  NIL))

;;; (DEFUN (TYPE-TO-NULL-VALUE-TREE OBJECT) ...)

(CL:DEFUN TYPE-TO-NULL-VALUE-TREE (TYPE)
  (CL:LET* ((CLASS (TYPE-TO-CLASS TYPE)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ CLASS NULL))
     (CL:OR (SUBTYPE-OF? TYPE SGT-DEFCLASS-STELLA-LITERAL)
      (SUBTYPE-OF? TYPE SGT-DEFCLASS-STELLA-SECOND-CLASS-OBJECT)))
    (CL:LET* ((NULLVALUE (INITIAL-VALUE CLASS)))
     (CL:WHEN (CL:NOT (CL:EQ NULLVALUE NULL))
      (CL:RETURN-FROM TYPE-TO-NULL-VALUE-TREE
       (COPY-CONS-TREE NULLVALUE)))))
   (CL:RETURN-FROM TYPE-TO-NULL-VALUE-TREE SYM-DEFCLASS-STELLA-NULL)))

;;; (DEFUN (TYPE-TO-WALKED-NULL-VALUE-TREE OBJECT) ...)

(CL:DEFUN TYPE-TO-WALKED-NULL-VALUE-TREE (TYPESPEC TYPE)
  (CL:LET* ((NULLVALUE (TYPE-TO-NULL-VALUE-TREE TYPE)))
   (CL:WHEN (CL:NOT (CL:EQ NULLVALUE SYM-DEFCLASS-STELLA-NULL))
    (CL:SETQ NULLVALUE
     (WALK-EXPRESSION-TREE NULLVALUE TYPE SYM-DEFCLASS-STELLA-NULL
      CL:NIL)))
   (CL:IF
    (CL:AND (ARRAY-TYPE-SPECIFIER? TYPESPEC)
     (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-COMMON-LISP))
    (CL:RETURN-FROM TYPE-TO-WALKED-NULL-VALUE-TREE
     (WALK-EXPRESSION-TREE
      (LIST* SYM-DEFCLASS-STELLA-VERBATIM KWD-DEFCLASS-COMMON-LISP
       (WRAP-STRING
        (LISP-NULL-ARRAY-SYMBOL-STRING (ARRAY-TYPE-RANK TYPESPEC)))
       NIL)
      TYPE SYM-DEFCLASS-STELLA-NULL CL:NIL))
    (CL:RETURN-FROM TYPE-TO-WALKED-NULL-VALUE-TREE NULLVALUE))))

;;; (DEFUN (YIELD-CONS-LIST-FROM-SEQUENCE CONS) ...)

(CL:DEFUN YIELD-CONS-LIST-FROM-SEQUENCE (SEQUENCE)
  (CL:LET* ((LIST NIL))
   (CL:LET*
    ((ITEM NULL) (ITER-000 (ALLOCATE-ITERATOR SEQUENCE))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ ITEM (%ITERATOR.VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN (CL:SETQ COLLECT-000 (CONS ITEM NIL))
       (CL:IF (CL:EQ LIST NIL) (CL:SETQ LIST COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST LIST COLLECT-000)))
      (CL:PROGN (CL:SETF (%%REST COLLECT-000) (CONS ITEM NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))))
   (CL:RETURN-FROM YIELD-CONS-LIST-FROM-SEQUENCE LIST)))

;;; (DEFUN (YIELD-DEFINE-STELLA-CLASS CONS) ...)

(CL:DEFUN YIELD-DEFINE-STELLA-CLASS (CLASS)
  "Return a cons tree that (when evaluated) constructs
a Stella class object."
  (CL:RETURN-FROM YIELD-DEFINE-STELLA-CLASS
   (LIST* SYM-DEFCLASS-STELLA-DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
    (WRAP-STRING (NAME CLASS))
    (CONS
     (YIELD-STRING-CONSTANT-TREE
      (%CLASS.CLASS-STRINGIFIED-SOURCE CLASS))
     NIL))))

;;; (DEFUN (CREATE-NATIVE-CLASS? BOOLEAN) ...)

(CL:DEFUN CREATE-NATIVE-CLASS? (CLASS)
  (CL:LET* ((CLASSNATIVETYPE STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CLASSNATIVETYPE))
   (CL:COND
    ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-COMMON-LISP)
     (CL:SETQ CLASSNATIVETYPE
      (%STRING-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
        SYM-DEFCLASS-STELLA-CLASS-CL-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-IDL)
     (CL:SETQ CLASSNATIVETYPE
      (%STRING-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
        SYM-DEFCLASS-STELLA-CLASS-IDL-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-JAVA)
     (CL:SETQ CLASSNATIVETYPE
      (%STRING-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
        SYM-DEFCLASS-STELLA-CLASS-JAVA-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    ((CL:OR (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-CPP)
      (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-CPP-STANDALONE))
     (CL:SETQ CLASSNATIVETYPE
      (%STRING-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
        SYM-DEFCLASS-STELLA-CLASS-CPP-NATIVE-TYPE
        NULL-STRING-WRAPPER))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" *TRANSLATOROUTPUTLANGUAGE* "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:RETURN-FROM CREATE-NATIVE-CLASS?
    (CL:NOT
     (CL:OR
      (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
       SGT-DEFCLASS-STELLA-SECOND-CLASS-OBJECT)
      (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
       SGT-DEFCLASS-STELLA-NON-OBJECT)
      (CL:NOT (CL:EQ CLASSNATIVETYPE STELLA::NULL-STRING))
      (CL:NOT (PRIMITIVE? CLASS)))))))

;;; (DEFUN (EXCEPTION-CLASS? BOOLEAN) ...)

(CL:DEFUN EXCEPTION-CLASS? (CLASS)
  (CL:RETURN-FROM EXCEPTION-CLASS?
   (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
    SGT-DEFCLASS-STELLA-NATIVE-EXCEPTION)))

;;; (DEFUN WARN-ABOUT-MULTIPLE-PARENTS ...)

(CL:DEFUN WARN-ABOUT-MULTIPLE-PARENTS (CLASS)
  (CL:WHEN
   (CL:AND (MULTIPLE-PARENTS? CLASS) (CREATE-NATIVE-CLASS? CLASS))
   (CL:COND
    ((CL:OR
      (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-CPP-STANDALONE)
      (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-IDL)))
    ((CL:OR (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-COMMON-LISP)
      (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-CPP)
      (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-JAVA))
     (CL:LET* ((NOFSUPERS 0) (NOFMIXINSUPERS 0))
      (CL:DECLARE (CL:TYPE CL:FIXNUM NOFSUPERS NOFMIXINSUPERS))
      (CL:LET*
       ((SUPER NULL)
        (ITER-000 (%LIST.THE-CONS-LIST (CLASS-NATIVE-SUPERS CLASS))))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ SUPER (%%VALUE ITER-000))
        (CL:SETQ NOFSUPERS (CL:1+ NOFSUPERS))
        (CL:WHEN (%CLASS.MIXIN? (%SURROGATE.SURROGATE-VALUE SUPER))
         (CL:SETQ NOFMIXINSUPERS (CL:1+ NOFMIXINSUPERS)))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (CL:WHEN (CL:> (CL:- NOFSUPERS NOFMIXINSUPERS) 1)
       (CL:LET* ((*PRINTREADABLY?* CL:T))
        (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
        (SIGNAL-TRANSLATION-ERROR)
        (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
         (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-ERROR)
         (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR)
          EOL " Class `" (CLASS-NAME CLASS) "' illegally inherits `"
          (CL:- NOFSUPERS NOFMIXINSUPERS) "' native non-mixin classes."
          EOL))))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" *TRANSLATOROUTPUTLANGUAGE* "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
  :VOID)

;;; (DEFUN WARN-ABOUT-NON-DIRECT-SUPERS ...)

(CL:DEFUN WARN-ABOUT-NON-DIRECT-SUPERS (CLASS)
  (CL:WHEN
   (CL:AND (MULTIPLE-PARENTS? CLASS) (CREATE-NATIVE-CLASS? CLASS))
   (CL:LET* ((DIRECTSUPERS (%CLASS.CLASS-DIRECT-SUPERS CLASS)))
    (CL:LET*
     ((SUPER NULL) (ITER-000 (%LIST.THE-CONS-LIST DIRECTSUPERS)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ SUPER (%%VALUE ITER-000))
      (CL:LET* ((FOUND?-000 CL:NIL))
       (CL:LET*
        ((OTHERSUPER NULL)
         (ITER-001 (%LIST.THE-CONS-LIST DIRECTSUPERS)))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
         (CL:SETQ OTHERSUPER (%%VALUE ITER-001))
         (CL:WHEN
          (CL:AND (CL:NOT (CL:EQ SUPER OTHERSUPER))
           (SUBTYPE-OF? OTHERSUPER SUPER))
          (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
         (CL:SETQ ITER-001 (%%REST ITER-001))))
       (CL:WHEN FOUND?-000
        (CL:LET* ((*PRINTREADABLY?* CL:T))
         (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
         (SIGNAL-TRANSLATION-ERROR)
         (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
          (PRINT-ERROR-CONTEXT ">> ERROR: " STANDARD-ERROR)
          (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-ERROR)
           EOL " Bad list of supers defined for class `"
           (CLASS-NAME CLASS) "'." EOL " The class `"
           (%SURROGATE.SYMBOL-NAME SUPER)
           "' is not a direct superclass." EOL)))
        (CL:RETURN-FROM WARN-ABOUT-NON-DIRECT-SUPERS)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))))
  :VOID)

;;; (DEFUN (SPACE-SAVER-SLOT-ALLOCATION? BOOLEAN) ...)

(CL:DEFUN SPACE-SAVER-SLOT-ALLOCATION? (SLOT)
  (CL:COND
   ((CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-DYNAMIC)
    (CL:WHEN
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%STORAGE-SLOT.DYNAMIC-SLOTS SLOT)
        SYM-DEFCLASS-STELLA-SLOT-INITIAL-VALUE NULL)
       NULL))
     (CL:WARN
      "Dynamic slot `~A' should not have an~%   initial value (or it shouldn't be dynamic)."
      (%STORAGE-SLOT.SLOT-NAME SLOT)))
    (CL:RETURN-FROM SPACE-SAVER-SLOT-ALLOCATION? CL:T))
   ((CL:OR (CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-BIT)
     (CL:AND (CL:EQ (TYPE SLOT) SGT-DEFCLASS-STELLA-BOOLEAN)
      (CL:EQ (SLOT-ALLOCATION SLOT) NULL)))
    (CL:RETURN-FROM SPACE-SAVER-SLOT-ALLOCATION? CL:T))
   (CL:T (CL:RETURN-FROM SPACE-SAVER-SLOT-ALLOCATION? CL:NIL))))

;;; (DEFUN (DYNAMIC-SLOT? BOOLEAN) ...)

(CL:DEFUN DYNAMIC-SLOT? (SLOT)
  (CL:RETURN-FROM DYNAMIC-SLOT?
   (CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-DYNAMIC)))

;;; (DEFUN (CLASS-SLOT? BOOLEAN) ...)

(CL:DEFUN CLASS-SLOT? (SLOT)
  (CL:RETURN-FROM CLASS-SLOT?
   (CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-CLASS)))

;;; (DEFUN (REDUNDANT-SLOT? BOOLEAN) ...)

(CL:DEFUN REDUNDANT-SLOT? (SLOT)
  (CL:LET* ((EQUIVSLOT (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT SLOT)))
   (CL:RETURN-FROM REDUNDANT-SLOT?
    (CL:AND (CL:NOT (CL:EQ EQUIVSLOT NULL))
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%STORAGE-SLOT.DYNAMIC-SLOTS SLOT)
       SYM-DEFCLASS-STELLA-SLOT-RENAMES NULL)
      (%SLOT.SLOT-NAME EQUIVSLOT))))))

;;; (DEFUN (NATIVE-SLOT? BOOLEAN) ...)

(CL:DEFUN NATIVE-SLOT? (SLOT)
  (CL:RETURN-FROM NATIVE-SLOT?
   (CL:AND (CL:NOT (%STORAGE-SLOT.ABSTRACT? SLOT))
    (CL:NOT (%STORAGE-SLOT.SLOT-HARDWIRED? SLOT))
    (CL:NOT (SPACE-SAVER-SLOT-ALLOCATION? SLOT))
    (CL:NOT (REDUNDANT-SLOT? SLOT)))))

;;; (DEFUN (PARAMETER-SLOT? BOOLEAN) ...)

(CL:DEFUN PARAMETER-SLOT? (SLOT)
  (CL:LET* ((OWNER (%STORAGE-SLOT.SLOT-OWNER SLOT)))
   (CL:RETURN-FROM PARAMETER-SLOT?
    (CL:AND (%STORAGE-SLOT.ABSTRACT? SLOT) (CL:NOT (CL:EQ OWNER NULL))
     (CL:NOT (CL:EQ (%SURROGATE.SURROGATE-VALUE OWNER) NULL))
     (MEMBER? (PARAMETERS (%SURROGATE.SURROGATE-VALUE OWNER))
      (%STORAGE-SLOT.SLOT-NAME SLOT))))))

;;; (DEFUN (NATIVE-METHOD? BOOLEAN) ...)

(CL:DEFUN NATIVE-METHOD? (SLOT)
  (CL:RETURN-FROM NATIVE-METHOD?
   (CL:AND (CL:NOT (%METHOD-SLOT.ABSTRACT? SLOT))
    (CL:NOT (METHOD-CONTAINS-UNKNOWN-TYPE? SLOT)))))

;;; (DEFUN (MIXIN-SLOT? BOOLEAN) ...)

(CL:DEFUN MIXIN-SLOT? (SELF)
  (CL:LET* ((OWNER (%SLOT.SLOT-OWNER SELF)))
   (CL:RETURN-FROM MIXIN-SLOT?
    (CL:AND (STORAGE-SLOT? SELF) (CL:NOT (CL:EQ OWNER NULL))
     (CL:NOT (CL:EQ (%SURROGATE.SURROGATE-VALUE OWNER) NULL))
     (%CLASS.MIXIN? (%SURROGATE.SURROGATE-VALUE OWNER))))))

;;; (DEFUN (MIXIN-METHOD? BOOLEAN) ...)

(CL:DEFUN MIXIN-METHOD? (SELF)
  (CL:LET* ((OWNER (%SLOT.SLOT-OWNER SELF)))
   (CL:RETURN-FROM MIXIN-METHOD?
    (CL:AND (METHOD-SLOT? SELF)
     (CL:NOT (%METHOD-SLOT.METHOD-FUNCTION? SELF))
     (CL:NOT (CL:EQ OWNER NULL))
     (CL:NOT (CL:EQ (%SURROGATE.SURROGATE-VALUE OWNER) NULL))
     (%CLASS.MIXIN? (%SURROGATE.SURROGATE-VALUE OWNER))))))

;;; (DEFUN (CANONICAL-SLOT STORAGE-SLOT) ...)

(CL:DEFUN CANONICAL-SLOT (SLOT)
  "Computes the slot at the base of a renaming chain for 'slot'."
  (CL:LET* ((CANONICALSLOT SLOT))
   (CL:LOOP WHILE
    (CL:AND
     (CL:NOT
      (CL:EQ (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT CANONICALSLOT)
       NULL))
     (CL:EQ
      (%SLOT.SLOT-NAME
       (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT CANONICALSLOT))
      (DYNAMIC-SLOT-VALUE (%STORAGE-SLOT.DYNAMIC-SLOTS CANONICALSLOT)
       SYM-DEFCLASS-STELLA-SLOT-RENAMES NULL)))
    DO
    (CL:SETQ CANONICALSLOT
     (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT CANONICALSLOT)))
   (CL:RETURN-FROM CANONICAL-SLOT CANONICALSLOT)))

;;; (DEFUN (CANONICAL-SLOT-NAME SYMBOL) ...)

(CL:DEFUN CANONICAL-SLOT-NAME (SLOT)
  "Name of the slot at the base of a renaming chain for 'slot'."
  (CL:RETURN-FROM CANONICAL-SLOT-NAME
   (%STORAGE-SLOT.SLOT-NAME (CANONICAL-SLOT SLOT))))

;;; (DEFUN (UNKNOWN-TYPE? BOOLEAN) ...)

(CL:DEFUN UNKNOWN-TYPE? (TYPE)
  (CL:RETURN-FROM UNKNOWN-TYPE?
   (CL:OR (CL:EQ TYPE SGT-DEFCLASS-STELLA-UNKNOWN)
    (CL:EQ (TYPE-TO-CLASS TYPE) NULL)
    (CL:EQ (TYPE-TO-CLASS TYPE)
     (TYPE-TO-CLASS SGT-DEFCLASS-STELLA-UNKNOWN))
    (CL:AND (SUBTYPE-OF? TYPE SGT-DEFCLASS-STELLA-NON-OBJECT)
     (%CLASS.ABSTRACT? (TYPE-TO-CLASS TYPE))))))

;;; (DEFUN (SLOT-HAS-UNKNOWN-TYPE? BOOLEAN) ...)

(CL:DEFUN SLOT-HAS-UNKNOWN-TYPE? (SLOT CLASS)
  (CL:RETURN-FROM SLOT-HAS-UNKNOWN-TYPE?
   (UNKNOWN-TYPE?
    (TYPE-SPEC-TO-BASE-TYPE
     (COMPUTE-RETURN-TYPE-SPEC SLOT (%CLASS.CLASS-TYPE CLASS))))))

;;; (DEFUN (NATIVE-STORAGE-SLOT-HOME CLASS) ...)

(CL:DEFUN NATIVE-STORAGE-SLOT-HOME (SLOT CLASS)
  (CL:LET* ((SLOTWITHKNOWNTYPE NULL))
   (CL:LOOP (CL:WHEN (UNKNOWN-TYPE? (TYPE SLOT)) (CL:RETURN))
    (CL:SETQ SLOTWITHKNOWNTYPE SLOT)
    (CL:SETQ CLASS (TYPE-TO-CLASS (%STORAGE-SLOT.SLOT-OWNER SLOT)))
    (CL:IF
     (CL:AND
      (CL:NOT (CL:EQ (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT SLOT) NULL))
      (NATIVE-SLOT? (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT SLOT)))
     (CL:SETQ SLOT (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT SLOT))
     (CL:RETURN)))
   (CL:WHEN (CL:NOT (CL:EQ SLOTWITHKNOWNTYPE NULL))
    (CL:RETURN-FROM NATIVE-STORAGE-SLOT-HOME CLASS))
   (CL:WHEN (SLOT-HAS-UNKNOWN-TYPE? SLOT CLASS)
    (CL:RETURN-FROM NATIVE-STORAGE-SLOT-HOME NULL))
   (CL:LET*
    ((SUPER NULL) (ITER-000 (%CLASS.CLASS-ALL-SUPER-CLASSES CLASS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SUPER (%%VALUE ITER-000))
     (CL:IF (SLOT-HAS-UNKNOWN-TYPE? SLOT SUPER)
      (CL:RETURN-FROM NATIVE-STORAGE-SLOT-HOME CLASS)
      (CL:SETQ CLASS SUPER))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM NATIVE-STORAGE-SLOT-HOME CLASS)))

;;; (DEFUN (NATIVE-SLOT-HOME CLASS) ...)

(CL:DEFUN NATIVE-SLOT-HOME (SLOT CLASS)
  (CL:LET*
   ((NATIVESLOTHOME
     (CL:IF (STORAGE-SLOT? SLOT) (NATIVE-STORAGE-SLOT-HOME SLOT CLASS)
      (%SURROGATE.SURROGATE-VALUE (%SLOT.SLOT-OWNER SLOT))))
    (CANDIDATE CLASS) (VISIBLESLOT NULL))
   (CL:WHEN
    (CL:NOT
     (CL:AND (CL:NOT (CL:EQ NATIVESLOTHOME NULL))
      (%CLASS.MIXIN? NATIVESLOTHOME)
      (TRANSLATE-TO-SINGLE-INHERITANCE-LANGUAGE?)))
    (CL:RETURN-FROM NATIVE-SLOT-HOME NATIVESLOTHOME))
   (CL:WHEN (%CLASS.MIXIN? CANDIDATE)
    (CL:RETURN-FROM NATIVE-SLOT-HOME NULL))
   (CL:SETQ VISIBLESLOT (LOOKUP-SLOT CLASS (%SLOT.SLOT-NAME SLOT)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ SLOT VISIBLESLOT))
     (SUBTYPE-OF? (%SLOT.SLOT-OWNER VISIBLESLOT)
      (%SLOT.SLOT-OWNER SLOT)))
    (CL:RETURN-FROM NATIVE-SLOT-HOME NULL))
   (CL:LET*
    ((SUPERCLASS NULL)
     (ITER-000 (%CLASS.CLASS-ALL-SUPER-CLASSES CLASS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SUPERCLASS (%%VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CL:NOT (%CLASS.MIXIN? SUPERCLASS))
       (MEMBER? (%CLASS.CLASS-ALL-SUPER-CLASSES SUPERCLASS)
        NATIVESLOTHOME))
      (CL:SETQ CANDIDATE SUPERCLASS))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM NATIVE-SLOT-HOME CANDIDATE)))

;;; (DEFUN (SLOT-NAME-CONFLICT? BOOLEAN) ...)

(CL:DEFUN SLOT-NAME-CONFLICT? (SLOT CLASS)
  (CL:LET*
   ((NAME (%SLOT.SLOT-NAME SLOT))
    (NAME-STRING (%SYMBOL.SYMBOL-NAME NAME)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME-STRING))
   (CL:LET*
    ((SIBLINGSLOT NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%CLASS.CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SIBLINGSLOT (%%VALUE ITER-000))
     (CL:WHEN
      (CL:AND (CL:NOT (CL:EQ (%SLOT.SLOT-NAME SIBLINGSLOT) NAME))
       (STRING-EQL? (%SYMBOL.SYMBOL-NAME (%SLOT.SLOT-NAME SIBLINGSLOT))
        NAME-STRING))
      (CL:RETURN-FROM SLOT-NAME-CONFLICT? CL:T))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET*
    ((SUPERCLASS NULL)
     (ITER-001 (%CLASS.CLASS-ALL-SUPER-CLASSES CLASS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ SUPERCLASS (%%VALUE ITER-001))
     (CL:LET*
      ((SUPERSLOT NULL)
       (ITER-002
        (%LIST.THE-CONS-LIST (%CLASS.CLASS-LOCAL-SLOTS SUPERCLASS))))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
       (CL:SETQ SUPERSLOT (%%VALUE ITER-002))
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ (%SLOT.SLOT-NAME SUPERSLOT) NAME))
         (STRING-EQL? (%SYMBOL.SYMBOL-NAME (%SLOT.SLOT-NAME SUPERSLOT))
          NAME-STRING))
        (CL:RETURN-FROM SLOT-NAME-CONFLICT? CL:T))
       (CL:SETQ ITER-002 (%%REST ITER-002))))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:RETURN-FROM SLOT-NAME-CONFLICT? CL:NIL)))

;;; (DEFUN (METHOD-CONTAINS-UNKNOWN-TYPE? BOOLEAN) ...)

(CL:DEFUN METHOD-CONTAINS-UNKNOWN-TYPE? (METHOD)
  (CL:LET* ((FOUND?-000 CL:NIL))
   (CL:LET*
    ((RTYPE NULL)
     (ITER-000
      (%LIST.THE-CONS-LIST (METHOD-RETURN-TYPE-SPECIFIERS METHOD))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ RTYPE (%%VALUE ITER-000))
     (CL:WHEN
      (UNKNOWN-TYPE?
       (TYPE-SPEC-TO-BASE-TYPE
        (COMPUTE-RELATIVE-TYPE-SPEC RTYPE
         (%METHOD-SLOT.SLOT-OWNER METHOD))))
      (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN FOUND?-000
    (CL:RETURN-FROM METHOD-CONTAINS-UNKNOWN-TYPE? CL:T)))
  (CL:LET*
   ((PTYPE NULL)
    (ITER-001
     (%LIST.THE-CONS-LIST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
    (CL:SETQ PTYPE (%%VALUE ITER-001))
    (CL:WHEN
     (UNKNOWN-TYPE?
      (TYPE-SPEC-TO-BASE-TYPE
       (COMPUTE-RELATIVE-TYPE-SPEC PTYPE
        (%METHOD-SLOT.SLOT-OWNER METHOD))))
     (CL:RETURN-FROM METHOD-CONTAINS-UNKNOWN-TYPE? CL:T))
    (CL:SETQ ITER-001 (%%REST ITER-001))))
  (CL:RETURN-FROM METHOD-CONTAINS-UNKNOWN-TYPE? CL:NIL))

;;; (DEFUN (METHOD-CONTAINS-ANCHORED-TYPE? BOOLEAN) ...)

(CL:DEFUN METHOD-CONTAINS-ANCHORED-TYPE? (METHOD)
  (CL:WHEN
   (%CLASS.ABSTRACT?
    (%SURROGATE.SURROGATE-VALUE (%METHOD-SLOT.SLOT-OWNER METHOD)))
   (CL:WHEN
    (CL:AND
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
        SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
       NULL))
     (ISA?
      (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
       SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
      SGT-DEFCLASS-STELLA-ANCHORED-TYPE-SPECIFIER))
    (CL:RETURN-FROM METHOD-CONTAINS-ANCHORED-TYPE? CL:T))
   (CL:LET*
    ((PTYPE NULL)
     (ITER-000
      (%LIST.THE-CONS-LIST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PTYPE (%%VALUE ITER-000))
     (CL:WHEN (ISA? PTYPE SGT-DEFCLASS-STELLA-ANCHORED-TYPE-SPECIFIER)
      (CL:RETURN-FROM METHOD-CONTAINS-ANCHORED-TYPE? CL:T))
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  (CL:RETURN-FROM METHOD-CONTAINS-ANCHORED-TYPE? CL:NIL))

;;; (DEFUN (YIELD-RECYCLE-LIST-NAME SYMBOL) ...)

(CL:DEFUN YIELD-RECYCLE-LIST-NAME (CLASS)
  (CL:RETURN-FROM YIELD-RECYCLE-LIST-NAME
   (INTERN-DERIVED-SYMBOL (%CLASS.CLASS-TYPE CLASS)
    (CONCATENATE "*RECYCLE-LIST-FOR-" (CLASS-NAME CLASS) "-S*"))))

;;; (DEFUN (RECYCLE-SLOT STORAGE-SLOT) ...)

(CL:DEFUN RECYCLE-SLOT (CLASS)
  (CL:LET*
   ((INSTANCETYPE (%CLASS.CLASS-TYPE CLASS)) (RECYCLESLOT NULL))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:COND
      ((SUBTYPE-OF-STORAGE-SLOT? (SAFE-PRIMARY-TYPE SLOT))
       (CL:PROGN
        (CL:WHEN
         (CL:AND
          (CL:NOT
           (CL:EQ (%STORAGE-SLOT.SLOT-NAME SLOT)
            SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT))
          (NATIVE-SLOT? SLOT))
         (CL:WHEN
          (CL:EQ INSTANCETYPE (%STORAGE-SLOT.SLOT-BASE-TYPE SLOT))
          (CL:RETURN-FROM RECYCLE-SLOT SLOT))
         (CL:WHEN
          (CL:AND
           (CL:NOT
            (CL:EQ
             (%SURROGATE.SURROGATE-VALUE
              (%STORAGE-SLOT.SLOT-BASE-TYPE SLOT))
             NULL))
           (SUBTYPE-OF? INSTANCETYPE
            (%STORAGE-SLOT.SLOT-BASE-TYPE SLOT)))
          (CL:SETQ RECYCLESLOT SLOT)))))
      (CL:T))))
   (CL:RETURN-FROM RECYCLE-SLOT RECYCLESLOT)))

;;; (DEFUN (USE-FREE-LIST? BOOLEAN) ...)

(CL:DEFUN USE-FREE-LIST? (CLASS)
  (CL:RETURN-FROM USE-FREE-LIST?
   (CL:OR (CL:EQ (CLASS-RECYCLE-METHOD CLASS) KWD-DEFCLASS-FREE-LIST)
    (CL:EQ (CLASS-RECYCLE-METHOD CLASS)
     KWD-DEFCLASS-FREE-AND-SWEEP-LIST))))

;;; (DEFUN (USE-SWEEP-LIST? BOOLEAN) ...)

(CL:DEFUN USE-SWEEP-LIST? (CLASS)
  (CL:RETURN-FROM USE-SWEEP-LIST?
   (CL:OR (CL:EQ (CLASS-RECYCLE-METHOD CLASS) KWD-DEFCLASS-SWEEP-LIST)
    (CL:AND
     (CL:EQ (CLASS-RECYCLE-METHOD CLASS)
      KWD-DEFCLASS-FREE-AND-SWEEP-LIST)
     (CL:NOT
      (CL:OR *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?*
       (CL:NOT (CL:EQ *CURRENTLY-RECYCLED-ITEMS* NULL))))))))

;;; (DEFUN (DECIDED-TO-RECYCLE? BOOLEAN) ...)

(CL:DEFUN DECIDED-TO-RECYCLE? (CLASS)
  (CL:RETURN-FROM DECIDED-TO-RECYCLE?
   (CL:AND
    (CL:NOT
     (CL:OR (%CLASS.ABSTRACT? CLASS)
      (CL:NOT
       (CL:EQ
        (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
         SYM-DEFCLASS-STELLA-CLASS-CREATOR NULL)
        NULL))))
    (CL:OR (USE-FREE-LIST? CLASS) (USE-SWEEP-LIST? CLASS)))))

;;; (DEFUN (COMPUTE-RECYCLED-ITEM-SIZE INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) COMPUTE-RECYCLED-ITEM-SIZE))
(CL:DEFUN COMPUTE-RECYCLED-ITEM-SIZE (CLASS)
  (CL:LET* ((SIZE NULL-INTEGER)) (CL:DECLARE (CL:TYPE CL:FIXNUM SIZE))
   (CL:WHEN (CL:NOT (CL:EQ CLASS NULL))
    (CL:COND
     ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-COMMON-LISP)
      (CL:COND
       ((CL:OR
         (MEMB? *CURRENT-STELLA-FEATURES*
          KWD-DEFCLASS-USE-COMMON-LISP-STRUCTS)
         (MEMB? *CURRENT-STELLA-FEATURES*
          KWD-DEFCLASS-USE-COMMON-LISP-VECTOR-STRUCTS))
        (CL:SETQ SIZE 4))
       (CL:T (CL:SETQ SIZE 10))))
     ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-CPP)
      (CL:SETQ SIZE 1))
     ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-JAVA)
      (CL:SETQ SIZE 2))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" *TRANSLATOROUTPUTLANGUAGE* "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
    (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
     (CL:LOOP WHILE (NEXT? ITER-000) DO
      (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
      (CL:WHEN
       (CL:AND (STORAGE-SLOT? SLOT) (NATIVE-SLOT? SLOT)
        (CL:NOT
         (CL:AND
          (CL:NOT (CL:EQ (%SLOT.SLOT-DIRECT-EQUIVALENT SLOT) NULL))
          (NATIVE-SLOT? (%SLOT.SLOT-DIRECT-EQUIVALENT SLOT)))))
       (CL:SETQ SIZE (CL:1+ SIZE)))))
    (CL:WHEN
     (CL:AND (USE-FREE-LIST? CLASS) (CL:EQ (RECYCLE-SLOT CLASS) NULL))
     (CL:SETQ SIZE (CL:+ SIZE 2))))
   (CL:RETURN-FROM COMPUTE-RECYCLED-ITEM-SIZE SIZE)))

;;; (DEFUN (YIELD-RECYCLE-LIST-DEFINITIONS CONS) ...)

(CL:DEFUN YIELD-RECYCLE-LIST-DEFINITIONS (CLASS)
  (CL:IF (DECIDED-TO-RECYCLE? CLASS)
   (CL:RETURN-FROM YIELD-RECYCLE-LIST-DEFINITIONS
    (CONS
     (LIST* SYM-DEFCLASS-STELLA-DEFGLOBAL
      (YIELD-RECYCLE-LIST-NAME CLASS)
      (LIST*
       (LIST* SYM-DEFCLASS-STELLA-RECYCLE-LIST SYM-DEFCLASS-STELLA-OF
        (CLASS-SYMBOL CLASS) NIL)
       (LIST* SYM-DEFCLASS-STELLA-CREATE-RECYCLE-LIST
        (%CLASS.CLASS-TYPE CLASS)
        (CONS (WRAP-INTEGER (COMPUTE-RECYCLED-ITEM-SIZE CLASS)) NIL))
       NIL))
     NIL))
   (CL:RETURN-FROM YIELD-RECYCLE-LIST-DEFINITIONS NIL)))

;;; (DEFUN (YIELD-MAKE-TREES CONS) ...)

(CL:DEFUN YIELD-MAKE-TREES (CLASS)
  (CL:RETURN-FROM YIELD-MAKE-TREES
   (CONS
    (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
     (LIST* SYM-DEFCLASS-STELLA-MAKE (CLASS-SYMBOL CLASS) NIL) NIL)
    NIL)))

;;; (DEFUN (YIELD-CONSTRUCTOR-NAME SYMBOL) ...)

(CL:DEFUN YIELD-CONSTRUCTOR-NAME (CLASS)
  (CL:LET*
   ((BASE-NAME (CLASS-NAME CLASS))
    (PREFIX (CL:IF (ALL-UPPER-CASE-STRING? BASE-NAME) "NEW-" "new-")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASE-NAME PREFIX))
   (CL:RETURN-FROM YIELD-CONSTRUCTOR-NAME
    (INTERN-DERIVED-SYMBOL (%CLASS.CLASS-TYPE CLASS)
     (CONCATENATE PREFIX BASE-NAME)))))

;;; (DEFUN (YIELD-CREATION-TREES CONS) ...)

(CL:DEFUN YIELD-CREATION-TREES (CLASS)
  (CL:COND
   ((CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
       SYM-DEFCLASS-STELLA-CLASS-CREATOR NULL)
      NULL))
    (CL:WHEN
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
       SYM-DEFCLASS-STELLA-CLASS-CREATOR NULL)
      (YIELD-CONSTRUCTOR-NAME CLASS))
     (CL:WARN
      "Illegal creator name `~A' for the class ~%`~A'.  Using the default creator."
      (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
       SYM-DEFCLASS-STELLA-CLASS-CREATOR NULL)
      (CLASS-NAME CLASS))
     (CL:RETURN-FROM YIELD-CREATION-TREES (YIELD-MAKE-TREES CLASS)))
    (CL:RETURN-FROM YIELD-CREATION-TREES
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
       (CONS
        (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
         SYM-DEFCLASS-STELLA-CLASS-CREATOR NULL)
        NIL)
       NIL)
      NIL)))
   ((DECIDED-TO-RECYCLE? CLASS)
    (CL:RETURN-FROM YIELD-CREATION-TREES
     (YIELD-CREATION-OR-REUSE-TREES CLASS)))
   (CL:T
    (CL:RETURN-FROM YIELD-CREATION-TREES (YIELD-MAKE-TREES CLASS)))))

;;; (DEFUN (YIELD-TERMINATE-OBJECT-TREES CONS) ...)

(CL:DEFUN YIELD-TERMINATE-OBJECT-TREES (CLASS)
  (CL:LET* ((TREES NIL) (TERMINATOR (TERMINATOR CLASS)))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:COND
      ((SUBTYPE-OF-STORAGE-SLOT? (SAFE-PRIMARY-TYPE SLOT))
       (CL:PROGN
        (CL:WHEN (COMPONENT? SLOT)
         (CL:SETQ TREES
          (CONS
           (LIST* SYM-DEFCLASS-STELLA-WHEN
            (LIST* SYM-DEFCLASS-STELLA-DEFINED?
             (CONS (%STORAGE-SLOT.SLOT-NAME SLOT)
              (CONS SYM-DEFCLASS-STELLA-SELF NIL))
             NIL)
            (LIST* SYM-DEFCLASS-STELLA-FREE
             (CONS (%STORAGE-SLOT.SLOT-NAME SLOT)
              (CONS SYM-DEFCLASS-STELLA-SELF NIL))
             NIL)
            NIL)
           TREES)))))
      (CL:T))))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (LOOKUP-SLOT CLASS SYM-DEFCLASS-STELLA-DYNAMIC-SLOTS)
      NULL))
    (CL:SETQ TREES
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-CLEAR
       (LIST* SYM-DEFCLASS-STELLA-DYNAMIC-SLOTS
        SYM-DEFCLASS-STELLA-SELF NIL)
       NIL)
      TREES)))
   (CL:WHEN (CL:NOT (CL:EQ TERMINATOR NULL))
    (CL:IF (USE-SWEEP-LIST? CLASS)
     (CL:SETQ TREES
      (CONS (CONS TERMINATOR (CONS SYM-DEFCLASS-STELLA-SELF NIL))
       TREES))
     (CL:SETQ TREES
      (CONS
       (LIST* SYM-DEFCLASS-STELLA-UNLESS
        (CONS TERMINATOR (CONS SYM-DEFCLASS-STELLA-SELF NIL))
        (CONS SYM-DEFCLASS-STELLA-RETURN NIL) NIL)
       TREES))))
   (CL:RETURN-FROM YIELD-TERMINATE-OBJECT-TREES
    (CONCATENATE (REVERSE TREES)
     (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
      KWD-DEFCLASS-FORCE-NULL-VALUE)))))

;;; (DEFUN (YIELD-CREATION-OR-REUSE-TREES CONS) ...)

(CL:DEFUN YIELD-CREATION-OR-REUSE-TREES (CLASS)
  (CL:LET*
   ((USEFREELIST? (USE-FREE-LIST? CLASS))
    (USESWEEPLIST? (USE-SWEEP-LIST? CLASS)))
   (CL:COND
    ((CL:AND USEFREELIST? USESWEEPLIST?)
     (CL:RETURN-FROM YIELD-CREATION-OR-REUSE-TREES
      (YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST CLASS)))
    (USEFREELIST?
     (CL:RETURN-FROM YIELD-CREATION-OR-REUSE-TREES
      (YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST CLASS)))
    (USESWEEPLIST?
     (CL:RETURN-FROM YIELD-CREATION-OR-REUSE-TREES
      (YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST CLASS)))
    (CL:T
     (CL:ERROR
      (NEW-STELLA-EXCEPTION
       "Assuming CLASS uses at least one of Free-list or sweep-list"))))))

;;; (DEFUN (YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST CONS) ...)

(CL:DEFUN YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST (CLASS)
  (CL:LET*
   ((RECYCLESLOT (RECYCLE-SLOT CLASS))
    (RECYCLESLOTRESETTREE
     (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
      (YIELD-INITIAL-VALUE-ASSIGNMENT RECYCLESLOT
       KWD-DEFCLASS-NULL-VALUE-ONLY)
      NULL))
    (RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS)))
   (CL:SETQ RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS))
   (CL:RETURN-FROM YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST
    (LIST*
     (LIST* SYM-DEFCLASS-STELLA-WHEN
      (LIST* SYM-DEFCLASS-STELLA-AND
       SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?*
       (LIST* SYM-DEFCLASS-STELLA-DEFINED? RECYCLELIST NIL) NIL)
      (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
       (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
        (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST NIL)
        (LIST* SYM-DEFCLASS-STELLA-POP
         (LIST* SYM-DEFCLASS-STELLA-LIST-OF-RECYCLED-ITEMS RECYCLELIST
          NIL)
         NIL))
       NIL)
      NIL)
     (LIST* SYM-DEFCLASS-STELLA-COND
      (CONS
       (LIST* SYM-DEFCLASS-STELLA-DEFINED? SYM-DEFCLASS-STELLA-SELF
        NIL)
       (CONCATENATE
        (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
         (CONS
          (LIST* SYM-DEFCLASS-STELLA-SETF
           (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST NIL)
           (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE
            SYM-DEFCLASS-STELLA-SELF
            (%STORAGE-SLOT.SLOT-NAME RECYCLESLOT) NIL)
           NIL)
          NIL)
         NIL)
        (CONCATENATE
         (CL:IF (CL:NOT (CL:EQ RECYCLESLOTRESETTREE NULL))
          (CONS RECYCLESLOTRESETTREE NIL) NIL)
         (CONS
          (LIST* SYM-DEFCLASS-STELLA---
           (LIST* SYM-DEFCLASS-STELLA-CURRENT-LENGTH RECYCLELIST NIL)
           NIL)
          (CONCATENATE (YIELD-UNREGISTER-RECYCLED-ITEM-TREES) NIL)))))
      (CONS SYM-DEFCLASS-STELLA-OTHERWISE
       (CONCATENATE (YIELD-MAKE-TREES CLASS)
        (CONCATENATE
         (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
          KWD-DEFCLASS-NULL-VALUE-ONLY)
         NIL)))
      NIL)
     NIL))))

;;; (DEFUN (YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST CONS) ...)

(CL:DEFUN YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST (CLASS)
  (CL:LET* ((RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS)))
   (CL:SETQ RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS))
   (CL:RETURN-FROM YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST
    (CONS
     (LIST* SYM-DEFCLASS-STELLA-COND
      (LIST*
       (LIST* SYM-DEFCLASS-STELLA-AND
        SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?*
        (LIST* SYM-DEFCLASS-STELLA-DEFINED? RECYCLELIST NIL) NIL)
       (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
        (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL) NIL)
       (LIST* SYM-DEFCLASS-STELLA-COND
        (LIST*
         (LIST* SYM-DEFCLASS-STELLA-DEFINED? SYM-DEFCLASS-STELLA-SELF
          NIL)
         (LIST* SYM-DEFCLASS-STELLA-SETF
          (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL)
          (LIST* SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT
           (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL)
           NIL)
          NIL)
         NIL)
        (CONS SYM-DEFCLASS-STELLA-OTHERWISE
         (CONCATENATE (YIELD-MAKE-TREES CLASS)
          (CONCATENATE
           (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
            KWD-DEFCLASS-NULL-VALUE-ONLY)
           (LIST*
            (LIST* SYM-DEFCLASS-STELLA-SETF
             (LIST* SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT
              SYM-DEFCLASS-STELLA-SELF NIL)
             (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL) NIL)
            (LIST* SYM-DEFCLASS-STELLA-SETF
             (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL)
             SYM-DEFCLASS-STELLA-SELF NIL)
            (LIST* SYM-DEFCLASS-STELLA-++
             (LIST* SYM-DEFCLASS-STELLA-CURRENT-LENGTH RECYCLELIST NIL)
             NIL)
            (LIST* SYM-DEFCLASS-STELLA-WHEN
             (LIST* SYM-DEFCLASS-STELLA-=
              (LIST* SYM-DEFCLASS-STELLA---
               SYM-DEFCLASS-STELLA-*RECYCLE-LISTS-MAINTENANCE-TIMER*
               NIL)
              (WRAP-INTEGER 0) NIL)
             (CONS SYM-DEFCLASS-STELLA-MAINTAIN-RECYCLE-LISTS NIL) NIL)
            NIL))))
        NIL)
       NIL)
      (CONS SYM-DEFCLASS-STELLA-OTHERWISE
       (CONCATENATE (YIELD-MAKE-TREES CLASS)
        (CONCATENATE
         (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
          KWD-DEFCLASS-NULL-VALUE-ONLY)
         NIL)))
      NIL)
     NIL))))

;;; (DEFUN (YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST CONS) ...)

(CL:DEFUN YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST (CLASS)
  (CL:LET*
   ((RECYCLESLOT (RECYCLE-SLOT CLASS))
    (RECYCLESLOTRESETTREE
     (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
      (YIELD-INITIAL-VALUE-ASSIGNMENT RECYCLESLOT
       KWD-DEFCLASS-NULL-VALUE-ONLY)
      NULL))
    (RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS)))
   (CL:SETQ RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS))
   (CL:RETURN-FROM
    YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST
    (CONS
     (LIST* SYM-DEFCLASS-STELLA-COND
      (LIST*
       (LIST* SYM-DEFCLASS-STELLA-AND
        SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?*
        (LIST* SYM-DEFCLASS-STELLA-DEFINED? RECYCLELIST NIL) NIL)
       (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
        (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
         (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST NIL)
         (LIST* SYM-DEFCLASS-STELLA-POP
          (LIST* SYM-DEFCLASS-STELLA-LIST-OF-RECYCLED-ITEMS RECYCLELIST
           NIL)
          NIL))
        NIL)
       (LIST* SYM-DEFCLASS-STELLA-COND
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-DEFINED? SYM-DEFCLASS-STELLA-SELF
          NIL)
         (CONCATENATE
          (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
           (CONS
            (LIST* SYM-DEFCLASS-STELLA-SETF
             (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST NIL)
             (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE
              SYM-DEFCLASS-STELLA-SELF
              (%STORAGE-SLOT.SLOT-NAME RECYCLESLOT) NIL)
             NIL)
            NIL)
           NIL)
          (CONCATENATE
           (CL:IF (CL:NOT (CL:EQ RECYCLESLOTRESETTREE NULL))
            (CONS RECYCLESLOTRESETTREE NIL) NIL)
           NIL)))
        (LIST* SYM-DEFCLASS-STELLA-OTHERWISE
         (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
          (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL) NIL)
         (LIST* SYM-DEFCLASS-STELLA-COND
          (LIST*
           (LIST* SYM-DEFCLASS-STELLA-DEFINED? SYM-DEFCLASS-STELLA-SELF
            NIL)
           (LIST* SYM-DEFCLASS-STELLA-SETF
            (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL)
            (LIST* SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT
             (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL)
             NIL)
            NIL)
           NIL)
          (CONS SYM-DEFCLASS-STELLA-OTHERWISE
           (CONCATENATE (YIELD-MAKE-TREES CLASS)
            (CONCATENATE
             (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
              KWD-DEFCLASS-NULL-VALUE-ONLY)
             (LIST*
              (LIST* SYM-DEFCLASS-STELLA-SETF
               (LIST* SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT
                SYM-DEFCLASS-STELLA-SELF NIL)
               (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL)
               NIL)
              (LIST* SYM-DEFCLASS-STELLA-SETF
               (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL)
               SYM-DEFCLASS-STELLA-SELF NIL)
              (LIST* SYM-DEFCLASS-STELLA-++
               (LIST* SYM-DEFCLASS-STELLA-CURRENT-LENGTH RECYCLELIST
                NIL)
               NIL)
              (LIST* SYM-DEFCLASS-STELLA-WHEN
               (LIST* SYM-DEFCLASS-STELLA-=
                (LIST* SYM-DEFCLASS-STELLA---
                 SYM-DEFCLASS-STELLA-*RECYCLE-LISTS-MAINTENANCE-TIMER*
                 NIL)
                (WRAP-INTEGER 0) NIL)
               (CONS SYM-DEFCLASS-STELLA-MAINTAIN-RECYCLE-LISTS NIL)
               NIL)
              NIL))))
          NIL)
         NIL)
        NIL)
       NIL)
      (CONS SYM-DEFCLASS-STELLA-OTHERWISE
       (CONCATENATE (YIELD-MAKE-TREES CLASS)
        (CONCATENATE
         (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
          KWD-DEFCLASS-NULL-VALUE-ONLY)
         NIL)))
      NIL)
     NIL))))

;;; (DEFUN MARK-DIRECT-EQUIVALENT-SLOT ...)

(CL:DEFUN MARK-DIRECT-EQUIVALENT-SLOT (SLOT)
  (CL:LET* ((DIRECTEQUIVALENT (%SLOT.SLOT-DIRECT-EQUIVALENT SLOT)))
   (CL:WHEN (CL:NOT (CL:EQ DIRECTEQUIVALENT NULL))
    (CL:IF (%SLOT.SLOT-MARKED? DIRECTEQUIVALENT)
     (CL:SETF (%SLOT.SLOT-MARKED? SLOT) CL:T)
     (CL:SETF (%SLOT.SLOT-MARKED? DIRECTEQUIVALENT) CL:T))))
  :VOID)

;;; (DEFUN (IS-CONTEXT-SENSITIVE-SLOT? BOOLEAN) ...)

(CL:DEFUN IS-CONTEXT-SENSITIVE-SLOT? (SLOT)
  (CL:RETURN-FROM IS-CONTEXT-SENSITIVE-SLOT?
   (CL:OR (%STORAGE-SLOT.SLOT-CONTEXT-SENSITIVE? SLOT)
    (CL:AND
     (CL:NOT (CL:EQ (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT SLOT) NULL))
     (IS-CONTEXT-SENSITIVE-SLOT?
      (%STORAGE-SLOT.SLOT-DIRECT-EQUIVALENT SLOT))))))

;;; (DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENT CONS) ...)

(CL:DEFUN YIELD-INITIAL-VALUE-ASSIGNMENT (SLOT MODE)
  (CL:LET*
   ((INITIALVALUEEXPRESSION (YIELD-INITIAL-VALUE-EXPRESSION SLOT))
    (REQUIREDSLOT? (REQUIRED? SLOT)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ INITIALVALUEEXPRESSION NULL))
     (CL:NOT
      (CL:EQ (%STORAGE-SLOT.SLOT-NAME SLOT)
       SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT)))
    (CL:COND
     ((CL:EQ MODE KWD-DEFCLASS-NULL-VALUE-ONLY)
      (CL:WHEN
       (CL:OR REQUIREDSLOT?
        (CL:NOT
         (EQUAL-CONS-TREES?
          (TYPE-TO-WALKED-NULL-VALUE-TREE (TYPE-SPECIFIER SLOT)
           (TYPE SLOT))
          INITIALVALUEEXPRESSION)))
       (CL:SETQ INITIALVALUEEXPRESSION NULL)))
     ((CL:EQ MODE KWD-DEFCLASS-INITIAL-VALUE-ONLY)
      (CL:WHEN
       (CL:OR REQUIREDSLOT?
        (EQUAL-CONS-TREES?
         (TYPE-TO-WALKED-NULL-VALUE-TREE (TYPE-SPECIFIER SLOT)
          (TYPE SLOT))
         INITIALVALUEEXPRESSION))
       (CL:SETQ INITIALVALUEEXPRESSION NULL)))
     ((CL:EQ MODE KWD-DEFCLASS-FORCE-NULL-VALUE)
      (CL:SETQ INITIALVALUEEXPRESSION
       (TYPE-TO-WALKED-NULL-VALUE-TREE (TYPE-SPECIFIER SLOT)
        (TYPE SLOT))))
     ((CL:EQ MODE KWD-DEFCLASS-ANY-INITIAL-VALUE)
      (CL:WHEN REQUIREDSLOT? (CL:SETQ INITIALVALUEEXPRESSION NULL)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" MODE "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
    (CL:WHEN (CL:NOT (CL:EQ INITIALVALUEEXPRESSION NULL))
     (CL:RETURN-FROM YIELD-INITIAL-VALUE-ASSIGNMENT
      (LIST* SYM-DEFCLASS-STELLA-SETF
       (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE SYM-DEFCLASS-STELLA-SELF
        (%STORAGE-SLOT.SLOT-NAME (CANONICAL-SLOT SLOT))
        (CONCATENATE
         (CL:IF (IS-CONTEXT-SENSITIVE-SLOT? SLOT)
          (LIST* KWD-DEFCLASS-CONTEXT-SENSITIVE?
           SYM-DEFCLASS-STELLA-FALSE NIL)
          NIL)
         NIL))
       INITIALVALUEEXPRESSION NIL))))
   (CL:RETURN-FROM YIELD-INITIAL-VALUE-ASSIGNMENT NULL)))

;;; (DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENTS CONS) ...)

(CL:DEFUN YIELD-INITIAL-VALUE-ASSIGNMENTS (CLASS MODE)
  (CL:LET* ((ASSIGNMENTS NIL) (INITIALVALUEASSIGNMENT NULL))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:SETF (%SLOT.SLOT-MARKED? SLOT) CL:NIL)))
   (CL:LET* ((SLOT NULL) (ITER-001 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-001) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-001))
     (MARK-DIRECT-EQUIVALENT-SLOT SLOT)))
   (CL:LET* ((SLOT NULL) (ITER-002 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-002) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-002))
     (CL:WHEN
      (CL:AND (CL:NOT (%SLOT.SLOT-MARKED? SLOT)) (STORAGE-SLOT? SLOT))
      (CL:SETQ INITIALVALUEASSIGNMENT
       (YIELD-INITIAL-VALUE-ASSIGNMENT SLOT MODE))
      (CL:WHEN (CL:NOT (CL:EQ INITIALVALUEASSIGNMENT NULL))
       (CL:SETQ ASSIGNMENTS
        (CONS INITIALVALUEASSIGNMENT ASSIGNMENTS))))))
   (CL:RETURN-FROM YIELD-INITIAL-VALUE-ASSIGNMENTS ASSIGNMENTS)))

;;; (DEFUN (YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS CONS) ...)

(CL:DEFUN YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS (CLASS)
  (CL:LET* ((ASSIGNMENTS NIL) (INITIALVALUEASSIGNMENT NULL))
   (CL:LET*
    ((SLOT NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%CLASS.CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SLOT (%%VALUE ITER-000))
     (CL:SETF (%SLOT.SLOT-MARKED? SLOT) CL:NIL)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET*
    ((SLOT NULL)
     (ITER-001 (%LIST.THE-CONS-LIST (%CLASS.CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ SLOT (%%VALUE ITER-001))
     (MARK-DIRECT-EQUIVALENT-SLOT SLOT)
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:LET*
    ((SLOT NULL)
     (ITER-002 (%LIST.THE-CONS-LIST (%CLASS.CLASS-LOCAL-SLOTS CLASS))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
     (CL:SETQ SLOT (%%VALUE ITER-002))
     (CL:WHEN
      (CL:AND (CL:NOT (%SLOT.SLOT-MARKED? SLOT)) (STORAGE-SLOT? SLOT))
      (CL:SETQ INITIALVALUEASSIGNMENT
       (YIELD-INITIAL-VALUE-ASSIGNMENT SLOT
        KWD-DEFCLASS-ANY-INITIAL-VALUE))
      (CL:WHEN (CL:NOT (CL:EQ INITIALVALUEASSIGNMENT NULL))
       (CL:SETQ ASSIGNMENTS
        (CONS INITIALVALUEASSIGNMENT ASSIGNMENTS))))
     (CL:SETQ ITER-002 (%%REST ITER-002))))
   (CL:RETURN-FROM YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS
    (REVERSE ASSIGNMENTS))))

;;; (DEFUN (YIELD-INITIALIZER-TREES CONS) ...)

(CL:DEFUN YIELD-INITIALIZER-TREES (CLASS)
  (CL:LET* ((INITIALIZERS NIL) (CURSOR NIL))
   (CL:WHEN
    (CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
       SYM-DEFCLASS-STELLA-CLASS-INITIALIZER NULL)
      NULL))
    (CL:SETQ INITIALIZERS
     (CONS
      (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
       SYM-DEFCLASS-STELLA-CLASS-INITIALIZER NULL)
      INITIALIZERS)))
   (CL:LET*
    ((SUPER NULL) (ITER-000 (%CLASS.CLASS-ALL-SUPER-CLASSES CLASS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SUPER (%%VALUE ITER-000))
     (CL:WHEN
      (CL:AND
       (CL:NOT
        (CL:EQ
         (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS SUPER)
          SYM-DEFCLASS-STELLA-CLASS-INITIALIZER NULL)
         NULL))
       (CL:NOT
        (MEMB? INITIALIZERS
         (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS SUPER)
          SYM-DEFCLASS-STELLA-CLASS-INITIALIZER NULL))))
      (CL:SETQ INITIALIZERS
       (CONS
        (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS SUPER)
         SYM-DEFCLASS-STELLA-CLASS-INITIALIZER NULL)
        INITIALIZERS)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ CURSOR INITIALIZERS)
   (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
    (FIRST-SETTER CURSOR
     (CONS (%%VALUE CURSOR) (CONS SYM-DEFCLASS-STELLA-SELF NIL)))
    (CL:SETQ CURSOR (%%REST CURSOR)))
   (CL:RETURN-FROM YIELD-INITIALIZER-TREES INITIALIZERS)))

;;; (DEFUN (YIELD-CONSTRUCTOR-BODY CONS) ...)

(CL:DEFUN YIELD-CONSTRUCTOR-BODY (CLASS REQUIREDASSIGNMENTS)
  (CL:LET*
   ((INITIALVALUEASSIGNMENTS
     (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
      (CL:IF (DECIDED-TO-RECYCLE? CLASS)
       KWD-DEFCLASS-INITIAL-VALUE-ONLY
       KWD-DEFCLASS-ANY-INITIAL-VALUE))))
   (CL:WHEN
    (CL:AND (CL:EQ INITIALVALUEASSIGNMENTS NIL)
     (CL:EQ REQUIREDASSIGNMENTS NIL) (CL:EQ (INITIALIZER CLASS) NULL)
     (CL:NOT (ACTIVE? CLASS)) (CL:NOT (DECIDED-TO-RECYCLE? CLASS)))
    (CL:RETURN-FROM YIELD-CONSTRUCTOR-BODY
     (YIELD-CREATION-TREES CLASS)))
   (CL:RETURN-FROM YIELD-CONSTRUCTOR-BODY
    (CONCATENATE (YIELD-CREATION-TREES CLASS)
     (CONCATENATE REQUIREDASSIGNMENTS
      (CONCATENATE INITIALVALUEASSIGNMENTS
       (CONCATENATE (YIELD-INITIALIZER-TREES CLASS)
        (CONCATENATE
         (CL:IF (ACTIVE? CLASS)
          (CONS
           (LIST* SYM-DEFCLASS-STELLA-RUN-CONSTRUCTOR-DEMONS
            SYM-DEFCLASS-STELLA-SELF NIL)
           NIL)
          NIL)
         NIL))))))))

;;; (DEFUN (YIELD-CONSTRUCTOR-DEFINITION CONS) ...)

(CL:DEFUN YIELD-CONSTRUCTOR-DEFINITION (CLASS)
  (CL:WHEN (EXCEPTION-CLASS? CLASS)
   (CL:RETURN-FROM YIELD-CONSTRUCTOR-DEFINITION
    (YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION CLASS)))
  (CL:LET* ((REQUIREDPARAMETERS NIL) (ASSIGNMENTS NIL) (SLOT NULL))
   (CL:LET*
    ((SLOTNAME NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (CLASS-REQUIRED-SLOT-NAMES CLASS)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SLOTNAME (%%VALUE ITER-000))
     (CL:SETQ ASSIGNMENTS
      (CONS
       (LIST* SYM-DEFCLASS-STELLA-SETF
        (CONS SLOTNAME (CONS SYM-DEFCLASS-STELLA-SELF NIL)) SLOTNAME
        NIL)
       ASSIGNMENTS))
     (CL:SETQ SLOT (LOOKUP-SLOT CLASS SLOTNAME))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (CONS SLOTNAME (CONS (TYPE-TO-SYMBOL (TYPE SLOT)) NIL))
         NIL))
       (CL:IF (CL:EQ REQUIREDPARAMETERS NIL)
        (CL:SETQ REQUIREDPARAMETERS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST REQUIREDPARAMETERS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (CONS SLOTNAME (CONS (TYPE-TO-SYMBOL (TYPE SLOT)) NIL))
         NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM YIELD-CONSTRUCTOR-DEFINITION
    (LIST* SYM-DEFCLASS-STELLA-DEFUN
     (CONS (YIELD-CONSTRUCTOR-NAME CLASS)
      (CONS (CLASS-SYMBOL CLASS) NIL))
     (CONCATENATE REQUIREDPARAMETERS NIL) KWD-DEFCLASS-CONSTRUCTOR?
     SYM-DEFCLASS-STELLA-TRUE KWD-DEFCLASS-PUBLIC?
     (CL:IF (PUBLIC? CLASS) TRUE-WRAPPER FALSE-WRAPPER)
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-LET
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-SELF (CLASS-SYMBOL CLASS)
         (CONS SYM-DEFCLASS-STELLA-NULL NIL))
        NIL)
       (CONCATENATE
        (YIELD-CONSTRUCTOR-BODY CLASS (REVERSE ASSIGNMENTS))
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-SELF
          NIL)
         NIL)))
      NIL)))))

;;; (DEFUN (YIELD-EXCEPTION-CONSTRUCTOR-BODY CONS) ...)

(CL:DEFUN YIELD-EXCEPTION-CONSTRUCTOR-BODY (CLASS MESSAGEPARAMETER REQUIREDASSIGNMENTS)
  (CL:LET*
   ((INITIALVALUEASSIGNMENTS
     (YIELD-INITIAL-VALUE-ASSIGNMENTS CLASS
      (CL:IF (DECIDED-TO-RECYCLE? CLASS)
       KWD-DEFCLASS-INITIAL-VALUE-ONLY
       KWD-DEFCLASS-ANY-INITIAL-VALUE))))
   (CL:WHEN
    (CL:AND (CL:EQ INITIALVALUEASSIGNMENTS NIL)
     (CL:EQ REQUIREDASSIGNMENTS NIL) (CL:EQ (INITIALIZER CLASS) NULL)
     (CL:NOT (ACTIVE? CLASS)) (CL:NOT (DECIDED-TO-RECYCLE? CLASS)))
    (CL:RETURN-FROM YIELD-EXCEPTION-CONSTRUCTOR-BODY
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
       (LIST* SYM-DEFCLASS-STELLA-MAKE (CLASS-SYMBOL CLASS)
        (CONS MESSAGEPARAMETER NIL))
       NIL)
      NIL)))
   (CL:RETURN-FROM YIELD-EXCEPTION-CONSTRUCTOR-BODY
    (CONS
     (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
      (LIST* SYM-DEFCLASS-STELLA-MAKE (CLASS-SYMBOL CLASS)
       (CONS MESSAGEPARAMETER NIL))
      NIL)
     (CONCATENATE REQUIREDASSIGNMENTS
      (CONCATENATE INITIALVALUEASSIGNMENTS
       (CONCATENATE (YIELD-INITIALIZER-TREES CLASS)
        (CONCATENATE
         (CL:IF (ACTIVE? CLASS)
          (CONS
           (LIST* SYM-DEFCLASS-STELLA-RUN-CONSTRUCTOR-DEMONS
            SYM-DEFCLASS-STELLA-SELF NIL)
           NIL)
          NIL)
         NIL))))))))

;;; (DEFUN (YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION CONS) ...)

(CL:DEFUN YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION (CLASS)
  (CL:LET*
   ((REQUIREDPARAMETERS NIL) (ASSIGNMENTS NIL) (SLOT NULL)
    (MESSAGEPARAMETER SYM-DEFCLASS-STELLA-MESSAGE))
   (CL:LET*
    ((SLOTNAME NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (CLASS-REQUIRED-SLOT-NAMES CLASS)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SLOTNAME (%%VALUE ITER-000))
     (CL:WHEN (CL:NOT (CL:EQ SLOTNAME MESSAGEPARAMETER))
      (CL:SETQ ASSIGNMENTS
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-SETF
         (CONS SLOTNAME (CONS SYM-DEFCLASS-STELLA-SELF NIL)) SLOTNAME
         NIL)
        ASSIGNMENTS)))
     (CL:SETQ SLOT (LOOKUP-SLOT CLASS SLOTNAME))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (CONS SLOTNAME (CONS (TYPE-TO-SYMBOL (TYPE SLOT)) NIL))
         NIL))
       (CL:IF (CL:EQ REQUIREDPARAMETERS NIL)
        (CL:SETQ REQUIREDPARAMETERS COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST REQUIREDPARAMETERS COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (CONS SLOTNAME (CONS (TYPE-TO-SYMBOL (TYPE SLOT)) NIL))
         NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION
    (LIST* SYM-DEFCLASS-STELLA-DEFUN
     (CONS (YIELD-CONSTRUCTOR-NAME CLASS)
      (CONS (CLASS-SYMBOL CLASS) NIL))
     (CONCATENATE REQUIREDPARAMETERS NIL) KWD-DEFCLASS-CONSTRUCTOR?
     SYM-DEFCLASS-STELLA-TRUE KWD-DEFCLASS-PUBLIC?
     (CL:IF (PUBLIC? CLASS) TRUE-WRAPPER FALSE-WRAPPER)
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-LET
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-SELF (CLASS-SYMBOL CLASS)
         (CONS SYM-DEFCLASS-STELLA-NULL NIL))
        NIL)
       (CONCATENATE
        (YIELD-EXCEPTION-CONSTRUCTOR-BODY CLASS MESSAGEPARAMETER
         (REVERSE ASSIGNMENTS))
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-SELF
          NIL)
         NIL)))
      NIL)))))

;;; (DEFUN (YIELD-DESTRUCTOR-DEFINITIONS CONS) ...)

(CL:DEFUN YIELD-DESTRUCTOR-DEFINITIONS (CLASS)
  (CL:LET*
   ((CLASSNAME (CLASS-SYMBOL CLASS))
    (DESTRUCTOR
     (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
      SYM-DEFCLASS-STELLA-CLASS-DESTRUCTOR NULL))
    (TERMINATOR (TERMINATOR CLASS)) (DEFINITIONS NIL))
   (CL:COND
    ((DECIDED-TO-RECYCLE? CLASS)
     (CL:LET*
      ((RECYCLESLOT (RECYCLE-SLOT CLASS))
       (RECYCLELIST (YIELD-RECYCLE-LIST-NAME CLASS)))
      (CL:WHEN (USE-FREE-LIST? CLASS)
       (CL:SETQ DEFINITIONS
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD SYM-DEFCLASS-STELLA-FREE
          (CONS (LIST* SYM-DEFCLASS-STELLA-SELF CLASSNAME NIL) NIL)
          (LIST* SYM-DEFCLASS-STELLA-WHEN
           (LIST* SYM-DEFCLASS-STELLA-AND
            SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?*
            (LIST* SYM-DEFCLASS-STELLA-DEFINED? RECYCLELIST NIL)
            (CONCATENATE
             (CL:IF
              (CL:AND (USE-SWEEP-LIST? CLASS)
               (CL:NOT
                (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
                 SGT-DEFCLASS-STELLA-STANDARD-OBJECT)))
              (CONS
               (LIST* SYM-DEFCLASS-STELLA-DEFINED?
                (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL)
                NIL)
               NIL)
              NIL)
             NIL))
           (CONCATENATE (YIELD-TERMINATE-OBJECT-TREES CLASS)
            (CONCATENATE (YIELD-REGISTER-RECYCLED-ITEM-TREES)
             (CONCATENATE
              (CL:IF (CL:NOT (CL:EQ RECYCLESLOT NULL))
               (LIST*
                (LIST* SYM-DEFCLASS-STELLA-SETF
                 (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE
                  SYM-DEFCLASS-STELLA-SELF
                  (%STORAGE-SLOT.SLOT-NAME RECYCLESLOT) NIL)
                 (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST
                  NIL)
                 NIL)
                (LIST* SYM-DEFCLASS-STELLA-SETF
                 (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST
                  NIL)
                 SYM-DEFCLASS-STELLA-SELF NIL)
                NIL)
               (CONS
                (LIST* SYM-DEFCLASS-STELLA-PUSH
                 (LIST* SYM-DEFCLASS-STELLA-LIST-OF-RECYCLED-ITEMS
                  RECYCLELIST NIL)
                 SYM-DEFCLASS-STELLA-SELF NIL)
                NIL))
              (CONCATENATE
               (CL:IF (CL:NOT (USE-SWEEP-LIST? CLASS))
                (LIST*
                 (LIST* SYM-DEFCLASS-STELLA-++
                  (LIST* SYM-DEFCLASS-STELLA-CURRENT-LENGTH RECYCLELIST
                   NIL)
                  NIL)
                 (LIST* SYM-DEFCLASS-STELLA-WHEN
                  (LIST* SYM-DEFCLASS-STELLA-=
                   (LIST* SYM-DEFCLASS-STELLA---
                    SYM-DEFCLASS-STELLA-*RECYCLE-LISTS-MAINTENANCE-TIMER*
                    NIL)
                   (WRAP-INTEGER 0) NIL)
                  (CONS SYM-DEFCLASS-STELLA-MAINTAIN-RECYCLE-LISTS NIL)
                  NIL)
                 NIL)
                NIL)
               NIL)))))
          NIL)
         DEFINITIONS)))
      (CL:WHEN (USE-SWEEP-LIST? CLASS)
       (CL:WHEN (CL:NOT (USE-FREE-LIST? CLASS))
        (CL:SETQ DEFINITIONS
         (CONS
          (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD SYM-DEFCLASS-STELLA-FREE
           (CONS (LIST* SYM-DEFCLASS-STELLA-SELF CLASSNAME NIL) NIL)
           SYM-DEFCLASS-STELLA-NULL NIL)
          DEFINITIONS)))
       (CL:SETQ DEFINITIONS
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD SYM-DEFCLASS-STELLA-SWEEP
          (CONS (LIST* SYM-DEFCLASS-STELLA-SELF CLASSNAME NIL) NIL)
          (LIST* SYM-DEFCLASS-STELLA-WHEN
           (LIST* SYM-DEFCLASS-STELLA-AND
            SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?*
            (LIST* SYM-DEFCLASS-STELLA-DEFINED? RECYCLELIST NIL) NIL)
           (CONCATENATE
            (CL:IF (USE-FREE-LIST? CLASS)
             (CL:IF (CL:NOT (CL:EQ (RECYCLE-SLOT CLASS) NULL))
              (CONS
               (LIST* SYM-DEFCLASS-STELLA-SETF
                (LIST* SYM-DEFCLASS-STELLA-RECYCLED-ITEMS RECYCLELIST
                 NIL)
                SYM-DEFCLASS-STELLA-NULL NIL)
               NIL)
              (CONS
               (LIST* SYM-DEFCLASS-STELLA-CLEAR
                (LIST* SYM-DEFCLASS-STELLA-LIST-OF-RECYCLED-ITEMS
                 RECYCLELIST NIL)
                NIL)
               NIL))
             NIL)
            (CONS
             (LIST* SYM-DEFCLASS-STELLA-LET
              (CONS
               (LIST* SYM-DEFCLASS-STELLA-UNUSED
                (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST
                 NIL)
                NIL)
               NIL)
              (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-SELF
               (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL)
               NIL)
              (LIST* SYM-DEFCLASS-STELLA-WHILE
               (LIST* SYM-DEFCLASS-STELLA-NOT
                (LIST* SYM-DEFCLASS-STELLA-EQL?
                 SYM-DEFCLASS-STELLA-SELF SYM-DEFCLASS-STELLA-UNUSED
                 NIL)
                NIL)
               (CONCATENATE (YIELD-TERMINATE-OBJECT-TREES CLASS)
                (CONS
                 (LIST* SYM-DEFCLASS-STELLA-SETQ
                  SYM-DEFCLASS-STELLA-SELF
                  (LIST* SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT
                   SYM-DEFCLASS-STELLA-SELF NIL)
                  NIL)
                 NIL)))
              (LIST* SYM-DEFCLASS-STELLA-SETF
               (LIST* SYM-DEFCLASS-STELLA-UNUSED-ITEMS RECYCLELIST NIL)
               (LIST* SYM-DEFCLASS-STELLA-ALL-ITEMS RECYCLELIST NIL)
               NIL)
              NIL)
             NIL)))
          NIL)
         DEFINITIONS)))))
    ((CL:OR (CL:NOT (CL:EQ TERMINATOR NULL))
      (CL:NOT (CL:EQ DESTRUCTOR NULL)))
     (CL:WHEN (CL:EQ DESTRUCTOR NULL)
      (CL:SETQ DESTRUCTOR SYM-DEFCLASS-STELLA-UNMAKE))
     (CL:WHEN (CL:NOT (CL:EQ DESTRUCTOR SYM-DEFCLASS-STELLA-FREE))
      (CL:SETQ DEFINITIONS
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD SYM-DEFCLASS-STELLA-FREE
         (CONS (LIST* SYM-DEFCLASS-STELLA-SELF CLASSNAME NIL) NIL)
         (CL:IF (CL:NOT (CL:EQ TERMINATOR NULL))
          (LIST* SYM-DEFCLASS-STELLA-WHEN
           (CONS TERMINATOR (CONS SYM-DEFCLASS-STELLA-SELF NIL))
           (CONS DESTRUCTOR (CONS SYM-DEFCLASS-STELLA-SELF NIL)) NIL)
          (CONS DESTRUCTOR (CONS SYM-DEFCLASS-STELLA-SELF NIL)))
         NIL)
        DEFINITIONS)))))
   (CL:RETURN-FROM YIELD-DESTRUCTOR-DEFINITIONS (REVERSE DEFINITIONS))))

;;; (DEFUN CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS ...)

(CL:DEFUN CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS (CLASS)
  (CL:WHEN
   (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-DEFCLASS-CPP-STANDALONE)
   (CREATE-CPP-CONSTRUCTOR-UNIT CLASS)
   (CL:RETURN-FROM CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS))
  (CL:WHEN
   (CL:NOT
    (CL:OR (%CLASS.ABSTRACT? CLASS)
     (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
      SGT-DEFCLASS-STELLA-LITERAL)))
   (CL:LET*
    ((DEFINITION NULL)
     (ITER-000 (YIELD-RECYCLE-LIST-DEFINITIONS CLASS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DEFINITION (%%VALUE ITER-000))
     (WALK-AUXILIARY-TREE DEFINITION)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (WALK-AUXILIARY-TREE (YIELD-CONSTRUCTOR-DEFINITION CLASS))
   (CL:LET*
    ((DESTRUCTOR NULL) (ITER-001 (YIELD-DESTRUCTOR-DEFINITIONS CLASS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ DESTRUCTOR (%%VALUE ITER-001))
     (WALK-AUXILIARY-TREE DESTRUCTOR)
     (CL:SETQ ITER-001 (%%REST ITER-001)))))
  :VOID)

;;; (DEFUN (PARAMETERIZED-CLASS? BOOLEAN) ...)

(CL:DEFUN PARAMETERIZED-CLASS? (CLASS)
  (CL:RETURN-FROM PARAMETERIZED-CLASS? (NON-EMPTY? (PARAMETERS CLASS))))

;;; (DEFUN (CLASS-WITH-INITIALIZER? BOOLEAN) ...)

(CL:DEFUN CLASS-WITH-INITIALIZER? (CLASS)
  (CL:LET* ((FOUND?-000 CL:NIL))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:WHEN (STORAGE-SLOT? SLOT) (CL:SETQ FOUND?-000 CL:T)
      (CL:RETURN))))
   (CL:LET* ((VALUE-000 FOUND?-000))
    (CL:RETURN-FROM CLASS-WITH-INITIALIZER? VALUE-000))))

;;; (DEFUN (YIELD-INITIALIZER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-INITIALIZER-NAME (CLASS)
  (CL:LET*
   ((BASE-NAME (CLASS-NAME CLASS))
    (PREFIX
     (CL:IF (ALL-UPPER-CASE-STRING? BASE-NAME) "INITIALIZE-"
      "initialize-")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASE-NAME PREFIX))
   (CL:RETURN-FROM YIELD-INITIALIZER-NAME
    (INTERN-DERIVED-SYMBOL (%CLASS.CLASS-TYPE CLASS)
     (CONCATENATE PREFIX BASE-NAME)))))

;;; (DEFUN (YIELD-INITIALIZER-DEFINITION CONS) ...)

(CL:DEFUN YIELD-INITIALIZER-DEFINITION (CLASS)
  (CL:LET* ((PARENTINITFORMS NIL))
   (CL:LET*
    ((SUPER NULL)
     (ITER-000
      (%LIST.THE-CONS-LIST (%CLASS.CLASS-DIRECT-SUPERS CLASS)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SUPER (%%VALUE ITER-000))
     (CL:WHEN
      (CLASS-WITH-INITIALIZER? (%SURROGATE.SURROGATE-VALUE SUPER))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS
          (CONS
           (YIELD-INITIALIZER-NAME (%SURROGATE.SURROGATE-VALUE SUPER))
           (CONS SYM-DEFCLASS-STELLA-SELF NIL))
          NIL))
        (CL:IF (CL:EQ PARENTINITFORMS NIL)
         (CL:SETQ PARENTINITFORMS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST PARENTINITFORMS COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS
          (CONS
           (YIELD-INITIALIZER-NAME (%SURROGATE.SURROGATE-VALUE SUPER))
           (CONS SYM-DEFCLASS-STELLA-SELF NIL))
          NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM YIELD-INITIALIZER-DEFINITION
    (LIST* SYM-DEFCLASS-STELLA-DEFUN (YIELD-INITIALIZER-NAME CLASS)
     (CONS
      (CONS
       (LIST* SYM-DEFCLASS-STELLA-SELF
        (YIELD-TYPE-SPEC-TREE (%CLASS.CLASS-TYPE CLASS)) NIL)
       NIL)
      (CONCATENATE PARENTINITFORMS
       (CONCATENATE (YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS CLASS)
        NIL)))))))

;;; (DEFUN CREATE-CPP-CONSTRUCTOR-UNIT ...)

(CL:DEFUN CREATE-CPP-CONSTRUCTOR-UNIT (CLASS)
  (CL:WHEN (CL:NOT (PARAMETERIZED-CLASS? CLASS))
   (CL:LET*
    ((CLASSNAME (YIELD-TYPE-SPEC-TREE (%CLASS.CLASS-TYPE CLASS)))
     (HASINITIALIZER? (CLASS-WITH-INITIALIZER? CLASS)))
    (CL:WHEN HASINITIALIZER?
     (WALK-AUXILIARY-TREE (YIELD-INITIALIZER-DEFINITION CLASS)))
    (HELP-WALK-AUXILIARY-TREE
     (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD CLASSNAME
      (LIST* (CONS (LIST* SYM-DEFCLASS-STELLA-SELF CLASSNAME NIL) NIL)
       KWD-DEFCLASS-PUBLIC?
       (CL:IF (PUBLIC? CLASS) TRUE-WRAPPER FALSE-WRAPPER)
       (CONCATENATE
        (CL:IF HASINITIALIZER?
         (CONS
          (CONS (YIELD-INITIALIZER-NAME CLASS)
           (CONS SYM-DEFCLASS-STELLA-SELF NIL))
          NIL)
         (CONS SYM-DEFCLASS-STELLA-NULL NIL))
        NIL)))
     CL:NIL)))
  :VOID)

;;; (DEFUN (CPP-CONSTRUCTOR? BOOLEAN) ...)

(CL:DEFUN CPP-CONSTRUCTOR? (METHOD)
  (CL:RETURN-FROM CPP-CONSTRUCTOR?
   (CL:AND (CL:EQ (TYPE METHOD) SGT-DEFCLASS-STELLA-VOID)
    (CL:= (LENGTH (METHOD-PARAMETER-NAMES METHOD)) 1)
    (STRING-EQL?
     (%SURROGATE.SYMBOL-NAME (%METHOD-SLOT.SLOT-OWNER METHOD))
     (%SYMBOL.SYMBOL-NAME (%METHOD-SLOT.SLOT-NAME METHOD)))
    (CL:EQ (%SURROGATE.HOME-CONTEXT (%METHOD-SLOT.SLOT-OWNER METHOD))
     (%SYMBOL.HOME-CONTEXT (%METHOD-SLOT.SLOT-NAME METHOD))))))

;;; (DEFSPECIAL *RECYCLING-ENABLED?* ...)

(CL:DEFVAR *RECYCLING-ENABLED?* CL:T
  "If `TRUE' calls to `new' or `free' on classes with :recycle-method;
specifications will actually operate on recycle lists.  Otherwise, all
recycle list operations will be no-ops.")

;;; (DEFGLOBAL *ALL-RECYCLE-LISTS* ...)

(CL:DEFVAR *ALL-RECYCLE-LISTS* NULL)

;;; (DEFUN (CREATE-RECYCLE-LIST RECYCLE-LIST) ...)

(CL:DEFUN CREATE-RECYCLE-LIST (CLASSTYPE ITEMSIZE)
  (CL:DECLARE (CL:TYPE CL:FIXNUM ITEMSIZE))
  #+MCL
  (CL:CHECK-TYPE ITEMSIZE CL:FIXNUM)
  (CL:LET* ((LIST (NEW-RECYCLE-LIST)))
   (CL:LET* ((VALUE-000 NULL))
    (CL:LET*
     ((LIST NULL) (ITER-000 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ LIST (%%VALUE ITER-000))
      (CL:WHEN (CL:EQ (%RECYCLE-LIST.RECYCLE-LIST-OF LIST) CLASSTYPE)
       (CL:SETQ VALUE-000 LIST) (CL:RETURN))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:LET* ((OLDLIST VALUE-000))
     (CL:WHEN (CL:NOT (CL:EQ OLDLIST NULL))
      (CLEAR-RECYCLE-LIST OLDLIST)
      (REMOVE *ALL-RECYCLE-LISTS* OLDLIST))
     (PUSH *ALL-RECYCLE-LISTS* LIST)
     (CL:SETF (%RECYCLE-LIST.RECYCLE-LIST-OF LIST) CLASSTYPE)
     (CL:SETF (%RECYCLE-LIST.ITEM-SIZE LIST) ITEMSIZE)
     (CL:RETURN-FROM CREATE-RECYCLE-LIST LIST)))))

;;; (DEFUN CLEAR-RECYCLE-LIST ...)

(CL:DEFUN CLEAR-RECYCLE-LIST (LIST)
  "Reset `list' to its empty state."
  (CL:SETF (%RECYCLE-LIST.ALL-ITEMS LIST) NULL)
  (CL:SETF (%RECYCLE-LIST.UNUSED-ITEMS LIST) NULL)
  (CL:SETF (%RECYCLE-LIST.RECYCLED-ITEMS LIST) NULL)
  (CL:SETF
   (%LIST.THE-CONS-LIST (%RECYCLE-LIST.LIST-OF-RECYCLED-ITEMS LIST))
   NIL)
  (CL:SETF (%RECYCLE-LIST.CURRENT-LENGTH LIST) 0)
  :VOID)

;;; (DEFUN CLEAR-RECYCLE-LISTS ...)

(CL:DEFUN CLEAR-RECYCLE-LISTS ()
  "Reset all currently active recycle lists to their empty state."
  (CL:SETQ *RECYCLE-LISTS-MAINTENANCE-TIMER*
   *RECYCLE-LISTS-MAINTENANCE-INTERVAL*)
  (CL:LET*
   ((LIST NULL) (ITER-000 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ LIST (%%VALUE ITER-000)) (CLEAR-RECYCLE-LIST LIST)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN PRINT-RECYCLE-LISTS ...)

(CL:DEFUN PRINT-RECYCLE-LISTS ()
  "Print the current state of all recycle lists."
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
   "Approximate space occupied by recycle lists: "
   (CL:* (TOTAL-RECYCLE-LISTS-SIZE) 4) " bytes" EOL)
  (CL:LET*
   ((LIST NULL) (ITER-000 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ LIST (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) LIST
     EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFGLOBAL *MAX-RECYCLE-LIST-BYTES* ...)

(CL:DEFVAR *MAX-RECYCLE-LIST-BYTES* 3000000
  "Maximum number of bytes to be occupied by recycle lists.")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *MAX-RECYCLE-LIST-BYTES*))

;;; (DEFGLOBAL *RECYCLE-LISTS-MAINTENANCE-INTERVAL* ...)

(CL:DEFVAR *RECYCLE-LISTS-MAINTENANCE-INTERVAL* 5000
  "Total number of recycle list extensions after which a
size maintenance operation is performed to ensure that
the `*MAX-RECYCLE-LIST-BYTES*' limit is still met.")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *RECYCLE-LISTS-MAINTENANCE-INTERVAL*))

;;; (DEFGLOBAL *RECYCLE-LISTS-MAINTENANCE-TIMER* ...)

(CL:DEFVAR *RECYCLE-LISTS-MAINTENANCE-TIMER* NULL-INTEGER)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *RECYCLE-LISTS-MAINTENANCE-TIMER*))

;;; (DEFUN MAINTAIN-RECYCLE-LISTS ...)

(CL:DEFUN MAINTAIN-RECYCLE-LISTS ()
  (CL:WHEN (CL:NOT (CL:EQ *CURRENTLY-RECYCLED-ITEMS* NULL))
   (CL:RETURN-FROM MAINTAIN-RECYCLE-LISTS))
  (CL:LET*
   ((TOTALSIZE (TOTAL-RECYCLE-LISTS-SIZE))
    (MAXSIZE (FLOOR (CL:/ *MAX-RECYCLE-LIST-BYTES* 4.0d0)))
    (LISTSIZE NULL-INTEGER) (CLASSREDEFINITION? CL:NIL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM TOTALSIZE MAXSIZE LISTSIZE))
   (CL:SETQ *RECYCLE-LISTS-MAINTENANCE-TIMER*
    *RECYCLE-LISTS-MAINTENANCE-INTERVAL*)
   (CL:LET*
    ((LIST NULL) (ITER-000 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ LIST (%%VALUE ITER-000))
     (CL:WHEN
      (CL:AND
       (CL:NOT
        (CL:EQ
         (%SURROGATE.SURROGATE-VALUE
          (%RECYCLE-LIST.RECYCLE-LIST-OF LIST))
         NULL))
       (CL:NOT
        (DECIDED-TO-RECYCLE?
         (%SURROGATE.SURROGATE-VALUE
          (%RECYCLE-LIST.RECYCLE-LIST-OF LIST)))))
      (CL:SETQ CLASSREDEFINITION? CL:T) (CLEAR-RECYCLE-LIST LIST)
      (DELETED?-SETTER LIST CL:T))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN CLASSREDEFINITION?
    (REMOVE-DELETED-MEMBERS *ALL-RECYCLE-LISTS*))
   (CL:WHEN (CL:> TOTALSIZE MAXSIZE)
    (SORT *ALL-RECYCLE-LISTS* (CL:FUNCTION RECYCLE-LIST-SIZE<))
    (REVERSE *ALL-RECYCLE-LISTS*)
    (CL:LOOP WHILE (CL:> TOTALSIZE MAXSIZE) DO
     (CL:LET*
      ((LIST NULL)
       (ITER-001 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
       (CL:SETQ LIST (%%VALUE ITER-001))
       (CL:TAGBODY (CL:WHEN (CL:<= TOTALSIZE MAXSIZE) (CL:RETURN))
        (CL:SETQ LISTSIZE
         (CL:* (%RECYCLE-LIST.ITEM-SIZE LIST)
          (%RECYCLE-LIST.CURRENT-LENGTH LIST)))
        (CL:IF (CL:> LISTSIZE 0)
         (CL:SETQ TOTALSIZE (CL:- TOTALSIZE LISTSIZE))
         (CL:GO :CONTINUE))
        (REDUCE-RECYCLE-LIST-SIZE LIST 0.5d0)
        (CL:SETQ TOTALSIZE
         (CL:+ TOTALSIZE
          (CL:* (%RECYCLE-LIST.ITEM-SIZE LIST)
           (%RECYCLE-LIST.CURRENT-LENGTH LIST))))
        :CONTINUE)
       (CL:SETQ ITER-001 (%%REST ITER-001)))))))
  :VOID)

;;; (DEFMETHOD (DELETED? BOOLEAN) ...)

(CL:DEFMETHOD DELETED? ((SELF RECYCLE-LIST))
  (CL:RETURN-FROM DELETED?
   (CL:EQ (%RECYCLE-LIST.RECYCLE-LIST-OF SELF) NULL)))

;;; (DEFMETHOD (DELETED?-SETTER BOOLEAN) ...)

(CL:DEFMETHOD DELETED?-SETTER ((SELF RECYCLE-LIST) VALUE)
  (CL:IF VALUE (CL:SETF (%RECYCLE-LIST.RECYCLE-LIST-OF SELF) NULL)
   (CL:WHEN (CL:EQ (%RECYCLE-LIST.RECYCLE-LIST-OF SELF) NULL)
    (CL:SETF (%RECYCLE-LIST.RECYCLE-LIST-OF SELF)
     SGT-DEFCLASS-STELLA-UNKNOWN)))
  (CL:RETURN-FROM DELETED?-SETTER VALUE))

;;; (DEFUN (RECYCLE-LIST-SIZE INTEGER) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) RECYCLE-LIST-SIZE))
(CL:DEFUN RECYCLE-LIST-SIZE (LIST)
  (CL:RETURN-FROM RECYCLE-LIST-SIZE
   (CL:* (%RECYCLE-LIST.ITEM-SIZE LIST)
    (%RECYCLE-LIST.CURRENT-LENGTH LIST))))

;;; (DEFUN (TOTAL-RECYCLE-LISTS-SIZE INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:FIXNUM) TOTAL-RECYCLE-LISTS-SIZE))
(CL:DEFUN TOTAL-RECYCLE-LISTS-SIZE ()
  (CL:LET* ((SIZE 0)) (CL:DECLARE (CL:TYPE CL:FIXNUM SIZE))
   (CL:LET*
    ((LIST NULL) (ITER-000 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ LIST (%%VALUE ITER-000))
     (CL:SETQ SIZE
      (CL:+ SIZE
       (CL:* (%RECYCLE-LIST.ITEM-SIZE LIST)
        (%RECYCLE-LIST.CURRENT-LENGTH LIST))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM TOTAL-RECYCLE-LISTS-SIZE SIZE)))

;;; (DEFUN (RECYCLE-LIST-SIZE< BOOLEAN) ...)

(CL:DEFUN RECYCLE-LIST-SIZE< (LIST1 LIST2)
  (CL:RETURN-FROM RECYCLE-LIST-SIZE<
   (<
    (CL:* (%RECYCLE-LIST.ITEM-SIZE LIST1)
     (%RECYCLE-LIST.CURRENT-LENGTH LIST1))
    (CL:* (%RECYCLE-LIST.ITEM-SIZE LIST2)
     (%RECYCLE-LIST.CURRENT-LENGTH LIST2)))))

;;; (DEFUN REDUCE-RECYCLE-LIST-SIZE ...)

(CL:DEFUN REDUCE-RECYCLE-LIST-SIZE (LIST FRACTION)
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT FRACTION))
  #+MCL
  (CL:CHECK-TYPE FRACTION CL:DOUBLE-FLOAT)
  (CL:LET*
   ((LENGTH (%RECYCLE-LIST.CURRENT-LENGTH LIST))
    (REDUCEDLENGTH (FLOOR (CL:* LENGTH FRACTION)))
    (ITEMTYPE (%RECYCLE-LIST.RECYCLE-LIST-OF LIST)) (CURSOR NULL)
    (TRAILINGCURSOR NULL) (UNUSED NULL) (NEXTSLOT NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM LENGTH REDUCEDLENGTH))
   (CL:WHEN
    (CL:AND
     (CL:OR (CL:NOT (CL:EQ (%RECYCLE-LIST.ALL-ITEMS LIST) NULL))
      (CL:NOT (CL:EQ (%RECYCLE-LIST.RECYCLED-ITEMS LIST) NULL)))
     (CL:NOT
      (SUBTYPE-OF? ITEMTYPE SGT-DEFCLASS-STELLA-STANDARD-OBJECT)))
    (CLEAR-RECYCLE-LIST LIST)
    (CL:RETURN-FROM REDUCE-RECYCLE-LIST-SIZE))
   (CL:SETQ *RECYCLING-ENABLED?* CL:NIL)
   (CL:WHEN (CL:NOT (CL:EQ (%RECYCLE-LIST.ALL-ITEMS LIST) NULL))
    (CL:SETQ CURSOR (%RECYCLE-LIST.ALL-ITEMS LIST))
    (CL:SETQ UNUSED (%RECYCLE-LIST.UNUSED-ITEMS LIST))
    (CL:SETQ NEXTSLOT
     (LOOKUP-SLOT (%SURROGATE.SURROGATE-VALUE ITEMTYPE)
      SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT))
    (CL:LET*
     ((I NULL-INTEGER) (ITER-000 1)
      (UPPER-BOUND-000 (CL:- LENGTH REDUCEDLENGTH)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
     (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO
      (CL:SETQ I ITER-000) (CL:SETQ I I)
      (CL:WHEN (CL:EQ CURSOR UNUSED)
       (CL:SETF (%RECYCLE-LIST.UNUSED-ITEMS LIST)
        (%RECYCLE-LIST.ALL-ITEMS LIST)))
      (CL:SETQ TRAILINGCURSOR CURSOR)
      (CL:SETQ CURSOR (READ-SLOT-VALUE CURSOR NEXTSLOT))
      (PUT-SLOT-VALUE TRAILINGCURSOR NEXTSLOT NULL)
      (CL:SETQ ITER-000 (CL:1+ ITER-000))))
    (CL:WHEN
     (EQL? (%RECYCLE-LIST.UNUSED-ITEMS LIST)
      (%RECYCLE-LIST.ALL-ITEMS LIST))
     (CL:SETF (%RECYCLE-LIST.UNUSED-ITEMS LIST) CURSOR))
    (CL:SETF (%RECYCLE-LIST.ALL-ITEMS LIST) CURSOR))
   (CL:COND
    ((NON-EMPTY? (%RECYCLE-LIST.LIST-OF-RECYCLED-ITEMS LIST))
     (CL:SETQ CURSOR
      (NTH-REST
       (%LIST.THE-CONS-LIST
        (%RECYCLE-LIST.LIST-OF-RECYCLED-ITEMS LIST))
       REDUCEDLENGTH))
     (CL:WHEN (CL:NOT (CL:EQ CURSOR NULL))
      (CL:SETF (%%REST CURSOR) NIL)))
    ((CL:NOT (CL:EQ (%RECYCLE-LIST.RECYCLED-ITEMS LIST) NULL))
     (CL:COND
      ((CL:NOT (CL:EQ (%RECYCLE-LIST.ALL-ITEMS LIST) NULL))
       (CL:SETF (%RECYCLE-LIST.RECYCLED-ITEMS LIST) NULL))
      (CL:T (CL:SETQ CURSOR (%RECYCLE-LIST.RECYCLED-ITEMS LIST))
       (CL:SETQ NEXTSLOT
        (RECYCLE-SLOT (%SURROGATE.SURROGATE-VALUE ITEMTYPE)))
       (CL:LET*
        ((I NULL-INTEGER) (ITER-001 2) (UPPER-BOUND-001 REDUCEDLENGTH)
         (UNBOUNDED?-000 (CL:= UPPER-BOUND-001 NULL-INTEGER)))
        (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001 UPPER-BOUND-001))
        (CL:LOOP WHILE
         (CL:OR UNBOUNDED?-000 (CL:<= ITER-001 UPPER-BOUND-001)) DO
         (CL:SETQ I ITER-001)
         (CL:SETQ CURSOR (READ-SLOT-VALUE CURSOR NEXTSLOT))
         (CL:WHEN (CL:EQ CURSOR NULL) (CL:RETURN))
         (CL:SETQ ITER-001 (CL:1+ ITER-001))))
       (CL:WHEN (CL:NOT (CL:EQ CURSOR NULL))
        (PUT-SLOT-VALUE CURSOR NEXTSLOT NULL))))))
   (CL:SETF (%RECYCLE-LIST.CURRENT-LENGTH LIST) REDUCEDLENGTH)
   (CL:SETQ *RECYCLING-ENABLED?* CL:T))
  :VOID)

;;; (DEFMETHOD SWEEP ...)

(%%DEFCONSMETHOD SWEEP ((SELF OBJECT))
  "Default method.  Sweep up all `self'-type objects."
  :VOID)

;;; (DEFUN SWEEP-TRANSIENTS ...)

(CL:DEFUN SWEEP-TRANSIENTS ()
  (CL:LET*
   ((RECYCLELIST NULL)
    (ITER-000 (%LIST.THE-CONS-LIST *ALL-RECYCLE-LISTS*)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ RECYCLELIST (%%VALUE ITER-000))
    (CL:WHEN
     (CL:AND
      (CL:NOT (CL:EQ (%RECYCLE-LIST.ALL-ITEMS RECYCLELIST) NULL))
      (ISA? (%RECYCLE-LIST.ALL-ITEMS RECYCLELIST)
       SGT-DEFCLASS-STELLA-TRANSIENT-MIXIN))
     (SWEEP (%RECYCLE-LIST.ALL-ITEMS RECYCLELIST)))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (FREE-TRANSIENT-SYMBOLS)
  :VOID)

;;; (DEFUN (MAKE-NON-RECYCLED-LIST LIST) ...)

(CL:DEFUN MAKE-NON-RECYCLED-LIST ()
  (CL:LET* ((LIST (%MAKE-LIST)))
   (CL:SETF (%LIST.THE-CONS-LIST LIST) NIL)
   (CL:RETURN-FROM MAKE-NON-RECYCLED-LIST LIST)))

;;; (DEFGLOBAL *CURRENTLY-RECYCLED-ITEMS* ...)

(CL:DEFVAR *CURRENTLY-RECYCLED-ITEMS* NULL
  "During recycle list debugging holds all items that live in
some free list.  Depending on program behavior, this table can get quite large!")

;;; (DEFUN REGISTER-RECYCLED-ITEM ...)

(CL:DEFUN REGISTER-RECYCLED-ITEM (ITEM)
  (CL:IF (CL:NOT (CL:EQ (LOOKUP *CURRENTLY-RECYCLED-ITEMS* ITEM) NULL))
   (%BREAK-PROGRAM "Trying to recyle an already recycled item!")
   (INSERT-AT *CURRENTLY-RECYCLED-ITEMS* ITEM ITEM))
  :VOID)

;;; (DEFUN UNREGISTER-RECYCLED-ITEM ...)

(CL:DEFUN UNREGISTER-RECYCLED-ITEM (ITEM)
  (REMOVE-AT *CURRENTLY-RECYCLED-ITEMS* ITEM)
  :VOID)

;;; (DEFUN START-RECYCLE-LIST-DEBUGGING ...)

(CL:DEFUN START-RECYCLE-LIST-DEBUGGING ()
  (CL:SETQ *CURRENTLY-RECYCLED-ITEMS* NULL)
  (CLEAR-RECYCLE-LISTS)
  (CL:SETQ *CURRENTLY-RECYCLED-ITEMS* (NEW-HASH-TABLE))
  :VOID)

;;; (DEFUN STOP-RECYCLE-LIST-DEBUGGING ...)

(CL:DEFUN STOP-RECYCLE-LIST-DEBUGGING ()
  (CL:SETQ *CURRENTLY-RECYCLED-ITEMS* NULL)
  :VOID)

;;; (DEFUN (RECYCLE-LIST-DEBUGGING-ENABLED? BOOLEAN) ...)

(CL:DEFUN RECYCLE-LIST-DEBUGGING-ENABLED? ()
  (CL:RETURN-FROM RECYCLE-LIST-DEBUGGING-ENABLED?
   (CL:NOT (CL:EQ *CURRENTLY-RECYCLED-ITEMS* NULL))))

;;; (DEFGLOBAL *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?* ...)

(CL:DEFVAR *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?* CL:NIL)

;;; (DEFUN (TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING? BOOLEAN) ...)

(CL:DEFUN TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING? ()
  (CL:RETURN-FROM TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?
   *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?*))

;;; (DEFUN (YIELD-REGISTER-RECYCLED-ITEM-TREES CONS) ...)

(CL:DEFUN YIELD-REGISTER-RECYCLED-ITEM-TREES ()
  (CL:IF *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?*
   (CL:RETURN-FROM YIELD-REGISTER-RECYCLED-ITEM-TREES
    (CONS
     (LIST* SYM-DEFCLASS-STELLA-WHEN
      (CONS SYM-DEFCLASS-STELLA-RECYCLE-LIST-DEBUGGING-ENABLED? NIL)
      (LIST* SYM-DEFCLASS-STELLA-REGISTER-RECYCLED-ITEM
       SYM-DEFCLASS-STELLA-SELF NIL)
      NIL)
     NIL))
   (CL:RETURN-FROM YIELD-REGISTER-RECYCLED-ITEM-TREES NIL)))

;;; (DEFUN (YIELD-UNREGISTER-RECYCLED-ITEM-TREES CONS) ...)

(CL:DEFUN YIELD-UNREGISTER-RECYCLED-ITEM-TREES ()
  (CL:IF *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?*
   (CL:RETURN-FROM YIELD-UNREGISTER-RECYCLED-ITEM-TREES
    (CONS
     (LIST* SYM-DEFCLASS-STELLA-WHEN
      (CONS SYM-DEFCLASS-STELLA-RECYCLE-LIST-DEBUGGING-ENABLED? NIL)
      (LIST* SYM-DEFCLASS-STELLA-UNREGISTER-RECYCLED-ITEM
       SYM-DEFCLASS-STELLA-SELF NIL)
      NIL)
     NIL))
   (CL:RETURN-FROM YIELD-UNREGISTER-RECYCLED-ITEM-TREES NIL)))

;;; (DEFUN (HAS-NON-NULL-DEFAULT-VALUE? BOOLEAN) ...)

(CL:DEFUN HAS-NON-NULL-DEFAULT-VALUE? (SLOT)
  (CL:LET* ((DEFAULTFORM (SYSTEM-DEFAULT-VALUE SLOT)))
   (CL:RETURN-FROM HAS-NON-NULL-DEFAULT-VALUE?
    (CL:AND (CL:NOT (CL:EQ DEFAULTFORM NULL))
     (CL:NOT
      (EQUAL-CONS-TREES?
       (TYPE-TO-WALKED-NULL-VALUE-TREE (TYPE-SPECIFIER SLOT)
        (TYPE SLOT))
       DEFAULTFORM))))))

;;; (DEFUN (SYSTEM-DEFINED-SLOT-READER? BOOLEAN) ...)

(CL:DEFUN SYSTEM-DEFINED-SLOT-READER? (SLOT)
  (CL:RETURN-FROM SYSTEM-DEFINED-SLOT-READER?
   (CL:AND (CL:EQ (READER SLOT) NULL)
    (CL:OR (HAS-NON-NULL-DEFAULT-VALUE? SLOT) (ACTIVE? SLOT)
     (%STORAGE-SLOT.SLOT-HARDWIRED? SLOT)))))

;;; (DEFUN (SYSTEM-DEFINED-SLOT-WRITER? BOOLEAN) ...)

(CL:DEFUN SYSTEM-DEFINED-SLOT-WRITER? (SLOT)
  (CL:RETURN-FROM SYSTEM-DEFINED-SLOT-WRITER?
   (CL:AND (CL:EQ (WRITER SLOT) NULL) (ACTIVE? SLOT))))

;;; (DEFUN (YIELD-SLOT-TYPE-TREE OBJECT) ...)

(CL:DEFUN YIELD-SLOT-TYPE-TREE (SLOT)
  (CL:RETURN-FROM YIELD-SLOT-TYPE-TREE
   (YIELD-TYPE-SPEC-TREE
    (CL:IF
     (CL:NOT
      (CL:EQ
       (DYNAMIC-SLOT-VALUE (%STORAGE-SLOT.DYNAMIC-SLOTS SLOT)
        SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
       NULL))
     (DYNAMIC-SLOT-VALUE (%STORAGE-SLOT.DYNAMIC-SLOTS SLOT)
      SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
     (%STORAGE-SLOT.SLOT-BASE-TYPE SLOT)))))

;;; (DEFUN (YIELD-HARDWIRED-SLOT-VARIABLE SYMBOL) ...)

(CL:DEFUN YIELD-HARDWIRED-SLOT-VARIABLE (SLOT)
  (CL:RETURN-FROM YIELD-HARDWIRED-SLOT-VARIABLE
   (INTERN-DERIVED-SYMBOL (%STORAGE-SLOT.SLOT-NAME SLOT)
    (CONCATENATE "*HARDWIRED-"
     (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)) "-ON-"
     (%SURROGATE.SYMBOL-NAME (%STORAGE-SLOT.SLOT-OWNER SLOT)) "*"))))

;;; (DEFUN (YIELD-HARDWIRED-SLOT-READER-BODY CONS CONS) ...)

(CL:DEFUN YIELD-HARDWIRED-SLOT-READER-BODY (SLOT)
  (CL:LET*
   ((SLOTVARIABLE (YIELD-HARDWIRED-SLOT-VARIABLE SLOT))
    (SLOTTYPEDESC
     (YIELD-TYPE-SPEC-TREE
      (COMPUTE-RETURN-TYPE-SPEC SLOT
       (%STORAGE-SLOT.SLOT-OWNER SLOT)))))
   (CL:RETURN-FROM YIELD-HARDWIRED-SLOT-READER-BODY
    (CL:VALUES (LIST* SYM-DEFCLASS-STELLA-RETURN SLOTVARIABLE NIL)
     (LIST* SYM-DEFCLASS-STELLA-DEFGLOBAL SLOTVARIABLE
      (CONS SLOTTYPEDESC (CONS SYM-DEFCLASS-STELLA-NULL NIL)))))))

;;; (DEFUN FINALIZE-AUXILIARY-METHOD ...)

(CL:DEFUN FINALIZE-AUXILIARY-METHOD (METHOD)
  (CL:WHEN
   (CL:AND (CL:EQ (%METHOD-SLOT.SLOT-BASE-TYPE METHOD) NULL)
    (CL:NOT
     (CL:EQ
      (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
       SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
      NULL)))
   (CL:SETF (%METHOD-SLOT.SLOT-BASE-TYPE METHOD)
    (VALIDATE-TYPE-SPECIFIER
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
      SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER NULL)
     (%SURROGATE.SURROGATE-VALUE (%METHOD-SLOT.SLOT-OWNER METHOD))
     CL:NIL)))
  :VOID)

;;; (DEFUN (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE CONS) ...)

(CL:DEFUN WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE (SLOT DEFAULTEXPRESSION)
  (CL:LET*
   ((READCODE
     (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE SYM-DEFCLASS-STELLA-SELF
      (%STORAGE-SLOT.SLOT-NAME SLOT) NIL)))
   (CL:IF (CL:NOT (CL:EQ DEFAULTEXPRESSION NULL))
    (CL:COND
     ((CL:EQ (TYPE SLOT) SGT-DEFCLASS-STELLA-BOOLEAN)
      (CL:IF (CL:NOT (CL:EQ (ALLOCATION SLOT) KWD-DEFCLASS-DYNAMIC))
       (CL:LET* ((*PRINTREADABLY?* CL:T))
        (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
        (SIGNAL-TRANSLATION-WARNING)
        (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
         (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-WARNING)
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-WARNING) EOL
          " Ignoring :default annotation on non-dynamic BOOLEAN slot `"
          (DE-UGLIFY-PARSE-TREE SLOT) "'." EOL
          " Limited :default support is available for dynamic BOOLEAN slots,"
          EOL " and full support for THREE-VALUED-BOOLEAN slots."
          EOL)))
       (CL:PROGN
        (SET-LITERAL-TYPE-INFO SGT-DEFCLASS-STELLA-BOOLEAN
         KWD-DEFCLASS-NULL-WRAPPER
         (LIST* SYM-DEFCLASS-STELLA-INLINE-WRAP-BOOLEAN
          DEFAULTEXPRESSION NIL))
        (PUSH-VARIABLE-BINDING SYM-DEFCLASS-STELLA-SELF
         (%STORAGE-SLOT.SLOT-OWNER SLOT))
        (CL:SETQ READCODE
         (SYS-TREE
          (WALK-EXPRESSION-TREE READCODE SGT-DEFCLASS-STELLA-BOOLEAN
           (%STORAGE-SLOT.SLOT-NAME SLOT) CL:NIL)
          SGT-DEFCLASS-STELLA-BOOLEAN))
        (POP-VARIABLE-BINDING)
        (SET-LITERAL-TYPE-INFO SGT-DEFCLASS-STELLA-BOOLEAN
         KWD-DEFCLASS-NULL-WRAPPER SYM-DEFCLASS-STELLA-FALSE-WRAPPER)))
      (CL:RETURN-FROM WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
       (LIST* SYM-DEFCLASS-STELLA-RETURN READCODE NIL)))
     (CL:T
      (CL:RETURN-FROM WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
       (LIST* SYM-DEFCLASS-STELLA-LET
        (CONS (LIST* SYM-DEFCLASS-STELLA-ANSWER READCODE NIL) NIL)
        (LIST* SYM-DEFCLASS-STELLA-IF
         (LIST* SYM-DEFCLASS-STELLA-NULL? SYM-DEFCLASS-STELLA-ANSWER
          NIL)
         (LIST* SYM-DEFCLASS-STELLA-RETURN
          (COPY-CONS-TREE DEFAULTEXPRESSION) NIL)
         (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-ANSWER
          NIL)
         NIL)
        NIL))))
    (CL:RETURN-FROM WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE
     (LIST* SYM-DEFCLASS-STELLA-RETURN READCODE NIL)))))

;;; (DEFUN (YIELD-SLOT-READER-TREE CONS) ...)

(CL:DEFUN YIELD-SLOT-READER-TREE (SLOT CLASS)
  (CL:LET*
   ((PARAMETERS
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-SELF
       (INTERN-SYMBOL-IN-MODULE
        (%SURROGATE.SYMBOL-NAME (%CLASS.CLASS-TYPE CLASS))
        (%SURROGATE.HOME-CONTEXT (%CLASS.CLASS-TYPE CLASS)) CL:T)
       NIL)
      NIL))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (DEFAULTEXPRESSION
     (CL:IF (HAS-NON-NULL-DEFAULT-VALUE? SLOT)
      (SYSTEM-DEFAULT-VALUE SLOT) NULL))
    (SLOTVISIBLE?
     (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
      (%STORAGE-SLOT.SLOT-OWNER SLOT)))
    (READCODE NULL) (AUXILIARYCODE NULL))
   (CL:COND
    ((CL:NOT SLOTVISIBLE?)
     (CL:SETQ READCODE
      (LIST* SYM-DEFCLASS-STELLA-PROGN
       (LIST* SYM-DEFCLASS-STELLA-ERROR (WRAP-STRING "Slot '")
        (WRAP-STRING
         (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)))
        (LIST* (WRAP-STRING "' does not exist on ")
         SYM-DEFCLASS-STELLA-SELF NIL))
       (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-NULL NIL)
       NIL)))
    ((ACTIVE? SLOT)
     (CL:SETQ READCODE
      (YIELD-ACTIVE-SLOT-READER-BODY SLOT DEFAULTEXPRESSION)))
    ((%STORAGE-SLOT.SLOT-HARDWIRED? SLOT)
     (CL:MULTIPLE-VALUE-SETQ (READCODE AUXILIARYCODE)
      (YIELD-HARDWIRED-SLOT-READER-BODY SLOT))
     (CL:WHEN
      (CL:EQ (%CLASS.CLASS-TYPE CLASS) (%STORAGE-SLOT.SLOT-OWNER SLOT))
      (WALK-AUXILIARY-TREE AUXILIARYCODE)))
    (CL:T
     (CL:SETQ READCODE
      (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE SLOT
       DEFAULTEXPRESSION))))
   (CL:RETURN-FROM YIELD-SLOT-READER-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD
     (CONS (%STORAGE-SLOT.SLOT-NAME SLOT) (CONS TYPETREE NIL))
     PARAMETERS
     (LIST* KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-STELLA-TRUE READCODE
      NIL)))))

;;; (DEFUN (YIELD-SLOT-WRITER-TREE CONS) ...)

(CL:DEFUN YIELD-SLOT-WRITER-TREE (SLOT CLASS)
  (CL:LET*
   ((TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (PARAMETERS
     (LIST*
      (LIST* SYM-DEFCLASS-STELLA-SELF
       (INTERN-SYMBOL-IN-MODULE
        (%SURROGATE.SYMBOL-NAME (%CLASS.CLASS-TYPE CLASS))
        (%SURROGATE.HOME-CONTEXT (%CLASS.CLASS-TYPE CLASS)) CL:T)
       NIL)
      (LIST* SYM-DEFCLASS-STELLA-VALUE TYPETREE NIL) NIL))
    (SLOTVISIBLE?
     (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
      (%STORAGE-SLOT.SLOT-OWNER SLOT)))
    (WRITECODE NULL))
   (CL:COND
    ((CL:NOT SLOTVISIBLE?)
     (CL:SETQ WRITECODE
      (LIST* SYM-DEFCLASS-STELLA-PROGN
       (LIST* SYM-DEFCLASS-STELLA-ERROR (WRAP-STRING "Slot '")
        (WRAP-STRING
         (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)))
        (LIST* (WRAP-STRING "' does not exist on ")
         SYM-DEFCLASS-STELLA-SELF NIL))
       (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-NULL NIL)
       NIL)))
    ((ACTIVE? SLOT)
     (CL:SETQ WRITECODE (YIELD-ACTIVE-SLOT-WRITER-BODY SLOT)))
    (CL:T
     (CL:SETQ WRITECODE
      (LIST* SYM-DEFCLASS-STELLA-RETURN
       (LIST* SYM-DEFCLASS-STELLA-SETF
        (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE SYM-DEFCLASS-STELLA-SELF
         (%STORAGE-SLOT.SLOT-NAME SLOT) NIL)
        SYM-DEFCLASS-STELLA-VALUE NIL)
       NIL))))
   (CL:RETURN-FROM YIELD-SLOT-WRITER-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD
     (CONS (YIELD-SETTER-METHOD-NAME (%STORAGE-SLOT.SLOT-NAME SLOT))
      (CONS (COPY-CONS-TREE TYPETREE) NIL))
     PARAMETERS
     (LIST* KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-STELLA-TRUE
      (CONCATENATE
       (CL:IF SLOTVISIBLE? NIL
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-IGNORE SYM-DEFCLASS-STELLA-VALUE
          NIL)
         NIL))
       (CONS WRITECODE NIL)))))))

;;; (DEFUN (SLOT-VALUE-IS-BARE-LITERAL? BOOLEAN) ...)

(CL:DEFUN SLOT-VALUE-IS-BARE-LITERAL? (SLOT)
  (CL:LET* ((TYPE (TYPE SLOT)))
   (CL:RETURN-FROM SLOT-VALUE-IS-BARE-LITERAL?
    (CL:AND (CL:NOT (CL:EQ TYPE NULL))
     (CL:NOT (CL:EQ (%SURROGATE.SURROGATE-VALUE TYPE) NULL))
     (SUBTYPE-OF? (TYPE SLOT) SGT-DEFCLASS-STELLA-LITERAL)))))

;;; (DEFUN (GENERICALLY-ACCESSIBLE-TYPE? BOOLEAN) ...)

(CL:DEFUN GENERICALLY-ACCESSIBLE-TYPE? (TYPE)
  (CL:RETURN-FROM GENERICALLY-ACCESSIBLE-TYPE?
   (CL:OR (SUBTYPE-OF? TYPE SGT-DEFCLASS-STELLA-OBJECT)
    (CL:AND (SUBTYPE-OF? TYPE SGT-DEFCLASS-STELLA-LITERAL)
     (CL:NOT
      (CL:EQ (LOOKUP-LITERAL-TYPE-INFO TYPE KWD-DEFCLASS-WRAP-FUNCTION)
       NULL))))))

;;; (DEFUN (GENERIC-SLOT-READER? BOOLEAN) ...)

(CL:DEFUN GENERIC-SLOT-READER? (SLOT CLASS)
  (CL:WHEN
   (CL:AND (CL:NOT (%STORAGE-SLOT.ABSTRACT? SLOT))
    (SUBTYPE-OF? (%STORAGE-SLOT.SLOT-OWNER SLOT)
     SGT-DEFCLASS-STELLA-OBJECT)
    (CL:EQ (NATIVE-SLOT-HOME SLOT CLASS) CLASS))
   (CL:LET*
    ((TYPE
      (CANONICAL-TYPE
       (TYPE-SPEC-TO-BASE-TYPE
        (COMPUTE-REAL-SLOT-TYPE SLOT (%CLASS.CLASS-TYPE CLASS)
         (CANONICAL-TYPE (TYPE SLOT)))))))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ (%SURROGATE.SURROGATE-VALUE TYPE) NULL))
      (GENERICALLY-ACCESSIBLE-TYPE? TYPE))
     (CL:RETURN-FROM GENERIC-SLOT-READER? CL:T))))
  (CL:RETURN-FROM GENERIC-SLOT-READER? CL:NIL))

;;; (DEFUN (GENERIC-SLOT-WRITER? BOOLEAN) ...)

(CL:DEFUN GENERIC-SLOT-WRITER? (SLOT CLASS)
  (CL:RETURN-FROM GENERIC-SLOT-WRITER?
   (CL:AND (CL:NOT (%STORAGE-SLOT.SLOT-HARDWIRED? SLOT))
    (GENERIC-SLOT-READER? SLOT CLASS))))

;;; (DEFUN (SLOT-ACCESS-METHOD? BOOLEAN) ...)

(CL:DEFUN SLOT-ACCESS-METHOD? (SLOT)
  (CL:RETURN-FROM SLOT-ACCESS-METHOD?
   (CL:OR (CL:NOT (CL:EQ (READER SLOT) NULL))
    (SYSTEM-DEFINED-SLOT-READER? SLOT)
    (CL:NOT (CL:EQ (WRITER SLOT) NULL))
    (SYSTEM-DEFINED-SLOT-WRITER? SLOT))))

;;; (DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-NAME SYMBOL) ...)

(CL:DEFUN YIELD-GENERIC-SLOT-ACCESSOR-NAME (CLASS)
  (CL:LET*
   ((BASE-NAME (%SURROGATE.SYMBOL-NAME (%CLASS.CLASS-TYPE CLASS)))
    (PREFIX
     (CL:IF (ALL-UPPER-CASE-STRING? BASE-NAME) "ACCESS-" "access-"))
    (SUFFIX
     (CL:IF (ALL-UPPER-CASE-STRING? BASE-NAME) "-SLOT-VALUE"
      "-Slot-Value")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASE-NAME PREFIX SUFFIX))
   (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-NAME
    (INTERN-DERIVED-SYMBOL (%CLASS.CLASS-TYPE CLASS)
     (CONCATENATE PREFIX BASE-NAME SUFFIX)))))

;;; (DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION CONS) ...)

(CL:DEFUN YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION (CLASS)
  (CL:LET*
   ((CLAUSES NIL) (ACCESSTREE NIL) (VALUETREE NULL) (SLOTTYPE NULL))
   (CL:WHEN
    (CL:NOT
     (SUBCLASS-OF? CLASS
      (%SURROGATE.SURROGATE-VALUE SGT-DEFCLASS-STELLA-OBJECT)))
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION NULL))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:TAGBODY
      (CL:WHEN
       (CL:AND (STORAGE-SLOT? SLOT) (GENERIC-SLOT-READER? SLOT CLASS))
       (CL:WHEN
        (CL:OR (%SLOT.SLOT-EXTERNAL? SLOT)
         (CL:AND (SPACE-SAVER-SLOT-ALLOCATION? SLOT)
          (CL:NOT (SLOT-ACCESS-METHOD? SLOT))))
        (CL:GO :CONTINUE))
       (CL:SETQ ACCESSTREE
        (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-VALUE
         (CONS (%SLOT.SLOT-NAME SLOT)
          (CONS SYM-DEFCLASS-STELLA-SELF NIL))
         NIL))
       (CL:WHEN (CL:NOT (%STORAGE-SLOT.SLOT-HARDWIRED? SLOT))
        (CL:SETQ SLOTTYPE (CANONICAL-TYPE (TYPE SLOT)))
        (CL:SETQ VALUETREE SYM-DEFCLASS-STELLA-VALUE)
        (CL:WHEN
         (CL:AND (SUBTYPE-OF? SLOTTYPE SGT-DEFCLASS-STELLA-LITERAL)
          (CL:NOT
           (CL:EQ
            (LOOKUP-LITERAL-TYPE-INFO SLOTTYPE
             KWD-DEFCLASS-WRAP-FUNCTION)
            NULL)))
         (CL:SETQ VALUETREE
          (LIST* SYM-DEFCLASS-STELLA-CAST SYM-DEFCLASS-STELLA-VALUE
           (TYPE-TO-WRAPPED-TYPE SLOTTYPE) NIL)))
        (CL:SETQ ACCESSTREE
         (LIST* SYM-DEFCLASS-STELLA-IF SYM-DEFCLASS-STELLA-SETVALUE?
          (LIST* SYM-DEFCLASS-STELLA-SETF
           (CONS (%SLOT.SLOT-NAME SLOT)
            (CONS SYM-DEFCLASS-STELLA-SELF NIL))
           VALUETREE NIL)
          ACCESSTREE NIL)))
       (CL:SETQ CLAUSES
        (CONS (CONS (%SLOT.SLOT-NAME SLOT) (CONS ACCESSTREE NIL))
         CLAUSES)))
      :CONTINUE)))
   (CL:WHEN
    (SUBCLASS-OF? CLASS
     (%SURROGATE.SURROGATE-VALUE
      SGT-DEFCLASS-STELLA-DYNAMIC-SLOTS-MIXIN))
    (CL:LET* ((RENAMECLAUSES NIL))
     (CL:LET*
      ((SLOT NULL)
       (ITER-001
        (%LIST.THE-CONS-LIST (%CLASS.CLASS-LOCAL-SLOTS CLASS)))
       (COLLECT-000 NULL))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
       (CL:SETQ SLOT (%%VALUE ITER-001))
       (CL:WHEN
        (CL:AND (STORAGE-SLOT? SLOT)
         (CL:NOT (%SLOT.SLOT-EXTERNAL? SLOT))
         (SPACE-SAVER-SLOT-ALLOCATION? SLOT)
         (CL:NOT (SLOT-ACCESS-METHOD? SLOT))
         (CL:NOT (CL:EQ SLOT (CANONICAL-SLOT SLOT))))
        (CL:IF (CL:EQ COLLECT-000 NULL)
         (CL:PROGN
          (CL:SETQ COLLECT-000
           (CONS
            (CONS (%SLOT.SLOT-NAME SLOT)
             (CONS
              (LIST* SYM-DEFCLASS-STELLA-SETQ
               SYM-DEFCLASS-STELLA-SLOTNAME
               (LIST* SYM-DEFCLASS-STELLA-QUOTE
                (%STORAGE-SLOT.SLOT-NAME (CANONICAL-SLOT SLOT)) NIL)
               NIL)
              NIL))
            NIL))
          (CL:IF (CL:EQ RENAMECLAUSES NIL)
           (CL:SETQ RENAMECLAUSES COLLECT-000)
           (ADD-CONS-TO-END-OF-CONS-LIST RENAMECLAUSES COLLECT-000)))
         (CL:PROGN
          (CL:SETF (%%REST COLLECT-000)
           (CONS
            (CONS (%SLOT.SLOT-NAME SLOT)
             (CONS
              (LIST* SYM-DEFCLASS-STELLA-SETQ
               SYM-DEFCLASS-STELLA-SLOTNAME
               (LIST* SYM-DEFCLASS-STELLA-QUOTE
                (%STORAGE-SLOT.SLOT-NAME (CANONICAL-SLOT SLOT)) NIL)
               NIL)
              NIL))
            NIL))
          (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
       (CL:SETQ ITER-001 (%%REST ITER-001))))
     (CL:WHEN (CL:NOT (CL:EQ RENAMECLAUSES NIL))
      (CL:SETQ RENAMECLAUSES
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-CASE SYM-DEFCLASS-STELLA-SLOTNAME
         (CONCATENATE RENAMECLAUSES
          (CONS
           (LIST* SYM-DEFCLASS-STELLA-OTHERWISE
            SYM-DEFCLASS-STELLA-NULL NIL)
           NIL)))
        NIL)))
     (CL:SETQ CLAUSES
      (CONS
       (CONS SYM-DEFCLASS-STELLA-OTHERWISE
        (CONCATENATE RENAMECLAUSES
         (CONS
          (LIST* SYM-DEFCLASS-STELLA-IF SYM-DEFCLASS-STELLA-SETVALUE?
           (LIST* SYM-DEFCLASS-STELLA-SET-DYNAMIC-SLOT-VALUE
            (LIST* SYM-DEFCLASS-STELLA-DYNAMIC-SLOTS
             SYM-DEFCLASS-STELLA-SELF NIL)
            SYM-DEFCLASS-STELLA-SLOTNAME SYM-DEFCLASS-STELLA-VALUE
            SYM-DEFCLASS-STELLA-NULL NIL)
           (LIST* SYM-DEFCLASS-STELLA-SETQ SYM-DEFCLASS-STELLA-VALUE
            (LIST* SYM-DEFCLASS-STELLA-LOOKUP
             (LIST* SYM-DEFCLASS-STELLA-DYNAMIC-SLOTS
              SYM-DEFCLASS-STELLA-SELF NIL)
             SYM-DEFCLASS-STELLA-SLOTNAME NIL)
            NIL)
           NIL)
          NIL)))
       CLAUSES))))
   (CL:IF (CL:EQ CLAUSES NIL)
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION NULL)
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION
     (LIST* SYM-DEFCLASS-STELLA-DEFUN
      (CONS (YIELD-GENERIC-SLOT-ACCESSOR-NAME CLASS)
       (CONS SYM-DEFCLASS-STELLA-OBJECT NIL))
      (LIST*
       (LIST* SYM-DEFCLASS-STELLA-SELF (%CLASS.CLASS-TYPE CLASS) NIL)
       (LIST* SYM-DEFCLASS-STELLA-SLOTNAME SYM-DEFCLASS-STELLA-SYMBOL
        NIL)
       (LIST* SYM-DEFCLASS-STELLA-VALUE SYM-DEFCLASS-STELLA-OBJECT NIL)
       (LIST* SYM-DEFCLASS-STELLA-SETVALUE? SYM-DEFCLASS-STELLA-BOOLEAN
        NIL)
       NIL)
      (LIST* SYM-DEFCLASS-STELLA-CASE SYM-DEFCLASS-STELLA-SLOTNAME
       (CONCATENATE (REVERSE CLAUSES) NIL))
      (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-VALUE NIL)
      NIL)))))

;;; (DEFUN CREATE-GENERIC-SLOT-ACCESSOR-UNIT ...)

(CL:DEFUN CREATE-GENERIC-SLOT-ACCESSOR-UNIT (CLASS)
  (CL:LET* ((TREE (YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION CLASS)))
   (CL:WHEN (CL:NOT (CL:EQ TREE NULL)) (WALK-AUXILIARY-TREE TREE)))
  :VOID)

;;; (DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT CONS) ...)

(CL:DEFUN YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT (CLASS CLASSREF)
  (CL:LET* ((FOUND?-000 CL:NIL))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (STORAGE-SLOT? SLOT) (GENERIC-SLOT-READER? SLOT CLASS))
      (CL:SETQ FOUND?-000 CL:T) (CL:RETURN))))
   (CL:IF FOUND?-000
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-SETF
       (LIST* SYM-DEFCLASS-STELLA-CLASS-SLOT-ACCESSOR-CODE CLASSREF
        NIL)
       (LIST* SYM-DEFCLASS-STELLA-THE-CODE KWD-DEFCLASS-FUNCTION
        (YIELD-GENERIC-SLOT-ACCESSOR-NAME CLASS) NIL)
       NIL)
      NIL))
    (CL:RETURN-FROM YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT NIL))))

;;; (DEFUN (GET-GENERIC-SLOT-ACCESSOR FUNCTION-CODE) ...)

(CL:DEFUN GET-GENERIC-SLOT-ACCESSOR (SLOT CLASS WARN?)
  "Return the accessor code to read `slot' on an object of type `class',
or NULL if no such accessor exists.  In that case, print a warning if `warn?' is TRUE.
NOTE: the accessor expects `canonical-slot-name's (which see)."
  (CL:SETQ SLOT (CANONICAL-SLOT SLOT))
  (CL:LET*
   ((SLOTVISIBLE?
     (SUBCLASS-OF? CLASS
      (%SURROGATE.SURROGATE-VALUE (%STORAGE-SLOT.SLOT-OWNER SLOT))))
    (NATIVEHOME (NATIVE-SLOT-HOME SLOT CLASS))
    (SLOTREADABLE?
     (CL:AND (CL:NOT (CL:EQ NATIVEHOME NULL))
      (GENERIC-SLOT-READER? SLOT NATIVEHOME)))
    (ACCESSORCODE
     (CL:IF (CL:AND SLOTVISIBLE? SLOTREADABLE?)
      (%CLASS.CLASS-SLOT-ACCESSOR-CODE (NATIVE-SLOT-HOME SLOT CLASS))
      NULL)))
   (CL:WHEN (CL:AND (CL:EQ ACCESSORCODE NULL) WARN?)
    (CL:IF SLOTVISIBLE?
     (CL:WARN "No generic slot accessor available for `~A'" SLOT)
     (CL:WARN "Slot `~A' does not exist on objects of type `~A'" SLOT
      (%CLASS.CLASS-TYPE CLASS))))
   (CL:RETURN-FROM GET-GENERIC-SLOT-ACCESSOR ACCESSORCODE)))

;;; (DEFUN (YIELD-MIXIN-CLASS-USERS-TREE (CONS OF SYMBOL)) ...)

(CL:DEFUN YIELD-MIXIN-CLASS-USERS-TREE (CLASS)
  (CL:LET* ((RESULT NIL))
   (CL:LET*
    ((SUB NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%CLASS.CLASS-DIRECT-SUBS CLASS)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SUB (%%VALUE ITER-000))
     (CL:WHEN (CL:NOT (%CLASS.MIXIN? (TYPE-TO-CLASS SUB)))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS
          (INTERN-SYMBOL-IN-MODULE (%SURROGATE.SYMBOL-NAME SUB)
           (%SURROGATE.HOME-CONTEXT SUB) CL:T)
          NIL))
        (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS
          (INTERN-SYMBOL-IN-MODULE (%SURROGATE.SYMBOL-NAME SUB)
           (%SURROGATE.HOME-CONTEXT SUB) CL:T)
          NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM YIELD-MIXIN-CLASS-USERS-TREE RESULT)))

;;; (DEFUN (YIELD-MIXIN-SLOT-READER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-READER-NAME (SLOT)
  (CL:LET*
   ((PRE-NAME (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)))
    (POST-NAME
     (%SURROGATE.SYMBOL-NAME (%STORAGE-SLOT.SLOT-OWNER SLOT)))
    (INFIX
     (CL:IF
      (CL:AND (ALL-UPPER-CASE-STRING? PRE-NAME)
       (ALL-UPPER-CASE-STRING? POST-NAME))
      "-ON-" "-On-")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PRE-NAME POST-NAME INFIX))
   (CL:RETURN-FROM YIELD-MIXIN-SLOT-READER-NAME
    (INTERN-DERIVED-SYMBOL (%STORAGE-SLOT.SLOT-NAME SLOT)
     (CONCATENATE PRE-NAME INFIX POST-NAME)))))

;;; (DEFUN (YIELD-MIXIN-SLOT-WRITER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-WRITER-NAME (SLOT)
  (CL:RETURN-FROM YIELD-MIXIN-SLOT-WRITER-NAME
   (YIELD-SETTER-METHOD-NAME (YIELD-MIXIN-SLOT-READER-NAME SLOT))))

;;; (DEFUN (YIELD-MIXIN-SLOT-READER-TREE CONS) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-READER-TREE (SLOT)
  (CL:LET*
   ((READERNAME (YIELD-MIXIN-SLOT-READER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT)))
   (CL:RETURN-FROM YIELD-MIXIN-SLOT-READER-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFUN
     (CONS READERNAME (CONS TYPETREE NIL))
     (CONS
      (LIST* SYM-DEFCLASS-STELLA-SELF SYM-DEFCLASS-STELLA-OBJECT NIL)
      NIL)
     KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-STELLA-TRUE
     (LIST* SYM-DEFCLASS-STELLA-TYPECASE SYM-DEFCLASS-STELLA-SELF
      (CONS
       (YIELD-MIXIN-CLASS-USERS-TREE
        (%SURROGATE.SURROGATE-VALUE (%STORAGE-SLOT.SLOT-OWNER SLOT)))
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-RETURN
         (CONS (%STORAGE-SLOT.SLOT-NAME SLOT)
          (CONS SYM-DEFCLASS-STELLA-SELF NIL))
         NIL)
        NIL))
      (LIST* SYM-DEFCLASS-STELLA-OTHERWISE
       (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-NULL NIL)
       NIL)
      NIL)
     NIL))))

;;; (DEFUN (YIELD-MIXIN-SLOT-WRITER-TREE CONS) ...)

(CL:DEFUN YIELD-MIXIN-SLOT-WRITER-TREE (SLOT)
  (CL:LET*
   ((WRITERNAME (YIELD-MIXIN-SLOT-WRITER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT)))
   (CL:RETURN-FROM YIELD-MIXIN-SLOT-WRITER-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFUN
     (CONS WRITERNAME (CONS TYPETREE NIL))
     (LIST*
      (LIST* SYM-DEFCLASS-STELLA-SELF SYM-DEFCLASS-STELLA-OBJECT NIL)
      (LIST* SYM-DEFCLASS-STELLA-VALUE (COPY-CONS-TREE TYPETREE) NIL)
      NIL)
     KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-STELLA-TRUE
     (LIST* SYM-DEFCLASS-STELLA-TYPECASE SYM-DEFCLASS-STELLA-SELF
      (CONS
       (YIELD-MIXIN-CLASS-USERS-TREE
        (%SURROGATE.SURROGATE-VALUE (%STORAGE-SLOT.SLOT-OWNER SLOT)))
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-RETURN
         (LIST* SYM-DEFCLASS-STELLA-SETF
          (CONS (%STORAGE-SLOT.SLOT-NAME SLOT)
           (CONS SYM-DEFCLASS-STELLA-SELF NIL))
          SYM-DEFCLASS-STELLA-VALUE NIL)
         NIL)
        NIL))
      (LIST* SYM-DEFCLASS-STELLA-OTHERWISE
       (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-NULL NIL)
       NIL)
      NIL)
     NIL))))

;;; (DEFUN (YIELD-NATIVE-SLOT-READER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-READER-NAME (SLOT)
  (CL:LET*
   ((BASE-NAME (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)))
    (SUFFIX
     (CL:IF (ALL-UPPER-CASE-STRING? BASE-NAME) "-NATIVE-VALUE"
      "-Native-Value")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASE-NAME SUFFIX))
   (CL:RETURN-FROM YIELD-NATIVE-SLOT-READER-NAME
    (INTERN-DERIVED-SYMBOL (%STORAGE-SLOT.SLOT-NAME SLOT)
     (CONCATENATE BASE-NAME SUFFIX)))))

;;; (DEFUN (YIELD-NATIVE-SLOT-WRITER-NAME SYMBOL) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-WRITER-NAME (SLOT)
  (CL:RETURN-FROM YIELD-NATIVE-SLOT-WRITER-NAME
   (YIELD-SETTER-METHOD-NAME (YIELD-NATIVE-SLOT-READER-NAME SLOT))))

;;; (DEFUN (YIELD-NATIVE-SLOT-READER-TREE CONS) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-READER-TREE (SLOT CLASS)
  (CL:LET*
   ((READERNAME (YIELD-NATIVE-SLOT-READER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (SLOTVISIBLE?
     (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
      (%STORAGE-SLOT.SLOT-OWNER SLOT))))
   (CL:RETURN-FROM YIELD-NATIVE-SLOT-READER-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD
     (CONS READERNAME (CONS TYPETREE NIL))
     (CONS (LIST* SYM-DEFCLASS-STELLA-SELF (CLASS-SYMBOL CLASS) NIL)
      NIL)
     KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-STELLA-TRUE
     (CONCATENATE
      (CL:IF SLOTVISIBLE?
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-RETURN
         (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE SYM-DEFCLASS-STELLA-SELF
          (%STORAGE-SLOT.SLOT-NAME SLOT)
          (LIST* KWD-DEFCLASS-CONTEXT-SENSITIVE?
           SYM-DEFCLASS-STELLA-FALSE NIL))
         NIL)
        NIL)
       (LIST*
        (LIST* SYM-DEFCLASS-STELLA-ERROR (WRAP-STRING "Slot '")
         (WRAP-STRING
          (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)))
         (LIST* (WRAP-STRING "' does not exist on ")
          SYM-DEFCLASS-STELLA-SELF NIL))
        (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-NULL NIL)
        NIL))
      NIL)))))

;;; (DEFUN (YIELD-NATIVE-SLOT-WRITER-TREE CONS) ...)

(CL:DEFUN YIELD-NATIVE-SLOT-WRITER-TREE (SLOT CLASS)
  (CL:LET*
   ((WRITERNAME (YIELD-NATIVE-SLOT-WRITER-NAME SLOT))
    (TYPETREE (YIELD-SLOT-TYPE-TREE SLOT))
    (SLOTVISIBLE?
     (SUBTYPE-OF? (%CLASS.CLASS-TYPE CLASS)
      (%STORAGE-SLOT.SLOT-OWNER SLOT))))
   (CL:RETURN-FROM YIELD-NATIVE-SLOT-WRITER-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD
     (CONS WRITERNAME (CONS TYPETREE NIL))
     (LIST* (LIST* SYM-DEFCLASS-STELLA-SELF (CLASS-SYMBOL CLASS) NIL)
      (LIST* SYM-DEFCLASS-STELLA-VALUE (COPY-CONS-TREE TYPETREE) NIL)
      NIL)
     KWD-DEFCLASS-AUXILIARY? SYM-DEFCLASS-STELLA-TRUE
     (CONCATENATE
      (CL:IF SLOTVISIBLE?
       (CONS
        (LIST* SYM-DEFCLASS-STELLA-RETURN
         (LIST* SYM-DEFCLASS-STELLA-SETF
          (LIST* SYM-DEFCLASS-STELLA-SLOT-VALUE
           SYM-DEFCLASS-STELLA-SELF (%STORAGE-SLOT.SLOT-NAME SLOT)
           (LIST* KWD-DEFCLASS-CONTEXT-SENSITIVE?
            SYM-DEFCLASS-STELLA-FALSE NIL))
          SYM-DEFCLASS-STELLA-VALUE NIL)
         NIL)
        NIL)
       (LIST*
        (LIST* SYM-DEFCLASS-STELLA-IGNORE SYM-DEFCLASS-STELLA-VALUE
         NIL)
        (LIST* SYM-DEFCLASS-STELLA-ERROR (WRAP-STRING "Slot '")
         (WRAP-STRING
          (%SYMBOL.SYMBOL-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)))
         (LIST* (WRAP-STRING "' does not exist on ")
          SYM-DEFCLASS-STELLA-SELF NIL))
        (LIST* SYM-DEFCLASS-STELLA-RETURN SYM-DEFCLASS-STELLA-NULL NIL)
        NIL))
      NIL)))))

;;; (DEFUN CREATE-KEYED-EQUALITY-METHOD-UNIT ...)

(CL:DEFUN CREATE-KEYED-EQUALITY-METHOD-UNIT (CLASS)
  (CL:LET* ((TESTTREES NIL))
   (CL:LET*
    ((SLOTNAME NULL) (ITER-000 (%LIST.THE-CONS-LIST (CLASS-KEY CLASS)))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ SLOTNAME (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-EQ?
          (CONS SLOTNAME (CONS SYM-DEFCLASS-STELLA-SELF NIL))
          (CONS SLOTNAME (CONS SYM-DEFCLASS-STELLA-OTHER NIL)) NIL)
         NIL))
       (CL:IF (CL:EQ TESTTREES NIL) (CL:SETQ TESTTREES COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST TESTTREES COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS
         (LIST* SYM-DEFCLASS-STELLA-EQ?
          (CONS SLOTNAME (CONS SYM-DEFCLASS-STELLA-SELF NIL))
          (CONS SLOTNAME (CONS SYM-DEFCLASS-STELLA-OTHER NIL)) NIL)
         NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (WALK-AUXILIARY-TREE
    (LIST* SYM-DEFCLASS-STELLA-DEFMETHOD
     (LIST* SYM-DEFCLASS-STELLA-EQUAL SYM-DEFCLASS-STELLA-BOOLEAN NIL)
     (LIST* (LIST* SYM-DEFCLASS-STELLA-SELF (CLASS-SYMBOL CLASS) NIL)
      SYM-DEFCLASS-STELLA-OTHER NIL)
     (LIST* SYM-DEFCLASS-STELLA-RETURN
      (CONS SYM-DEFCLASS-STELLA-AND (CONCATENATE TESTTREES NIL)) NIL)
     NIL)))
  :VOID)

;;; (DEFUN (TRANSIENT-OBJECT? BOOLEAN) ...)

(CL:DEFUN TRANSIENT-OBJECT? (OBJECT)
  (CL:LET* ((TYPE (PRIMARY-TYPE OBJECT)))
   (CL:RETURN-FROM TRANSIENT-OBJECT?
    (SUBTYPE-OF? TYPE SGT-DEFCLASS-STELLA-TRANSIENT-MIXIN))))

(CL:DEFUN HELP-STARTUP-DEFCLASS1 ()
  (CL:PROGN
   (CL:SETQ SGT-DEFCLASS-STELLA-LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL" NULL 1))
   (CL:SETQ SGT-DEFCLASS-STELLA-SECOND-CLASS-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SECOND-CLASS-OBJECT" NULL 1))
   (CL:SETQ SYM-DEFCLASS-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
   (CL:SETQ KWD-DEFCLASS-COMMON-LISP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-DEFINE-CLASS-FROM-STRINGIFIED-SOURCE
    (INTERN-RIGID-SYMBOL-WRT-MODULE
     "DEFINE-CLASS-FROM-STRINGIFIED-SOURCE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-CL-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CL-NATIVE-TYPE" NULL 0))
   (CL:SETQ KWD-DEFCLASS-IDL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-IDL-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-IDL-NATIVE-TYPE" NULL 0))
   (CL:SETQ KWD-DEFCLASS-JAVA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-JAVA-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-JAVA-NATIVE-TYPE" NULL 0))
   (CL:SETQ KWD-DEFCLASS-CPP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP" NULL 2))
   (CL:SETQ KWD-DEFCLASS-CPP-STANDALONE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-CPP-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CPP-NATIVE-TYPE" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-NON-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NON-OBJECT" NULL 1))
   (CL:SETQ SGT-DEFCLASS-STELLA-NATIVE-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE-EXCEPTION" NULL 1))
   (CL:SETQ KWD-DEFCLASS-DYNAMIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-SLOT-INITIAL-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-INITIAL-VALUE" NULL 0))
   (CL:SETQ KWD-DEFCLASS-BIT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BIT" NULL 2))
   (CL:SETQ SGT-DEFCLASS-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
   (CL:SETQ KWD-DEFCLASS-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-SLOT-RENAMES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-RENAMES" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-UNKNOWN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNKNOWN" NULL 1))
   (CL:SETQ SYM-DEFCLASS-STELLA-SLOT-TYPE-SPECIFIER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-TYPE-SPECIFIER" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-ANCHORED-TYPE-SPECIFIER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANCHORED-TYPE-SPECIFIER" NULL 1))
   (CL:SETQ SYM-DEFCLASS-STELLA-NEXT-SWEEP-LIST-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEXT-SWEEP-LIST-OBJECT" NULL 0))
   (CL:SETQ KWD-DEFCLASS-FREE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FREE-LIST" NULL 2))
   (CL:SETQ KWD-DEFCLASS-FREE-AND-SWEEP-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FREE-AND-SWEEP-LIST" NULL 2))
   (CL:SETQ KWD-DEFCLASS-SWEEP-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SWEEP-LIST" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-CREATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-CREATOR" NULL 0))
   (CL:SETQ KWD-DEFCLASS-USE-COMMON-LISP-STRUCTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "USE-COMMON-LISP-STRUCTS" NULL 2))
   (CL:SETQ KWD-DEFCLASS-USE-COMMON-LISP-VECTOR-STRUCTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "USE-COMMON-LISP-VECTOR-STRUCTS"
     NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-DEFGLOBAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFGLOBAL" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-RECYCLE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RECYCLE-LIST" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OF" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CREATE-RECYCLE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATE-RECYCLE-LIST" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SELF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SELF" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MAKE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-DEFINED?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-FREE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FREE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-DYNAMIC-SLOTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-SLOTS" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLEAR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLEAR" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNLESS" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
   (CL:SETQ KWD-DEFCLASS-FORCE-NULL-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORCE-NULL-VALUE" NULL 2))
   (CL:SETQ KWD-DEFCLASS-NULL-VALUE-ONLY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-VALUE-ONLY" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-*RECYCLING-ENABLED?*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*RECYCLING-ENABLED?*" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COND" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA---
    (INTERN-RIGID-SYMBOL-WRT-MODULE "--" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CURRENT-LENGTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CURRENT-LENGTH" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-OTHERWISE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-RECYCLED-ITEMS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RECYCLED-ITEMS" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-POP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "POP" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-LIST-OF-RECYCLED-ITEMS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST-OF-RECYCLED-ITEMS" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SETF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETF" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SLOT-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOT-VALUE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-UNUSED-ITEMS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNUSED-ITEMS" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-DEFCLASS2 ()
  (CL:PROGN
   (CL:SETQ SYM-DEFCLASS-STELLA-ALL-ITEMS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ALL-ITEMS" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-++
    (INTERN-RIGID-SYMBOL-WRT-MODULE "++" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-=
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-*RECYCLE-LISTS-MAINTENANCE-TIMER*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*RECYCLE-LISTS-MAINTENANCE-TIMER*"
     NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-MAINTAIN-RECYCLE-LISTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MAINTAIN-RECYCLE-LISTS" NULL 0))
   (CL:SETQ KWD-DEFCLASS-INITIAL-VALUE-ONLY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INITIAL-VALUE-ONLY" NULL 2))
   (CL:SETQ KWD-DEFCLASS-ANY-INITIAL-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANY-INITIAL-VALUE" NULL 2))
   (CL:SETQ KWD-DEFCLASS-CONTEXT-SENSITIVE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTEXT-SENSITIVE?" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-FALSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-INITIALIZER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-INITIALIZER" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-RUN-CONSTRUCTOR-DEMONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RUN-CONSTRUCTOR-DEMONS" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-DEFUN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFUN" NULL 0))
   (CL:SETQ KWD-DEFCLASS-CONSTRUCTOR?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONSTRUCTOR?" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
   (CL:SETQ KWD-DEFCLASS-PUBLIC?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC?" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-LET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-MESSAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MESSAGE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-DESTRUCTOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-DESTRUCTOR" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-DEFMETHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFMETHOD" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-STANDARD-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STANDARD-OBJECT" NULL 1))
   (CL:SETQ SYM-DEFCLASS-STELLA-PUSH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUSH" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SWEEP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SWEEP" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-UNUSED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNUSED" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHILE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-EQL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQL?" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-UNMAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNMAKE" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-VOID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 1))
   (CL:SETQ SGT-DEFCLASS-STELLA-TRANSIENT-MIXIN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT-MIXIN" NULL 1))
   (CL:SETQ SYM-DEFCLASS-STELLA-RECYCLE-LIST-DEBUGGING-ENABLED?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RECYCLE-LIST-DEBUGGING-ENABLED?"
     NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-REGISTER-RECYCLED-ITEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REGISTER-RECYCLED-ITEM" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-UNREGISTER-RECYCLED-ITEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNREGISTER-RECYCLED-ITEM" NULL 0))
   (CL:SETQ KWD-DEFCLASS-NULL-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL-WRAPPER" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-INLINE-WRAP-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INLINE-WRAP-BOOLEAN" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-FALSE-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE-WRAPPER" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-ANSWER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANSWER" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-NULL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 0))
   (CL:SETQ KWD-DEFCLASS-AUXILIARY?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AUXILIARY?" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VALUE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-IGNORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
   (CL:SETQ KWD-DEFCLASS-WRAP-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FUNCTION" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SETVALUE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETVALUE?" NULL 0))
   (CL:SETQ SGT-DEFCLASS-STELLA-DYNAMIC-SLOTS-MIXIN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DYNAMIC-SLOTS-MIXIN" NULL 1))
   (CL:SETQ SYM-DEFCLASS-STELLA-SLOTNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SLOTNAME" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-QUOTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "QUOTE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SET-DYNAMIC-SLOT-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SET-DYNAMIC-SLOT-VALUE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-LOOKUP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOOKUP" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-CLASS-SLOT-ACCESSOR-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-SLOT-ACCESSOR-CODE" NULL 0))
   (CL:SETQ SYM-DEFCLASS-STELLA-THE-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-CODE" NULL 0))
   (CL:SETQ KWD-DEFCLASS-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ SYM-DEFCLASS-STELLA-TYPECASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPECASE" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-DEFCLASS3 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "TYPE-TO-NULL-VALUE-TREE"
    "(DEFUN (TYPE-TO-NULL-VALUE-TREE OBJECT) ((TYPE TYPE)))"
    (CL:FUNCTION TYPE-TO-NULL-VALUE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "TYPE-TO-WALKED-NULL-VALUE-TREE"
    "(DEFUN (TYPE-TO-WALKED-NULL-VALUE-TREE OBJECT) ((TYPESPEC TYPE-SPEC) (TYPE TYPE)))"
    (CL:FUNCTION TYPE-TO-WALKED-NULL-VALUE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-CONS-LIST-FROM-SEQUENCE"
    "(DEFUN (YIELD-CONS-LIST-FROM-SEQUENCE CONS) ((SEQUENCE SEQUENCE)))"
    (CL:FUNCTION YIELD-CONS-LIST-FROM-SEQUENCE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-DEFINE-STELLA-CLASS"
    "(DEFUN (YIELD-DEFINE-STELLA-CLASS CONS) ((CLASS CLASS)) :DOCUMENTATION \"Return a cons tree that (when evaluated) constructs
a Stella class object.\")" (CL:FUNCTION YIELD-DEFINE-STELLA-CLASS)
    NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-NATIVE-CLASS?"
    "(DEFUN (CREATE-NATIVE-CLASS? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION CREATE-NATIVE-CLASS?) NULL)
   (DEFINE-FUNCTION-OBJECT "EXCEPTION-CLASS?"
    "(DEFUN (EXCEPTION-CLASS? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION EXCEPTION-CLASS?) NULL)
   (DEFINE-FUNCTION-OBJECT "WARN-ABOUT-MULTIPLE-PARENTS"
    "(DEFUN WARN-ABOUT-MULTIPLE-PARENTS ((CLASS CLASS)))"
    (CL:FUNCTION WARN-ABOUT-MULTIPLE-PARENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "WARN-ABOUT-NON-DIRECT-SUPERS"
    "(DEFUN WARN-ABOUT-NON-DIRECT-SUPERS ((CLASS CLASS)))"
    (CL:FUNCTION WARN-ABOUT-NON-DIRECT-SUPERS) NULL)
   (DEFINE-FUNCTION-OBJECT "SPACE-SAVER-SLOT-ALLOCATION?"
    "(DEFUN (SPACE-SAVER-SLOT-ALLOCATION? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION SPACE-SAVER-SLOT-ALLOCATION?) NULL)
   (DEFINE-FUNCTION-OBJECT "DYNAMIC-SLOT?"
    "(DEFUN (DYNAMIC-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)) :GLOBALLY-INLINE? TRUE (RETURN (EQL? (ALLOCATION SLOT) :DYNAMIC)))"
    (CL:FUNCTION DYNAMIC-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "CLASS-SLOT?"
    "(DEFUN (CLASS-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)) :GLOBALLY-INLINE? TRUE (RETURN (EQL? (ALLOCATION SLOT) :CLASS)))"
    (CL:FUNCTION CLASS-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "REDUNDANT-SLOT?"
    "(DEFUN (REDUNDANT-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION REDUNDANT-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "NATIVE-SLOT?"
    "(DEFUN (NATIVE-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION NATIVE-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "PARAMETER-SLOT?"
    "(DEFUN (PARAMETER-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION PARAMETER-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "NATIVE-METHOD?"
    "(DEFUN (NATIVE-METHOD? BOOLEAN) ((SLOT METHOD-SLOT)))"
    (CL:FUNCTION NATIVE-METHOD?) NULL)
   (DEFINE-FUNCTION-OBJECT "MIXIN-SLOT?"
    "(DEFUN (MIXIN-SLOT? BOOLEAN) ((SELF SLOT)))"
    (CL:FUNCTION MIXIN-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "MIXIN-METHOD?"
    "(DEFUN (MIXIN-METHOD? BOOLEAN) ((SELF SLOT)))"
    (CL:FUNCTION MIXIN-METHOD?) NULL)
   (DEFINE-FUNCTION-OBJECT "CANONICAL-SLOT"
    "(DEFUN (CANONICAL-SLOT STORAGE-SLOT) ((SLOT STORAGE-SLOT)) :DOCUMENTATION \"Computes the slot at the base of a renaming chain for 'slot'.\" :PUBLIC? TRUE)"
    (CL:FUNCTION CANONICAL-SLOT) NULL)
   (DEFINE-FUNCTION-OBJECT "CANONICAL-SLOT-NAME"
    "(DEFUN (CANONICAL-SLOT-NAME SYMBOL) ((SLOT STORAGE-SLOT)) :DOCUMENTATION \"Name of the slot at the base of a renaming chain for 'slot'.\" :PUBLIC? TRUE)"
    (CL:FUNCTION CANONICAL-SLOT-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "UNKNOWN-TYPE?"
    "(DEFUN (UNKNOWN-TYPE? BOOLEAN) ((TYPE TYPE)))"
    (CL:FUNCTION UNKNOWN-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "SLOT-HAS-UNKNOWN-TYPE?"
    "(DEFUN (SLOT-HAS-UNKNOWN-TYPE? BOOLEAN) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION SLOT-HAS-UNKNOWN-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "NATIVE-STORAGE-SLOT-HOME"
    "(DEFUN (NATIVE-STORAGE-SLOT-HOME CLASS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION NATIVE-STORAGE-SLOT-HOME) NULL)
   (DEFINE-FUNCTION-OBJECT "NATIVE-SLOT-HOME"
    "(DEFUN (NATIVE-SLOT-HOME CLASS) ((SLOT SLOT) (CLASS CLASS)))"
    (CL:FUNCTION NATIVE-SLOT-HOME) NULL)
   (DEFINE-FUNCTION-OBJECT "SLOT-NAME-CONFLICT?"
    "(DEFUN (SLOT-NAME-CONFLICT? BOOLEAN) ((SLOT SLOT) (CLASS CLASS)))"
    (CL:FUNCTION SLOT-NAME-CONFLICT?) NULL)
   (DEFINE-FUNCTION-OBJECT "METHOD-CONTAINS-UNKNOWN-TYPE?"
    "(DEFUN (METHOD-CONTAINS-UNKNOWN-TYPE? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION METHOD-CONTAINS-UNKNOWN-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "METHOD-CONTAINS-ANCHORED-TYPE?"
    "(DEFUN (METHOD-CONTAINS-ANCHORED-TYPE? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION METHOD-CONTAINS-ANCHORED-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-RECYCLE-LIST-NAME"
    "(DEFUN (YIELD-RECYCLE-LIST-NAME SYMBOL) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-RECYCLE-LIST-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "RECYCLE-SLOT"
    "(DEFUN (RECYCLE-SLOT STORAGE-SLOT) ((CLASS CLASS)))"
    (CL:FUNCTION RECYCLE-SLOT) NULL)
   (DEFINE-FUNCTION-OBJECT "USE-FREE-LIST?"
    "(DEFUN (USE-FREE-LIST? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION USE-FREE-LIST?) NULL)
   (DEFINE-FUNCTION-OBJECT "USE-SWEEP-LIST?"
    "(DEFUN (USE-SWEEP-LIST? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION USE-SWEEP-LIST?) NULL)
   (DEFINE-FUNCTION-OBJECT "DECIDED-TO-RECYCLE?"
    "(DEFUN (DECIDED-TO-RECYCLE? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION DECIDED-TO-RECYCLE?) NULL)
   (DEFINE-FUNCTION-OBJECT "COMPUTE-RECYCLED-ITEM-SIZE"
    "(DEFUN (COMPUTE-RECYCLED-ITEM-SIZE INTEGER) ((CLASS CLASS)))"
    (CL:FUNCTION COMPUTE-RECYCLED-ITEM-SIZE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-RECYCLE-LIST-DEFINITIONS"
    "(DEFUN (YIELD-RECYCLE-LIST-DEFINITIONS CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-RECYCLE-LIST-DEFINITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-MAKE-TREES"
    "(DEFUN (YIELD-MAKE-TREES CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-MAKE-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-CONSTRUCTOR-NAME"
    "(DEFUN (YIELD-CONSTRUCTOR-NAME SYMBOL) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CONSTRUCTOR-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-CREATION-TREES"
    "(DEFUN (YIELD-CREATION-TREES CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CREATION-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-TERMINATE-OBJECT-TREES"
    "(DEFUN (YIELD-TERMINATE-OBJECT-TREES CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-TERMINATE-OBJECT-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-CREATION-OR-REUSE-TREES"
    "(DEFUN (YIELD-CREATION-OR-REUSE-TREES CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CREATION-OR-REUSE-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT
    "YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST"
    "(DEFUN (YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-LIST) NULL)
   (DEFINE-FUNCTION-OBJECT
    "YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST"
    "(DEFUN (YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CREATION-OR-REUSE-TREES-FROM-SWEEP-LIST) NULL)
   (DEFINE-FUNCTION-OBJECT
    "YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST"
    "(DEFUN (YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CREATION-OR-REUSE-TREES-FROM-FREE-OR-SWEEP-LIST)
    NULL)
   (DEFINE-FUNCTION-OBJECT "MARK-DIRECT-EQUIVALENT-SLOT"
    "(DEFUN MARK-DIRECT-EQUIVALENT-SLOT ((SLOT SLOT)))"
    (CL:FUNCTION MARK-DIRECT-EQUIVALENT-SLOT) NULL)
   (DEFINE-FUNCTION-OBJECT "IS-CONTEXT-SENSITIVE-SLOT?"
    "(DEFUN (IS-CONTEXT-SENSITIVE-SLOT? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION IS-CONTEXT-SENSITIVE-SLOT?) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-INITIAL-VALUE-ASSIGNMENT"
    "(DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENT CONS) ((SLOT STORAGE-SLOT) (MODE KEYWORD)))"
    (CL:FUNCTION YIELD-INITIAL-VALUE-ASSIGNMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-INITIAL-VALUE-ASSIGNMENTS"
    "(DEFUN (YIELD-INITIAL-VALUE-ASSIGNMENTS CONS) ((CLASS CLASS) (MODE KEYWORD)))"
    (CL:FUNCTION YIELD-INITIAL-VALUE-ASSIGNMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS"
    "(DEFUN (YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-LOCAL-INITIAL-VALUE-ASSIGNMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-INITIALIZER-TREES"
    "(DEFUN (YIELD-INITIALIZER-TREES CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-INITIALIZER-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-CONSTRUCTOR-BODY"
    "(DEFUN (YIELD-CONSTRUCTOR-BODY CONS) ((CLASS CLASS) (REQUIREDASSIGNMENTS CONS)))"
    (CL:FUNCTION YIELD-CONSTRUCTOR-BODY) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-CONSTRUCTOR-DEFINITION"
    "(DEFUN (YIELD-CONSTRUCTOR-DEFINITION CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-CONSTRUCTOR-DEFINITION) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-EXCEPTION-CONSTRUCTOR-BODY"
    "(DEFUN (YIELD-EXCEPTION-CONSTRUCTOR-BODY CONS) ((CLASS CLASS) (MESSAGEPARAMETER SYMBOL) (REQUIREDASSIGNMENTS CONS)))"
    (CL:FUNCTION YIELD-EXCEPTION-CONSTRUCTOR-BODY) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION"
    "(DEFUN (YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-EXCEPTION-CONSTRUCTOR-DEFINITION) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-DESTRUCTOR-DEFINITIONS"
    "(DEFUN (YIELD-DESTRUCTOR-DEFINITIONS CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-DESTRUCTOR-DEFINITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS"
    "(DEFUN CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS ((CLASS CLASS)))"
    (CL:FUNCTION CREATE-CONSTRUCTOR-AND-DESTRUCTOR-UNITS) NULL)
   (DEFINE-FUNCTION-OBJECT "PARAMETERIZED-CLASS?"
    "(DEFUN (PARAMETERIZED-CLASS? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION PARAMETERIZED-CLASS?) NULL)
   (DEFINE-FUNCTION-OBJECT "CLASS-WITH-INITIALIZER?"
    "(DEFUN (CLASS-WITH-INITIALIZER? BOOLEAN) ((CLASS CLASS)))"
    (CL:FUNCTION CLASS-WITH-INITIALIZER?) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-INITIALIZER-NAME"
    "(DEFUN (YIELD-INITIALIZER-NAME SYMBOL) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-INITIALIZER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-INITIALIZER-DEFINITION"
    "(DEFUN (YIELD-INITIALIZER-DEFINITION CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-INITIALIZER-DEFINITION) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-CPP-CONSTRUCTOR-UNIT"
    "(DEFUN CREATE-CPP-CONSTRUCTOR-UNIT ((CLASS CLASS)))"
    (CL:FUNCTION CREATE-CPP-CONSTRUCTOR-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-CONSTRUCTOR?"
    "(DEFUN (CPP-CONSTRUCTOR? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION CPP-CONSTRUCTOR?) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-RECYCLE-LIST"
    "(DEFUN (CREATE-RECYCLE-LIST RECYCLE-LIST) ((CLASSTYPE TYPE) (ITEMSIZE INTEGER)))"
    (CL:FUNCTION CREATE-RECYCLE-LIST) NULL))
  :VOID)

(CL:DEFUN HELP-STARTUP-DEFCLASS4 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "CLEAR-RECYCLE-LIST"
    "(DEFUN CLEAR-RECYCLE-LIST ((LIST RECYCLE-LIST)) :DOCUMENTATION \"Reset `list' to its empty state.\")"
    (CL:FUNCTION CLEAR-RECYCLE-LIST) NULL)
   (DEFINE-FUNCTION-OBJECT "CLEAR-RECYCLE-LISTS"
    "(DEFUN CLEAR-RECYCLE-LISTS () :DOCUMENTATION \"Reset all currently active recycle lists to their empty state.\" :PUBLIC? TRUE)"
    (CL:FUNCTION CLEAR-RECYCLE-LISTS) NULL)
   (DEFINE-FUNCTION-OBJECT "PRINT-RECYCLE-LISTS"
    "(DEFUN PRINT-RECYCLE-LISTS () :DOCUMENTATION \"Print the current state of all recycle lists.\" :PUBLIC? TRUE)"
    (CL:FUNCTION PRINT-RECYCLE-LISTS) NULL)
   (DEFINE-FUNCTION-OBJECT "MAINTAIN-RECYCLE-LISTS"
    "(DEFUN MAINTAIN-RECYCLE-LISTS () :PUBLIC? TRUE)"
    (CL:FUNCTION MAINTAIN-RECYCLE-LISTS) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (DELETED? BOOLEAN) ((SELF RECYCLE-LIST)))"
    (WRAP-METHOD-CODE (CL:FUNCTION DELETED?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (DELETED?-SETTER BOOLEAN) ((SELF RECYCLE-LIST) (VALUE BOOLEAN)))"
    (WRAP-METHOD-CODE (CL:FUNCTION DELETED?-SETTER)) NULL)
   (DEFINE-FUNCTION-OBJECT "RECYCLE-LIST-SIZE"
    "(DEFUN (RECYCLE-LIST-SIZE INTEGER) ((LIST RECYCLE-LIST)) :GLOBALLY-INLINE? TRUE (RETURN (* (ITEM-SIZE LIST) (CURRENT-LENGTH LIST))))"
    (CL:FUNCTION RECYCLE-LIST-SIZE) NULL)
   (DEFINE-FUNCTION-OBJECT "TOTAL-RECYCLE-LISTS-SIZE"
    "(DEFUN (TOTAL-RECYCLE-LISTS-SIZE INTEGER) ())"
    (CL:FUNCTION TOTAL-RECYCLE-LISTS-SIZE) NULL)
   (DEFINE-FUNCTION-OBJECT "RECYCLE-LIST-SIZE<"
    "(DEFUN (RECYCLE-LIST-SIZE< BOOLEAN) ((LIST1 RECYCLE-LIST) (LIST2 RECYCLE-LIST)))"
    (CL:FUNCTION RECYCLE-LIST-SIZE<) NULL)
   (DEFINE-FUNCTION-OBJECT "REDUCE-RECYCLE-LIST-SIZE"
    "(DEFUN REDUCE-RECYCLE-LIST-SIZE ((LIST RECYCLE-LIST) (FRACTION FLOAT)))"
    (CL:FUNCTION REDUCE-RECYCLE-LIST-SIZE) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD SWEEP ((SELF OBJECT)) :DOCUMENTATION \"Default method.  Sweep up all `self'-type objects.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION SWEEP)) NULL)
   (DEFINE-FUNCTION-OBJECT "SWEEP-TRANSIENTS"
    "(DEFUN SWEEP-TRANSIENTS () :PUBLIC? TRUE)"
    (CL:FUNCTION SWEEP-TRANSIENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-NON-RECYCLED-LIST"
    "(DEFUN (MAKE-NON-RECYCLED-LIST LIST) ())"
    (CL:FUNCTION MAKE-NON-RECYCLED-LIST) NULL)
   (DEFINE-FUNCTION-OBJECT "REGISTER-RECYCLED-ITEM"
    "(DEFUN REGISTER-RECYCLED-ITEM ((ITEM OBJECT)))"
    (CL:FUNCTION REGISTER-RECYCLED-ITEM) NULL)
   (DEFINE-FUNCTION-OBJECT "UNREGISTER-RECYCLED-ITEM"
    "(DEFUN UNREGISTER-RECYCLED-ITEM ((ITEM OBJECT)))"
    (CL:FUNCTION UNREGISTER-RECYCLED-ITEM) NULL)
   (DEFINE-FUNCTION-OBJECT "START-RECYCLE-LIST-DEBUGGING"
    "(DEFUN START-RECYCLE-LIST-DEBUGGING ())"
    (CL:FUNCTION START-RECYCLE-LIST-DEBUGGING) NULL)
   (DEFINE-FUNCTION-OBJECT "STOP-RECYCLE-LIST-DEBUGGING"
    "(DEFUN STOP-RECYCLE-LIST-DEBUGGING ())"
    (CL:FUNCTION STOP-RECYCLE-LIST-DEBUGGING) NULL)
   (DEFINE-FUNCTION-OBJECT "RECYCLE-LIST-DEBUGGING-ENABLED?"
    "(DEFUN (RECYCLE-LIST-DEBUGGING-ENABLED? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN (DEFINED? *CURRENTLY-RECYCLED-ITEMS*)))"
    (CL:FUNCTION RECYCLE-LIST-DEBUGGING-ENABLED?) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?"
    "(DEFUN (TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING? BOOLEAN) () :GLOBALLY-INLINE? TRUE (RETURN *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?*))"
    (CL:FUNCTION TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-REGISTER-RECYCLED-ITEM-TREES"
    "(DEFUN (YIELD-REGISTER-RECYCLED-ITEM-TREES CONS) ())"
    (CL:FUNCTION YIELD-REGISTER-RECYCLED-ITEM-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-UNREGISTER-RECYCLED-ITEM-TREES"
    "(DEFUN (YIELD-UNREGISTER-RECYCLED-ITEM-TREES CONS) ())"
    (CL:FUNCTION YIELD-UNREGISTER-RECYCLED-ITEM-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "HAS-NON-NULL-DEFAULT-VALUE?"
    "(DEFUN (HAS-NON-NULL-DEFAULT-VALUE? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION HAS-NON-NULL-DEFAULT-VALUE?) NULL)
   (DEFINE-FUNCTION-OBJECT "SYSTEM-DEFINED-SLOT-READER?"
    "(DEFUN (SYSTEM-DEFINED-SLOT-READER? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION SYSTEM-DEFINED-SLOT-READER?) NULL)
   (DEFINE-FUNCTION-OBJECT "SYSTEM-DEFINED-SLOT-WRITER?"
    "(DEFUN (SYSTEM-DEFINED-SLOT-WRITER? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION SYSTEM-DEFINED-SLOT-WRITER?) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-SLOT-TYPE-TREE"
    "(DEFUN (YIELD-SLOT-TYPE-TREE OBJECT) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-SLOT-TYPE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-HARDWIRED-SLOT-VARIABLE"
    "(DEFUN (YIELD-HARDWIRED-SLOT-VARIABLE SYMBOL) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-HARDWIRED-SLOT-VARIABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-HARDWIRED-SLOT-READER-BODY"
    "(DEFUN (YIELD-HARDWIRED-SLOT-READER-BODY CONS CONS) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-HARDWIRED-SLOT-READER-BODY) NULL)
   (DEFINE-FUNCTION-OBJECT "FINALIZE-AUXILIARY-METHOD"
    "(DEFUN FINALIZE-AUXILIARY-METHOD ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION FINALIZE-AUXILIARY-METHOD) NULL)
   (DEFINE-FUNCTION-OBJECT "WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE"
    "(DEFUN (WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE CONS) ((SLOT STORAGE-SLOT) (DEFAULTEXPRESSION OBJECT)))"
    (CL:FUNCTION WRAP-WITH-DEFAULT-VALUE-AND-RETURN-CODE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-SLOT-READER-TREE"
    "(DEFUN (YIELD-SLOT-READER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION YIELD-SLOT-READER-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-SLOT-WRITER-TREE"
    "(DEFUN (YIELD-SLOT-WRITER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION YIELD-SLOT-WRITER-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "SLOT-VALUE-IS-BARE-LITERAL?"
    "(DEFUN (SLOT-VALUE-IS-BARE-LITERAL? BOOLEAN) ((SLOT SLOT)))"
    (CL:FUNCTION SLOT-VALUE-IS-BARE-LITERAL?) NULL)
   (DEFINE-FUNCTION-OBJECT "GENERICALLY-ACCESSIBLE-TYPE?"
    "(DEFUN (GENERICALLY-ACCESSIBLE-TYPE? BOOLEAN) ((TYPE TYPE)))"
    (CL:FUNCTION GENERICALLY-ACCESSIBLE-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "GENERIC-SLOT-READER?"
    "(DEFUN (GENERIC-SLOT-READER? BOOLEAN) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION GENERIC-SLOT-READER?) NULL)
   (DEFINE-FUNCTION-OBJECT "GENERIC-SLOT-WRITER?"
    "(DEFUN (GENERIC-SLOT-WRITER? BOOLEAN) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION GENERIC-SLOT-WRITER?) NULL)
   (DEFINE-FUNCTION-OBJECT "SLOT-ACCESS-METHOD?"
    "(DEFUN (SLOT-ACCESS-METHOD? BOOLEAN) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION SLOT-ACCESS-METHOD?) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-GENERIC-SLOT-ACCESSOR-NAME"
    "(DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-NAME SYMBOL) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-GENERIC-SLOT-ACCESSOR-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION"
    "(DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION CONS) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-GENERIC-SLOT-ACCESSOR-DEFINITION) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-GENERIC-SLOT-ACCESSOR-UNIT"
    "(DEFUN CREATE-GENERIC-SLOT-ACCESSOR-UNIT ((CLASS CLASS)))"
    (CL:FUNCTION CREATE-GENERIC-SLOT-ACCESSOR-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT"
    "(DEFUN (YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT CONS) ((CLASS CLASS) (CLASSREF SYMBOL)))"
    (CL:FUNCTION YIELD-GENERIC-SLOT-ACCESSOR-ATTACHMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-GENERIC-SLOT-ACCESSOR"
    "(DEFUN (GET-GENERIC-SLOT-ACCESSOR FUNCTION-CODE) ((SLOT STORAGE-SLOT) (CLASS CLASS) (WARN? BOOLEAN)) :DOCUMENTATION \"Return the accessor code to read `slot' on an object of type `class',
or NULL if no such accessor exists.  In that case, print a warning if `warn?' is TRUE.
NOTE: the accessor expects `canonical-slot-name's (which see).\" :PUBLIC? TRUE)"
    (CL:FUNCTION GET-GENERIC-SLOT-ACCESSOR) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-MIXIN-CLASS-USERS-TREE"
    "(DEFUN (YIELD-MIXIN-CLASS-USERS-TREE (CONS OF SYMBOL)) ((CLASS CLASS)))"
    (CL:FUNCTION YIELD-MIXIN-CLASS-USERS-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-MIXIN-SLOT-READER-NAME"
    "(DEFUN (YIELD-MIXIN-SLOT-READER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-MIXIN-SLOT-READER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-MIXIN-SLOT-WRITER-NAME"
    "(DEFUN (YIELD-MIXIN-SLOT-WRITER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-MIXIN-SLOT-WRITER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-MIXIN-SLOT-READER-TREE"
    "(DEFUN (YIELD-MIXIN-SLOT-READER-TREE CONS) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-MIXIN-SLOT-READER-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-MIXIN-SLOT-WRITER-TREE"
    "(DEFUN (YIELD-MIXIN-SLOT-WRITER-TREE CONS) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-MIXIN-SLOT-WRITER-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-NATIVE-SLOT-READER-NAME"
    "(DEFUN (YIELD-NATIVE-SLOT-READER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-NATIVE-SLOT-READER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-NATIVE-SLOT-WRITER-NAME"
    "(DEFUN (YIELD-NATIVE-SLOT-WRITER-NAME SYMBOL) ((SLOT STORAGE-SLOT)))"
    (CL:FUNCTION YIELD-NATIVE-SLOT-WRITER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-NATIVE-SLOT-READER-TREE"
    "(DEFUN (YIELD-NATIVE-SLOT-READER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION YIELD-NATIVE-SLOT-READER-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "YIELD-NATIVE-SLOT-WRITER-TREE"
    "(DEFUN (YIELD-NATIVE-SLOT-WRITER-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
    (CL:FUNCTION YIELD-NATIVE-SLOT-WRITER-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CREATE-KEYED-EQUALITY-METHOD-UNIT"
    "(DEFUN CREATE-KEYED-EQUALITY-METHOD-UNIT ((CLASS CLASS)))"
    (CL:FUNCTION CREATE-KEYED-EQUALITY-METHOD-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "TRANSIENT-OBJECT?"
    "(DEFUN (TRANSIENT-OBJECT? BOOLEAN) ((OBJECT OBJECT)))"
    (CL:FUNCTION TRANSIENT-OBJECT?) NULL)
   (DEFINE-FUNCTION-OBJECT "STARTUP-DEFCLASS"
    "(DEFUN STARTUP-DEFCLASS () :PUBLIC? TRUE)"
    (CL:FUNCTION STARTUP-DEFCLASS) NULL)
   (CL:LET*
    ((FUNCTION (LOOKUP-FUNCTION SYM-DEFCLASS-STELLA-STARTUP-DEFCLASS)))
    (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
     SYM-DEFCLASS-STELLA-METHOD-STARTUP-CLASSNAME
     (WRAP-STRING "_StartupDefclass") NULL-STRING-WRAPPER)))
  :VOID)

(CL:DEFUN STARTUP-DEFCLASS ()
  (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 0)
   (CL:SETQ *ALL-RECYCLE-LISTS* (MAKE-NON-RECYCLED-LIST)))
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-DEFCLASS1)
    (HELP-STARTUP-DEFCLASS2)
    (CL:SETQ SYM-DEFCLASS-STELLA-EQ?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EQ?" NULL 0))
    (CL:SETQ SYM-DEFCLASS-STELLA-OTHER
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHER" NULL 0))
    (CL:SETQ SYM-DEFCLASS-STELLA-EQUAL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EQUAL" NULL 0))
    (CL:SETQ SYM-DEFCLASS-STELLA-STARTUP-DEFCLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-DEFCLASS" NULL 0))
    (CL:SETQ SYM-DEFCLASS-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *RECYCLE-LISTS-MAINTENANCE-TIMER*
     *RECYCLE-LISTS-MAINTENANCE-INTERVAL*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-DEFCLASS3)
    (HELP-STARTUP-DEFCLASS4))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *RECYCLING-ENABLED?* BOOLEAN TRUE :DOCUMENTATION \"If `TRUE' calls to `new' or `free' on classes with :recycle-method;
specifications will actually operate on recycle lists.  Otherwise, all
recycle list operations will be no-ops.\" :PUBLIC? TRUE)" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *ALL-RECYCLE-LISTS* (LIST OF RECYCLE-LIST) NULL)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *MAX-RECYCLE-LIST-BYTES* INTEGER 3000000 :DOCUMENTATION \"Maximum number of bytes to be occupied by recycle lists.\" :PUBLIC? TRUE)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *RECYCLE-LISTS-MAINTENANCE-INTERVAL* INTEGER 5000 :DOCUMENTATION \"Total number of recycle list extensions after which a
size maintenance operation is performed to ensure that
the `*MAX-RECYCLE-LIST-BYTES*' limit is still met.\" :PUBLIC? TRUE)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *RECYCLE-LISTS-MAINTENANCE-TIMER* INTEGER *RECYCLE-LISTS-MAINTENANCE-INTERVAL* :PUBLIC? TRUE)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *CURRENTLY-RECYCLED-ITEMS* (HASH-TABLE OF OBJECT OBJECT) NULL :DOCUMENTATION \"During recycle list debugging holds all items that live in
some free list.  Depending on program behavior, this table can get quite large!\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *TRANSLATE-WITH-RECYCLE-LIST-DEBUGGING?* BOOLEAN FALSE)"
     NULL)))
  :VOID)
