;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; tools.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-TOOLS-STELLA-PRINT-OUTLINE NULL)
(CL:DEFVAR KWD-TOOLS-COMMON-LISP NULL)
(CL:DEFVAR KWD-TOOLS-FUNCTION NULL)
(CL:DEFVAR SYM-TOOLS-STELLA-STARTUP-TOOLS NULL)
(CL:DEFVAR SYM-TOOLS-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM (CL:SPECIAL *STELLA-MODULE* *MODULE* NIL EOL NULL-INTEGER))

;;; (DEFGLOBAL *OUTLINE-INDENT-STRING* ...)

(CL:DEFVAR *OUTLINE-INDENT-STRING* "| "
  "String used in the PRINT-OUTLINE for each level of outline")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *OUTLINE-INDENT-STRING*))

;;; (DEFUN (OUTLINE-DEPTH-EXCEEDED? BOOLEAN) ...)

(CL:DEFUN OUTLINE-DEPTH-EXCEEDED? (CURRENT-DEPTH DEPTH-LIMIT)
  "Helper function that returns `true' if `current-depth' exceeds `depth-limit'.
This functions uses the convention that a `null' or negative value of
`depth-limit' means the depth is unlimited.  In those cases it always
returns false."
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH DEPTH-LIMIT))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DEPTH-LIMIT CL:FIXNUM)
  (CL:RETURN-FROM OUTLINE-DEPTH-EXCEEDED?
   (CL:AND (CL:NOT (CL:= DEPTH-LIMIT NULL-INTEGER))
    (CL:>= DEPTH-LIMIT 0) (CL:>= CURRENT-DEPTH DEPTH-LIMIT))))

;;; (DEFUN INDENT-OUTLINE ...)

(CL:DEFUN INDENT-OUTLINE (CURRENT-DEPTH STREAM)
  "Helper function that indents outline printings for level
`current-depth' on `stream' using the value of the global
variable `*OUTLINE-INDENT-STRING*'"
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  (CL:LET*
   ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 CURRENT-DEPTH)
    (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
   (CL:LOOP WHILE
    (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
    (CL:SETQ I ITER-000) (CL:SETQ I I)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
     *OUTLINE-INDENT-STRING*)
    (CL:SETQ ITER-000 (CL:1+ ITER-000))))
  :VOID)

;;; (DEFUN PRINT-OUTLINE ...)

(CL:DEFUN %PRINT-OUTLINE (THING STREAM DEPTH NAMED?)
  "Print an outline of `thing' and its subparts on `stream'.
If `depth' is non-negative, only `depth' levels will be printed.
If `named?' is `TRUE', then only named entities will be printed.

This function is intended to be used on things like modules, contexts,
concepts, etc. that have hierarchical structure.  If `thing' doesn't
have a hierarchical structure, it will just be printed."
  (CL:DECLARE (CL:TYPE CL:FIXNUM DEPTH))
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  (HELP-PRINT-OUTLINE THING STREAM 0 DEPTH NAMED?)
  :VOID)

(CL:DEFUN PRINT-OUTLINE-EVALUATOR-WRAPPER (ARGUMENTS)
  (%PRINT-OUTLINE (%%VALUE ARGUMENTS) (%%VALUE (%%REST ARGUMENTS))
   (%INTEGER-WRAPPER.WRAPPER-VALUE
    (%%VALUE (%%REST (%%REST ARGUMENTS))))
   (%BOOLEAN-WRAPPER.WRAPPER-VALUE
    (%%VALUE (%%REST (%%REST (%%REST ARGUMENTS))))))
  :VOID)

(CL:DEFMACRO PRINT-OUTLINE (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  "Print an outline of `thing' and its subparts on `stream'.
If `depth' is non-negative, only `depth' levels will be printed.
If `named?' is `TRUE', then only named entities will be printed.

This function is intended to be used on things like modules, contexts,
concepts, etc. that have hierarchical structure.  If `thing' doesn't
have a hierarchical structure, it will just be printed."
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* FALSE))
   (CL-INCREMENTALLY-TRANSLATE EXPRESSION)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE |/STELLA/PRINT-OUTLINE|)) (CL:MACRO-FUNCTION (CL:QUOTE PRINT-OUTLINE)))

;;; (DEFMETHOD HELP-PRINT-OUTLINE ...)

(%%DEFCONSMETHOD HELP-PRINT-OUTLINE ((TOP OBJECT) STREAM CURRENT-DEPTH DEPTH NAMED?)
  "Helper method for `print-outline'"
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH DEPTH))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  (CL:PROGN (CL:SETQ NAMED? NAMED?)
   (CL:SETQ CURRENT-DEPTH CURRENT-DEPTH) (CL:SETQ DEPTH DEPTH))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) TOP EOL)
  :VOID)

;;; (DEFMETHOD HELP-PRINT-OUTLINE ...)

(CL:DEFMETHOD HELP-PRINT-OUTLINE ((TOP CONTEXT) STREAM CURRENT-DEPTH DEPTH NAMED?)
  "Helper method for `print-outline'"
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH DEPTH))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  (CL:WHEN NAMED? (CL:RETURN-FROM HELP-PRINT-OUTLINE))
  (INDENT-OUTLINE CURRENT-DEPTH STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) TOP EOL)
  (CL:WHEN
   (CL:NOT
    (CL:AND (CL:NOT (CL:= DEPTH NULL-INTEGER)) (CL:>= DEPTH 0)
     (CL:>= CURRENT-DEPTH DEPTH)))
   (CL:SETQ CURRENT-DEPTH (CL:1+ CURRENT-DEPTH))
   (CL:LET*
    ((C NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%CONTEXT.CHILD-CONTEXTS TOP))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (HELP-PRINT-OUTLINE C STREAM CURRENT-DEPTH DEPTH NAMED?)
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  :VOID)

;;; (DEFMETHOD HELP-PRINT-OUTLINE ...)

(CL:DEFMETHOD HELP-PRINT-OUTLINE ((TOP MODULE) STREAM CURRENT-DEPTH DEPTH NAMED?)
  "Helper method for `print-outline'"
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH DEPTH))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  (INDENT-OUTLINE CURRENT-DEPTH STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) (NAME TOP) EOL)
  (CL:WHEN
   (CL:NOT
    (CL:AND (CL:NOT (CL:= DEPTH NULL-INTEGER)) (CL:>= DEPTH 0)
     (CL:>= CURRENT-DEPTH DEPTH)))
   (CL:SETQ CURRENT-DEPTH (CL:1+ CURRENT-DEPTH))
   (CL:LET*
    ((C NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%MODULE.CHILD-CONTEXTS TOP))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (HELP-PRINT-OUTLINE C STREAM CURRENT-DEPTH DEPTH NAMED?)
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  :VOID)

;;; (DEFMETHOD HELP-PRINT-OUTLINE ...)

(CL:DEFMETHOD HELP-PRINT-OUTLINE ((TOP CLASS) STREAM CURRENT-DEPTH DEPTH NAMED?)
  "Helper method for `print-outline'"
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH DEPTH))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  (INDENT-OUTLINE CURRENT-DEPTH STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) (NAME TOP) EOL)
  (CL:WHEN
   (CL:NOT
    (CL:AND (CL:NOT (CL:= DEPTH NULL-INTEGER)) (CL:>= DEPTH 0)
     (CL:>= CURRENT-DEPTH DEPTH)))
   (CL:SETQ CURRENT-DEPTH (CL:1+ CURRENT-DEPTH))
   (CL:LET*
    ((C NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%CLASS.CLASS-DIRECT-SUBS TOP))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (HELP-PRINT-OUTLINE (TYPE-TO-CLASS C) STREAM CURRENT-DEPTH DEPTH
      NAMED?)
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  :VOID)

;;; (DEFMETHOD HELP-PRINT-OUTLINE ...)

(CL:DEFMETHOD HELP-PRINT-OUTLINE ((TOP SLOT) STREAM CURRENT-DEPTH DEPTH NAMED?)
  "Helper method for `print-outline'"
  (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENT-DEPTH DEPTH))
  #+MCL
  (CL:CHECK-TYPE CURRENT-DEPTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DEPTH CL:FIXNUM)
  (INDENT-OUTLINE CURRENT-DEPTH STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) (NAME TOP) EOL)
  (CL:WHEN
   (CL:NOT
    (CL:AND (CL:NOT (CL:= DEPTH NULL-INTEGER)) (CL:>= DEPTH 0)
     (CL:>= CURRENT-DEPTH DEPTH)))
   (CL:SETQ CURRENT-DEPTH (CL:1+ CURRENT-DEPTH))
   (CL:LET*
    ((C NULL) (ITER-000 (%LIST.THE-CONS-LIST (SLOT-DIRECT-SUBS TOP))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (HELP-PRINT-OUTLINE C STREAM CURRENT-DEPTH DEPTH NAMED?)
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  :VOID)

(CL:DEFUN STARTUP-TOOLS ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SYM-TOOLS-STELLA-PRINT-OUTLINE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-OUTLINE" NULL 0))
    (CL:SETQ KWD-TOOLS-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ KWD-TOOLS-FUNCTION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
    (CL:SETQ SYM-TOOLS-STELLA-STARTUP-TOOLS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TOOLS" NULL 0))
    (CL:SETQ SYM-TOOLS-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "OUTLINE-DEPTH-EXCEEDED?"
     "(DEFUN (OUTLINE-DEPTH-EXCEEDED? BOOLEAN) ((CURRENT-DEPTH INTEGER) (DEPTH-LIMIT INTEGER)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Helper function that returns `true' if `current-depth' exceeds `depth-limit'.
This functions uses the convention that a `null' or negative value of
`depth-limit' means the depth is unlimited.  In those cases it always
returns false.\" (RETURN (AND (DEFINED? DEPTH-LIMIT) (>= DEPTH-LIMIT 0) (>= CURRENT-DEPTH DEPTH-LIMIT))))"
     (CL:FUNCTION OUTLINE-DEPTH-EXCEEDED?) NULL)
    (DEFINE-FUNCTION-OBJECT "INDENT-OUTLINE"
     "(DEFUN INDENT-OUTLINE ((CURRENT-DEPTH INTEGER) (STREAM OUTPUT-STREAM)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :DOCUMENTATION \"Helper function that indents outline printings for level
`current-depth' on `stream' using the value of the global
variable `*OUTLINE-INDENT-STRING*'\" (FOREACH I IN (INTERVAL 1 CURRENT-DEPTH) DO (IGNORE I) (PRINT-STREAM STREAM *OUTLINE-INDENT-STRING*)))"
     (CL:FUNCTION INDENT-OUTLINE) NULL)
    (DEFINE-FUNCTION-OBJECT "PRINT-OUTLINE"
     "(DEFUN PRINT-OUTLINE ((THING OBJECT) (STREAM OUTPUT-STREAM) (DEPTH INTEGER) (NAMED? BOOLEAN)) :PUBLIC? TRUE :COMMAND? TRUE :DOCUMENTATION \"Print an outline of `thing' and its subparts on `stream'.
If `depth' is non-negative, only `depth' levels will be printed.
If `named?' is `TRUE', then only named entities will be printed.

This function is intended to be used on things like modules, contexts,
concepts, etc. that have hierarchical structure.  If `thing' doesn't
have a hierarchical structure, it will just be printed.\")"
     (CL:FUNCTION %PRINT-OUTLINE)
     (CL:FUNCTION PRINT-OUTLINE-EVALUATOR-WRAPPER))
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD HELP-PRINT-OUTLINE ((TOP OBJECT) (STREAM OUTPUT-STREAM) (CURRENT-DEPTH INTEGER) (DEPTH INTEGER) (NAMED? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Helper method for `print-outline'\")"
     (WRAP-METHOD-CODE (CL:FUNCTION HELP-PRINT-OUTLINE)) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD HELP-PRINT-OUTLINE ((TOP CONTEXT) (STREAM OUTPUT-STREAM) (CURRENT-DEPTH INTEGER) (DEPTH INTEGER) (NAMED? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Helper method for `print-outline'\")"
     (WRAP-METHOD-CODE (CL:FUNCTION HELP-PRINT-OUTLINE)) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD HELP-PRINT-OUTLINE ((TOP MODULE) (STREAM OUTPUT-STREAM) (CURRENT-DEPTH INTEGER) (DEPTH INTEGER) (NAMED? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Helper method for `print-outline'\")"
     (WRAP-METHOD-CODE (CL:FUNCTION HELP-PRINT-OUTLINE)) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD HELP-PRINT-OUTLINE ((TOP CLASS) (STREAM OUTPUT-STREAM) (CURRENT-DEPTH INTEGER) (DEPTH INTEGER) (NAMED? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Helper method for `print-outline'\")"
     (WRAP-METHOD-CODE (CL:FUNCTION HELP-PRINT-OUTLINE)) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD HELP-PRINT-OUTLINE ((TOP SLOT) (STREAM OUTPUT-STREAM) (CURRENT-DEPTH INTEGER) (DEPTH INTEGER) (NAMED? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Helper method for `print-outline'\")"
     (WRAP-METHOD-CODE (CL:FUNCTION HELP-PRINT-OUTLINE)) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-TOOLS"
     "(DEFUN STARTUP-TOOLS () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-TOOLS) NULL)
    (CL:LET*
     ((FUNCTION (LOOKUP-FUNCTION SYM-TOOLS-STELLA-STARTUP-TOOLS)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-TOOLS-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupTools") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *OUTLINE-INDENT-STRING* STRING \"| \" :DOCUMENTATION \"String used in the PRINT-OUTLINE for each level of outline\")"
     NULL)
    (REGISTER-NATIVE-NAME SYM-TOOLS-STELLA-PRINT-OUTLINE
     KWD-TOOLS-COMMON-LISP KWD-TOOLS-FUNCTION)))
  :VOID)
