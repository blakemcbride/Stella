;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; date-time-parser.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-FOREACH NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-ITEM NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-IN NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-CAST NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-CONS NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-OF NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-DO NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-INSERT-AT NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-FIRST NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-SECOND NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-YESTERDAY NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-TODAY NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-TOMORROW NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-NOW NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-MONDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-TUESDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-WEDNESDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-THURSDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-FRIDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-SATURDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-SUNDAY NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-BCE NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-CE NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-YEAR NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-MONTH NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-DAY NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-HOUR NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-MINUTE NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-SECONDP NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-AM-PM NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-ZONE NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-AM NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-PM NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-NOON NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-MIDN NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-SPECIAL NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-LETTER NULL)
(CL:DEFVAR KWD-DATE-TIME-PARSER-DIGIT NULL)
(CL:DEFVAR SGT-DATE-TIME-PARSER-STELLA-CONS NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-ERA NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-STARTUP-DATE-TIME-PARSER NULL)
(CL:DEFVAR SYM-DATE-TIME-PARSER-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* NULL-CHARACTER
  *CHARACTER-TYPE-TABLE* TRUE-WRAPPER FALSE-WRAPPER NULL-FLOAT
  NULL-INTEGER NIL))

;;; (DEFCONSTANT WHITESPACE-CHARS ...)

(CL:DEFVAR WHITESPACE-CHARS NULL)

;;; (DEFCONSTANT TIME-DIVIDERS ...)

(CL:DEFVAR TIME-DIVIDERS NULL)

;;; (DEFCONSTANT DATE-DIVIDERS ...)

(CL:DEFVAR DATE-DIVIDERS NULL)

;;; (DEFCONSTANT DATE-TIME-DIVIDERS ...)

(CL:DEFVAR DATE-TIME-DIVIDERS NULL)

;;; (DEFSPECIAL *ERROR-ON-MISMATCH* ...)

(CL:DEFVAR *ERROR-ON-MISMATCH* CL:NIL
  "If TRUE, an error will be signalled if parse-date-time is unable
   to determine the time/date format of the string.")

;;; (DEFMACRO HASHLIST ...)

(CL:DEFUN HASHLIST (LIST TABLE)
  (CL:RETURN-FROM HASHLIST
   (LIST* SYM-DATE-TIME-PARSER-STELLA-FOREACH
    SYM-DATE-TIME-PARSER-STELLA-ITEM SYM-DATE-TIME-PARSER-STELLA-IN
    (LIST* SYM-DATE-TIME-PARSER-STELLA-CAST LIST
     (CONS
      (LIST* SYM-DATE-TIME-PARSER-STELLA-CONS
       SYM-DATE-TIME-PARSER-STELLA-OF SYM-DATE-TIME-PARSER-STELLA-CONS
       NIL)
      NIL))
    SYM-DATE-TIME-PARSER-STELLA-DO
    (LIST* SYM-DATE-TIME-PARSER-STELLA-INSERT-AT TABLE
     (LIST*
      (LIST* SYM-DATE-TIME-PARSER-STELLA-FIRST
       SYM-DATE-TIME-PARSER-STELLA-ITEM NIL)
      (LIST* SYM-DATE-TIME-PARSER-STELLA-SECOND
       SYM-DATE-TIME-PARSER-STELLA-ITEM NIL)
      NIL))
    NIL)))

;;; (DEFSPECIAL *WEEKDAY-STRINGS* ...)

(CL:DEFVAR *WEEKDAY-STRINGS* NULL)

;;; (DEFSPECIAL *MONTH-STRINGS* ...)

(CL:DEFVAR *MONTH-STRINGS* NULL)

;;; (DEFSPECIAL *ZONE-STRINGS* ...)

(CL:DEFVAR *ZONE-STRINGS* NULL)

;;; (DEFSPECIAL *ERA-STRINGS* ...)

(CL:DEFVAR *ERA-STRINGS* NULL)

;;; (DEFSPECIAL *SPECIAL-STRINGS* ...)

(CL:DEFVAR *SPECIAL-STRINGS* NULL)

;;; (DEFSPECIAL *SPECIAL-SYMBOLS* ...)

(CL:DEFVAR *SPECIAL-SYMBOLS* NULL)

;;; (DEFSPECIAL *DATE-TIME-PATTERNS* ...)

(CL:DEFVAR *DATE-TIME-PATTERNS* NULL)

;;; (DEFUN YESTERDAY ...)

(CL:DEFUN YESTERDAY (PARSED-VALUES DEFAULT-VALUES)
  (TODAY PARSED-VALUES DEFAULT-VALUES)
  (CL:WHEN
   (CL:AND
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
      NULL-INTEGER))
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
      NULL-INTEGER))
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES)
      NULL-INTEGER)))
   (CL:LET*
    ((JD
      (COMPUTE-JULIAN-DAY
       (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
       (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
       (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES))))
    (CL:DECLARE (CL:TYPE CL:FIXNUM JD))
    (CL:LET*
     ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
      (DOW NULL))
     (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
     (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
      (COMPUTE-CALENDAR-DATE (CL:1- JD)))
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES) DAY)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES) MONTH)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES) YEAR)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW PARSED-VALUES) DOW))))
  :VOID)

;;; (DEFUN TODAY ...)

(CL:DEFUN TODAY (PARSED-VALUES DEFAULT-VALUES)
  (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES)
   (%DECODED-DATE-TIME.DATE-TIME-DAY DEFAULT-VALUES))
  (CL:WHEN
   (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
    NULL-INTEGER)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
    (%DECODED-DATE-TIME.DATE-TIME-MONTH DEFAULT-VALUES)))
  (CL:WHEN
   (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
    NULL-INTEGER)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
    (%DECODED-DATE-TIME.DATE-TIME-YEAR DEFAULT-VALUES)))
  (SET-CONSISTENT-DOW PARSED-VALUES)
  (CL:RETURN-FROM TODAY)
  :VOID)

;;; (DEFUN TOMORROW ...)

(CL:DEFUN TOMORROW (PARSED-VALUES DEFAULT-VALUES)
  (TODAY PARSED-VALUES DEFAULT-VALUES)
  (CL:WHEN
   (CL:AND
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
      NULL-INTEGER))
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
      NULL-INTEGER))
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES)
      NULL-INTEGER)))
   (CL:LET*
    ((JD
      (COMPUTE-JULIAN-DAY
       (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
       (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
       (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES))))
    (CL:DECLARE (CL:TYPE CL:FIXNUM JD))
    (CL:LET*
     ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
      (DOW NULL))
     (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
     (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
      (COMPUTE-CALENDAR-DATE (CL:1+ JD)))
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES) DAY)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES) MONTH)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES) YEAR)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW PARSED-VALUES) DOW))))
  :VOID)

;;; (DEFUN NOW ...)

(CL:DEFUN NOW (PARSED-VALUES DEFAULT-VALUES)
  (CL:LET*
   ((TIME-ZONE (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIME-ZONE))
   (CL:WHEN (CL:= TIME-ZONE NULL-FLOAT)
    (CL:SETQ TIME-ZONE
     (%DECODED-DATE-TIME.DATE-TIME-ZONE DEFAULT-VALUES))
    (CL:WHEN (CL:= TIME-ZONE NULL-FLOAT)
     (CL:SETQ TIME-ZONE (GET-LOCAL-TIME-ZONE))))
   (CL:LET*
    ((HOUR NULL-INTEGER) (MINUTE NULL-INTEGER) (SECOND NULL-INTEGER)
     (MILLIS NULL-INTEGER))
    (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR MINUTE SECOND MILLIS))
    (CL:MULTIPLE-VALUE-SETQ (HOUR MINUTE SECOND MILLIS)
     (GET-TIME (MAKE-CURRENT-DATE-TIME) TIME-ZONE))
    (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS PARSED-VALUES)
     (CL:FLOAT MILLIS 0.0d0))
    (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND PARSED-VALUES)
     SECOND)
    (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE PARSED-VALUES)
     MINUTE)
    (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES) HOUR)))
  :VOID)

;;; (DEFUN (AM-PM SYMBOL) ...)

(CL:DEFUN AM-PM (STRING)
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE STRING))
    (CL:PROGN
     (CL:COND
      ((STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE STRING) "am")
       (CL:RETURN-FROM AM-PM SYM-DATE-TIME-PARSER-STELLA-AM))
      ((STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE STRING) "pm")
       (CL:RETURN-FROM AM-PM SYM-DATE-TIME-PARSER-STELLA-PM))
      (CL:T (CL:RETURN-FROM AM-PM NULL)))))
   (CL:T (CL:RETURN-FROM AM-PM NULL))))

;;; (DEFUN (ERA SYMBOL) ...)

(CL:DEFUN ERA (STRING)
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE STRING))
    (CL:PROGN
     (CL:RETURN-FROM ERA
      (LOOKUP *ERA-STRINGS* (%STRING-WRAPPER.WRAPPER-VALUE STRING)))))
   (CL:T (CL:RETURN-FROM ERA NULL))))

;;; (DEFUN (NOON-MIDN SYMBOL) ...)

(CL:DEFUN NOON-MIDN (STRING)
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE STRING))
    (CL:PROGN
     (CL:COND
      ((STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE STRING) "noon")
       (CL:RETURN-FROM NOON-MIDN SYM-DATE-TIME-PARSER-STELLA-NOON))
      ((STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE STRING) "midnight")
       (CL:RETURN-FROM NOON-MIDN SYM-DATE-TIME-PARSER-STELLA-MIDN))
      (CL:T (CL:RETURN-FROM NOON-MIDN NULL)))))
   (CL:T (CL:RETURN-FROM NOON-MIDN NULL))))

;;; (DEFUN (WEEKDAY KEYWORD) ...)

(CL:DEFUN WEEKDAY (THING)
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE THING))
    (CL:PROGN
     (CL:RETURN-FROM WEEKDAY
      (LOOKUP *WEEKDAY-STRINGS*
       (%STRING-WRAPPER.WRAPPER-VALUE THING)))))
   (CL:T (CL:RETURN-FROM WEEKDAY NULL))))

;;; (DEFUN (MONTH INTEGER-WRAPPER) ...)

(CL:DEFUN MONTH (THING)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE THING)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET*
       ((MONTH-NUMBER
         (LOOKUP *MONTH-STRINGS*
          (%STRING-WRAPPER.WRAPPER-VALUE THING))))
       (CL:DECLARE (CL:TYPE CL:FIXNUM MONTH-NUMBER))
       (CL:IF (CL:NOT (CL:= MONTH-NUMBER NULL-INTEGER))
        (CL:RETURN-FROM MONTH (WRAP-INTEGER MONTH-NUMBER))
        (CL:RETURN-FROM MONTH NULL)))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (CL:IF
       (CL:AND (CL:<= 1 (%INTEGER-WRAPPER.WRAPPER-VALUE THING))
        (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE THING) 12))
       (CL:RETURN-FROM MONTH THING) (CL:RETURN-FROM MONTH NULL))))
    (CL:T (CL:RETURN-FROM MONTH NULL)))))

;;; (DEFUN (ZONE FLOAT-WRAPPER) ...)

(CL:DEFUN ZONE (THING)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE THING)))
   (CL:COND
    ((SUBTYPE-OF-STRING? TEST-VALUE-000)
     (CL:PROGN
      (CL:WHEN
       (STRING-EQUAL? (%STRING-WRAPPER.WRAPPER-VALUE THING) "local")
       (CL:RETURN-FROM ZONE (WRAP-FLOAT NULL-FLOAT)))
      (CL:LET*
       ((ZONE-NUMBER
         (LOOKUP *ZONE-STRINGS*
          (%STRING-WRAPPER.WRAPPER-VALUE THING))))
       (CL:IF (CL:NOT (CL:EQ ZONE-NUMBER NULL))
        (CL:RETURN-FROM ZONE ZONE-NUMBER)
        (CL:RETURN-FROM ZONE NULL)))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN
      (CL:IF
       (CL:AND (CL:<= -12.0d0 (%FLOAT-WRAPPER.WRAPPER-VALUE THING))
        (CL:<= (%FLOAT-WRAPPER.WRAPPER-VALUE THING) 14.0d0))
       (CL:RETURN-FROM ZONE THING) (CL:RETURN-FROM ZONE NULL))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (CL:LET* ((OFFSET (%INTEGER-WRAPPER.WRAPPER-VALUE THING)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM OFFSET))
       (CL:COND
        ((CL:AND (CL:<= -12 OFFSET) (CL:<= OFFSET 14))
         (CL:RETURN-FROM ZONE (WRAP-FLOAT (CL:FLOAT OFFSET 0.0d0))))
        ((CL:AND (CL:<= -1200 OFFSET) (CL:<= OFFSET 1400))
         (CL:RETURN-FROM ZONE
          (WRAP-FLOAT
           (CL:+
            (CL:LET ((X OFFSET) (Y 100))
             (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
             (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y))))
            (CL:/ (CL:THE CL:FIXNUM (CL:REM OFFSET 100)) 60.0d0)))))
        (CL:T (CL:RETURN-FROM ZONE NULL))))))
    (CL:T (CL:RETURN-FROM ZONE NULL)))))

;;; (DEFUN (SPECIALP SYMBOL) ...)

(CL:DEFUN SPECIALP (STRING)
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE STRING))
    (CL:PROGN
     (CL:RETURN-FROM SPECIALP
      (LOOKUP *SPECIAL-STRINGS*
       (%STRING-WRAPPER.WRAPPER-VALUE STRING)))))
   (CL:T (CL:RETURN-FROM SPECIALP NULL))))

;;; (DEFUN (SECONDP BOOLEAN-WRAPPER) ...)

(CL:DEFUN SECONDP (NUMBER)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE NUMBER)))
   (CL:COND
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM SECONDP
       (CL:IF
        (CL:AND (CL:<= 0 (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER))
         (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER) 59))
        TRUE-WRAPPER FALSE-WRAPPER))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM SECONDP
       (CL:IF
        (CL:AND (CL:<= 0.0d0 (%FLOAT-WRAPPER.WRAPPER-VALUE NUMBER))
         (CL:< (%FLOAT-WRAPPER.WRAPPER-VALUE NUMBER) 60.0d0))
        TRUE-WRAPPER FALSE-WRAPPER))))
    (CL:T (CL:RETURN-FROM SECONDP FALSE-WRAPPER)))))

;;; (DEFUN (MINUTE BOOLEAN-WRAPPER) ...)

(CL:DEFUN MINUTE (NUMBER)
  (CL:COND
   ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE NUMBER))
    (CL:PROGN
     (CL:RETURN-FROM MINUTE
      (CL:IF
       (CL:AND (CL:<= 0 (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER))
        (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER) 59))
       TRUE-WRAPPER FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM MINUTE FALSE-WRAPPER))))

;;; (DEFUN (ZONE-MINUTE BOOLEAN-WRAPPER) ...)

(CL:DEFUN ZONE-MINUTE (NUMBER)
  (CL:COND
   ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE NUMBER))
    (CL:PROGN
     (CL:RETURN-FROM ZONE-MINUTE
      (CL:IF
       (CL:AND (CL:<= 0 (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER))
        (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER) 59))
       TRUE-WRAPPER FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM ZONE-MINUTE FALSE-WRAPPER))))

;;; (DEFUN (HOUR BOOLEAN-WRAPPER) ...)

(CL:DEFUN HOUR (NUMBER)
  (CL:COND
   ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE NUMBER))
    (CL:PROGN
     (CL:RETURN-FROM HOUR
      (CL:IF
       (CL:AND (CL:<= 0 (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER))
        (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER) 23))
       TRUE-WRAPPER FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM HOUR FALSE-WRAPPER))))

;;; (DEFUN (DAY BOOLEAN-WRAPPER) ...)

(CL:DEFUN DAY (NUMBER)
  (CL:COND
   ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE NUMBER))
    (CL:PROGN
     (CL:RETURN-FROM DAY
      (CL:IF
       (CL:AND (CL:<= 1 (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER))
        (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER) 31))
       TRUE-WRAPPER FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM DAY FALSE-WRAPPER))))

;;; (DEFUN (YEAR BOOLEAN-WRAPPER) ...)

(CL:DEFUN YEAR (NUMBER)
  (CL:COND
   ((SUBTYPE-OF-INTEGER? (SAFE-PRIMARY-TYPE NUMBER))
    (CL:PROGN
     (CL:RETURN-FROM YEAR
      (CL:IF
       (CL:OR (CL:<= -4713 (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER))
        (CL:<= (%INTEGER-WRAPPER.WRAPPER-VALUE NUMBER) 5000))
       TRUE-WRAPPER FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM YEAR FALSE-WRAPPER))))

;;; (DEFUN (TIME-DIVIDER BOOLEAN-WRAPPER) ...)

(CL:DEFUN TIME-DIVIDER (THECHARACTER)
  (CL:COND
   ((SUBTYPE-OF-CHARACTER? (SAFE-PRIMARY-TYPE THECHARACTER))
    (CL:PROGN
     (CL:RETURN-FROM TIME-DIVIDER
      (CL:IF (MEMBER? TIME-DIVIDERS THECHARACTER) TRUE-WRAPPER
       FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM TIME-DIVIDER FALSE-WRAPPER))))

;;; (DEFUN (DATE-DIVIDER BOOLEAN-WRAPPER) ...)

(CL:DEFUN DATE-DIVIDER (THECHARACTER)
  (CL:COND
   ((SUBTYPE-OF-CHARACTER? (SAFE-PRIMARY-TYPE THECHARACTER))
    (CL:PROGN
     (CL:RETURN-FROM DATE-DIVIDER
      (CL:IF (MEMBER? DATE-DIVIDERS THECHARACTER) TRUE-WRAPPER
       FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM DATE-DIVIDER FALSE-WRAPPER))))

;;; (DEFUN (DATE-TIME-DIVIDER BOOLEAN-WRAPPER) ...)

(CL:DEFUN DATE-TIME-DIVIDER (THECHARACTER)
  (CL:COND
   ((SUBTYPE-OF-CHARACTER? (SAFE-PRIMARY-TYPE THECHARACTER))
    (CL:PROGN
     (CL:RETURN-FROM DATE-TIME-DIVIDER
      (CL:IF (MEMBER? DATE-TIME-DIVIDERS THECHARACTER) TRUE-WRAPPER
       FALSE-WRAPPER))))
   (CL:T (CL:RETURN-FROM DATE-TIME-DIVIDER FALSE-WRAPPER))))

;;; (DEFUN (MATCH-SUBSTRING CONS) ...)

(CL:DEFUN MATCH-SUBSTRING (SUBSTRING PARSING-TIME?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SUBSTRING))
  #+MCL
  (CL:CHECK-TYPE SUBSTRING CL:SIMPLE-STRING)
  (CL:LET* ((TESTSTRING (STRING-DOWNCASE SUBSTRING)) (TEST-VALUE NULL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TESTSTRING))
   (CL:WHEN
    (CL:AND (CL:NOT PARSING-TIME?)
     (CL:= (CL:THE CL:FIXNUM (CL:LENGTH SUBSTRING)) 1)
     (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN
      (CL:SETQ TEST-VALUE
       (DATE-TIME-DIVIDER
        (WRAP-CHARACTER
         (CL:LET ((SELF SUBSTRING) (POSITION 0))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
           (CL:TYPE CL:FIXNUM POSITION))
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))))))))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER
      TEST-VALUE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (CL:SETQ TEST-VALUE (MONTH (WRAP-STRING TESTSTRING)))
      NULL))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-MONTH TEST-VALUE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (CL:SETQ TEST-VALUE (WEEKDAY (WRAP-STRING TESTSTRING)))
      NULL))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-WEEKDAY TEST-VALUE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (CL:SETQ TEST-VALUE (AM-PM (WRAP-STRING TESTSTRING)))
      NULL))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-AM-PM TEST-VALUE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (CL:SETQ TEST-VALUE (NOON-MIDN (WRAP-STRING TESTSTRING)))
      NULL))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN TEST-VALUE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (CL:SETQ TEST-VALUE (ZONE (WRAP-STRING TESTSTRING))) NULL))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-ZONE TEST-VALUE)))
   (CL:WHEN
    (CL:NOT
     (CL:EQ (CL:SETQ TEST-VALUE (SPECIALP (WRAP-STRING TESTSTRING)))
      NULL))
    (CL:RETURN-FROM MATCH-SUBSTRING
     (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-SPECIAL TEST-VALUE)))
   (CL:IF *ERROR-ON-MISMATCH*
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "\"~A\" is not a recognized word or abbreviation.`" SUBSTRING
      "'")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))
    (CL:RETURN-FROM MATCH-SUBSTRING NIL))))

;;; (DEFUN (DIGIT-VALUE INTEGER) ...)

(CL:DECLAIM (CL:FTYPE (CL:FUNCTION (CL:T) CL:FIXNUM) DIGIT-VALUE))
(CL:DEFUN DIGIT-VALUE (CHAR)
  (CL:RETURN-FROM DIGIT-VALUE
   (CL:- (CL:THE CL:FIXNUM (CL:CHAR-CODE CHAR))
    (CL:THE CL:FIXNUM (CL:CHAR-CODE #\0)))))

;;; (DEFUN (DECOMPOSE-DATE-TIME-STRING CONS) ...)

(CL:DEFUN DECOMPOSE-DATE-TIME-STRING (STRING START END)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING)
   (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:LET*
   ((STRING-INDEX START) (NEXT-NEGATIVE? CL:NIL) (PARSING-TIME? CL:NIL)
    (PARTS-LIST NIL) (NEXT-CHAR NULL-CHARACTER)
    (PREV-CHAR NULL-CHARACTER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM STRING-INDEX))
   (CL:WHEN (CL:= END NULL-INTEGER)
    (CL:SETQ END (CL:THE CL:FIXNUM (CL:LENGTH STRING))))
   (CL:LOOP WHILE (CL:< STRING-INDEX END) DO
    (CL:SETQ NEXT-CHAR
     (CL:LET ((SELF STRING) (POSITION STRING-INDEX))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION))))
    (CL:SETQ PREV-CHAR
     (CL:IF (CL:= STRING-INDEX START) NULL-CHARACTER
      (CL:LET ((SELF STRING) (POSITION (CL:1- STRING-INDEX)))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION)))))
    (CL:COND
     ((CL:EQ
       (CL:AREF *CHARACTER-TYPE-TABLE*
        (CL:THE CL:FIXNUM (CL:CHAR-CODE NEXT-CHAR)))
       KWD-DATE-TIME-PARSER-LETTER)
      (CL:SETQ PARSING-TIME? CL:NIL)
      (CL:LET*
       ((SCAN-INDEX NULL-INTEGER) (ITER-000 (CL:1+ STRING-INDEX)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM SCAN-INDEX ITER-000))
       (CL:LOOP WHILE CL:T DO (CL:SETQ SCAN-INDEX ITER-000)
        (CL:WHEN
         (CL:OR (CL:= SCAN-INDEX END)
          (CL:NOT
           (CL:EQ
            (CL:AREF *CHARACTER-TYPE-TABLE*
             (CL:THE CL:FIXNUM
              (CL:CHAR-CODE
               (CL:LET ((SELF STRING) (POSITION SCAN-INDEX))
                (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                 (CL:TYPE CL:FIXNUM POSITION))
                (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                 (CL:THE CL:FIXNUM POSITION))))))
            KWD-DATE-TIME-PARSER-LETTER)))
         (CL:LET*
          ((MATCH-SYMBOL
            (MATCH-SUBSTRING
             (SUBSEQUENCE STRING STRING-INDEX SCAN-INDEX)
             PARSING-TIME?)))
          (CL:IF (CL:EQ MATCH-SYMBOL NIL)
           (CL:RETURN-FROM DECOMPOSE-DATE-TIME-STRING NIL)
           (CL:SETQ PARTS-LIST (CONS MATCH-SYMBOL PARTS-LIST))))
         (CL:SETQ STRING-INDEX SCAN-INDEX) (CL:RETURN))
        (CL:SETQ ITER-000 (CL:1+ ITER-000)))))
     ((CL:EQ
       (CL:AREF *CHARACTER-TYPE-TABLE*
        (CL:THE CL:FIXNUM (CL:CHAR-CODE NEXT-CHAR)))
       KWD-DATE-TIME-PARSER-DIGIT)
      (CL:LET*
       ((NUMERIC-VALUE (DIGIT-VALUE NEXT-CHAR)) (FRACTIONAL-VALUE 0)
        (FRACTIONAL-DIVISOR 1.0d0) (IN-FRACTION? CL:NIL))
       (CL:DECLARE (CL:TYPE CL:FIXNUM NUMERIC-VALUE FRACTIONAL-VALUE)
        (CL:TYPE CL:DOUBLE-FLOAT FRACTIONAL-DIVISOR))
       (CL:LET*
        ((SCAN-INDEX NULL-INTEGER) (ITER-001 (CL:1+ STRING-INDEX)))
        (CL:DECLARE (CL:TYPE CL:FIXNUM SCAN-INDEX ITER-001))
        (CL:LOOP WHILE CL:T DO (CL:SETQ SCAN-INDEX ITER-001)
         (CL:WHEN
          (CL:OR (CL:= SCAN-INDEX END)
           (CL:NOT
            (CL:OR
             (CL:EQ
              (CL:AREF *CHARACTER-TYPE-TABLE*
               (CL:THE CL:FIXNUM
                (CL:CHAR-CODE
                 (CL:LET ((SELF STRING) (POSITION SCAN-INDEX))
                  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                   (CL:TYPE CL:FIXNUM POSITION))
                  (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                   (CL:THE CL:FIXNUM POSITION))))))
              KWD-DATE-TIME-PARSER-DIGIT)
             (CL:AND (CL:NOT IN-FRACTION?)
              (CL:EQL
               (CL:LET ((SELF STRING) (POSITION SCAN-INDEX))
                (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                 (CL:TYPE CL:FIXNUM POSITION))
                (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                 (CL:THE CL:FIXNUM POSITION)))
               #\.)))))
          (CL:WHEN NEXT-NEGATIVE? (CL:SETQ NEXT-NEGATIVE? CL:NIL)
           (CL:SETQ NUMERIC-VALUE (CL:- 0 NUMERIC-VALUE))
           (CL:SETQ FRACTIONAL-VALUE (CL:- 0 FRACTIONAL-VALUE)))
          (CL:IF IN-FRACTION?
           (CL:SETQ PARTS-LIST
            (CONS
             (WRAP-FLOAT
              (CL:+ NUMERIC-VALUE
               (CL:/ FRACTIONAL-VALUE FRACTIONAL-DIVISOR)))
             PARTS-LIST))
           (CL:SETQ PARTS-LIST
            (CONS (WRAP-INTEGER NUMERIC-VALUE) PARTS-LIST)))
          (CL:SETQ STRING-INDEX SCAN-INDEX) (CL:RETURN))
         (CL:COND
          (IN-FRACTION?
           (CL:SETQ FRACTIONAL-VALUE
            (CL:+ (CL:* FRACTIONAL-VALUE 10)
             (DIGIT-VALUE
              (CL:LET ((SELF STRING) (POSITION SCAN-INDEX))
               (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                (CL:TYPE CL:FIXNUM POSITION))
               (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                (CL:THE CL:FIXNUM POSITION))))))
           (CL:SETQ FRACTIONAL-DIVISOR
            (CL:* FRACTIONAL-DIVISOR 10.0d0)))
          ((CL:EQL
            (CL:LET ((SELF STRING) (POSITION SCAN-INDEX))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))
            #\.)
           (CL:SETQ IN-FRACTION? CL:T))
          (CL:T
           (CL:SETQ NUMERIC-VALUE
            (CL:+ (CL:* NUMERIC-VALUE 10)
             (DIGIT-VALUE
              (CL:LET ((SELF STRING) (POSITION SCAN-INDEX))
               (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                (CL:TYPE CL:FIXNUM POSITION))
               (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                (CL:THE CL:FIXNUM POSITION))))))))
         (CL:SETQ ITER-001 (CL:1+ ITER-001))))))
     ((CL:AND (CL:EQL NEXT-CHAR #\-)
       (CL:OR (NULL? PREV-CHAR)
        (MEMBER? WHITESPACE-CHARS (WRAP-CHARACTER PREV-CHAR))
        (MEMBER? DATE-DIVIDERS (WRAP-CHARACTER PREV-CHAR))
        (CL:AND PARSING-TIME?
         (CL:EQ
          (CL:AREF *CHARACTER-TYPE-TABLE*
           (CL:THE CL:FIXNUM (CL:CHAR-CODE PREV-CHAR)))
          KWD-DATE-TIME-PARSER-DIGIT))))
      (CL:SETQ NEXT-NEGATIVE? CL:T)
      (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX)))
     ((MEMBER? TIME-DIVIDERS (WRAP-CHARACTER NEXT-CHAR))
      (CL:SETQ PARTS-LIST
       (CONS
        (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER
         (WRAP-CHARACTER NEXT-CHAR))
        PARTS-LIST))
      (CL:SETQ PARSING-TIME? CL:T)
      (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX)))
     ((MEMBER? DATE-DIVIDERS (WRAP-CHARACTER NEXT-CHAR))
      (CL:SETQ PARTS-LIST
       (CONS
        (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER
         (WRAP-CHARACTER NEXT-CHAR))
        PARTS-LIST))
      (CL:SETQ PARSING-TIME? CL:NIL)
      (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX)))
     ((MEMBER? DATE-TIME-DIVIDERS (WRAP-CHARACTER NEXT-CHAR))
      (CL:SETQ PARTS-LIST
       (CONS
        (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER
         (WRAP-CHARACTER NEXT-CHAR))
        PARTS-LIST))
      (CL:SETQ PARSING-TIME? CL:T)
      (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX)))
     ((MEMBER? WHITESPACE-CHARS (WRAP-CHARACTER NEXT-CHAR))
      (CL:SETQ PARSING-TIME? CL:NIL)
      (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX)))
     ((CL:EQL NEXT-CHAR #\+)
      (CL:SETQ PARTS-LIST
       (CONS
        (CONS-LIST SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER
         (WRAP-CHARACTER NEXT-CHAR))
        PARTS-LIST))
      (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX)))
     ((CL:EQL NEXT-CHAR #\()
      (CL:LOOP WHILE
       (CL:AND (CL:NOT (CL:= STRING-INDEX END))
        (CL:NOT
         (CL:EQL
          (CL:LET ((SELF STRING) (POSITION STRING-INDEX))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
            (CL:THE CL:FIXNUM POSITION)))
          #\))))
       DO (CL:SETQ PARSING-TIME? CL:NIL)
       (CL:SETQ STRING-INDEX (CL:1+ STRING-INDEX))))
     (CL:T
      (CL:IF *ERROR-ON-MISMATCH*
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM
         (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
         ">>> Bogus character at position `" STRING-INDEX "' in \"`"
         STRING "'\"")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))
       (CL:RETURN-FROM DECOMPOSE-DATE-TIME-STRING NIL)))))
   (CL:RETURN-FROM DECOMPOSE-DATE-TIME-STRING (REVERSE PARTS-LIST))))

;;; (DEFUN (MATCH-PATTERN-ELEMENT CONS) ...)

(CL:DEFUN MATCH-PATTERN-ELEMENT (PATTERN-ELEMENT DATUM-ELEMENT)
  (CL:COND
   ((ISA? DATUM-ELEMENT SGT-DATE-TIME-PARSER-STELLA-CONS)
    (CL:LET*
     ((DATUM-TYPE
       (CL:IF
        (CL:EQ (%%VALUE DATUM-ELEMENT)
         SYM-DATE-TIME-PARSER-STELLA-SPECIAL)
        (%%VALUE (%%REST DATUM-ELEMENT)) (%%VALUE DATUM-ELEMENT))))
     (CL:IF (CL:EQ DATUM-TYPE PATTERN-ELEMENT)
      (CL:RETURN-FROM MATCH-PATTERN-ELEMENT DATUM-ELEMENT)
      (CL:RETURN-FROM MATCH-PATTERN-ELEMENT NIL))))
   ((MEMBER? *SPECIAL-SYMBOLS* PATTERN-ELEMENT)
    (CL:RETURN-FROM MATCH-PATTERN-ELEMENT NIL))
   (CL:T
    (CL:LET*
     ((FUNCTION
       (%METHOD-SLOT.FUNCTION-CODE (LOOKUP-FUNCTION PATTERN-ELEMENT)))
      (MATCH (CL:FUNCALL FUNCTION DATUM-ELEMENT)))
     (CL:COND
      ((SUBTYPE-OF-BOOLEAN? (SAFE-PRIMARY-TYPE MATCH))
       (CL:PROGN
        (CL:IF (COERCE-WRAPPED-BOOLEAN-TO-BOOLEAN MATCH)
         (CL:RETURN-FROM MATCH-PATTERN-ELEMENT
          (CONS-LIST PATTERN-ELEMENT DATUM-ELEMENT))
         (CL:RETURN-FROM MATCH-PATTERN-ELEMENT NIL))))
      (CL:T
       (CL:IF (CL:NOT (CL:EQ MATCH NULL))
        (CL:RETURN-FROM MATCH-PATTERN-ELEMENT
         (CONS-LIST PATTERN-ELEMENT MATCH))
        (CL:RETURN-FROM MATCH-PATTERN-ELEMENT NIL))))))))

;;; (DEFUN (MATCH-PATTERN CONS) ...)

(CL:DEFUN MATCH-PATTERN (PATTERN DATUM DATUM-LENGTH)
  (CL:DECLARE (CL:TYPE CL:FIXNUM DATUM-LENGTH))
  #+MCL
  (CL:CHECK-TYPE DATUM-LENGTH CL:FIXNUM)
  (CL:IF (CL:< (LENGTH PATTERN) DATUM-LENGTH)
   (CL:RETURN-FROM MATCH-PATTERN NIL)
   (CL:LET*
    ((FORM-LIST NIL) (PATTERN-CURSOR PATTERN) (DATUM-CURSOR DATUM)
     (PATTERN-ELEMENT NULL) (DATUM-ELEMENT NULL) (OPTIONAL? CL:NIL)
     (MATCHING NIL))
    (CL:LOOP WHILE
     (CL:NOT
      (CL:OR (CL:EQ PATTERN-CURSOR NIL) (CL:EQ DATUM-CURSOR NIL)))
     DO (CL:SETQ PATTERN-ELEMENT (%%VALUE PATTERN-CURSOR))
     (CL:SETQ DATUM-ELEMENT (%%VALUE DATUM-CURSOR))
     (CL:SETQ OPTIONAL?
      (ISA? PATTERN-ELEMENT SGT-DATE-TIME-PARSER-STELLA-CONS))
     (CL:SETQ MATCHING
      (MATCH-PATTERN-ELEMENT
       (CL:IF OPTIONAL? (%%VALUE PATTERN-ELEMENT) PATTERN-ELEMENT)
       DATUM-ELEMENT))
     (CL:COND
      ((CL:NOT (CL:EQ MATCHING NIL))
       (CL:LET* ((FORM-TYPE (%%VALUE MATCHING)))
        (CL:WHEN
         (CL:NOT
          (CL:OR
           (CL:EQ FORM-TYPE SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER)
           (CL:EQ FORM-TYPE SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER)
           (CL:EQ FORM-TYPE
            SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER)))
         (CL:SETQ FORM-LIST (CONS MATCHING FORM-LIST)))))
      (OPTIONAL?
       (CL:SETQ DATUM-CURSOR (CONS DATUM-ELEMENT DATUM-CURSOR)))
      (CL:T (CL:RETURN-FROM MATCH-PATTERN NIL)))
     (CL:SETQ PATTERN-CURSOR (%%REST PATTERN-CURSOR))
     (CL:SETQ DATUM-CURSOR (%%REST DATUM-CURSOR)))
    (CL:COND
     ((CL:AND (CL:EQ PATTERN-CURSOR NIL) (CL:EQ DATUM-CURSOR NIL))
      (CL:RETURN-FROM MATCH-PATTERN (REVERSE FORM-LIST)))
     ((CL:EQ PATTERN-CURSOR NIL) (CL:RETURN-FROM MATCH-PATTERN NIL))
     ((CL:EQ DATUM-CURSOR NIL)
      (CL:LET* ((ELEMENT NULL) (ITER-000 PATTERN-CURSOR))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ ELEMENT (%%VALUE ITER-000))
        (CL:WHEN
         (CL:NOT (ISA? ELEMENT SGT-DATE-TIME-PARSER-STELLA-CONS))
         (CL:RETURN-FROM MATCH-PATTERN NIL))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (CL:RETURN-FROM MATCH-PATTERN (REVERSE FORM-LIST)))
     (CL:T (CL:ERROR (NEW-STELLA-EXCEPTION "Shouldn't get here!")))))))

;;; (DEFUN DEAL-WITH-NOON-MIDN ...)

(CL:DEFUN DEAL-WITH-NOON-MIDN (FORM-VALUE PARSED-VALUES)
  (CL:COND
   ((CL:EQ FORM-VALUE SYM-DATE-TIME-PARSER-STELLA-NOON)
    (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES) 12))
   ((CL:EQ FORM-VALUE SYM-DATE-TIME-PARSER-STELLA-MIDN)
    (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES) 0))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Unrecognized symbol: ~A`" FORM-VALUE "'")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE PARSED-VALUES) 0)
  (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND PARSED-VALUES) 0)
  :VOID)

;;; (DEFUN DEAL-WITH-AM-PM ...)

(CL:DEFUN DEAL-WITH-AM-PM (FORM-VALUE PARSED-VALUES)
  (CL:LET* ((HOUR (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR))
   (CL:COND
    ((CL:EQ FORM-VALUE SYM-DATE-TIME-PARSER-STELLA-AM)
     (CL:COND
      ((CL:= HOUR 12)
       (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES) 0))
      ((CL:NOT (CL:AND (CL:<= 0 HOUR) (CL:<= HOUR 12)))
       (CL:WHEN *ERROR-ON-MISMATCH*
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`" HOUR
          "' is not an AM hour.")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
    ((CL:EQ FORM-VALUE SYM-DATE-TIME-PARSER-STELLA-PM)
     (CL:WHEN (CL:AND (CL:<= 0 HOUR) (CL:<= HOUR 11))
      (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES)
       (CL:+ HOUR 12))))
    (CL:T
     (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
       "`" FORM-VALUE "'isn't AM/PM - this shouldn't happen.")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))
  :VOID)

;;; (DEFUN DEAL-WITH-ERA ...)

(CL:DEFUN DEAL-WITH-ERA (FORM-VALUE PARSED-VALUES)
  (CL:IF (CL:EQ FORM-VALUE SYM-DATE-TIME-PARSER-STELLA-BCE)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
    (CL:- 0 (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)))
   (CL:WHEN (CL:NOT (CL:EQ FORM-VALUE SYM-DATE-TIME-PARSER-STELLA-CE))
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" FORM-VALUE "'isn't BCE/CE - this shouldn't happen.")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  :VOID)

;;; (DEFUN SET-TIME-VALUES ...)

(CL:DEFUN SET-TIME-VALUES (STRING-FORM PARSED-VALUES DEFAULT-VALUES)
  (CL:LET* ((FORM-TYPE NULL) (FORM-VALUE NULL))
   (CL:LET* ((FORM-PART NULL) (ITER-000 STRING-FORM))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ FORM-PART (%%VALUE ITER-000))
     (CL:SETQ FORM-TYPE (%%VALUE FORM-PART))
     (CL:SETQ FORM-VALUE (%%VALUE (%%REST FORM-PART)))
     (CL:LET* ((TEST-VALUE-000 FORM-TYPE))
      (CL:COND
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-SECONDP)
        (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE FORM-VALUE)))
         (CL:COND
          ((SUBTYPE-OF-INTEGER? TEST-VALUE-001)
           (CL:PROGN
            (CL:SETF
             (%DECODED-DATE-TIME.DATE-TIME-SECOND PARSED-VALUES)
             (%INTEGER-WRAPPER.WRAPPER-VALUE FORM-VALUE))))
          ((SUBTYPE-OF-FLOAT? TEST-VALUE-001)
           (CL:PROGN
            (CL:SETF
             (%DECODED-DATE-TIME.DATE-TIME-SECOND PARSED-VALUES)
             (FLOOR (%FLOAT-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
            (CL:SETF
             (%DECODED-DATE-TIME.DATE-TIME-MILLIS PARSED-VALUES)
             (CL:* 1000.0d0
              (CL:- (%FLOAT-WRAPPER.WRAPPER-VALUE FORM-VALUE)
               (FLOOR (%FLOAT-WRAPPER.WRAPPER-VALUE FORM-VALUE)))))))
          (CL:T
           (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
            (%%PRINT-STREAM
             (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
             TEST-VALUE-001 "' is not a valid case option")
            (CL:ERROR
             (NEW-STELLA-EXCEPTION
              (THE-STRING-READER STREAM-000))))))))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-MINUTE)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE PARSED-VALUES)
         (%INTEGER-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-HOUR)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR PARSED-VALUES)
         (%INTEGER-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-DAY)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY PARSED-VALUES)
         (%INTEGER-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-MONTH)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH PARSED-VALUES)
         (%INTEGER-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-YEAR)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR PARSED-VALUES)
         (%INTEGER-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-ZONE)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
         (%FLOAT-WRAPPER.WRAPPER-VALUE FORM-VALUE)))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE)
        (CL:IF
         (CL:> (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES) 0)
         (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
          (CL:+ (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
           (CL:/ (NUMBER-WRAPPER-TO-FLOAT FORM-VALUE) 60.0d0)))
         (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
          (CL:+ (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
           (CL:/ (NUMBER-WRAPPER-TO-FLOAT FORM-VALUE) -60.0d0)))))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-WEEKDAY)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW PARSED-VALUES)
         FORM-VALUE))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-AM-PM)
        (DEAL-WITH-AM-PM FORM-VALUE PARSED-VALUES))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-ERA)
        (DEAL-WITH-ERA FORM-VALUE PARSED-VALUES))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN)
        (DEAL-WITH-NOON-MIDN FORM-VALUE PARSED-VALUES))
       ((CL:EQ TEST-VALUE-000 SYM-DATE-TIME-PARSER-STELLA-SPECIAL)
        (CL:FUNCALL
         (%METHOD-SLOT.FUNCTION-CODE (LOOKUP-FUNCTION FORM-VALUE))
         PARSED-VALUES DEFAULT-VALUES))
       (CL:T
        (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
          "Unrecognized symbol in form list: ~A.`" FORM-TYPE "'")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  :VOID)

;;; (DEFUN (MATCH-DATE-TIME-PATTERNS CONS) ...)

(CL:DEFUN MATCH-DATE-TIME-PATTERNS (DATE-TIME-STRING START END ERROR-ON-MISMATCH?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DATE-TIME-STRING)
   (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE DATE-TIME-STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:LET* ((*ERROR-ON-MISMATCH* ERROR-ON-MISMATCH?))
   (CL:DECLARE (CL:SPECIAL *ERROR-ON-MISMATCH*))
   (CL:LET*
    ((STRING-PARTS
      (DECOMPOSE-DATE-TIME-STRING DATE-TIME-STRING START END))
     (PARTS-LENGTH (LENGTH STRING-PARTS)) (STRING-FORM NIL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM PARTS-LENGTH))
    (CL:LET* ((PATTERN NULL) (ITER-000 *DATE-TIME-PATTERNS*))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ PATTERN (%%VALUE ITER-000))
      (CL:SETQ STRING-FORM
       (MATCH-PATTERN PATTERN STRING-PARTS PARTS-LENGTH))
      (CL:WHEN (CL:NOT (CL:EQ STRING-FORM NIL)) (CL:RETURN))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:IF (CL:EQ STRING-FORM NIL)
     (CL:IF ERROR-ON-MISMATCH?
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "\"`" DATE-TIME-STRING
        "'\" is not a recognized time/date format.")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))
      (CL:RETURN-FROM MATCH-DATE-TIME-PATTERNS NULL))
     (CL:RETURN-FROM MATCH-DATE-TIME-PATTERNS STRING-FORM)))))

;;; (DEFUN (HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE DECODED-DATE-TIME) ...)

(CL:DEFUN HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE (DATE-TIME-STRING BASE-DATE-TIME START END ERROR-ON-MISMATCH? MERGE-NULL-FIELDS?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DATE-TIME-STRING)
   (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE DATE-TIME-STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:LET* ((*ERROR-ON-MISMATCH* ERROR-ON-MISMATCH?))
   (CL:DECLARE (CL:SPECIAL *ERROR-ON-MISMATCH*))
   (CL:LET*
    ((STRING-FORM
      (MATCH-DATE-TIME-PATTERNS DATE-TIME-STRING START END
       ERROR-ON-MISMATCH?)))
    (CL:LET* ((SELF-000 (NEW-DECODED-DATE-TIME)))
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF-000)
      NULL-FLOAT)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF-000)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF-000)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF-000)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY SELF-000) NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF-000)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF-000)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF-000) NULL-FLOAT)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW SELF-000) NULL)
     (CL:LET* ((PARSED-VALUES SELF-000))
      (CL:WHEN (CL:EQ STRING-FORM NULL)
       (CL:RETURN-FROM HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE NULL))
      (SET-TIME-VALUES STRING-FORM PARSED-VALUES BASE-DATE-TIME)
      (CL:WHEN
       (CL:= (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
        NULL-FLOAT)
       (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
        (%DECODED-DATE-TIME.DATE-TIME-ZONE BASE-DATE-TIME))
       (CL:WHEN
        (CL:= (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
         NULL-FLOAT)
        (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE PARSED-VALUES)
         (GET-LOCAL-TIME-ZONE-FOR-DATE
          (%DECODED-DATE-TIME.DATE-TIME-YEAR BASE-DATE-TIME)
          (%DECODED-DATE-TIME.DATE-TIME-MONTH BASE-DATE-TIME)
          (%DECODED-DATE-TIME.DATE-TIME-DAY BASE-DATE-TIME)
          (%DECODED-DATE-TIME.DATE-TIME-HOUR BASE-DATE-TIME)
          (%DECODED-DATE-TIME.DATE-TIME-MINUTE BASE-DATE-TIME)
          (%DECODED-DATE-TIME.DATE-TIME-SECOND BASE-DATE-TIME)))))
      (CL:WHEN MERGE-NULL-FIELDS?
       (MERGE-NULL-FIELDS PARSED-VALUES BASE-DATE-TIME))
      (CL:RETURN-FROM HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE
       PARSED-VALUES))))))

;;; (DEFUN (PARSE-DATE-TIME-RELATIVE-TO-BASE DECODED-DATE-TIME) ...)

(CL:DEFUN PARSE-DATE-TIME-RELATIVE-TO-BASE (DATE-TIME-STRING BASE-DATE-TIME START END ERROR-ON-MISMATCH? MERGE-NULL-FIELDS?)
  "Tries very hard to make sense out of the argument `date-time-string' and
returns a time structure if successful.  If not, it returns `null'.
If `error-on-mismatch?' is true, parse-date-time will signal an error instead of
returning `null'.
Default values are passed in via `base-date-time'.  If the timezone field that
is passed in is NULL, then the local time zone for the parsed date/time will
be used.
If `merge-null-fields?' is `true', then default values from `base-time-date'
will be merged into missing components.  If `false', then they won't be merged
in for null components but can still be used as a basis for interpreatation of
relative time strings like \"now\" or \"yesterday\""
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DATE-TIME-STRING)
   (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE DATE-TIME-STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:RETURN-FROM PARSE-DATE-TIME-RELATIVE-TO-BASE
   (HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE DATE-TIME-STRING
    BASE-DATE-TIME START END ERROR-ON-MISMATCH? MERGE-NULL-FIELDS?)))

;;; (DEFUN (PARSE-DATE-TIME-IN-TIME-ZONE DECODED-DATE-TIME) ...)

(CL:DEFUN PARSE-DATE-TIME-IN-TIME-ZONE (DATE-TIME-STRING TIME-ZONE START END ERROR-ON-MISMATCH?)
  "Tries very hard to make sense out of the argument `date-time-string' and
returns a time structure if successful.  If not, it returns `null'.
If `error-on-mismatch?' is true, parse-date-time will signal an error instead of
returning `null'.  
Default values are 00:00:00 in the given timezone on the current date.  If the
given `time-zone' value is `null', then the local time zone for the given date
and time will be used as determined by the operating system."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DATE-TIME-STRING)
   (CL:TYPE CL:DOUBLE-FLOAT TIME-ZONE) (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE DATE-TIME-STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE TIME-ZONE CL:DOUBLE-FLOAT)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:LET*
   ((DEFAULT-VALUES
     (DECODE-CALENDAR-DATE (MAKE-CURRENT-DATE-TIME)
      (CL:IF (CL:= TIME-ZONE NULL-FLOAT) (GET-LOCAL-TIME-ZONE)
       TIME-ZONE))))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS DEFAULT-VALUES) 0.0d0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND DEFAULT-VALUES) 0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE DEFAULT-VALUES) 0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR DEFAULT-VALUES) 0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE DEFAULT-VALUES)
    TIME-ZONE)
   (CL:RETURN-FROM PARSE-DATE-TIME-IN-TIME-ZONE
    (HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE DATE-TIME-STRING
     DEFAULT-VALUES START END ERROR-ON-MISMATCH? CL:T))))

;;; (DEFUN (PARSE-DATE-TIME DECODED-DATE-TIME) ...)

(CL:DEFUN PARSE-DATE-TIME (DATE-TIME-STRING START END ERROR-ON-MISMATCH?)
  "Tries very hard to make sense out of the argument `date-time-string' and
returns a time structure if successful.  If not, it returns `null'.
If `error-on-mismatch?' is true, parse-date-time will signal an error instead of
returning `null'.  
Default values are 00:00:00 local time on the current date"
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DATE-TIME-STRING)
   (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE DATE-TIME-STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:RETURN-FROM PARSE-DATE-TIME
   (PARSE-DATE-TIME-IN-TIME-ZONE DATE-TIME-STRING NULL-FLOAT START END
    ERROR-ON-MISMATCH?)))

;;; (DEFUN (STRING-TO-DECODED-DATE-TIME DECODED-DATE-TIME) ...)

(CL:DEFUN STRING-TO-DECODED-DATE-TIME (INPUT)
  "Returns a decoded date-time object representing the date
and time parsed from the `input' string.  If no valid parse is found,
`null' is returned."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INPUT))
  #+MCL
  (CL:CHECK-TYPE INPUT CL:SIMPLE-STRING)
  (CL:RETURN-FROM STRING-TO-DECODED-DATE-TIME
   (PARSE-DATE-TIME-IN-TIME-ZONE INPUT NULL-FLOAT 0 NULL-INTEGER
    CL:NIL)))

;;; (DEFUN (STRING-TO-CALENDAR-DATE CALENDAR-DATE) ...)

(CL:DEFUN STRING-TO-CALENDAR-DATE (INPUT)
  "Returns a calendar date object representing the date and time
parsed from the `input' string.  If no valid parse is found,
`null' is returned."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INPUT))
  #+MCL
  (CL:CHECK-TYPE INPUT CL:SIMPLE-STRING)
  (CL:LET*
   ((DATE-TIME
     (PARSE-DATE-TIME-IN-TIME-ZONE INPUT NULL-FLOAT 0 NULL-INTEGER
      CL:NIL)))
   (CL:IF (CL:EQ DATE-TIME NULL)
    (CL:RETURN-FROM STRING-TO-CALENDAR-DATE NULL)
    (CL:RETURN-FROM STRING-TO-CALENDAR-DATE
     (ENCODE-CALENDAR-DATE DATE-TIME)))))

;;; (DEFUN (STRING-TO-CALENDAR-DATE-WITH-DEFAULT CALENDAR-DATE) ...)

(CL:DEFUN STRING-TO-CALENDAR-DATE-WITH-DEFAULT (INPUT-DATE DEFAULT-DATE)
  "Returns a calendar date object representing the date and time
parsed from the `input-date' string.  Default values for missing fields and
the interpretation of relative references come from `default-date'.  If the
`default-date' is `null', the current date will be used.  If a null set of
defaults is desired, use `*NULL-DECODED-DATE-TIME*'.
If no valid parse is found, `null' is returned."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INPUT-DATE))
  #+MCL
  (CL:CHECK-TYPE INPUT-DATE CL:SIMPLE-STRING)
  (CL:IF (CL:EQ DEFAULT-DATE NULL)
   (CL:RETURN-FROM STRING-TO-CALENDAR-DATE-WITH-DEFAULT
    (STRING-TO-CALENDAR-DATE INPUT-DATE))
   (CL:LET*
    ((DATE-TIME
      (PARSE-DATE-TIME-RELATIVE-TO-BASE INPUT-DATE DEFAULT-DATE 0
       NULL-INTEGER CL:NIL CL:T)))
    (CL:IF (CL:EQ DATE-TIME NULL)
     (CL:RETURN-FROM STRING-TO-CALENDAR-DATE-WITH-DEFAULT NULL)
     (CL:RETURN-FROM STRING-TO-CALENDAR-DATE-WITH-DEFAULT
      (ENCODE-CALENDAR-DATE DATE-TIME))))))

(CL:DEFUN HELP-STARTUP-DATE-TIME-PARSER1 ()
  (CL:PROGN
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FOREACH" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-ITEM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ITEM" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-IN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IN" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-OF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OF" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-DO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DO" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-INSERT-AT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INSERT-AT" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-FIRST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FIRST" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-SECOND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SECOND" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-YESTERDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "YESTERDAY" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-TODAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TODAY" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-TOMORROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TOMORROW" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-NOW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOW" NULL 0))
   (CL:SETQ KWD-DATE-TIME-PARSER-MONDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MONDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-TUESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TUESDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-WEDNESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WEDNESDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-THURSDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THURSDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-FRIDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRIDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-SATURDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SATURDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-SUNDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUNDAY" NULL 2))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-BCE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BCE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-CE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-YEAR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "YEAR" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-DIVIDER" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-MONTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MONTH" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-DAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DAY" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOON-MIDN" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-WEEKDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WEEKDAY" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-DIVIDER" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-HOUR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "HOUR" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-DIVIDER" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-MINUTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MINUTE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-SECONDP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SECONDP" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-AM-PM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AM-PM" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-ZONE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ZONE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ZONE-MINUTE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-AM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AM" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-PM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PM" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-NOON
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOON" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-MIDN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MIDN" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
   (CL:SETQ KWD-DATE-TIME-PARSER-LETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LETTER" NULL 2))
   (CL:SETQ KWD-DATE-TIME-PARSER-DIGIT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DIGIT" NULL 2))
   (CL:SETQ SGT-DATE-TIME-PARSER-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-ERA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERA" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-STARTUP-DATE-TIME-PARSER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-DATE-TIME-PARSER" NULL 0))
   (CL:SETQ SYM-DATE-TIME-PARSER-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-DATE-TIME-PARSER2 ()
  (CL:PROGN
   (CL:SETQ WHITESPACE-CHARS
    (LIST* (WRAP-CHARACTER #\ ) (WRAP-CHARACTER #\Tab)
     (WRAP-CHARACTER #\Linefeed) (WRAP-CHARACTER #\Return)
     (WRAP-CHARACTER #\Page) (WRAP-CHARACTER #\,) (WRAP-CHARACTER #\')
     (WRAP-CHARACTER #\`) NIL))
   (CL:SETQ TIME-DIVIDERS
    (LIST* (WRAP-CHARACTER #\:) (WRAP-CHARACTER #\.) NIL))
   (CL:SETQ DATE-DIVIDERS
    (LIST* (WRAP-CHARACTER #\\) (WRAP-CHARACTER #\/)
     (WRAP-CHARACTER #\-) (WRAP-CHARACTER #\+) NIL))
   (CL:SETQ DATE-TIME-DIVIDERS (CONS (WRAP-CHARACTER #\T) NIL))
   (CL:SETQ *WEEKDAY-STRINGS* (NEW-STRING-HASH-TABLE))
   (CL:SETQ *MONTH-STRINGS* (NEW-STRING-TO-INTEGER-HASH-TABLE))
   (CL:SETQ *ZONE-STRINGS* (NEW-STRING-HASH-TABLE))
   (CL:SETQ *ERA-STRINGS* (NEW-STRING-HASH-TABLE))
   (CL:SETQ *SPECIAL-STRINGS* (NEW-STRING-HASH-TABLE))
   (CL:SETQ *SPECIAL-SYMBOLS*
    (LIST* SYM-DATE-TIME-PARSER-STELLA-YESTERDAY
     SYM-DATE-TIME-PARSER-STELLA-TODAY
     SYM-DATE-TIME-PARSER-STELLA-TOMORROW
     SYM-DATE-TIME-PARSER-STELLA-NOW NIL))
   (CL:LET*
    ((ITEM NULL)
     (ITER-049
      (LIST*
       (LIST* (WRAP-STRING "monday") KWD-DATE-TIME-PARSER-MONDAY NIL)
       (LIST* (WRAP-STRING "mon") KWD-DATE-TIME-PARSER-MONDAY NIL)
       (LIST* (WRAP-STRING "tuesday") KWD-DATE-TIME-PARSER-TUESDAY NIL)
       (LIST* (WRAP-STRING "tues") KWD-DATE-TIME-PARSER-TUESDAY NIL)
       (LIST* (WRAP-STRING "tue") KWD-DATE-TIME-PARSER-TUESDAY NIL)
       (LIST* (WRAP-STRING "wednesday") KWD-DATE-TIME-PARSER-WEDNESDAY
        NIL)
       (LIST* (WRAP-STRING "wednes") KWD-DATE-TIME-PARSER-WEDNESDAY
        NIL)
       (LIST* (WRAP-STRING "wed") KWD-DATE-TIME-PARSER-WEDNESDAY NIL)
       (LIST* (WRAP-STRING "thursday") KWD-DATE-TIME-PARSER-THURSDAY
        NIL)
       (LIST* (WRAP-STRING "thurs") KWD-DATE-TIME-PARSER-THURSDAY NIL)
       (LIST* (WRAP-STRING "thu") KWD-DATE-TIME-PARSER-THURSDAY NIL)
       (LIST* (WRAP-STRING "friday") KWD-DATE-TIME-PARSER-FRIDAY NIL)
       (LIST* (WRAP-STRING "fri") KWD-DATE-TIME-PARSER-FRIDAY NIL)
       (LIST* (WRAP-STRING "saturday") KWD-DATE-TIME-PARSER-SATURDAY
        NIL)
       (LIST* (WRAP-STRING "sat") KWD-DATE-TIME-PARSER-SATURDAY NIL)
       (LIST* (WRAP-STRING "sunday") KWD-DATE-TIME-PARSER-SUNDAY NIL)
       (LIST* (WRAP-STRING "sun") KWD-DATE-TIME-PARSER-SUNDAY NIL)
       NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-049 NIL)) DO
     (CL:SETQ ITEM (%%VALUE ITER-049))
     (INSERT-AT *WEEKDAY-STRINGS*
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE ITEM))
      (%%VALUE (%%REST ITEM)))
     (CL:SETQ ITER-049 (%%REST ITER-049))))
   (CL:LET*
    ((ITEM NULL)
     (ITER-050
      (LIST* (LIST* (WRAP-STRING "january") (WRAP-INTEGER 1) NIL)
       (LIST* (WRAP-STRING "jan") (WRAP-INTEGER 1) NIL)
       (LIST* (WRAP-STRING "february") (WRAP-INTEGER 2) NIL)
       (LIST* (WRAP-STRING "feb") (WRAP-INTEGER 2) NIL)
       (LIST* (WRAP-STRING "march") (WRAP-INTEGER 3) NIL)
       (LIST* (WRAP-STRING "mar") (WRAP-INTEGER 3) NIL)
       (LIST* (WRAP-STRING "april") (WRAP-INTEGER 4) NIL)
       (LIST* (WRAP-STRING "apr") (WRAP-INTEGER 4) NIL)
       (LIST* (WRAP-STRING "may") (WRAP-INTEGER 5) NIL)
       (LIST* (WRAP-STRING "june") (WRAP-INTEGER 6) NIL)
       (LIST* (WRAP-STRING "jun") (WRAP-INTEGER 6) NIL)
       (LIST* (WRAP-STRING "july") (WRAP-INTEGER 7) NIL)
       (LIST* (WRAP-STRING "jul") (WRAP-INTEGER 7) NIL)
       (LIST* (WRAP-STRING "august") (WRAP-INTEGER 8) NIL)
       (LIST* (WRAP-STRING "aug") (WRAP-INTEGER 8) NIL)
       (LIST* (WRAP-STRING "september") (WRAP-INTEGER 9) NIL)
       (LIST* (WRAP-STRING "sept") (WRAP-INTEGER 9) NIL)
       (LIST* (WRAP-STRING "sep") (WRAP-INTEGER 9) NIL)
       (LIST* (WRAP-STRING "october") (WRAP-INTEGER 10) NIL)
       (LIST* (WRAP-STRING "oct") (WRAP-INTEGER 10) NIL)
       (LIST* (WRAP-STRING "november") (WRAP-INTEGER 11) NIL)
       (LIST* (WRAP-STRING "nov") (WRAP-INTEGER 11) NIL)
       (LIST* (WRAP-STRING "december") (WRAP-INTEGER 12) NIL)
       (LIST* (WRAP-STRING "dec") (WRAP-INTEGER 12) NIL) NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-050 NIL)) DO
     (CL:SETQ ITEM (%%VALUE ITER-050))
     (INSERT-AT *MONTH-STRINGS*
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE ITEM))
      (%INTEGER-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST ITEM))))
     (CL:SETQ ITER-050 (%%REST ITER-050))))
   (CL:LET*
    ((ITEM NULL)
     (ITER-051
      (LIST* (LIST* (WRAP-STRING "gmt") (WRAP-FLOAT 0.0d0) NIL)
       (LIST* (WRAP-STRING "utc") (WRAP-FLOAT 0.0d0) NIL)
       (LIST* (WRAP-STRING "zulu") (WRAP-FLOAT 0.0d0) NIL)
       (LIST* (WRAP-STRING "est") (WRAP-FLOAT -5.0d0) NIL)
       (LIST* (WRAP-STRING "edt") (WRAP-FLOAT -4.0d0) NIL)
       (LIST* (WRAP-STRING "cst") (WRAP-FLOAT -6.0d0) NIL)
       (LIST* (WRAP-STRING "cdt") (WRAP-FLOAT -5.0d0) NIL)
       (LIST* (WRAP-STRING "mst") (WRAP-FLOAT -7.0d0) NIL)
       (LIST* (WRAP-STRING "mdt") (WRAP-FLOAT -6.0d0) NIL)
       (LIST* (WRAP-STRING "pst") (WRAP-FLOAT -8.0d0) NIL)
       (LIST* (WRAP-STRING "pdt") (WRAP-FLOAT -7.0d0) NIL)
       (LIST* (WRAP-STRING "a") (WRAP-FLOAT 1.0d0) NIL)
       (LIST* (WRAP-STRING "b") (WRAP-FLOAT 2.0d0) NIL)
       (LIST* (WRAP-STRING "c") (WRAP-FLOAT 3.0d0) NIL)
       (LIST* (WRAP-STRING "c*") (WRAP-FLOAT 3.5d0) NIL)
       (LIST* (WRAP-STRING "d") (WRAP-FLOAT 4.0d0) NIL)
       (LIST* (WRAP-STRING "d*") (WRAP-FLOAT 4.5d0) NIL)
       (LIST* (WRAP-STRING "e") (WRAP-FLOAT 5.0d0) NIL)
       (LIST* (WRAP-STRING "e*") (WRAP-FLOAT 4.5d0) NIL)
       (LIST* (WRAP-STRING "f") (WRAP-FLOAT 6.0d0) NIL)
       (LIST* (WRAP-STRING "f*") (WRAP-FLOAT 6.5d0) NIL)
       (LIST* (WRAP-STRING "g") (WRAP-FLOAT 7.0d0) NIL)
       (LIST* (WRAP-STRING "h") (WRAP-FLOAT 7.0d0) NIL)
       (LIST* (WRAP-STRING "i") (WRAP-FLOAT 9.0d0) NIL)
       (LIST* (WRAP-STRING "i*") (WRAP-FLOAT 9.5d0) NIL)
       (LIST* (WRAP-STRING "k") (WRAP-FLOAT 10.0d0) NIL)
       (LIST* (WRAP-STRING "k*") (WRAP-FLOAT 10.5d0) NIL)
       (LIST* (WRAP-STRING "l") (WRAP-FLOAT 11.0d0) NIL)
       (LIST* (WRAP-STRING "l*") (WRAP-FLOAT 11.5d0) NIL)
       (LIST* (WRAP-STRING "m") (WRAP-FLOAT 12.0d0) NIL)
       (LIST* (WRAP-STRING "m*") (WRAP-FLOAT 13.0d0) NIL)
       (LIST* (WRAP-STRING "m%") (WRAP-FLOAT 14.0d0) NIL)
       (LIST* (WRAP-STRING "n") (WRAP-FLOAT -1.0d0) NIL)
       (LIST* (WRAP-STRING "o") (WRAP-FLOAT -2.0d0) NIL)
       (LIST* (WRAP-STRING "p") (WRAP-FLOAT -3.0d0) NIL)
       (LIST* (WRAP-STRING "p*") (WRAP-FLOAT -3.5d0) NIL)
       (LIST* (WRAP-STRING "q") (WRAP-FLOAT -4.0d0) NIL)
       (LIST* (WRAP-STRING "r") (WRAP-FLOAT -5.0d0) NIL)
       (LIST* (WRAP-STRING "s") (WRAP-FLOAT -6.0d0) NIL)
       (LIST* (WRAP-STRING "t") (WRAP-FLOAT -7.0d0) NIL)
       (LIST* (WRAP-STRING "u") (WRAP-FLOAT -8.0d0) NIL)
       (LIST* (WRAP-STRING "u*") (WRAP-FLOAT -8.5d0) NIL)
       (LIST* (WRAP-STRING "v") (WRAP-FLOAT -9.0d0) NIL)
       (LIST* (WRAP-STRING "v*") (WRAP-FLOAT -9.5d0) NIL)
       (LIST* (WRAP-STRING "w") (WRAP-FLOAT -10.0d0) NIL)
       (LIST* (WRAP-STRING "x") (WRAP-FLOAT -11.0d0) NIL)
       (LIST* (WRAP-STRING "y") (WRAP-FLOAT -12.0d0) NIL)
       (LIST* (WRAP-STRING "z") (WRAP-FLOAT 0.0d0) NIL) NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-051 NIL)) DO
     (CL:SETQ ITEM (%%VALUE ITER-051))
     (INSERT-AT *ZONE-STRINGS*
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE ITEM))
      (%%VALUE (%%REST ITEM)))
     (CL:SETQ ITER-051 (%%REST ITER-051))))
   (CL:LET*
    ((ITEM NULL)
     (ITER-052
      (LIST*
       (LIST* (WRAP-STRING "bc") SYM-DATE-TIME-PARSER-STELLA-BCE NIL)
       (LIST* (WRAP-STRING "bce") SYM-DATE-TIME-PARSER-STELLA-BCE NIL)
       (LIST* (WRAP-STRING "ad") SYM-DATE-TIME-PARSER-STELLA-CE NIL)
       (LIST* (WRAP-STRING "ce") SYM-DATE-TIME-PARSER-STELLA-CE NIL)
       NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-052 NIL)) DO
     (CL:SETQ ITEM (%%VALUE ITER-052))
     (INSERT-AT *ERA-STRINGS*
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE ITEM))
      (%%VALUE (%%REST ITEM)))
     (CL:SETQ ITER-052 (%%REST ITER-052))))
   (CL:LET* ((SYMBOL NULL) (ITER-053 *SPECIAL-SYMBOLS*))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-053 NIL)) DO
     (CL:SETQ SYMBOL (%%VALUE ITER-053))
     (INSERT-AT *SPECIAL-STRINGS*
      (STRING-DOWNCASE (%SYMBOL.SYMBOL-NAME SYMBOL)) SYMBOL)
     (CL:SETQ ITER-053 (%%REST ITER-053))))
   (CL:SETQ *DATE-TIME-PATTERNS*
    (LIST*
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY SYM-DATE-TIME-PARSER-STELLA-NOW
      NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-WEEKDAY
      SYM-DATE-TIME-PARSER-STELLA-MONTH SYM-DATE-TIME-PARSER-STELLA-DAY
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MINUTE
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-SECONDP
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MINUTE
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-DAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      SYM-DATE-TIME-PARSER-STELLA-MINUTE
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YEAR
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MONTH NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-MONTH
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-YEAR NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-WEEKDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-MONTH SYM-DATE-TIME-PARSER-STELLA-DAY
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER
      SYM-DATE-TIME-PARSER-STELLA-MINUTE
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      SYM-DATE-TIME-PARSER-STELLA-YEAR NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-NOW
      (CONS SYM-DATE-TIME-PARSER-STELLA-YESTERDAY NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-YESTERDAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-NOW NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-NOW
      (CONS SYM-DATE-TIME-PARSER-STELLA-TODAY NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-TODAY NIL)
      SYM-DATE-TIME-PARSER-STELLA-NOW NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-NOW
      (CONS SYM-DATE-TIME-PARSER-STELLA-TOMORROW NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-TOMORROW NIL)
      SYM-DATE-TIME-PARSER-STELLA-NOW NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YESTERDAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      SYM-DATE-TIME-PARSER-STELLA-YESTERDAY NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-TODAY
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      SYM-DATE-TIME-PARSER-STELLA-TODAY NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-TOMORROW
      (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL) NIL)
     (LIST* (CONS SYM-DATE-TIME-PARSER-STELLA-NOON-MIDN NIL)
      SYM-DATE-TIME-PARSER-STELLA-TOMORROW NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-YESTERDAY
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-TOMORROW
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     (LIST* SYM-DATE-TIME-PARSER-STELLA-TODAY
      SYM-DATE-TIME-PARSER-STELLA-HOUR
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-MINUTE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-SECONDP NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-AM-PM NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-DATE-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-TIME-DIVIDER NIL)
      (CONS SYM-DATE-TIME-PARSER-STELLA-ZONE-MINUTE NIL) NIL)
     NIL)))
  :VOID)

(CL:DEFUN STARTUP-DATE-TIME-PARSER ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-DATE-TIME-PARSER1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (HELP-STARTUP-DATE-TIME-PARSER2))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "HASHLIST"
     "(DEFUN HASHLIST ((LIST OBJECT) (TABLE OBJECT)) :TYPE OBJECT :MACRO? TRUE)"
     (CL:FUNCTION HASHLIST) NULL)
    (DEFINE-FUNCTION-OBJECT "YESTERDAY"
     "(DEFUN YESTERDAY ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION YESTERDAY) NULL)
    (DEFINE-FUNCTION-OBJECT "TODAY"
     "(DEFUN TODAY ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION TODAY) NULL)
    (DEFINE-FUNCTION-OBJECT "TOMORROW"
     "(DEFUN TOMORROW ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION TOMORROW) NULL)
    (DEFINE-FUNCTION-OBJECT "NOW"
     "(DEFUN NOW ((PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION NOW) NULL)
    (DEFINE-FUNCTION-OBJECT "AM-PM"
     "(DEFUN (AM-PM SYMBOL) ((STRING OBJECT)))" (CL:FUNCTION AM-PM)
     NULL)
    (DEFINE-FUNCTION-OBJECT "ERA"
     "(DEFUN (ERA SYMBOL) ((STRING OBJECT)))" (CL:FUNCTION ERA) NULL)
    (DEFINE-FUNCTION-OBJECT "NOON-MIDN"
     "(DEFUN (NOON-MIDN SYMBOL) ((STRING OBJECT)))"
     (CL:FUNCTION NOON-MIDN) NULL)
    (DEFINE-FUNCTION-OBJECT "WEEKDAY"
     "(DEFUN (WEEKDAY KEYWORD) ((THING OBJECT)))" (CL:FUNCTION WEEKDAY)
     NULL)
    (DEFINE-FUNCTION-OBJECT "MONTH"
     "(DEFUN (MONTH INTEGER-WRAPPER) ((THING OBJECT)))"
     (CL:FUNCTION MONTH) NULL)
    (DEFINE-FUNCTION-OBJECT "ZONE"
     "(DEFUN (ZONE FLOAT-WRAPPER) ((THING OBJECT)))" (CL:FUNCTION ZONE)
     NULL)
    (DEFINE-FUNCTION-OBJECT "SPECIALP"
     "(DEFUN (SPECIALP SYMBOL) ((STRING OBJECT)))"
     (CL:FUNCTION SPECIALP) NULL)
    (DEFINE-FUNCTION-OBJECT "SECONDP"
     "(DEFUN (SECONDP BOOLEAN-WRAPPER) ((NUMBER OBJECT)))"
     (CL:FUNCTION SECONDP) NULL)
    (DEFINE-FUNCTION-OBJECT "MINUTE"
     "(DEFUN (MINUTE BOOLEAN-WRAPPER) ((NUMBER OBJECT)))"
     (CL:FUNCTION MINUTE) NULL)
    (DEFINE-FUNCTION-OBJECT "ZONE-MINUTE"
     "(DEFUN (ZONE-MINUTE BOOLEAN-WRAPPER) ((NUMBER OBJECT)))"
     (CL:FUNCTION ZONE-MINUTE) NULL)
    (DEFINE-FUNCTION-OBJECT "HOUR"
     "(DEFUN (HOUR BOOLEAN-WRAPPER) ((NUMBER OBJECT)))"
     (CL:FUNCTION HOUR) NULL)
    (DEFINE-FUNCTION-OBJECT "DAY"
     "(DEFUN (DAY BOOLEAN-WRAPPER) ((NUMBER OBJECT)))"
     (CL:FUNCTION DAY) NULL)
    (DEFINE-FUNCTION-OBJECT "YEAR"
     "(DEFUN (YEAR BOOLEAN-WRAPPER) ((NUMBER OBJECT)))"
     (CL:FUNCTION YEAR) NULL)
    (DEFINE-FUNCTION-OBJECT "TIME-DIVIDER"
     "(DEFUN (TIME-DIVIDER BOOLEAN-WRAPPER) ((THECHARACTER OBJECT)))"
     (CL:FUNCTION TIME-DIVIDER) NULL)
    (DEFINE-FUNCTION-OBJECT "DATE-DIVIDER"
     "(DEFUN (DATE-DIVIDER BOOLEAN-WRAPPER) ((THECHARACTER OBJECT)))"
     (CL:FUNCTION DATE-DIVIDER) NULL)
    (DEFINE-FUNCTION-OBJECT "DATE-TIME-DIVIDER"
     "(DEFUN (DATE-TIME-DIVIDER BOOLEAN-WRAPPER) ((THECHARACTER OBJECT)))"
     (CL:FUNCTION DATE-TIME-DIVIDER) NULL)
    (DEFINE-FUNCTION-OBJECT "MATCH-SUBSTRING"
     "(DEFUN (MATCH-SUBSTRING CONS) ((SUBSTRING STRING) (PARSING-TIME? BOOLEAN)))"
     (CL:FUNCTION MATCH-SUBSTRING) NULL)
    (DEFINE-FUNCTION-OBJECT "DIGIT-VALUE"
     "(DEFUN (DIGIT-VALUE INTEGER) ((CHAR CHARACTER)))"
     (CL:FUNCTION DIGIT-VALUE) NULL)
    (DEFINE-FUNCTION-OBJECT "DECOMPOSE-DATE-TIME-STRING"
     "(DEFUN (DECOMPOSE-DATE-TIME-STRING CONS) ((STRING STRING) (START INTEGER) (END INTEGER)))"
     (CL:FUNCTION DECOMPOSE-DATE-TIME-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "MATCH-PATTERN-ELEMENT"
     "(DEFUN (MATCH-PATTERN-ELEMENT CONS) ((PATTERN-ELEMENT SYMBOL) (DATUM-ELEMENT OBJECT)))"
     (CL:FUNCTION MATCH-PATTERN-ELEMENT) NULL)
    (DEFINE-FUNCTION-OBJECT "MATCH-PATTERN"
     "(DEFUN (MATCH-PATTERN CONS) ((PATTERN CONS) (DATUM CONS) (DATUM-LENGTH INTEGER)))"
     (CL:FUNCTION MATCH-PATTERN) NULL)
    (DEFINE-FUNCTION-OBJECT "DEAL-WITH-NOON-MIDN"
     "(DEFUN DEAL-WITH-NOON-MIDN ((FORM-VALUE OBJECT) (PARSED-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION DEAL-WITH-NOON-MIDN) NULL)
    (DEFINE-FUNCTION-OBJECT "DEAL-WITH-AM-PM"
     "(DEFUN DEAL-WITH-AM-PM ((FORM-VALUE OBJECT) (PARSED-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION DEAL-WITH-AM-PM) NULL)
    (DEFINE-FUNCTION-OBJECT "DEAL-WITH-ERA"
     "(DEFUN DEAL-WITH-ERA ((FORM-VALUE OBJECT) (PARSED-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION DEAL-WITH-ERA) NULL)
    (DEFINE-FUNCTION-OBJECT "SET-TIME-VALUES"
     "(DEFUN SET-TIME-VALUES ((STRING-FORM (CONS OF CONS)) (PARSED-VALUES DECODED-DATE-TIME) (DEFAULT-VALUES DECODED-DATE-TIME)))"
     (CL:FUNCTION SET-TIME-VALUES) NULL)
    (DEFINE-FUNCTION-OBJECT "MATCH-DATE-TIME-PATTERNS"
     "(DEFUN (MATCH-DATE-TIME-PATTERNS CONS) ((DATE-TIME-STRING STRING) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN)))"
     (CL:FUNCTION MATCH-DATE-TIME-PATTERNS) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE"
     "(DEFUN (HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (BASE-DATE-TIME DECODED-DATE-TIME) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN) (MERGE-NULL-FIELDS? BOOLEAN)) :PUBLIC? FALSE :CONSTRUCTOR? TRUE)"
     (CL:FUNCTION HELP-PARSE-DATE-TIME-RELATIVE-TO-BASE) NULL)
    (DEFINE-FUNCTION-OBJECT "PARSE-DATE-TIME-RELATIVE-TO-BASE"
     "(DEFUN (PARSE-DATE-TIME-RELATIVE-TO-BASE DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (BASE-DATE-TIME DECODED-DATE-TIME) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN) (MERGE-NULL-FIELDS? BOOLEAN)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Tries very hard to make sense out of the argument `date-time-string' and
returns a time structure if successful.  If not, it returns `null'.
If `error-on-mismatch?' is true, parse-date-time will signal an error instead of
returning `null'.
Default values are passed in via `base-date-time'.  If the timezone field that
is passed in is NULL, then the local time zone for the parsed date/time will
be used.
If `merge-null-fields?' is `true', then default values from `base-time-date'
will be merged into missing components.  If `false', then they won't be merged
in for null components but can still be used as a basis for interpreatation of
relative time strings like \\\"now\\\" or \\\"yesterday\\\"\")"
     (CL:FUNCTION PARSE-DATE-TIME-RELATIVE-TO-BASE) NULL)
    (DEFINE-FUNCTION-OBJECT "PARSE-DATE-TIME-IN-TIME-ZONE"
     "(DEFUN (PARSE-DATE-TIME-IN-TIME-ZONE DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (TIME-ZONE FLOAT) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Tries very hard to make sense out of the argument `date-time-string' and
returns a time structure if successful.  If not, it returns `null'.
If `error-on-mismatch?' is true, parse-date-time will signal an error instead of
returning `null'.  
Default values are 00:00:00 in the given timezone on the current date.  If the
given `time-zone' value is `null', then the local time zone for the given date
and time will be used as determined by the operating system.\")"
     (CL:FUNCTION PARSE-DATE-TIME-IN-TIME-ZONE) NULL)
    (DEFINE-FUNCTION-OBJECT "PARSE-DATE-TIME"
     "(DEFUN (PARSE-DATE-TIME DECODED-DATE-TIME) ((DATE-TIME-STRING STRING) (START INTEGER) (END INTEGER) (ERROR-ON-MISMATCH? BOOLEAN)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Tries very hard to make sense out of the argument `date-time-string' and
returns a time structure if successful.  If not, it returns `null'.
If `error-on-mismatch?' is true, parse-date-time will signal an error instead of
returning `null'.  
Default values are 00:00:00 local time on the current date\" (RETURN (PARSE-DATE-TIME-IN-TIME-ZONE DATE-TIME-STRING NULL START END ERROR-ON-MISMATCH?)))"
     (CL:FUNCTION PARSE-DATE-TIME) NULL)
    (DEFINE-FUNCTION-OBJECT "STRING-TO-DECODED-DATE-TIME"
     "(DEFUN (STRING-TO-DECODED-DATE-TIME DECODED-DATE-TIME) ((INPUT STRING)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Returns a decoded date-time object representing the date
and time parsed from the `input' string.  If no valid parse is found,
`null' is returned.\")" (CL:FUNCTION STRING-TO-DECODED-DATE-TIME) NULL)
    (DEFINE-FUNCTION-OBJECT "STRING-TO-CALENDAR-DATE"
     "(DEFUN (STRING-TO-CALENDAR-DATE CALENDAR-DATE) ((INPUT STRING)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Returns a calendar date object representing the date and time
parsed from the `input' string.  If no valid parse is found,
`null' is returned.\")" (CL:FUNCTION STRING-TO-CALENDAR-DATE) NULL)
    (DEFINE-FUNCTION-OBJECT "STRING-TO-CALENDAR-DATE-WITH-DEFAULT"
     "(DEFUN (STRING-TO-CALENDAR-DATE-WITH-DEFAULT CALENDAR-DATE) ((INPUT-DATE STRING) (DEFAULT-DATE DECODED-DATE-TIME)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Returns a calendar date object representing the date and time
parsed from the `input-date' string.  Default values for missing fields and
the interpretation of relative references come from `default-date'.  If the
`default-date' is `null', the current date will be used.  If a null set of
defaults is desired, use `*NULL-DECODED-DATE-TIME*'.
If no valid parse is found, `null' is returned.\")"
     (CL:FUNCTION STRING-TO-CALENDAR-DATE-WITH-DEFAULT) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-DATE-TIME-PARSER"
     "(DEFUN STARTUP-DATE-TIME-PARSER () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-DATE-TIME-PARSER) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-DATE-TIME-PARSER-STELLA-STARTUP-DATE-TIME-PARSER)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-DATE-TIME-PARSER-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupDateTimeParser") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT WHITESPACE-CHARS CONS (BQUOTE (#\\  #\\Tab #\\Linefeed #\\Return #\\Page #\\, #\\' #\\`)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT TIME-DIVIDERS CONS (BQUOTE (#\\: #\\.)))" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT DATE-DIVIDERS CONS (BQUOTE (#\\\\ #\\/ #\\- #\\+)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT DATE-TIME-DIVIDERS CONS (BQUOTE (#\\T)))" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *ERROR-ON-MISMATCH* BOOLEAN FALSE :PUBLIC? TRUE :DOCUMENTATION \"If TRUE, an error will be signalled if parse-date-time is unable
   to determine the time/date format of the string.\")" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *WEEKDAY-STRINGS* (STRING-HASH-TABLE OF STRING KEYWORD) (NEW (STRING-HASH-TABLE OF STRING KEYWORD)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *MONTH-STRINGS* STRING-TO-INTEGER-HASH-TABLE (NEW STRING-TO-INTEGER-HASH-TABLE))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *ZONE-STRINGS* (STRING-HASH-TABLE OF STRING FLOAT-WRAPPER) (NEW (STRING-HASH-TABLE OF STRING FLOAT-WRAPPER)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *ERA-STRINGS* (STRING-HASH-TABLE OF STRING SYMBOL) (NEW (STRING-HASH-TABLE OF STRING SYMBOL)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *SPECIAL-STRINGS* STRING-HASH-TABLE (NEW STRING-HASH-TABLE))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *SPECIAL-SYMBOLS* (CONS OF SYMBOL) (BQUOTE (YESTERDAY TODAY TOMORROW NOW)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *DATE-TIME-PATTERNS* CONS (BQUOTE ((YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY (NOON-MIDN)) ((NOON-MIDN) (WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR) ((NOON-MIDN) (WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR) ((NOON-MIDN) (WEEKDAY) MONTH (DATE-DIVIDER) DAY) ((NOON-MIDN) YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY) ((NOON-MIDN) MONTH (DATE-DIVIDER) YEAR) ((NOON-MIDN) YEAR (DATE-DIVIDER) MONTH) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (NOON-MIDN (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((DATE-TIME-DIVIDER) HOUR (NOON-MIDN)) (YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY NOON-MIDN (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY NOW) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (MONTH (DATE-DIVIDER) YEAR (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (MONTH (DATE-DIVIDER) YEAR (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) MONTH (NOON-MIDN) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) (WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) (WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) (WEEKDAY) MONTH (DATE-DIVIDER) DAY) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) YEAR (DATE-DIVIDER) MONTH (DATE-DIVIDER) DAY) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) MONTH (DATE-DIVIDER) YEAR) ((DATE-TIME-DIVIDER) HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) YEAR (DATE-DIVIDER) MONTH) (WEEKDAY MONTH DAY HOUR (TIME-DIVIDER) MINUTE (TIME-DIVIDER) SECONDP (AM-PM) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE) YEAR) ((WEEKDAY) DAY (DATE-DIVIDER) MONTH (DATE-DIVIDER) YEAR HOUR (TIME-DIVIDER) MINUTE (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) ((WEEKDAY) MONTH (DATE-DIVIDER) DAY (DATE-DIVIDER) YEAR HOUR (TIME-DIVIDER) MINUTE (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (YEAR (DATE-DIVIDER) (MONTH)) (MONTH (DATE-DIVIDER) (YEAR)) ((WEEKDAY) MONTH DAY HOUR TIME-DIVIDER MINUTE (TIME-DIVIDER) (SECONDP) YEAR) (NOW (YESTERDAY)) ((YESTERDAY) NOW) (NOW (TODAY)) ((TODAY) NOW) (NOW (TOMORROW)) ((TOMORROW) NOW) (YESTERDAY (NOON-MIDN)) ((NOON-MIDN) YESTERDAY) (TODAY (NOON-MIDN)) ((NOON-MIDN) TODAY) (TOMORROW (NOON-MIDN)) ((NOON-MIDN) TOMORROW) (YESTERDAY HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (TOMORROW HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)) (TODAY HOUR (TIME-DIVIDER) (MINUTE) (TIME-DIVIDER) (SECONDP) (AM-PM) (DATE-DIVIDER) (ZONE) (TIME-DIVIDER) (ZONE-MINUTE)))))"
     NULL)))
  :VOID)
