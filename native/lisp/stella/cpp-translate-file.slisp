;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; cpp-translate-file.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CPPTRANS NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-COMMON-LISP NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-FUNCTION NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP-CODE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP-HEADER NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-METHOD NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CREATE-PATH NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CLASS NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-TYPE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-WHITE-SPACE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-AUXILIARY-VARIABLE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CPP_FUNCTION NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-CPP_DEFPRINT NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-TWO-PASS? NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-FORCE-TRANSLATION? NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-PRODUCTION-SETTINGS? NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-UPPERCASE NULL)
(CL:DEFVAR KWD-CPP-TRANSLATE-FILE-STELLA NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-STARTUP-CPP-TRANSLATE-FILE NULL)
(CL:DEFVAR SYM-CPP-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *CPP-CURRENT-UNIT-MODULE*
  *CURRENTFILENAME* TRUE-WRAPPER *TRANSLATIONUNITS* NULL-INTEGER
  *CHARACTER-TYPE-TABLE* *MODULE* NIL *CURRENTSYSTEMDEFINITION* EOL
  *TRANSLATOROUTPUTLANGUAGE* STANDARD-OUTPUT))

;;; (DEFSPECIAL *CURRENT-STREAM* ...)

(CL:DEFVAR *CURRENT-STREAM* NULL)

;;; (DEFGLOBAL *CPP-TRANSLATED-FILE-SUFFIX* ...)

(CL:DEFVAR *CPP-TRANSLATED-FILE-SUFFIX* "")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *CPP-TRANSLATED-FILE-SUFFIX*))

;;; (DEFUN CPPTRANS ...)

(CL:DEFUN %CPPTRANS (STATEMENT)
  "Translate `statement' to C++ and print the result."
  (CL:LET*
   ((*TRANSLATOROUTPUTLANGUAGE* *TRANSLATOROUTPUTLANGUAGE*)
    (*CURRENT-STREAM* STANDARD-OUTPUT))
   (CL:DECLARE
    (CL:SPECIAL *TRANSLATOROUTPUTLANGUAGE* *CURRENT-STREAM*))
   (%SET-TRANSLATOR-OUTPUT-LANGUAGE KWD-CPP-TRANSLATE-FILE-CPP)
   (INCREMENTALLY-TRANSLATE STATEMENT))
  :VOID)

(CL:DEFMACRO CPPTRANS (CL:&WHOLE EXPRESSION CL:&REST IGNORE)
  "Translate `statement' to C++ and print the result."
  (CL:DECLARE (CL:IGNORE IGNORE))
  (CL:LET ((*IGNORETRANSLATIONERRORS?* FALSE))
   (CL-INCREMENTALLY-TRANSLATE EXPRESSION)))

(CL:SETF (CL:MACRO-FUNCTION (CL:QUOTE |/STELLA/CPPTRANS|)) (CL:MACRO-FUNCTION (CL:QUOTE CPPTRANS)))

;;; (DEFUN (CPP-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CPP-MAKE-CODE-OUTPUT-FILE-NAME (FILENAME)
  (CL:RETURN-FROM CPP-MAKE-CODE-OUTPUT-FILE-NAME
   (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-CODE CL:NIL)))

;;; (DEFUN (CPP-MAKE-HEADER-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CPP-MAKE-HEADER-OUTPUT-FILE-NAME (FILENAME)
  (CL:RETURN-FROM CPP-MAKE-HEADER-OUTPUT-FILE-NAME
   (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-HEADER CL:NIL)))

;;; (DEFUN CPP-OUTPUT-FILE-HEADER ...)

(CL:DEFUN CPP-OUTPUT-FILE-HEADER (STREAM FILE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
   "//  -*- Mode: C++ -*-" EOL EOL)
  (CL:WHEN (CL:NOT (CL:EQ FILE STELLA::NULL-STRING))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "// "
    (FILE-NAME-WITHOUT-DIRECTORY FILE) EOL EOL))
  (OUTPUT-COPYRIGHT-HEADER STREAM)
  :VOID)

;;; (DEFUN CPP-OUTPUT-INCLUDE-DIRECTIVE ...)

(CL:DEFUN CPP-OUTPUT-INCLUDE-DIRECTIVE (FILENAME STRIPDIRECTORY?)
  (CL:WHEN STRIPDIRECTORY?
   (CL:SETQ FILENAME (FILE-NAME-WITHOUT-DIRECTORY FILENAME)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "#include \"" FILENAME "\"" EOL)
  :VOID)

;;; (DEFUN CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS ...)

(CL:DEFUN CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS (HEADERFILENAME)
  (CPP-OUTPUT-INCLUDE-DIRECTIVE
   (MAKE-FILE-NAME "cpp-standalone" KWD-CPP-TRANSLATE-FILE-CPP-HEADER
    CL:T)
   CL:T)
  (CPP-OUTPUT-INCLUDE-DIRECTIVE HEADERFILENAME CL:T)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN (CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT FILE-NAME) ...)

(CL:DEFUN CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  #+MCL
  (CL:CHECK-TYPE SYSTEMNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION SYSTEMNAME CL:T))
    (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
     (%SYSTEM-DEFINITION.DIRECTORY *CURRENTSYSTEMDEFINITION*)))
   (CL:DECLARE
    (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
     *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:PROGN
    (CL:RETURN-FROM CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT
     (CONCATENATE-FILE-NAMES
      (GET-ROOT-DIRECTORY-FROM-FILE-TYPE KWD-CPP-TRANSLATE-FILE-CPP)
      (GET-LANGUAGE-SUBDIRECTORY-FROM-FILE-TYPE
       KWD-CPP-TRANSLATE-FILE-CPP))))))

;;; (DEFUN (CPP-RELATIVIZE-HEADER-FILE FILE-NAME) ...)

(CL:DEFUN CPP-RELATIVIZE-HEADER-FILE (HEADERFILE SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  #+MCL
  (CL:CHECK-TYPE SYSTEMNAME CL:SIMPLE-STRING)
  (CL:LET*
   ((HEADERROOT
     (FILE-NAME-AS-DIRECTORY
      (CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT SYSTEMNAME))))
   (CL:RETURN-FROM CPP-RELATIVIZE-HEADER-FILE
    (RELATIVIZE-FILE-NAME HEADERFILE HEADERROOT))))

;;; (DEFUN CPP-OUTPUT-IMPORT-DECLARATIONS ...)

(CL:DEFUN CPP-OUTPUT-IMPORT-DECLARATIONS (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  #+MCL
  (CL:CHECK-TYPE SYSTEMNAME CL:SIMPLE-STRING)
  (CL:WHEN (CL:EQ SYSTEMNAME STELLA::NULL-STRING)
   (CL:WHEN (CL:EQ *CURRENTSYSTEMDEFINITION* NULL)
    (CL:RETURN-FROM CPP-OUTPUT-IMPORT-DECLARATIONS))
   (CL:SETQ SYSTEMNAME
    (%SYSTEM-DEFINITION.NAME *CURRENTSYSTEMDEFINITION*)))
  (CL:LET*
   ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION SYSTEMNAME CL:T))
    (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
     (%SYSTEM-DEFINITION.DIRECTORY *CURRENTSYSTEMDEFINITION*)))
   (CL:DECLARE
    (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
     *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
   (CL:PROGN
    (CPP-OUTPUT-INCLUDE-DIRECTIVE
     (CPP-RELATIVIZE-HEADER-FILE
      (MAKE-FILE-NAME (CPP-YIELD-SYSTEM-HEADER-FILE-NAME SYSTEMNAME)
       KWD-CPP-TRANSLATE-FILE-CPP-HEADER CL:T)
      SYSTEMNAME)
     CL:NIL)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     EOL)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-CLASS-HEAD-DECLARATIONS ...)

(CL:DEFUN CPP-OUTPUT-CLASS-HEAD-DECLARATIONS (CLASSES)
  (CL:WHEN (CL:NOT (CL:EQ CLASSES NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "// Class headers:" EOL))
  (CL:LET* ((CLASS NULL) (ITER-000 CLASSES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ CLASS (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "class " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST CLASS)))
     ";" EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-NAMESPACE-HEADER ...)

(CL:DEFUN CPP-OUTPUT-NAMESPACE-HEADER (MODULE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "namespace " (CPP-YIELD-NAMESPACE-PREFIX-FROM-MODULE MODULE) " {"
   EOL)
  (CL:LET*
   ((USEE NULL)
    (ITER-000
     (REVERSE
      (COPY-CONS-LIST (%%REST (CONSIFY (VISIBLE-MODULES MODULE)))))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ USEE (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "  using namespace " (CPP-YIELD-NAMESPACE-PREFIX-FROM-MODULE USEE)
     ";" EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-NAMESPACE-FOOTER ...)

(CL:DEFUN CPP-OUTPUT-NAMESPACE-FOOTER (MODULE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "} // end of namespace "
   (CPP-YIELD-NAMESPACE-PREFIX-FROM-MODULE MODULE) EOL)
  :VOID)

;;; (DEFUN (CPP-UNIT-DEFINES-MAIN? BOOLEAN) ...)

(CL:DEFUN CPP-UNIT-DEFINES-MAIN? (UNIT)
  (CL:RETURN-FROM CPP-UNIT-DEFINES-MAIN?
   (CL:AND
    (CL:EQ (%TRANSLATION-UNIT.CATEGORY UNIT)
     SYM-CPP-TRANSLATE-FILE-STELLA-METHOD)
    (CL:EQ (%METHOD-SLOT.SLOT-NAME (%TRANSLATION-UNIT.THE-OBJECT UNIT))
     (LOOKUP-SYMBOL "MAIN")))))

;;; (DEFUN (CPP-YIELD-MAIN-FILE-NAME FILE-NAME) ...)

(CL:DEFUN CPP-YIELD-MAIN-FILE-NAME ()
  (CL:RETURN-FROM CPP-YIELD-MAIN-FILE-NAME
   (MAKE-FILE-NAME "main" KWD-CPP-TRANSLATE-FILE-CPP-CODE CL:T)))

;;; (DEFUN CPP-OUTPUT-MAIN ...)

(CL:DEFUN CPP-OUTPUT-MAIN (UNIT)
  (CL:LET* ((OUT NULL))
   (CL:UNWIND-PROTECT
    (CL:PROGN
     (CL:SETQ OUT
      (OPEN-OUTPUT-FILE (CPP-YIELD-MAIN-FILE-NAME)
       KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS
       KWD-CPP-TRANSLATE-FILE-CREATE-PATH))
     (CL:LET* ((*CURRENT-STREAM* OUT))
      (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
      (CL:WHEN (CL:NOT (CL:EQ *CURRENTSYSTEMDEFINITION* NULL))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "// main entry point for "
        (%SYSTEM-DEFINITION.NAME *CURRENTSYSTEMDEFINITION*) " system"
        EOL EOL))
      (CPP-OUTPUT-IMPORT-DECLARATIONS STELLA::NULL-STRING)
      (CL:LET*
       ((USEE NULL)
        (ITER-000
         (REVERSE
          (COPY-CONS-TREE (CONSIFY (VISIBLE-MODULES *MODULE*))))))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ USEE (%%VALUE ITER-000))
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "using namespace "
         (CPP-YIELD-NAMESPACE-PREFIX-FROM-MODULE USEE) ";" EOL)
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       EOL)
      (CPP-OUTPUT-STATEMENT (%TRANSLATION-UNIT.TRANSLATION UNIT))))
    (CL:WHEN (CL:NOT (CL:EQ OUT NULL)) (FREE OUT))))
  :VOID)

;;; (DEFUN (CPP-SORT-UNITS-FOR-HEADER-FILE (LIST OF (CONS OF TRANSLATION-UNIT))) ...)

(CL:DEFUN CPP-SORT-UNITS-FOR-HEADER-FILE (FILEUNITS)
  (CL:LET*
   ((GLOBALS NIL) (AUXILIARYGLOBALS NIL) (METHODS NIL)
    (INCLUDESTATEMENTS NIL) (CLASSES NIL) (MAIN NIL))
   (CL:LET* ((UNIT NULL) (ITER-000 (%LIST.THE-CONS-LIST FILEUNITS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ UNIT (%%VALUE ITER-000))
     (CL:LET* ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
      (CL:COND
       ((CL:OR
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-METHOD)
         (CL:EQ TEST-VALUE-000
          SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD)
         (CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-MACRO))
        (CL:IF (CPP-UNIT-DEFINES-MAIN? UNIT)
         (CL:SETQ MAIN (CONS UNIT MAIN))
         (CL:SETQ METHODS (CONS UNIT METHODS))))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)
        (CL:LET*
         ((TRANSLATION (%TRANSLATION-UNIT.TRANSLATION UNIT))
          (CODE
           (%STRING-WRAPPER.WRAPPER-VALUE
            (%%VALUE (%%REST TRANSLATION)))))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CODE))
         (CL:WHEN
          (CL:AND
           (CL:EQL
            (CL:LET ((SELF CODE) (POSITION 0))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))
            #\#)
           (CL:NOT
            (CL:EQ
             (CL:AREF *CHARACTER-TYPE-TABLE*
              (CL:THE CL:FIXNUM
               (CL:CHAR-CODE
                (CL:LET ((SELF CODE) (POSITION 1))
                 (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
                  (CL:TYPE CL:FIXNUM POSITION))
                 (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
                  (CL:THE CL:FIXNUM POSITION))))))
             KWD-CPP-TRANSLATE-FILE-WHITE-SPACE)))
          (CL:LET* ((SELF-000 (NEW-TRANSLATION-UNIT)))
           (CL:SETF (%TRANSLATION-UNIT.CATEGORY SELF-000)
            SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)
           (CL:SETF (%TRANSLATION-UNIT.TRANSLATION SELF-000)
            (COPY-CONS-TREE (%TRANSLATION-UNIT.TRANSLATION UNIT)))
           (CL:SETQ INCLUDESTATEMENTS
            (CONS SELF-000 INCLUDESTATEMENTS)))
          (SECOND-SETTER TRANSLATION (WRAP-STRING "")))))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-CLASS)
        (CL:SETQ CLASSES (CONS UNIT CLASSES)))
       ((CL:EQ TEST-VALUE-000
         SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
        (CL:COND
         ((AUXILIARY-VARIABLE-UNIT? UNIT)
          (CL:SETQ AUXILIARYGLOBALS (CONS UNIT AUXILIARYGLOBALS))
          (CL:SETF (%TRANSLATION-UNIT.CATEGORY UNIT)
           SYM-CPP-TRANSLATE-FILE-STELLA-AUXILIARY-VARIABLE))
         (CL:T (CL:SETQ GLOBALS (CONS UNIT GLOBALS)))))
       ((CL:EQ TEST-VALUE-000 SYM-CPP-TRANSLATE-FILE-STELLA-TYPE))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
          TEST-VALUE-000 "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM CPP-SORT-UNITS-FOR-HEADER-FILE
    (LIST (REVERSE INCLUDESTATEMENTS) (REVERSE CLASSES)
     (REVERSE GLOBALS) (REVERSE METHODS) (REVERSE AUXILIARYGLOBALS)
     MAIN))))

;;; (DEFUN CPP-OUTPUT-NAMESPACE-CHANGE ...)

(CL:DEFUN CPP-OUTPUT-NAMESPACE-CHANGE (FROMNAMESPACE TONAMESPACE)
  (CL:WHEN
   (CL:NOT
    (CL:OR (CL:EQ TONAMESPACE FROMNAMESPACE)
     (CL:AND (CL:NOT (CL:EQ FROMNAMESPACE NULL))
      (STRING-EQL?
       (CPP-YIELD-NAMESPACE-PREFIX-FROM-MODULE FROMNAMESPACE)
       (CPP-YIELD-NAMESPACE-PREFIX-FROM-MODULE TONAMESPACE)))))
   (CL:WHEN (CL:NOT (CL:EQ FROMNAMESPACE NULL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     EOL)
    (CPP-OUTPUT-NAMESPACE-FOOTER FROMNAMESPACE)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL
     EOL))
   (CPP-OUTPUT-NAMESPACE-HEADER TONAMESPACE))
  :VOID)

;;; (DEFUN CPP-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN CPP-OUTPUT-ALL-UNITS-TO-FILE (FILENAME)
  (CL:LET*
   ((CODEOUTPUTFILE
     (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-CODE CL:NIL))
    (HEADEROUTPUTFILE
     (MAKE-FILE-NAME FILENAME KWD-CPP-TRANSLATE-FILE-CPP-HEADER
      CL:NIL))
    (HEADERUNITS (CPP-SORT-UNITS-FOR-HEADER-FILE *TRANSLATIONUNITS*))
    (AUXILIARYGLOBALS (FIFTH HEADERUNITS))
    (MAIN (%%VALUE (NTH HEADERUNITS 5))) (CURRENTNAMESPACEMODULE NULL)
    (CURRENTUNITMODULE NULL))
   (CL:LET* ((CODEOUTPUTSTREAM NULL))
    (CL:UNWIND-PROTECT
     (CL:PROGN
      (CL:SETQ CODEOUTPUTSTREAM
       (OPEN-OUTPUT-FILE CODEOUTPUTFILE
        KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS
        KWD-CPP-TRANSLATE-FILE-CREATE-PATH))
      (CL:LET* ((HEADEROUTPUTSTREAM NULL))
       (CL:UNWIND-PROTECT
        (CL:PROGN
         (CL:SETQ HEADEROUTPUTSTREAM
          (OPEN-OUTPUT-FILE HEADEROUTPUTFILE
           KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS
           KWD-CPP-TRANSLATE-FILE-CREATE-PATH))
         (CL:LET* ((*CURRENT-STREAM* HEADEROUTPUTSTREAM))
          (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
           HEADEROUTPUTFILE "'..." EOL)
          (CPP-OUTPUT-FILE-HEADER HEADEROUTPUTSTREAM HEADEROUTPUTFILE)
          (CL:LET*
           ((BUCKET NULL) (ITER-000 (%LIST.THE-CONS-LIST HEADERUNITS)))
           (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
            (CL:SETQ BUCKET (%%VALUE ITER-000))
            (CL:LET*
             ((UNIT NULL) (ITER-001 BUCKET) (I NULL-INTEGER)
              (ITER-002 1))
             (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-002))
             (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
              (CL:SETQ UNIT (%%VALUE ITER-001)) (CL:SETQ I ITER-002)
              (CL:WHEN
               (CL:AND
                (CL:NOT
                 (CL:EQ (%TRANSLATION-UNIT.THE-OBJECT UNIT) NULL))
                (CL:NOT
                 (CL:EQ (%TRANSLATION-UNIT.CATEGORY UNIT)
                  SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)))
               (CL:SETQ CURRENTUNITMODULE
                (HOME-MODULE (%TRANSLATION-UNIT.THE-OBJECT UNIT)))
               (CPP-OUTPUT-NAMESPACE-CHANGE CURRENTNAMESPACEMODULE
                CURRENTUNITMODULE)
               (CL:SETQ CURRENTNAMESPACEMODULE CURRENTUNITMODULE))
              (CL:LET*
               ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
               (CL:COND
                ((CL:EQ TEST-VALUE-000
                  SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)
                 (CL:WHEN (CL:= I 1)
                  (%%PRINT-STREAM
                   (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                   "// Header files and macros:" EOL))
                 (CPP-OUTPUT-STATEMENT
                  (%TRANSLATION-UNIT.TRANSLATION UNIT))
                 (%%PRINT-STREAM
                  (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
                ((CL:EQ TEST-VALUE-000
                  SYM-CPP-TRANSLATE-FILE-STELLA-CLASS)
                 (CL:WHEN (CL:= I 1)
                  (%%PRINT-STREAM
                   (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                   "// Class definitions:" EOL))
                 (CPP-OUTPUT-CLASS
                  (%%REST (%TRANSLATION-UNIT.TRANSLATION UNIT))))
                ((CL:EQ TEST-VALUE-000
                  SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
                 (CL:WHEN (CL:= I 1)
                  (%%PRINT-STREAM
                   (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                   "// Global declarations:" EOL))
                 (CPP-OUTPUT-GLOBAL-DECLARATION
                  (%TRANSLATION-UNIT.TRANSLATION UNIT)))
                ((CL:OR
                  (CL:EQ TEST-VALUE-000
                   SYM-CPP-TRANSLATE-FILE-STELLA-METHOD)
                  (CL:EQ TEST-VALUE-000
                   SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD)
                  (CL:EQ TEST-VALUE-000
                   SYM-CPP-TRANSLATE-FILE-STELLA-MACRO))
                 (CL:WHEN (CL:= I 1)
                  (%%PRINT-STREAM
                   (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                   "// Function signatures:" EOL))
                 (CL:LET*
                  ((TRANSLATION (%TRANSLATION-UNIT.TRANSLATION UNIT)))
                  (CL:LET* ((TEST-VALUE-001 (%%VALUE TRANSLATION)))
                   (CL:COND
                    ((CL:EQ TEST-VALUE-001
                      SYM-CPP-TRANSLATE-FILE-STELLA-CPP_FUNCTION)
                     (CPP-OUTPUT-FUNCTION-SIGNATURE
                      (%%REST TRANSLATION))
                     (%%PRINT-STREAM
                      (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                      ";" EOL))
                    ((CL:EQ TEST-VALUE-001
                      SYM-CPP-TRANSLATE-FILE-STELLA-CPP_DEFPRINT)
                     (CPP-OUTPUT-DEFPRINT-SIGNATURE
                      (%%REST TRANSLATION))
                     (%%PRINT-STREAM
                      (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                      ";" EOL))
                    (CL:T)))))
                ((CL:EQ TEST-VALUE-000
                  SYM-CPP-TRANSLATE-FILE-STELLA-AUXILIARY-VARIABLE)
                 (CL:WHEN (CL:= I 1)
                  (%%PRINT-STREAM
                   (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
                   "// Auxiliary global declarations:" EOL))
                 (CPP-OUTPUT-GLOBAL-DECLARATION
                  (%TRANSLATION-UNIT.TRANSLATION UNIT)))
                (CL:T
                 (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
                  (%%PRINT-STREAM
                   (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
                   TEST-VALUE-000 "' is not a valid case option")
                  (CL:ERROR
                   (NEW-STELLA-EXCEPTION
                    (THE-STRING-READER STREAM-000)))))))
              (CL:SETQ ITER-001 (%%REST ITER-001))
              (CL:SETQ ITER-002 (CL:1+ ITER-002))))
            (%%PRINT-STREAM
             (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
            (CL:SETQ ITER-000 (%%REST ITER-000))))
          (CPP-OUTPUT-NAMESPACE-FOOTER CURRENTNAMESPACEMODULE)
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT) "Writing `"
           CODEOUTPUTFILE "'..." EOL)
          (CL:SETQ *CURRENT-STREAM* CODEOUTPUTSTREAM)
          (CPP-OUTPUT-FILE-HEADER CODEOUTPUTSTREAM CODEOUTPUTFILE)
          (CL:COND
           ((CL:EQ *TRANSLATOROUTPUTLANGUAGE*
             KWD-CPP-TRANSLATE-FILE-CPP)
            (CPP-OUTPUT-IMPORT-DECLARATIONS STELLA::NULL-STRING))
           ((CL:EQ *TRANSLATOROUTPUTLANGUAGE*
             KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE)
            (CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS
             HEADEROUTPUTFILE))
           (CL:T
            (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
             (%%PRINT-STREAM
              (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
              *TRANSLATOROUTPUTLANGUAGE*
              "' is not a valid case option")
             (CL:ERROR
              (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
          (CL:SETQ CURRENTNAMESPACEMODULE NULL)
          (CL:LET*
           ((UNIT NULL)
            (ITER-003 (%LIST.THE-CONS-LIST *TRANSLATIONUNITS*)))
           (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
            (CL:SETQ UNIT (%%VALUE ITER-003))
            (CL:WHEN
             (CL:AND
              (CL:NOT (CL:EQ (%TRANSLATION-UNIT.THE-OBJECT UNIT) NULL))
              (CL:NOT
               (CL:EQ (%TRANSLATION-UNIT.CATEGORY UNIT)
                SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM))
              (CL:NOT
               (CL:EQ (%TRANSLATION-UNIT.CATEGORY UNIT)
                SYM-CPP-TRANSLATE-FILE-STELLA-AUXILIARY-VARIABLE)))
             (CL:SETQ CURRENTUNITMODULE
              (HOME-MODULE (%TRANSLATION-UNIT.THE-OBJECT UNIT)))
             (CPP-OUTPUT-NAMESPACE-CHANGE CURRENTNAMESPACEMODULE
              CURRENTUNITMODULE)
             (CL:SETQ CURRENTNAMESPACEMODULE CURRENTUNITMODULE))
            (CL:LET*
             ((TEST-VALUE-002 (%TRANSLATION-UNIT.CATEGORY UNIT)))
             (CL:COND
              ((CL:OR
                (CL:EQ TEST-VALUE-002
                 SYM-CPP-TRANSLATE-FILE-STELLA-METHOD)
                (CL:EQ TEST-VALUE-002
                 SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD)
                (CL:EQ TEST-VALUE-002
                 SYM-CPP-TRANSLATE-FILE-STELLA-MACRO))
               (CL:IF (CL:EQ UNIT MAIN)
                (CPP-OUTPUT-STATEMENT
                 (COPY-CONS-TREE (%TRANSLATION-UNIT.TRANSLATION UNIT)))
                (CPP-OUTPUT-STATEMENT
                 (%TRANSLATION-UNIT.TRANSLATION UNIT))))
              ((CL:EQ TEST-VALUE-002
                SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM)
               (CPP-OUTPUT-VERBATIM
                (%%VALUE
                 (%%REST (%TRANSLATION-UNIT.TRANSLATION UNIT)))))
              ((CL:EQ TEST-VALUE-002
                SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
               (CL:WHEN (CL:NOT (AUXILIARY-VARIABLE-UNIT? UNIT))
                (CPP-OUTPUT-VARIABLE-DEFINITION
                 (%TRANSLATION-UNIT.TRANSLATION UNIT))))
              (CL:T)))
            (CL:SETQ ITER-003 (%%REST ITER-003))))
          (CL:LET* ((UNIT NULL) (ITER-004 AUXILIARYGLOBALS))
           (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-004 NIL)) DO
            (CL:SETQ UNIT (%%VALUE ITER-004))
            (CL:SETQ CURRENTUNITMODULE
             (HOME-MODULE (%TRANSLATION-UNIT.THE-OBJECT UNIT)))
            (CPP-OUTPUT-NAMESPACE-CHANGE CURRENTNAMESPACEMODULE
             CURRENTUNITMODULE)
            (CL:SETQ CURRENTNAMESPACEMODULE CURRENTUNITMODULE)
            (CPP-OUTPUT-VARIABLE-DEFINITION
             (%TRANSLATION-UNIT.TRANSLATION UNIT))
            (CL:SETQ ITER-004 (%%REST ITER-004))))
          (CPP-OUTPUT-NAMESPACE-FOOTER CURRENTNAMESPACEMODULE)
          (CL:WHEN (CL:NOT (CL:EQ MAIN NULL))
           (%%PRINT-STREAM
            (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL EOL)
           (CPP-OUTPUT-MAIN MAIN))))
        (CL:WHEN (CL:NOT (CL:EQ HEADEROUTPUTSTREAM NULL))
         (FREE HEADEROUTPUTSTREAM)))))
     (CL:WHEN (CL:NOT (CL:EQ CODEOUTPUTSTREAM NULL))
      (FREE CODEOUTPUTSTREAM)))))
  :VOID)

;;; (DEFUN CPP-TRANSLATE-FILE ...)

(CL:DEFUN CPP-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-CPP-TRANSLATE-FILE-CPP CL:NIL)
  :VOID)

;;; (DEFUN CPP-STANDALONE-TRANSLATE-FILE ...)

(CL:DEFUN CPP-STANDALONE-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE CL:NIL)
  :VOID)

;;; (DEFUN CPP-TRANSLATE-SYSTEM ...)

(CL:DEFUN CPP-TRANSLATE-SYSTEM (SYSTEMNAME)
  "Translate the system `systemName' to C++."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  #+MCL
  (CL:CHECK-TYPE SYSTEMNAME CL:SIMPLE-STRING)
  (%TRANSLATE-SYSTEM SYSTEMNAME
   (CONS-LIST KWD-CPP-TRANSLATE-FILE-CPP
    KWD-CPP-TRANSLATE-FILE-TWO-PASS? TRUE-WRAPPER
    KWD-CPP-TRANSLATE-FILE-FORCE-TRANSLATION? TRUE-WRAPPER
    KWD-CPP-TRANSLATE-FILE-PRODUCTION-SETTINGS? TRUE-WRAPPER))
  :VOID)

;;; (DEFUN CPP-TRANSLATE-WALKED-SYSTEM-UNITS ...)

(CL:DEFUN CPP-TRANSLATE-WALKED-SYSTEM-UNITS (SYSTEMUNITS)
  (CL:LET*
   ((*CURRENTFILENAME* STELLA::NULL-STRING) (*TRANSLATIONUNITS* NULL))
   (CL:DECLARE (CL:SPECIAL *CURRENTFILENAME* *TRANSLATIONUNITS*))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING *CURRENTFILENAME*))
   (CL:LET*
    ((FILE NULL) (UNITS NULL)
     (ITER-000 (%KEY-VALUE-LIST.THE-KV-LIST SYSTEMUNITS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NULL)) DO
     (CL:SETQ FILE (%KV-CONS.KEY ITER-000))
     (CL:SETQ UNITS (%KV-CONS.VALUE ITER-000))
     (CL:SETQ *CURRENTFILENAME*
      (FILE-BASE-NAME (%STRING-WRAPPER.WRAPPER-VALUE FILE)))
     (CL:SETQ *TRANSLATIONUNITS* UNITS)
     (CL:LET*
      ((*MODULE* (COMPUTE-FILE-UNITS-MODULE UNITS))
       (*CONTEXT* *MODULE*))
      (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
      (TRANSLATE-AND-OUTPUT-UNITS-TO-FILE
       (%STRING-WRAPPER.WRAPPER-VALUE FILE) "C++"))
     (CLEAN-UP-TRANSLATION-UNITS-SPECIAL)
     (CL:SETQ ITER-000 (%KV-CONS.REST ITER-000))))
   (CPP-OUTPUT-SYSTEM-SPECIFIC-FILES))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SYSTEM-SPECIFIC-FILES ...)

(CL:DEFUN CPP-OUTPUT-SYSTEM-SPECIFIC-FILES ()
  (CPP-OUTPUT-SYSTEM-HEADER-FILE)
  (CPP-OUTPUT-SYSTEM-MAKEFILE)
  :VOID)

;;; (DEFUN (CPP-YIELD-SYSTEM-HEADER-FILE-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  CPP-YIELD-SYSTEM-HEADER-FILE-NAME))
(CL:DEFUN CPP-YIELD-SYSTEM-HEADER-FILE-NAME (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  #+MCL
  (CL:CHECK-TYPE SYSTEMNAME CL:SIMPLE-STRING)
  (CL:RETURN-FROM CPP-YIELD-SYSTEM-HEADER-FILE-NAME
   (CONCATENATE (STRING-DOWNCASE SYSTEMNAME) "-system")))

;;; (DEFUN (CPP-YIELD-SYSTEM-HEADER-FILE-GUARD STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  CPP-YIELD-SYSTEM-HEADER-FILE-GUARD))
(CL:DEFUN CPP-YIELD-SYSTEM-HEADER-FILE-GUARD (SYSTEMNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
  #+MCL
  (CL:CHECK-TYPE SYSTEMNAME CL:SIMPLE-STRING)
  (CL:RETURN-FROM CPP-YIELD-SYSTEM-HEADER-FILE-GUARD
   (CONCATENATE "_STELLA_"
    (CPP-SUBSTITUTE-FORBIDDEN-CHARACTERS (STRING-UPCASE SYSTEMNAME)
     KWD-CPP-TRANSLATE-FILE-UPPERCASE)
    "_SYSTEM_HH")))

;;; (DEFUN CPP-OUTPUT-SYSTEM-HEADER-FILE ...)

(CL:DEFUN CPP-OUTPUT-SYSTEM-HEADER-FILE ()
  (CL:LET*
   ((SYSTEM *CURRENTSYSTEMDEFINITION*)
    (SYSTEMNAME (%SYSTEM-DEFINITION.NAME SYSTEM))
    (HEADEROUTPUTFILE
     (MAKE-FILE-NAME (CPP-YIELD-SYSTEM-HEADER-FILE-NAME SYSTEMNAME)
      KWD-CPP-TRANSLATE-FILE-CPP-HEADER CL:T)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMNAME))
   (CL:LET* ((HEADEROUTPUTSTREAM NULL))
    (CL:UNWIND-PROTECT
     (CL:PROGN
      (CL:SETQ HEADEROUTPUTSTREAM
       (OPEN-OUTPUT-FILE HEADEROUTPUTFILE
        KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS
        KWD-CPP-TRANSLATE-FILE-CREATE-PATH))
      (CL:LET*
       ((*CURRENT-STREAM* HEADEROUTPUTSTREAM)
        (*MODULE* (GET-CARDINAL-MODULE *CURRENTSYSTEMDEFINITION*))
        (*CPP-CURRENT-UNIT-MODULE* NULL))
       (CL:DECLARE
        (CL:SPECIAL *CURRENT-STREAM* *MODULE*
         *CPP-CURRENT-UNIT-MODULE*))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "// " (FILE-NAME-WITHOUT-DIRECTORY HEADEROUTPUTFILE) EOL EOL)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "#ifndef " (CPP-YIELD-SYSTEM-HEADER-FILE-GUARD SYSTEMNAME) EOL
        "#define " (CPP-YIELD-SYSTEM-HEADER-FILE-GUARD SYSTEMNAME) EOL
        EOL)
       (CL:WHEN
        (CL:NOT
         (CL:EQ (%SYSTEM-DEFINITION.REQUIRED-SYSTEMS SYSTEM) NULL))
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "// Required systems:" EOL)
        (CL:LET*
         ((REQSYS NULL)
          (ITER-000 (%SYSTEM-DEFINITION.REQUIRED-SYSTEMS SYSTEM)))
         (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
          (CL:SETQ REQSYS (%%VALUE ITER-000))
          (CPP-OUTPUT-IMPORT-DECLARATIONS
           (%STRING-WRAPPER.WRAPPER-VALUE REQSYS))
          (CL:SETQ ITER-000 (%%REST ITER-000)))))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "// System-wide forward declarations:" EOL)
       (CL:LET*
        ((MODULE NULL)
         (ITER-001
          (CONS *MODULE*
           (REMOVE (COLLECT-DEFINED-MODULES-FROM-SYSTEM-FILE SYSTEM)
            *MODULE*))))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
         (CL:SETQ MODULE (%%VALUE ITER-001))
         (CL:LET* ((CURRENTNAMESPACEMODULE NULL))
          (CL:LET* ((CLASS NULL) (ITER-002 (ALL-CLASSES MODULE CL:T)))
           (CL:LOOP WHILE (NEXT? ITER-002) DO
            (CL:SETQ CLASS (%ITERATOR.VALUE ITER-002))
            (CL:WHEN (CREATE-NATIVE-CLASS? CLASS)
             (CL:SETQ *CPP-CURRENT-UNIT-MODULE* (HOME-MODULE CLASS))
             (CL:WHEN (CL:EQ CURRENTNAMESPACEMODULE NULL)
              (%%PRINT-STREAM
               (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
             (CPP-OUTPUT-NAMESPACE-CHANGE CURRENTNAMESPACEMODULE
              *CPP-CURRENT-UNIT-MODULE*)
             (CL:SETQ CURRENTNAMESPACEMODULE *CPP-CURRENT-UNIT-MODULE*)
             (%%PRINT-STREAM
              (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "class "
              (%STRING-WRAPPER.WRAPPER-VALUE
               (CPP-TRANSLATE-CLASS-NAME (%CLASS.CLASS-TYPE CLASS)))
              ";" EOL))))
          (CL:WHEN (CL:NOT (CL:EQ CURRENTNAMESPACEMODULE NULL))
           (%%PRINT-STREAM
            (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
           (CPP-OUTPUT-NAMESPACE-FOOTER *CPP-CURRENT-UNIT-MODULE*)))
         (CL:SETQ ITER-001 (%%REST ITER-001))))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        EOL)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "// System components:" EOL)
       (CL:WHEN (STRING-EQL? SYSTEMNAME "stella")
        (CPP-OUTPUT-INCLUDE-DIRECTIVE
         (CPP-RELATIVIZE-HEADER-FILE
          (MAKE-FILE-NAME-FROM-RELATIVE-PATH
           (LIST* (WRAP-STRING "cpp-lib") (WRAP-STRING "cpp-primal")
            NIL)
           KWD-CPP-TRANSLATE-FILE-CPP-HEADER)
          SYSTEMNAME)
         CL:NIL))
       (CL:LET*
        ((FILE NULL)
         (ITER-003
          (FILES-PLUS-SYSTEM-STARTUP
           (SYSTEM-DEFINITION-SOURCE-FILES SYSTEM))))
        (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
         (CL:SETQ FILE (%%VALUE ITER-003))
         (CPP-OUTPUT-INCLUDE-DIRECTIVE
          (CPP-RELATIVIZE-HEADER-FILE
           (MAKE-FILE-NAME (%STRING-WRAPPER.WRAPPER-VALUE FILE)
            KWD-CPP-TRANSLATE-FILE-CPP-HEADER CL:T)
           SYSTEMNAME)
          CL:NIL)
         (CL:SETQ ITER-003 (%%REST ITER-003))))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        EOL "#endif" EOL)))
     (CL:WHEN (CL:NOT (CL:EQ HEADEROUTPUTSTREAM NULL))
      (FREE HEADEROUTPUTSTREAM)))))
  :VOID)

;;; (DEFUN (CPP-YIELD-SYSTEMS-ROOT-DIRECTORY STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  CPP-YIELD-SYSTEMS-ROOT-DIRECTORY))
(CL:DEFUN CPP-YIELD-SYSTEMS-ROOT-DIRECTORY ()
  (CL:LET*
   ((DIRECTORY
     (%SYSTEM-DEFINITION.DIRECTORY *CURRENTSYSTEMDEFINITION*))
    (ROOT ".."))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING ROOT))
   (CL:LOOP
    (CL:SETQ DIRECTORY (DIRECTORY-PARENT-DIRECTORY DIRECTORY 1))
    (CL:IF (STRING-EQL? DIRECTORY "") (CL:RETURN)
     (CL:SETQ ROOT (CONCATENATE ROOT "/.."))))
   (CL:RETURN-FROM CPP-YIELD-SYSTEMS-ROOT-DIRECTORY ROOT)))

;;; (DEFUN (CPP-YIELD-STELLA-ROOT-DIRECTORY STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  CPP-YIELD-STELLA-ROOT-DIRECTORY))
(CL:DEFUN CPP-YIELD-STELLA-ROOT-DIRECTORY ()
  (CL:LET* ((SYSTEMSROOT (CPP-YIELD-SYSTEMS-ROOT-DIRECTORY)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SYSTEMSROOT))
   (CL:LET*
    ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION "STELLA" CL:T))
     (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
      (%SYSTEM-DEFINITION.DIRECTORY *CURRENTSYSTEMDEFINITION*)))
    (CL:DECLARE
     (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
      *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
    (CL:DECLARE
     (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
    (CL:PROGN
     (CL:RETURN-FROM CPP-YIELD-STELLA-ROOT-DIRECTORY
      (CONCATENATE SYSTEMSROOT "/"
       (FILE-BASE-NAME
        (DIRECTORY-FILE-NAME
         (DIRECTORY-PARENT-DIRECTORY
          (MAKE-FILE-NAME "dummy" KWD-CPP-TRANSLATE-FILE-CPP-CODE CL:T)
          1)))))))))

;;; (DEFUN CPP-OUTPUT-SYSTEM-MAKEFILE ...)

(CL:DEFUN CPP-OUTPUT-SYSTEM-MAKEFILE ()
  (CL:LET*
   ((MAKEFILE
     (MAKE-FILE-NAME "Makefile" KWD-CPP-TRANSLATE-FILE-STELLA CL:T))
    (TEMPLATEFILE
     (CONCATENATE (FILE-NAME-WITHOUT-EXTENSION MAKEFILE) ".in"))
    (SYSTEM *CURRENTSYSTEMDEFINITION*))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEMPLATEFILE))
   (CL:WHEN (CL:NOT (PROBE-FILE? TEMPLATEFILE))
    (CL:LET*
     ((*CURRENTSYSTEMDEFINITION* (GET-SYSTEM-DEFINITION "STELLA" CL:T))
      (*CURRENTSYSTEMDEFINITIONSUBDIRECTORY*
       (%SYSTEM-DEFINITION.DIRECTORY *CURRENTSYSTEMDEFINITION*)))
     (CL:DECLARE
      (CL:SPECIAL *CURRENTSYSTEMDEFINITION*
       *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
     (CL:DECLARE
      (CL:TYPE CL:SIMPLE-STRING *CURRENTSYSTEMDEFINITIONSUBDIRECTORY*))
     (CL:PROGN
      (CL:SETQ MAKEFILE
       (MAKE-FILE-NAME "Makefile-default" KWD-CPP-TRANSLATE-FILE-STELLA
        CL:T))
      (CL:SETQ TEMPLATEFILE
       (CONCATENATE (FILE-NAME-WITHOUT-EXTENSION MAKEFILE) ".in")))))
   (CL:LET*
    ((VARIABLES (NEW-KEY-VALUE-LIST))
     (SYSTEMFILES (NEW-OUTPUT-STRING-STREAM))
     (REQUIREDSYSTEMS (NEW-OUTPUT-STRING-STREAM))
     (REQUIREDSYSTEMDIRS (NEW-OUTPUT-STRING-STREAM))
     (ALLREQUIREDSYSTEMS (NEW-OUTPUT-STRING-STREAM))
     (NATIVESYSTEMROOT
      (FILE-NAME-DIRECTORY
       (MAKE-FILE-NAME "foo" KWD-CPP-TRANSLATE-FILE-CPP-CODE CL:T))))
    (INSERT-AT VARIABLES (WRAP-STRING "SYSTEM-NAME")
     (WRAP-STRING (%SYSTEM-DEFINITION.NAME SYSTEM)))
    (INSERT-AT VARIABLES (WRAP-STRING "PROGRAM-NAME")
     (WRAP-STRING (%SYSTEM-DEFINITION.NAME SYSTEM)))
    (INSERT-AT VARIABLES (WRAP-STRING "MAIN-NAME")
     (WRAP-STRING
      (FILE-NAME-WITHOUT-DIRECTORY (CPP-YIELD-MAIN-FILE-NAME))))
    (INSERT-AT VARIABLES (WRAP-STRING "SYSTEMS-ROOT")
     (WRAP-STRING (CPP-YIELD-SYSTEMS-ROOT-DIRECTORY)))
    (INSERT-AT VARIABLES (WRAP-STRING "STELLA-ROOT")
     (WRAP-STRING (CPP-YIELD-STELLA-ROOT-DIRECTORY)))
    (CL:LET*
     ((FILE NULL)
      (ITER-000
       (FILES-PLUS-SYSTEM-STARTUP
        (SYSTEM-DEFINITION-SOURCE-FILES SYSTEM))))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ FILE (%%VALUE ITER-000))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM SYSTEMFILES)
       (RELATIVIZE-FILE-NAME
        (MAKE-FILE-NAME (%STRING-WRAPPER.WRAPPER-VALUE FILE)
         KWD-CPP-TRANSLATE-FILE-CPP-CODE CL:T)
        NATIVESYSTEMROOT)
       " ")
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (INSERT-AT VARIABLES (WRAP-STRING "SYSTEM-FILES")
     (WRAP-STRING (THE-STRING-READER SYSTEMFILES)))
    (CL:WHEN
     (CL:NOT (CL:EQ (%SYSTEM-DEFINITION.REQUIRED-SYSTEMS SYSTEM) NULL))
     (CL:LET*
      ((REQSYS NULL)
       (ITER-001 (%SYSTEM-DEFINITION.REQUIRED-SYSTEMS SYSTEM)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
       (CL:SETQ REQSYS (%%VALUE ITER-001))
       (%%PRINT-STREAM
        (%OUTPUT-STRING-STREAM.NATIVE-STREAM REQUIREDSYSTEMS)
        (%STRING-WRAPPER.WRAPPER-VALUE REQSYS) " ")
       (%%PRINT-STREAM
        (%OUTPUT-STRING-STREAM.NATIVE-STREAM REQUIREDSYSTEMDIRS)
        (%SYSTEM-DEFINITION.DIRECTORY
         (GET-SYSTEM-DEFINITION (%STRING-WRAPPER.WRAPPER-VALUE REQSYS)
          CL:T))
        " ")
       (CL:SETQ ITER-001 (%%REST ITER-001))))
     (CL:LET*
      ((REQSYS NULL)
       (ITER-002
        (ALL-REQUIRED-SYSTEMS (%SYSTEM-DEFINITION.NAME SYSTEM))))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
       (CL:SETQ REQSYS (%%VALUE ITER-002))
       (%%PRINT-STREAM
        (%OUTPUT-STRING-STREAM.NATIVE-STREAM ALLREQUIREDSYSTEMS)
        (%STRING-WRAPPER.WRAPPER-VALUE REQSYS) " ")
       (CL:SETQ ITER-002 (%%REST ITER-002)))))
    (INSERT-AT VARIABLES (WRAP-STRING "REQUIRED-SYSTEMS")
     (WRAP-STRING (THE-STRING-READER REQUIREDSYSTEMS)))
    (INSERT-AT VARIABLES (WRAP-STRING "REQUIRED-SYSTEM-DIRS")
     (WRAP-STRING (THE-STRING-READER REQUIREDSYSTEMDIRS)))
    (INSERT-AT VARIABLES (WRAP-STRING "ALL-REQUIRED-SYSTEMS")
     (WRAP-STRING (THE-STRING-READER ALLREQUIREDSYSTEMS)))
    (CL:SETQ MAKEFILE
     (FILE-NAME-WITHOUT-EXTENSION
      (MAKE-FILE-NAME "Makefile" KWD-CPP-TRANSLATE-FILE-CPP-CODE
       CL:T)))
    (SUBSTITUTE-TEMPLATE-VARIABLES-TO-MAKEFILE TEMPLATEFILE MAKEFILE
     VARIABLES)))
  :VOID)

;;; (DEFGLOBAL *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* ...)

(CL:DEFVAR *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* "#$")
(CL:DECLAIM
 (CL:TYPE CL:SIMPLE-STRING *MAKEFILE-TEMPLATE-VARIABLE-PREFIX*))

;;; (DEFUN (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:T) CL:SIMPLE-STRING)
  SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING))
(CL:DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING (STRING VARIABLES)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  (CL:LET*
   ((INDEX 0) (LENGTH (CL:THE CL:FIXNUM (CL:LENGTH STRING)))
    (RESULT STRING) (VARIABLEEND 0) (VARIABLENAME STELLA::NULL-STRING)
    (VARIABLEVALUE NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX LENGTH VARIABLEEND)
    (CL:TYPE CL:SIMPLE-STRING RESULT VARIABLENAME))
   (CL:LOOP
    (CL:TAGBODY
     (CL:SETQ INDEX
      (STRING-SEARCH RESULT *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* INDEX))
     (CL:WHEN (CL:= INDEX NULL-INTEGER) (CL:RETURN))
     (CL:SETQ INDEX (CL:+ INDEX 2))
     (CL:WHEN (CL:>= INDEX LENGTH)
      (CL:WARN "Illegal template variable syntax in~%    `~A'" STRING)
      (CL:RETURN))
     (CL:WHEN
      (CL:NOT
       (CL:EQL
        (CL:LET ((SELF RESULT) (POSITION INDEX))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION)))
        #\())
      (CL:WARN "Illegal template variable syntax in~%    `~A'" STRING)
      (CL:GO :CONTINUE))
     (CL:SETQ VARIABLEEND (POSITION RESULT #\) INDEX))
     (CL:WHEN (CL:= VARIABLEEND NULL-INTEGER)
      (CL:WARN "Illegal template variable syntax in~%    `~A'" STRING)
      (CL:GO :CONTINUE))
     (CL:SETQ INDEX (CL:1+ INDEX))
     (CL:SETQ VARIABLENAME (SUBSEQUENCE RESULT INDEX VARIABLEEND))
     (CL:SETQ VARIABLEVALUE
      (LOOKUP VARIABLES (WRAP-STRING VARIABLENAME)))
     (CL:WHEN (CL:EQ VARIABLEVALUE NULL)
      (CL:WARN "Undefined template variable: `~A'" VARIABLENAME)
      (CL:GO :CONTINUE))
     (CL:SETQ RESULT
      (CONCATENATE (SUBSEQUENCE RESULT 0 (CL:- INDEX 3))
       (%STRING-WRAPPER.WRAPPER-VALUE VARIABLEVALUE)
       (SUBSEQUENCE RESULT (CL:1+ VARIABLEEND) NULL-INTEGER)))
     (CL:SETQ INDEX
      (CL:+ VARIABLEEND 1
       (CL:- (CL:THE CL:FIXNUM (CL:LENGTH RESULT)) LENGTH)))
     (CL:SETQ LENGTH (CL:THE CL:FIXNUM (CL:LENGTH RESULT))) :CONTINUE))
   (CL:RETURN-FROM SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING RESULT)))

;;; (DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM ...)

(CL:DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM (TEMPLATESTREAM OUTPUTSTREAM VARIABLES)
  (CL:LET*
   ((LINE STELLA::NULL-STRING) (ITER-000 (LINES TEMPLATESTREAM)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LINE))
   (CL:LOOP WHILE (NEXT? ITER-000) DO
    (CL:SETQ LINE (%LINE-ITERATOR.VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM OUTPUTSTREAM)
     (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING LINE VARIABLES) EOL)))
  :VOID)

;;; (DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-TO-MAKEFILE ...)

(CL:DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-TO-MAKEFILE (TEMPLATEFILE OUTPUTFILE VARIABLES)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEMPLATEFILE OUTPUTFILE))
  #+MCL
  (CL:CHECK-TYPE TEMPLATEFILE CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE OUTPUTFILE CL:SIMPLE-STRING)
  (CL:LET* ((IN NULL))
   (CL:UNWIND-PROTECT
    (CL:PROGN (CL:SETQ IN (OPEN-INPUT-FILE TEMPLATEFILE))
     (CL:LET* ((OUT NULL))
      (CL:UNWIND-PROTECT
       (CL:PROGN
        (CL:SETQ OUT
         (OPEN-OUTPUT-FILE OUTPUTFILE
          KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS
          KWD-CPP-TRANSLATE-FILE-CREATE-PATH))
        (%%PRINT-STREAM (%OUTPUT-FILE-STREAM.NATIVE-STREAM OUT)
         "# This file has been generated automatically.  Modify at your own risk!"
         EOL EOL)
        (SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM IN OUT VARIABLES))
       (CL:WHEN (CL:NOT (CL:EQ OUT NULL)) (FREE OUT)))))
    (CL:WHEN (CL:NOT (CL:EQ IN NULL)) (FREE IN))))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-TRANSLATE-FILE1 ()
  (CL:PROGN
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CPPTRANS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPPTRANS" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-COMMON-LISP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-CODE" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP-HEADER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-HEADER" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-IF-NOT-EXISTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF-NOT-EXISTS" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-CREATE-PATH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CREATE-PATH" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-PRINT-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-MACRO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-WHITE-SPACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHITE-SPACE" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-AUXILIARY-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AUXILIARY-VARIABLE" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CPP_FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION" NULL 0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-CPP_DEFPRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DEFPRINT" NULL 0))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-CPP-STANDALONE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-TWO-PASS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TWO-PASS?" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-FORCE-TRANSLATION?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FORCE-TRANSLATION?" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-PRODUCTION-SETTINGS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRODUCTION-SETTINGS?" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-UPPERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPPERCASE" NULL 2))
   (CL:SETQ KWD-CPP-TRANSLATE-FILE-STELLA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA" NULL 2))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-STARTUP-CPP-TRANSLATE-FILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-CPP-TRANSLATE-FILE" NULL
     0))
   (CL:SETQ SYM-CPP-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN STARTUP-CPP-TRANSLATE-FILE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-CPP-TRANSLATE-FILE1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *CURRENT-STREAM* STANDARD-OUTPUT))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "CPPTRANS"
     "(DEFUN CPPTRANS ((STATEMENT OBJECT)) :COMMAND? TRUE :PUBLIC? TRUE :EVALUATE-ARGUMENTS? FALSE :DOCUMENTATION \"Translate `statement' to C++ and print the result.\")"
     (CL:FUNCTION %CPPTRANS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-MAKE-CODE-OUTPUT-FILE-NAME"
     "(DEFUN (CPP-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-MAKE-CODE-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-MAKE-HEADER-OUTPUT-FILE-NAME"
     "(DEFUN (CPP-MAKE-HEADER-OUTPUT-FILE-NAME FILE-NAME) ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-MAKE-HEADER-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FILE-HEADER"
     "(DEFUN CPP-OUTPUT-FILE-HEADER ((STREAM OUTPUT-STREAM) (FILE FILE-NAME)))"
     (CL:FUNCTION CPP-OUTPUT-FILE-HEADER) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-INCLUDE-DIRECTIVE"
     "(DEFUN CPP-OUTPUT-INCLUDE-DIRECTIVE ((FILENAME FILE-NAME) (STRIPDIRECTORY? BOOLEAN)))"
     (CL:FUNCTION CPP-OUTPUT-INCLUDE-DIRECTIVE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS"
     "(DEFUN CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS ((HEADERFILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-STANDALONE-OUTPUT-IMPORT-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT"
     "(DEFUN (CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT FILE-NAME) ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-GET-NATIVE-TOP-LEVEL-SYSTEM-ROOT) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-RELATIVIZE-HEADER-FILE"
     "(DEFUN (CPP-RELATIVIZE-HEADER-FILE FILE-NAME) ((HEADERFILE FILE-NAME) (SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-RELATIVIZE-HEADER-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-IMPORT-DECLARATIONS"
     "(DEFUN CPP-OUTPUT-IMPORT-DECLARATIONS ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-OUTPUT-IMPORT-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CLASS-HEAD-DECLARATIONS"
     "(DEFUN CPP-OUTPUT-CLASS-HEAD-DECLARATIONS ((CLASSES CONS)))"
     (CL:FUNCTION CPP-OUTPUT-CLASS-HEAD-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-NAMESPACE-HEADER"
     "(DEFUN CPP-OUTPUT-NAMESPACE-HEADER ((MODULE MODULE)))"
     (CL:FUNCTION CPP-OUTPUT-NAMESPACE-HEADER) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-NAMESPACE-FOOTER"
     "(DEFUN CPP-OUTPUT-NAMESPACE-FOOTER ((MODULE MODULE)))"
     (CL:FUNCTION CPP-OUTPUT-NAMESPACE-FOOTER) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-UNIT-DEFINES-MAIN?"
     "(DEFUN (CPP-UNIT-DEFINES-MAIN? BOOLEAN) ((UNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION CPP-UNIT-DEFINES-MAIN?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-YIELD-MAIN-FILE-NAME"
     "(DEFUN (CPP-YIELD-MAIN-FILE-NAME FILE-NAME) ())"
     (CL:FUNCTION CPP-YIELD-MAIN-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-MAIN"
     "(DEFUN CPP-OUTPUT-MAIN ((UNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION CPP-OUTPUT-MAIN) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-SORT-UNITS-FOR-HEADER-FILE"
     "(DEFUN (CPP-SORT-UNITS-FOR-HEADER-FILE (LIST OF (CONS OF TRANSLATION-UNIT))) ((FILEUNITS (LIST OF TRANSLATION-UNIT))))"
     (CL:FUNCTION CPP-SORT-UNITS-FOR-HEADER-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-NAMESPACE-CHANGE"
     "(DEFUN CPP-OUTPUT-NAMESPACE-CHANGE ((FROMNAMESPACE MODULE) (TONAMESPACE MODULE)))"
     (CL:FUNCTION CPP-OUTPUT-NAMESPACE-CHANGE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ALL-UNITS-TO-FILE"
     "(DEFUN CPP-OUTPUT-ALL-UNITS-TO-FILE ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-OUTPUT-ALL-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-FILE"
     "(DEFUN CPP-TRANSLATE-FILE ((FILENAME FILE-NAME)) :PUBLIC? TRUE)"
     (CL:FUNCTION CPP-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-STANDALONE-TRANSLATE-FILE"
     "(DEFUN CPP-STANDALONE-TRANSLATE-FILE ((FILENAME FILE-NAME)))"
     (CL:FUNCTION CPP-STANDALONE-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-SYSTEM"
     "(DEFUN CPP-TRANSLATE-SYSTEM ((SYSTEMNAME STRING)) :DOCUMENTATION \"Translate the system `systemName' to C++.\" :PUBLIC? TRUE)"
     (CL:FUNCTION CPP-TRANSLATE-SYSTEM) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-TRANSLATE-WALKED-SYSTEM-UNITS"
     "(DEFUN CPP-TRANSLATE-WALKED-SYSTEM-UNITS ((SYSTEMUNITS SYSTEM-UNITS-ALIST)))"
     (CL:FUNCTION CPP-TRANSLATE-WALKED-SYSTEM-UNITS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SYSTEM-SPECIFIC-FILES"
     "(DEFUN CPP-OUTPUT-SYSTEM-SPECIFIC-FILES ())"
     (CL:FUNCTION CPP-OUTPUT-SYSTEM-SPECIFIC-FILES) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-YIELD-SYSTEM-HEADER-FILE-NAME"
     "(DEFUN (CPP-YIELD-SYSTEM-HEADER-FILE-NAME STRING) ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-YIELD-SYSTEM-HEADER-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-YIELD-SYSTEM-HEADER-FILE-GUARD"
     "(DEFUN (CPP-YIELD-SYSTEM-HEADER-FILE-GUARD STRING) ((SYSTEMNAME STRING)))"
     (CL:FUNCTION CPP-YIELD-SYSTEM-HEADER-FILE-GUARD) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SYSTEM-HEADER-FILE"
     "(DEFUN CPP-OUTPUT-SYSTEM-HEADER-FILE ())"
     (CL:FUNCTION CPP-OUTPUT-SYSTEM-HEADER-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-YIELD-SYSTEMS-ROOT-DIRECTORY"
     "(DEFUN (CPP-YIELD-SYSTEMS-ROOT-DIRECTORY STRING) ())"
     (CL:FUNCTION CPP-YIELD-SYSTEMS-ROOT-DIRECTORY) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-YIELD-STELLA-ROOT-DIRECTORY"
     "(DEFUN (CPP-YIELD-STELLA-ROOT-DIRECTORY STRING) ())"
     (CL:FUNCTION CPP-YIELD-STELLA-ROOT-DIRECTORY) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SYSTEM-MAKEFILE"
     "(DEFUN CPP-OUTPUT-SYSTEM-MAKEFILE ())"
     (CL:FUNCTION CPP-OUTPUT-SYSTEM-MAKEFILE) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING"
     "(DEFUN (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING STRING) ((STRING STRING) (VARIABLES (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))))"
     (CL:FUNCTION SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM"
     "(DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM ((TEMPLATESTREAM INPUT-STREAM) (OUTPUTSTREAM OUTPUT-STREAM) (VARIABLES (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))))"
     (CL:FUNCTION SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "SUBSTITUTE-TEMPLATE-VARIABLES-TO-MAKEFILE"
     "(DEFUN SUBSTITUTE-TEMPLATE-VARIABLES-TO-MAKEFILE ((TEMPLATEFILE STRING) (OUTPUTFILE STRING) (VARIABLES (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))))"
     (CL:FUNCTION SUBSTITUTE-TEMPLATE-VARIABLES-TO-MAKEFILE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CPP-TRANSLATE-FILE"
     "(DEFUN STARTUP-CPP-TRANSLATE-FILE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-CPP-TRANSLATE-FILE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-CPP-TRANSLATE-FILE-STELLA-STARTUP-CPP-TRANSLATE-FILE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-CPP-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupCppTranslateFile") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *CURRENT-STREAM* OUTPUT-STREAM STANDARD-OUTPUT)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *CPP-TRANSLATED-FILE-SUFFIX* STRING \"\")" NULL)
    (REGISTER-NATIVE-NAME SYM-CPP-TRANSLATE-FILE-STELLA-CPPTRANS
     KWD-CPP-TRANSLATE-FILE-COMMON-LISP
     KWD-CPP-TRANSLATE-FILE-FUNCTION)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *MAKEFILE-TEMPLATE-VARIABLE-PREFIX* STRING \"#$\")"
     NULL)))
  :VOID)
