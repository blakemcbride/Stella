;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; java-class-out.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-JAVA-CLASS-OUT-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-DOCUMENTATION NULL)
(CL:DEFVAR KWD-JAVA-CLASS-OUT-EMBEDDED NULL)
(CL:DEFVAR KWD-JAVA-CLASS-OUT-INSTANCE NULL)
(CL:DEFVAR KWD-JAVA-CLASS-OUT-CLASS NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-METHOD NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-MACRO NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-METHOD-CONSTRUCTOR? NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-JAVA_EXCEPTION_CLASS NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-JAVA_CLASS NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-JAVA_DECLARATIONS NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-STARTUP-JAVA-CLASS-OUT NULL)
(CL:DEFVAR SYM-JAVA-CLASS-OUT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* *CONTEXT* *TRANSLATIONUNITS*
  FALSE-WRAPPER NULL-STRING-WRAPPER NIL))

;;; (DEFUN (JAVA-YIELD-INSTANCE-VAR-TREE CONS) ...)

(CL:DEFUN JAVA-YIELD-INSTANCE-VAR-TREE (SLOT CLASS)
  (CL:LET*
   ((SLOTNAME
     (TRUE-SLOT-NAME (%STORAGE-SLOT.SLOT-NAME SLOT)
      (%CLASS.CLASS-TYPE CLASS)))
    (SLOTTYPE
     (CL:IF (%STORAGE-SLOT.SLOT-CONTEXT-SENSITIVE? SLOT)
      SGT-JAVA-CLASS-OUT-STELLA-OBJECT
      (COMPUTE-RETURN-TYPE-SPEC SLOT (%CLASS.CLASS-TYPE CLASS))))
    (ALLOCATION (ALLOCATION SLOT)) (ALLOCATIONFORM NULL)
    (ACCESSFORM NULL)
    (DOCUMENTATION
     (%STRING-WRAPPER.WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%STORAGE-SLOT.DYNAMIC-SLOTS SLOT)
       SYM-JAVA-CLASS-OUT-STELLA-DOCUMENTATION NULL-STRING-WRAPPER)))
    (DOCUMENTATIONFORM NIL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOCUMENTATION))
   (CL:IF (%STORAGE-SLOT.SLOT-PUBLIC? SLOT)
    (CL:SETQ ACCESSFORM (CONS (WRAP-STRING "public") NIL))
    (CL:SETQ ACCESSFORM (CONS (WRAP-STRING "protected") NIL)))
   (CL:COND
    ((CL:EQ ALLOCATION KWD-JAVA-CLASS-OUT-EMBEDDED)
     (CL:SETQ ALLOCATIONFORM NIL))
    ((CL:EQ ALLOCATION KWD-JAVA-CLASS-OUT-INSTANCE)
     (CL:SETQ ALLOCATIONFORM NIL))
    ((CL:EQ ALLOCATION KWD-JAVA-CLASS-OUT-CLASS)
     (CL:SETQ ALLOCATIONFORM (CONS (WRAP-STRING "static") NIL)))
    (CL:T (CL:SETQ ALLOCATIONFORM NIL)))
   (CL:WHEN (CL:NOT (CL:EQ DOCUMENTATION STELLA::NULL-STRING))
    (CL:SETQ DOCUMENTATIONFORM (CONS (WRAP-STRING DOCUMENTATION) NIL)))
   (CL:RETURN-FROM JAVA-YIELD-INSTANCE-VAR-TREE
    (LIST*
     (CONCATENATE ACCESSFORM
      (CONCATENATE ALLOCATIONFORM
       (CONS (JAVA-TRANSLATE-TYPE-SPEC SLOTTYPE) NIL)))
     (JAVA-TRANSLATE-NAME SLOTNAME)
     (CONCATENATE DOCUMENTATIONFORM NIL)))))

;;; (DEFUN (JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS CONS) ...)

(CL:DEFUN JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS (CLASS)
  (CL:WHEN (%CLASS.MIXIN? CLASS)
   (CL:RETURN-FROM JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS NIL))
  (CL:LET* ((INSTANCEVARDEFS NIL) (SUPERCLASS NULL))
   (CL:LET*
    ((SLOT NULL) (ITER-000 (CLASS-SLOTS CLASS)) (COLLECT-000 NULL))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (STORAGE-SLOT? SLOT) (NATIVE-SLOT? SLOT)
       (CL:EQ (NATIVE-SLOT-HOME SLOT CLASS) CLASS))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS (JAVA-YIELD-INSTANCE-VAR-TREE SLOT CLASS) NIL))
        (CL:IF (CL:EQ INSTANCEVARDEFS NIL)
         (CL:SETQ INSTANCEVARDEFS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST INSTANCEVARDEFS COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (JAVA-YIELD-INSTANCE-VAR-TREE SLOT CLASS) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))))
   (CL:LET*
    ((SUPER NULL)
     (ITER-001
      (%LIST.THE-CONS-LIST (%CLASS.CLASS-DIRECT-SUPERS CLASS))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ SUPER (%%VALUE ITER-001))
     (CL:SETQ SUPERCLASS (GET-STELLA-CLASS SUPER CL:T))
     (CL:WHEN (%CLASS.MIXIN? SUPERCLASS)
      (CL:LET*
       ((SLOT NULL) (ITER-002 (CLASS-SLOTS SUPERCLASS))
        (COLLECT-001 NULL))
       (CL:LOOP WHILE (NEXT? ITER-002) DO
        (CL:SETQ SLOT (%ITERATOR.VALUE ITER-002))
        (CL:WHEN
         (CL:AND (STORAGE-SLOT? SLOT) (NATIVE-SLOT? SLOT)
          (CL:EQ (NATIVE-SLOT-HOME SLOT SUPERCLASS) SUPERCLASS))
         (CL:IF (CL:EQ COLLECT-001 NULL)
          (CL:PROGN
           (CL:SETQ COLLECT-001
            (CONS (JAVA-YIELD-INSTANCE-VAR-TREE SLOT SUPERCLASS) NIL))
           (CL:IF (CL:EQ INSTANCEVARDEFS NIL)
            (CL:SETQ INSTANCEVARDEFS COLLECT-001)
            (ADD-CONS-TO-END-OF-CONS-LIST INSTANCEVARDEFS
             COLLECT-001)))
          (CL:PROGN
           (CL:SETF (%%REST COLLECT-001)
            (CONS (JAVA-YIELD-INSTANCE-VAR-TREE SLOT SUPERCLASS) NIL))
           (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))))))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:RETURN-FROM JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS
    INSTANCEVARDEFS)))

;;; (DEFUN (JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS CONS CONS) ...)

(CL:DEFUN JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS (CLASS)
  (CL:LET*
   ((CONSTRUCTORDEFINITIONS NIL) (METHODDEFINITIONS NIL) (METHOD NULL))
   (CL:LET*
    ((TU NULL) (ITER-000 (%LIST.THE-CONS-LIST *TRANSLATIONUNITS*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ TU (%%VALUE ITER-000))
     (CL:WHEN
      (CL:OR
       (CL:EQ (%TRANSLATION-UNIT.CATEGORY TU)
        SYM-JAVA-CLASS-OUT-STELLA-METHOD)
       (CL:EQ (%TRANSLATION-UNIT.CATEGORY TU)
        SYM-JAVA-CLASS-OUT-STELLA-MACRO)
       (CL:EQ (%TRANSLATION-UNIT.CATEGORY TU)
        SYM-JAVA-CLASS-OUT-STELLA-PRINT-METHOD))
      (CL:IF
       (CL:EQ (%TRANSLATION-UNIT.CATEGORY TU)
        SYM-JAVA-CLASS-OUT-STELLA-PRINT-METHOD)
       (CL:WHEN
        (CL:EQ
         (CANONICAL-TYPE
          (%CLASS.CLASS-TYPE (%TRANSLATION-UNIT.THE-OBJECT TU)))
         (%CLASS.CLASS-TYPE CLASS))
        (CL:SETQ METHODDEFINITIONS (CONS TU METHODDEFINITIONS)))
       (CL:PROGN (CL:SETQ METHOD (%TRANSLATION-UNIT.THE-OBJECT TU))
        (CL:COND
         ((CL:OR (JAVA-FLOTSAM-FUNCTION? METHOD)
           (METHOD-STARTUP-FUNCTION? METHOD)))
         ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
            SYM-JAVA-CLASS-OUT-STELLA-METHOD-CONSTRUCTOR?
            FALSE-WRAPPER))
          (CL:WHEN
           (CL:EQ (CANONICAL-TYPE (%METHOD-SLOT.SLOT-BASE-TYPE METHOD))
            (%CLASS.CLASS-TYPE CLASS))
           (CL:SETQ CONSTRUCTORDEFINITIONS
            (CONS TU CONSTRUCTORDEFINITIONS))))
         ((CL:EQ (CANONICAL-TYPE (%METHOD-SLOT.SLOT-OWNER METHOD))
           (%CLASS.CLASS-TYPE CLASS))
          (CL:SETQ METHODDEFINITIONS (CONS TU METHODDEFINITIONS)))))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS
    (CL:VALUES (REVERSE CONSTRUCTORDEFINITIONS)
     (REVERSE METHODDEFINITIONS)))))

;;; (DEFUN (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT (UNIT)
  (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT
   (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS
    (%TRANSLATION-UNIT.THE-OBJECT UNIT))))

;;; (DEFUN (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-DEFINE-NATIVE-CLASS (CLASS)
  (CL:LET*
   ((PARENTCLASS NULL) (INTERFACECLASSES NIL) (INSTANCEVARDEFS NIL)
    (CONSTRUCTORDEFS NIL) (MODIFIERS NIL) (METHODDEFS NIL))
   (CL:LET*
    ((*CONTEXT* (HOME-MODULE CLASS))
     (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
    (CL:WHEN (%CLASS.MIXIN? CLASS)
     (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-NATIVE-CLASS NIL))
    (CL:WHEN (%CLASS.ABSTRACT? CLASS)
     (CL:SETQ MODIFIERS (CONS (WRAP-STRING "abstract") MODIFIERS)))
    (CL:WHEN (PUBLIC? CLASS)
     (CL:SETQ MODIFIERS (CONS (WRAP-STRING "public") MODIFIERS)))
    (CL:WHEN
     (CL:NOT (CL:EQ (FIRST (%CLASS.CLASS-DIRECT-SUPERS CLASS)) NULL))
     (CL:SETQ PARENTCLASS
      (JAVA-TRANSLATE-CLASS-NAME
       (SYMBOLIZE (FIRST (%CLASS.CLASS-DIRECT-SUPERS CLASS))))))
    (CL:SETQ INSTANCEVARDEFS
     (JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS CLASS))
    (CL:MULTIPLE-VALUE-SETQ (CONSTRUCTORDEFS METHODDEFS)
     (JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS CLASS))
    (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-NATIVE-CLASS
     (CONS
      (CL:IF (EXCEPTION-CLASS? CLASS)
       SYM-JAVA-CLASS-OUT-STELLA-JAVA_EXCEPTION_CLASS
       SYM-JAVA-CLASS-OUT-STELLA-JAVA_CLASS)
      (CONS
       (CL:IF
        (CL:NOT
         (CL:EQ
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
            SYM-JAVA-CLASS-OUT-STELLA-DOCUMENTATION
            NULL-STRING-WRAPPER))
          STELLA::NULL-STRING))
        (WRAP-STRING
         (%STRING-WRAPPER.WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
           SYM-JAVA-CLASS-OUT-STELLA-DOCUMENTATION
           NULL-STRING-WRAPPER)))
        NULL)
       (CONS MODIFIERS
        (CONS
         (CL:IF (%CLASS.MIXIN? CLASS) (WRAP-STRING "interface")
          (WRAP-STRING "class"))
         (CONS
          (JAVA-TRANSLATE-CLASS-NAME
           (INTERN-SYMBOL-IN-MODULE
            (%SURROGATE.SYMBOL-NAME (%CLASS.CLASS-TYPE CLASS))
            (%SURROGATE.HOME-CONTEXT (%CLASS.CLASS-TYPE CLASS))
            CL:NIL))
          (CONS PARENTCLASS
           (CONS INTERFACECLASSES
            (CONS
             (CL:IF (CL:NOT (CL:EQ INSTANCEVARDEFS NIL))
              (CONS
               (CONS SYM-JAVA-CLASS-OUT-STELLA-JAVA_DECLARATIONS
                (CONCATENATE INSTANCEVARDEFS NIL))
               NIL)
              NIL)
             (CONS CONSTRUCTORDEFS (CONS METHODDEFS NIL))))))))))))))

(CL:DEFUN STARTUP-JAVA-CLASS-OUT ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SGT-JAVA-CLASS-OUT-STELLA-OBJECT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-DOCUMENTATION
     (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 0))
    (CL:SETQ KWD-JAVA-CLASS-OUT-EMBEDDED
     (INTERN-RIGID-SYMBOL-WRT-MODULE "EMBEDDED" NULL 2))
    (CL:SETQ KWD-JAVA-CLASS-OUT-INSTANCE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "INSTANCE" NULL 2))
    (CL:SETQ KWD-JAVA-CLASS-OUT-CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 2))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-MACRO
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-PRINT-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-METHOD-CONSTRUCTOR?
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-CONSTRUCTOR?" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-JAVA_EXCEPTION_CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_EXCEPTION_CLASS" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-JAVA_CLASS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CLASS" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-JAVA_DECLARATIONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_DECLARATIONS" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-STARTUP-JAVA-CLASS-OUT
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-JAVA-CLASS-OUT" NULL 0))
    (CL:SETQ SYM-JAVA-CLASS-OUT-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-INSTANCE-VAR-TREE"
     "(DEFUN (JAVA-YIELD-INSTANCE-VAR-TREE CONS) ((SLOT STORAGE-SLOT) (CLASS CLASS)))"
     (CL:FUNCTION JAVA-YIELD-INSTANCE-VAR-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS"
     "(DEFUN (JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS CONS) ((CLASS CLASS)))"
     (CL:FUNCTION JAVA-GET-INSTANCE-VARIABLE-DEFINITIONS) NULL)
    (DEFINE-FUNCTION-OBJECT
     "JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS"
     "(DEFUN (JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS CONS CONS) ((CLASS CLASS)))"
     (CL:FUNCTION JAVA-GET-CONSTRUCTOR-AND-METHOD-DEFINITIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT"
     "(DEFUN (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-DEFINE-NATIVE-CLASS"
     "(DEFUN (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS CONS) ((CLASS CLASS)))"
     (CL:FUNCTION JAVA-TRANSLATE-DEFINE-NATIVE-CLASS) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-JAVA-CLASS-OUT"
     "(DEFUN STARTUP-JAVA-CLASS-OUT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-JAVA-CLASS-OUT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-JAVA-CLASS-OUT-STELLA-STARTUP-JAVA-CLASS-OUT)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-JAVA-CLASS-OUT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupJavaClassOut") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))))
  :VOID)
