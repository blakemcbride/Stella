;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; date-time.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR KWD-DATE-TIME-MONDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-TUESDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-WEDNESDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-THURSDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-FRIDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-SATURDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-SUNDAY NULL)
(CL:DEFVAR KWD-DATE-TIME-NEW-MOON NULL)
(CL:DEFVAR KWD-DATE-TIME-FIRST-QUARTER NULL)
(CL:DEFVAR KWD-DATE-TIME-FULL-MOON NULL)
(CL:DEFVAR KWD-DATE-TIME-LAST-QUARTER NULL)
(CL:DEFVAR KWD-DATE-TIME-RIGHT NULL)
(CL:DEFVAR SGT-DATE-TIME-STELLA-DECODED-DATE-TIME NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-MILLIS NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-SECOND NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-MINUTE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-HOUR NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-DAY NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-MONTH NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-YEAR NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-ZONE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DATE-TIME-DOW NULL)
(CL:DEFVAR KWD-DATE-TIME-PRESERVE NULL)
(CL:DEFVAR SGT-DATE-TIME-STELLA-DECODED-TIME-DURATION NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DURATION-MILLIS NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DURATION-SECONDS NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DURATION-MINUTES NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DURATION-HOURS NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DURATION-DAYS NULL)
(CL:DEFVAR SGT-DATE-TIME-STELLA-CALENDAR-DATE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-TIME-MILLIS NULL)
(CL:DEFVAR SGT-DATE-TIME-STELLA-TIME-DURATION NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DAYS NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-MILLIS NULL)
(CL:DEFVAR SGT-DATE-TIME-STELLA-NUMBER-WRAPPER NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-TRUE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-SIGNAL NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-INCOMPATIBLE-QUANTITY-EXCEPTION NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-T1 NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-T2 NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-RETURN NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-FALSE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-PROGN NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-DEFMETHOD NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-BOOLEAN NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-CALENDAR-DATE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-TYPECASE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-IF NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-= NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-OTHERWISE NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-TIME-DURATION NULL)
(CL:DEFVAR KWD-DATE-TIME-LETTER NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-STARTUP-DATE-TIME NULL)
(CL:DEFVAR SYM-DATE-TIME-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* NULL-CHARACTER
  *CHARACTER-TYPE-TABLE* *CHARACTER-UPCASE-TABLE*
  *CHARACTER-DOWNCASE-TABLE* NIL *PRINTREADABLY?* NULL-FLOAT
  NULL-INTEGER PI))

;;; (DEFUN (COMPUTE-JULIAN-DAY INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:FIXNUM CL:FIXNUM CL:FIXNUM) CL:FIXNUM)
  COMPUTE-JULIAN-DAY))
(CL:DEFUN COMPUTE-JULIAN-DAY (YYYY MM DD)
  "Returns the Julian day that starts at noon on yyyy-mm-dd.
`yyyy' is the year.  `mm' is the month.  `dd' is the day of month.
Negative years are B.C.  Remember there is no year zero."
  (CL:DECLARE (CL:TYPE CL:FIXNUM YYYY MM DD))
  #+MCL
  (CL:CHECK-TYPE YYYY CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MM CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DD CL:FIXNUM)
  (CL:LET* ((JUL 0) (JA 0) (JY 0) (JM 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM JUL JA JY JM))
   (CL:WHEN (CL:= YYYY 0)
    (CL:ERROR (NEW-STELLA-EXCEPTION "There is no year zero.")))
   (CL:WHEN (CL:> MM 12)
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Month `" MM "' must be <= 12")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))
   (CL:WHEN (CL:< MM 0)
    (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
      "Month `" MM "' must be > zero.")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))
   (CL:WHEN (CL:> DD 31)
    (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
      "Day `" DD "' must be <= 31")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))
   (CL:WHEN (CL:< DD 0)
    (CL:LET* ((STREAM-003 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-003)
      "Day `" DD "' must be > zero.")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-003)))))
   (CL:WHEN (CL:< YYYY 0) (CL:SETQ YYYY (CL:1+ YYYY)))
   (CL:IF (CL:> MM 2)
    (CL:PROGN (CL:SETQ JY YYYY) (CL:SETQ JM (CL:1+ MM)))
    (CL:PROGN (CL:SETQ JY (CL:1- YYYY)) (CL:SETQ JM (CL:+ MM 13))))
   (CL:SETQ JUL
    (CL:+ (FLOOR (CL:* 365.25d0 JY)) (FLOOR (CL:* 30.6001d0 JM)) DD
     1720995))
   (CL:WHEN
    (CL:>= (CL:+ DD (CL:* 31 (CL:+ MM (CL:* 12 YYYY))))
     (CL:+ 15 (CL:* 31 (CL:+ 10 (CL:* 12 1582)))))
    (CL:SETQ JA (CL:TRUNCATE (CL:* 0.01d0 JY)))
    (CL:SETQ JUL
     (CL:+ JUL (CL:+ (CL:- 2 JA) (CL:TRUNCATE (CL:* 0.25d0 JA))))))
   (CL:RETURN-FROM COMPUTE-JULIAN-DAY JUL)))

;;; (DEFUN (JULIAN-DAY-TO-MODIFIED-JULIAN-DAY INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:FIXNUM) CL:FIXNUM)
  JULIAN-DAY-TO-MODIFIED-JULIAN-DAY))
(CL:DEFUN JULIAN-DAY-TO-MODIFIED-JULIAN-DAY (JULIAN-DAY)
  "Returns the modified Julian day during which `julian-day'starts at noon."
  (CL:DECLARE (CL:TYPE CL:FIXNUM JULIAN-DAY))
  #+MCL
  (CL:CHECK-TYPE JULIAN-DAY CL:FIXNUM)
  (CL:RETURN-FROM JULIAN-DAY-TO-MODIFIED-JULIAN-DAY
   (CL:- JULIAN-DAY 2400000)))

;;; (DEFUN (MODIFIED-JULIAN-DAY-TO-JULIAN-DAY INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:FIXNUM) CL:FIXNUM)
  MODIFIED-JULIAN-DAY-TO-JULIAN-DAY))
(CL:DEFUN MODIFIED-JULIAN-DAY-TO-JULIAN-DAY (MODIFIED-JULIAN-DAY)
  "Returns the modified Julian day during which `julian-day'starts at noon."
  (CL:DECLARE (CL:TYPE CL:FIXNUM MODIFIED-JULIAN-DAY))
  #+MCL
  (CL:CHECK-TYPE MODIFIED-JULIAN-DAY CL:FIXNUM)
  (CL:RETURN-FROM MODIFIED-JULIAN-DAY-TO-JULIAN-DAY
   (CL:+ MODIFIED-JULIAN-DAY 2400000)))

;;; (DEFUN (COMPUTE-DAY-OF-WEEK-JULIAN KEYWORD) ...)

(CL:DEFUN COMPUTE-DAY-OF-WEEK-JULIAN (JULIAN-DAY)
  "Returns the day of the week for julian-day"
  (CL:DECLARE (CL:TYPE CL:FIXNUM JULIAN-DAY))
  #+MCL
  (CL:CHECK-TYPE JULIAN-DAY CL:FIXNUM)
  (CL:ECASE (CL:THE CL:FIXNUM (CL:REM JULIAN-DAY 7))
   (0 (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN KWD-DATE-TIME-MONDAY))
   (1
    (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN KWD-DATE-TIME-TUESDAY))
   (2
    (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN
     KWD-DATE-TIME-WEDNESDAY))
   (3
    (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN KWD-DATE-TIME-THURSDAY))
   (4 (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN KWD-DATE-TIME-FRIDAY))
   (5
    (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN KWD-DATE-TIME-SATURDAY))
   (6 (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK-JULIAN KWD-DATE-TIME-SUNDAY))))

;;; (DEFUN (COMPUTE-DAY-OF-WEEK KEYWORD) ...)

(CL:DEFUN COMPUTE-DAY-OF-WEEK (YYYY MM DD)
  "Returns the day of the week for yyyy-mm-dd."
  (CL:DECLARE (CL:TYPE CL:FIXNUM YYYY MM DD))
  #+MCL
  (CL:CHECK-TYPE YYYY CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MM CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DD CL:FIXNUM)
  (CL:RETURN-FROM COMPUTE-DAY-OF-WEEK
   (COMPUTE-DAY-OF-WEEK-JULIAN (COMPUTE-JULIAN-DAY YYYY MM DD))))

;;; (DEFUN (COMPUTE-NEXT-MOON-PHASE INTEGER FLOAT) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION (CL:FIXNUM CL:T) (CL:VALUES CL:FIXNUM CL:DOUBLE-FLOAT))
  COMPUTE-NEXT-MOON-PHASE))
(CL:DEFUN COMPUTE-NEXT-MOON-PHASE (N PHASE)
  "Returns the Julian Day and fraction of day of the Nth occurence
since January 1, 1900 of moon PHASE.  PHASE is one of :NEW-MOON, :FIRST-QUARTER,
:FULL-MOON, :LAST-QUARTER"
  (CL:DECLARE (CL:TYPE CL:FIXNUM N))
  #+MCL
  (CL:CHECK-TYPE N CL:FIXNUM)
  (CL:LET*
   ((I 0) (AM 0.0d0) (AS 0.0d0) (C 0.0d0) (X 0.0d0) (X2 0.0d0)
    (EXTRA 0.0d0) (RAD (CL:/ PI 180.0d0)) (JULIAN-DAY 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I JULIAN-DAY)
    (CL:TYPE CL:DOUBLE-FLOAT AM AS C X X2 EXTRA RAD))
   (CL:COND
    ((CL:EQ PHASE KWD-DATE-TIME-NEW-MOON)
     (CL:SETQ C (CL:FLOAT N 0.0d0)) (CL:SETQ JULIAN-DAY 0))
    ((CL:EQ PHASE KWD-DATE-TIME-FIRST-QUARTER)
     (CL:SETQ C (CL:+ N 0.25d0)) (CL:SETQ JULIAN-DAY 7))
    ((CL:EQ PHASE KWD-DATE-TIME-FULL-MOON) (CL:SETQ C (CL:+ N 0.5d0))
     (CL:SETQ JULIAN-DAY 14))
    ((CL:EQ PHASE KWD-DATE-TIME-LAST-QUARTER)
     (CL:SETQ C (CL:+ N 0.75d0)) (CL:SETQ JULIAN-DAY 21))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" PHASE "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
   (CL:SETQ X (CL:/ C 1236.85d0)) (CL:SETQ X2 (CL:* X X))
   (CL:SETQ AS (CL:+ 359.2242d0 (CL:* 29.105356d0 C)))
   (CL:SETQ AM
    (CL:+ 306.0253d0 (CL:* 385.816918d0 C) (CL:* 0.01073d0 X2)))
   (CL:SETQ JULIAN-DAY (CL:+ 2415020 (CL:* 28 N) JULIAN-DAY))
   (CL:SETQ EXTRA
    (CL:+ 0.75933d0 (CL:* 1.53058868d0 C)
     (CL:* (CL:- 1.178d-4 (CL:* 1.55d-7 X)) X2)))
   (CL:COND
    ((CL:OR (CL:EQ PHASE KWD-DATE-TIME-NEW-MOON)
      (CL:EQ PHASE KWD-DATE-TIME-FULL-MOON))
     (CL:SETQ EXTRA
      (CL:+ EXTRA
       (CL:-
        (CL:* (CL:- 0.1734d0 (CL:* 3.93d-4 X))
         (CL:THE CL:DOUBLE-FLOAT
          (CL:SIN (CL:THE CL:DOUBLE-FLOAT (CL:* AS RAD)))))
        (CL:* 0.4068d0
         (CL:THE CL:DOUBLE-FLOAT
          (CL:SIN (CL:THE CL:DOUBLE-FLOAT (CL:* AM RAD)))))))))
    ((CL:OR (CL:EQ PHASE KWD-DATE-TIME-FIRST-QUARTER)
      (CL:EQ PHASE KWD-DATE-TIME-LAST-QUARTER))
     (CL:SETQ EXTRA
      (CL:+ EXTRA
       (CL:-
        (CL:* (CL:- 0.1721d0 (CL:* 4.0d-4 X))
         (CL:THE CL:DOUBLE-FLOAT
          (CL:SIN (CL:THE CL:DOUBLE-FLOAT (CL:* AS RAD)))))
        (CL:* 0.628d0
         (CL:THE CL:DOUBLE-FLOAT
          (CL:SIN (CL:THE CL:DOUBLE-FLOAT (CL:* AM RAD)))))))))
    (CL:T
     (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
       "`" PHASE "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
   (CL:SETQ I
    (CL:IF (CL:>= EXTRA 0.0d0) (FLOOR EXTRA)
     (CEILING (CL:- EXTRA 1.0d0))))
   (CL:RETURN-FROM COMPUTE-NEXT-MOON-PHASE
    (CL:VALUES (CL:+ JULIAN-DAY I) (CL:- EXTRA I)))))

;;; (DEFUN (COMPUTE-CALENDAR-DATE INTEGER INTEGER INTEGER KEYWORD) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION (CL:FIXNUM)
   (CL:VALUES CL:FIXNUM CL:FIXNUM CL:FIXNUM CL:T))
  COMPUTE-CALENDAR-DATE))
(CL:DEFUN COMPUTE-CALENDAR-DATE (JULIAN-DAY)
  "Returns the YEAR, MONTH, DAY, DAY-OF-WEEK on which the given
`julian-day' begins at noon."
  (CL:DECLARE (CL:TYPE CL:FIXNUM JULIAN-DAY))
  #+MCL
  (CL:CHECK-TYPE JULIAN-DAY CL:FIXNUM)
  (CL:LET*
   ((JA JULIAN-DAY) (JALPHA 0) (JB 0) (JC 0) (JD 0) (JE 0)
    (IGREG 2299161) (YYYY 0) (MM 0) (DD 0))
   (CL:DECLARE
    (CL:TYPE CL:FIXNUM JA JALPHA JB JC JD JE IGREG YYYY MM DD))
   (CL:WHEN (CL:>= JULIAN-DAY IGREG)
    (CL:SETQ JALPHA
     (CL:TRUNCATE (CL:/ (CL:- JULIAN-DAY 1867216 0.25d0) 36524.25d0)))
    (CL:SETQ JA
     (CL:+ JULIAN-DAY 1 JALPHA (CL:TRUNCATE (CL:* -0.25d0 JALPHA)))))
   (CL:SETQ JB (CL:+ JA 1524))
   (CL:SETQ JC
    (CL:TRUNCATE
     (CL:+ 6680.0d0 (CL:/ (CL:- JB 2439870 122.1d0) 365.25d0))))
   (CL:SETQ JD (CL:TRUNCATE (CL:+ (CL:* 365 JC) (CL:* 0.25d0 JC))))
   (CL:SETQ JE (CL:TRUNCATE (CL:/ (CL:- JB JD) 30.6001d0)))
   (CL:SETQ DD (CL:- JB JD (CL:TRUNCATE (CL:* 30.6001d0 JE))))
   (CL:SETQ MM (CL:1- JE))
   (CL:WHEN (CL:> MM 12) (CL:SETQ MM (CL:- MM 12)))
   (CL:SETQ YYYY (CL:- JC 4715))
   (CL:WHEN (CL:> MM 2) (CL:SETQ YYYY (CL:1- YYYY)))
   (CL:WHEN (CL:<= YYYY 0) (CL:SETQ YYYY (CL:1- YYYY)))
   (CL:RETURN-FROM COMPUTE-CALENDAR-DATE
    (CL:VALUES YYYY MM DD (COMPUTE-DAY-OF-WEEK-JULIAN JULIAN-DAY)))))

;;; (DEFUN (GET-CURRENT-DATE-TIME INTEGER INTEGER INTEGER KEYWORD INTEGER INTEGER INTEGER INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION ()
   (CL:VALUES CL:FIXNUM CL:FIXNUM CL:FIXNUM CL:T CL:FIXNUM CL:FIXNUM
    CL:FIXNUM CL:FIXNUM))
  GET-CURRENT-DATE-TIME))
(CL:DEFUN GET-CURRENT-DATE-TIME ()
  "Returns the current time in UTC as multiple values of
year month day day-of-week hour minute second millisecond.  Currently
millisecond will always be zero (even in Java where it is technically available)."
  ()
  (CL:LET*
   ((YEAR 0) (MONTH 0) (DAY 0) (HOUR 0) (MINUTE 0) (SECOND 0)
    (MILLISECOND 0))
   (CL:DECLARE
    (CL:TYPE CL:FIXNUM YEAR MONTH DAY HOUR MINUTE SECOND MILLISECOND))
   (CL:MULTIPLE-VALUE-SETQ (SECOND MINUTE HOUR DAY MONTH YEAR)
    (CL:DECODE-UNIVERSAL-TIME (CL:GET-UNIVERSAL-TIME) 0))
   (CL:RETURN-FROM GET-CURRENT-DATE-TIME
    (CL:VALUES YEAR MONTH DAY (COMPUTE-DAY-OF-WEEK YEAR MONTH DAY) HOUR
     MINUTE SECOND MILLISECOND))))

;;; (DEFUN (GET-LOCAL-TIME-ZONE FLOAT) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:DOUBLE-FLOAT) GET-LOCAL-TIME-ZONE))
(CL:DEFUN GET-LOCAL-TIME-ZONE ()
  "Returns the current time zone offset from UTC as a float,
considering the effects of daylight savings time."
  (CL:LET* ((OFFSET 0.0d0))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT OFFSET))
   (cl:multiple-value-bind 
	  (s m h dd mm yy dow daylight-savings-p zone)
	  (cl:get-decoded-time)
	(cl:declare (cl:ignore s m h dd mm yy dow))
	(cl:if daylight-savings-p
	  (cl:setq offset (cl:- (cl:float (- zone 1) 0.0d0)))
          (cl:setq offset (cl:- (cl:float zone 0.0d0)))))
   (CL:RETURN-FROM GET-LOCAL-TIME-ZONE OFFSET)))

;;; (DEFUN (GET-LOCAL-STANDARD-TIME-ZONE FLOAT) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:DOUBLE-FLOAT)
  GET-LOCAL-STANDARD-TIME-ZONE))
(CL:DEFUN GET-LOCAL-STANDARD-TIME-ZONE ()
  "Returns the standard time zone offset from UTC as a float,
without considering the effects of daylight savings time."
  (CL:LET* ((OFFSET 0.0d0))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT OFFSET))
   (cl:multiple-value-bind 
	  (s m h dd mm yy dow daylight-savings-p zone)
	  (cl:get-decoded-time)
	(cl:declare (cl:ignore s m h dd mm yy dow daylight-savings-p))
        (cl:setq offset (cl:- (cl:float zone 0.0d0))))
   (CL:RETURN-FROM GET-LOCAL-STANDARD-TIME-ZONE OFFSET)))

;;; (DEFUN (GET-LOCAL-TIME-ZONE-FOR-DATE FLOAT) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION
   (CL:FIXNUM CL:FIXNUM CL:FIXNUM CL:FIXNUM CL:FIXNUM CL:FIXNUM)
   CL:DOUBLE-FLOAT)
  GET-LOCAL-TIME-ZONE-FOR-DATE))
(CL:DEFUN GET-LOCAL-TIME-ZONE-FOR-DATE (YEAR MONTH DAY HOUR MINUTE SECOND)
  "Returns the time zone offset from UTC (as a float)
that is applicable to the given date.  Assumes that the date is one
that is valid for the underlying programming language.  If not, then
returns 0.0"
  (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY HOUR MINUTE SECOND))
  #+MCL
  (CL:CHECK-TYPE YEAR CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MONTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DAY CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE HOUR CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MINUTE CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE SECOND CL:FIXNUM)
  (CL:LET* ((OFFSET 0.0d0))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT OFFSET))
   (cl:when (cl:>= year 1900)
         (cl:multiple-value-bind 
	  (s m h dd mm yy dow daylight-savings-p zone)
	    (cl:decode-universal-time
              (cl:encode-universal-time second minute hour day month year))
	  (cl:declare (cl:ignore s m h dd mm yy dow))
	  (cl:if daylight-savings-p
	    (cl:setq offset (cl:- (cl:float (- zone 1) 0.0d0)))
            (cl:setq offset (cl:- (cl:float zone 0.0d0))))))
   (CL:RETURN-FROM GET-LOCAL-TIME-ZONE-FOR-DATE OFFSET)))

;;; (DEFUN (TIME-ZONE-FORMAT60 STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:DOUBLE-FLOAT CL:T) CL:SIMPLE-STRING)
  TIME-ZONE-FORMAT60))
(CL:DEFUN TIME-ZONE-FORMAT60 (TIMEZONE INCLUDE-COLON?)
  "Format `zone' as an hh:mm or hhmm string depending on `include-colon?'"
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:LET* ((SIGN "+") (HOURS 0))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SIGN)
    (CL:TYPE CL:FIXNUM HOURS))
   (CL:WHEN (CL:< TIMEZONE 0) (CL:SETQ SIGN "-")
    (CL:SETQ TIMEZONE (CL:- 0 TIMEZONE)))
   (CL:SETQ HOURS (ROUND TIMEZONE))
   (CL:RETURN-FROM TIME-ZONE-FORMAT60
    (CONCATENATE SIGN
     (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE HOURS)) 2 #\0
      KWD-DATE-TIME-RIGHT CL:NIL)
     (CL:IF INCLUDE-COLON? ":" "")
     (FORMAT-WITH-PADDING
      (INTEGER-TO-STRING
       (CL:TRUNCATE (ROUND (CL:* (CL:- TIMEZONE HOURS) 60.0d0))))
      2 #\0 KWD-DATE-TIME-RIGHT CL:NIL)))))

;;; (DEFCONSTANT MILLIS-PER-DAY ...)

(CL:DEFVAR MILLIS-PER-DAY NULL-INTEGER)
(CL:DECLAIM (CL:TYPE CL:FIXNUM MILLIS-PER-DAY))

;;; (DEFCONSTANT MILLIS-PER-HOUR ...)

(CL:DEFVAR MILLIS-PER-HOUR NULL-INTEGER)
(CL:DECLAIM (CL:TYPE CL:FIXNUM MILLIS-PER-HOUR))

;;; (DEFGLOBAL *MONTH-NAME-VECTOR* ...)

(CL:DEFVAR *MONTH-NAME-VECTOR* NULL
  "A vector of month names for printing dates")

;;; (DEFGLOBAL *MONTH-ABBREVIATION-VECTOR* ...)

(CL:DEFVAR *MONTH-ABBREVIATION-VECTOR* NULL
  "A vector of month abbreviations for printing dates")

(CL:DEFUN NEW-DECODED-DATE-TIME ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-DECODED-DATE-TIME))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW SELF)
    KWD-DATE-TIME-SUNDAY)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF) 0.0d0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF) 1900)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF) 1)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY SELF) 1)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF) 0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF) 0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF) 0)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF) 0.0d0)
   (CL:RETURN-FROM NEW-DECODED-DATE-TIME SELF)))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF DECODED-DATE-TIME))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-DATE-TIME-STELLA-DECODED-DATE-TIME))

(CL:DEFUN ACCESS-DECODED-DATE-TIME-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-MILLIS)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-SECOND)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-MINUTE)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-HOUR)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-DAY)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-DATE-TIME.DATE-TIME-DAY SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-MONTH)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-YEAR)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-ZONE)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DATE-TIME-DOW)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW SELF) VALUE)
     (CL:SETQ VALUE (%DECODED-DATE-TIME.DATE-TIME-DOW SELF))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:RETURN-FROM ACCESS-DECODED-DATE-TIME-SLOT-VALUE VALUE))

;;; (DEFMETHOD (HASH-CODE INTEGER) ...)

(CL:DEFMETHOD HASH-CODE ((SELF DECODED-DATE-TIME))
  (CL:RETURN-FROM HASH-CODE
   (CL:THE CL:FIXNUM
    (CL:LOGXOR
     (CL:THE CL:FIXNUM
      (CL:LOGIOR
       (CL:THE CL:FIXNUM
        (CL:LOGIOR
         (CL:THE CL:FIXNUM
          (CL:ASH
           (CL:THE CL:FIXNUM (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF))
           9))
         (CL:THE CL:FIXNUM
          (CL:ASH
           (CL:THE CL:FIXNUM (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF))
           5))))
       (CL:THE CL:FIXNUM (%DECODED-DATE-TIME.DATE-TIME-DAY SELF))))
     (CL:THE CL:FIXNUM
      (CL:LOGIOR
       (CL:THE CL:FIXNUM
        (CL:LOGIOR
         (CL:THE CL:FIXNUM
          (CL:ASH
           (CL:THE CL:FIXNUM (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF))
           12))
         (CL:THE CL:FIXNUM
          (CL:ASH
           (CL:THE CL:FIXNUM
            (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF))
           6))))
       (CL:THE CL:FIXNUM
        (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF))))))))

;;; (DEFMETHOD SET-CURRENT-TIME ...)

(CL:DEFMETHOD SET-CURRENT-TIME ((VALUES-STRUCTURE DECODED-DATE-TIME))
  "Sets the current time into `values-structure'"
  (CL:LET*
   ((YEAR NULL-INTEGER) (MON NULL-INTEGER) (DAY NULL-INTEGER)
    (DOW NULL) (HOUR NULL-INTEGER) (MIN NULL-INTEGER)
    (SEC NULL-INTEGER) (MILLIS NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MON DAY HOUR MIN SEC MILLIS))
   (CL:MULTIPLE-VALUE-SETQ (YEAR MON DAY DOW HOUR MIN SEC MILLIS)
    (GET-CURRENT-DATE-TIME))
   (CL:PROGN (CL:SETQ YEAR YEAR) (CL:SETQ MON MON) (CL:SETQ DAY DAY)
    (CL:SETQ DOW DOW))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS VALUES-STRUCTURE)
    (CL:FLOAT MILLIS 0.0d0))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND VALUES-STRUCTURE) SEC)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE VALUES-STRUCTURE) MIN)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR VALUES-STRUCTURE) HOUR))
  :VOID)

;;; (DEFMETHOD SET-CURRENT-DATE ...)

(CL:DEFMETHOD SET-CURRENT-DATE ((VALUES-STRUCTURE DECODED-DATE-TIME))
  "Sets the current date into `values-structure'"
  (CL:LET*
   ((YEAR NULL-INTEGER) (MON NULL-INTEGER) (DAY NULL-INTEGER)
    (DOW NULL) (HOUR NULL-INTEGER) (MIN NULL-INTEGER)
    (SEC NULL-INTEGER) (MILLIS NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MON DAY HOUR MIN SEC MILLIS))
   (CL:MULTIPLE-VALUE-SETQ (YEAR MON DAY DOW HOUR MIN SEC MILLIS)
    (GET-CURRENT-DATE-TIME))
   (CL:PROGN (CL:SETQ HOUR HOUR) (CL:SETQ MIN MIN) (CL:SETQ SEC SEC)
    (CL:SETQ MILLIS MILLIS))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW VALUES-STRUCTURE) DOW)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY VALUES-STRUCTURE) DAY)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH VALUES-STRUCTURE) MON)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR VALUES-STRUCTURE) YEAR))
  :VOID)

;;; (DEFMETHOD SET-CURRENT-DATE-TIME ...)

(CL:DEFMETHOD SET-CURRENT-DATE-TIME ((VALUES-STRUCTURE DECODED-DATE-TIME))
  "Sets the current date and time into `values-structure'"
  (CL:LET*
   ((YEAR NULL-INTEGER) (MON NULL-INTEGER) (DAY NULL-INTEGER)
    (DOW NULL) (HOUR NULL-INTEGER) (MIN NULL-INTEGER)
    (SEC NULL-INTEGER) (MILLIS NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MON DAY HOUR MIN SEC MILLIS))
   (CL:MULTIPLE-VALUE-SETQ (YEAR MON DAY DOW HOUR MIN SEC MILLIS)
    (GET-CURRENT-DATE-TIME))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS VALUES-STRUCTURE)
    (CL:FLOAT MILLIS 0.0d0))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND VALUES-STRUCTURE) SEC)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE VALUES-STRUCTURE) MIN)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR VALUES-STRUCTURE) HOUR)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW VALUES-STRUCTURE) DOW)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY VALUES-STRUCTURE) DAY)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH VALUES-STRUCTURE) MON)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR VALUES-STRUCTURE) YEAR))
  :VOID)

;;; (DEFMETHOD (DECODED-DATE-TIME-TO-ISO8601-STRING STRING) ...)

(CL:DEFMETHOD DECODED-DATE-TIME-TO-ISO8601-STRING ((DATE DECODED-DATE-TIME))
  "Returns an ISO-8601 string representation of `date'
The Format is YYYY-MM-DDThh:mm:ss+zz:zz, with the string stopping at
when a null value is first encountered.  The time zone will only
be included (if present) if a time value is given."
  (CL:LET* ((BUFFER (MAKE-RAW-MUTABLE-STRING 25)) (INDEX 0))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BUFFER)
    (CL:TYPE CL:FIXNUM INDEX))
   (CL:WHEN
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE) NULL-INTEGER))
    (CL:SETQ INDEX
     (INSERT-STRING
      (INTEGER-TO-STRING
       (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE)))
      0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))
    (CL:WHEN
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH DATE) NULL-INTEGER))
     (CL:SETQ INDEX
      (INSERT-STRING "-" 0 NULL-INTEGER BUFFER INDEX
       KWD-DATE-TIME-PRESERVE))
     (CL:SETQ INDEX
      (INSERT-STRING
       (FORMAT-WITH-PADDING
        (INTEGER-TO-STRING
         (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-MONTH DATE)))
        2 #\0 KWD-DATE-TIME-RIGHT CL:NIL)
       0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))
     (CL:WHEN
      (CL:NOT
       (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY DATE) NULL-INTEGER))
      (CL:SETQ INDEX
       (INSERT-STRING "-" 0 NULL-INTEGER BUFFER INDEX
        KWD-DATE-TIME-PRESERVE))
      (CL:SETQ INDEX
       (INSERT-STRING
        (FORMAT-WITH-PADDING
         (INTEGER-TO-STRING
          (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-DAY DATE)))
         2 #\0 KWD-DATE-TIME-RIGHT CL:NIL)
        0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))
      (CL:WHEN
       (CL:NOT
        (CL:= (%DECODED-DATE-TIME.DATE-TIME-HOUR DATE) NULL-INTEGER))
       (CL:SETQ INDEX
        (INSERT-STRING "T" 0 NULL-INTEGER BUFFER INDEX
         KWD-DATE-TIME-PRESERVE))
       (CL:SETQ INDEX
        (INSERT-STRING
         (FORMAT-WITH-PADDING
          (INTEGER-TO-STRING
           (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-HOUR DATE)))
          2 #\0 KWD-DATE-TIME-RIGHT CL:NIL)
         0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))
       (CL:WHEN
        (CL:NOT
         (CL:= (%DECODED-DATE-TIME.DATE-TIME-MINUTE DATE)
          NULL-INTEGER))
        (CL:SETQ INDEX
         (INSERT-STRING ":" 0 NULL-INTEGER BUFFER INDEX
          KWD-DATE-TIME-PRESERVE))
        (CL:SETQ INDEX
         (INSERT-STRING
          (FORMAT-WITH-PADDING
           (INTEGER-TO-STRING
            (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-MINUTE DATE)))
           2 #\0 KWD-DATE-TIME-RIGHT CL:NIL)
          0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))
        (CL:WHEN
         (CL:NOT
          (CL:= (%DECODED-DATE-TIME.DATE-TIME-SECOND DATE)
           NULL-INTEGER))
         (CL:SETQ INDEX
          (INSERT-STRING ":" 0 NULL-INTEGER BUFFER INDEX
           KWD-DATE-TIME-PRESERVE))
         (CL:SETQ INDEX
          (INSERT-STRING
           (FORMAT-WITH-PADDING
            (INTEGER-TO-STRING
             (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-SECOND DATE)))
            2 #\0 KWD-DATE-TIME-RIGHT CL:NIL)
           0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))))
       (CL:WHEN
        (CL:NOT
         (CL:= (%DECODED-DATE-TIME.DATE-TIME-ZONE DATE) NULL-FLOAT))
        (CL:IF (CL:= (%DECODED-DATE-TIME.DATE-TIME-ZONE DATE) 0.0d0)
         (CL:SETQ INDEX
          (INSERT-STRING "Z" 0 NULL-INTEGER BUFFER INDEX
           KWD-DATE-TIME-PRESERVE))
         (CL:SETQ INDEX
          (INSERT-STRING
           (TIME-ZONE-FORMAT60 (%DECODED-DATE-TIME.DATE-TIME-ZONE DATE)
            CL:T)
           0 NULL-INTEGER BUFFER INDEX KWD-DATE-TIME-PRESERVE))))))))
   (CL:RETURN-FROM DECODED-DATE-TIME-TO-ISO8601-STRING
    (SUBSEQUENCE BUFFER 0 INDEX))))

;;; (DEFMETHOD SET-CONSISTENT-DOW ...)

(CL:DEFMETHOD SET-CONSISTENT-DOW ((SELF DECODED-DATE-TIME))
  (CL:WHEN
   (CL:AND
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF) NULL-INTEGER))
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF) NULL-INTEGER))
    (CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY SELF) NULL-INTEGER)))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW SELF)
    (COMPUTE-DAY-OF-WEEK (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF)
     (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF)
     (%DECODED-DATE-TIME.DATE-TIME-DAY SELF))))
  :VOID)

;;; (DEFMETHOD HELP-MERGE-NULL-FIELDS ...)

(CL:DEFMETHOD HELP-MERGE-NULL-FIELDS ((SELF DECODED-DATE-TIME) DEFAULT INDEX)
  (CL:DECLARE (CL:TYPE CL:FIXNUM INDEX))
  #+MCL
  (CL:CHECK-TYPE INDEX CL:FIXNUM)
  (CL:WHEN
   (CL:AND (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF) NULL-INTEGER)
    (CL:>= INDEX 0))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF)
    (%DECODED-DATE-TIME.DATE-TIME-YEAR DEFAULT)))
  (CL:WHEN
   (CL:AND
    (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF) NULL-INTEGER)
    (CL:>= INDEX 1))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF)
    (%DECODED-DATE-TIME.DATE-TIME-MONTH DEFAULT)))
  (CL:WHEN
   (CL:AND (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY SELF) NULL-INTEGER)
    (CL:>= INDEX 2))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY SELF)
    (%DECODED-DATE-TIME.DATE-TIME-DAY DEFAULT)))
  (CL:WHEN
   (CL:AND (CL:= (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF) NULL-INTEGER)
    (CL:>= INDEX 3))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF)
    (%DECODED-DATE-TIME.DATE-TIME-HOUR DEFAULT)))
  (CL:WHEN
   (CL:AND
    (CL:= (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF) NULL-INTEGER)
    (CL:>= INDEX 4))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF)
    (%DECODED-DATE-TIME.DATE-TIME-MINUTE DEFAULT)))
  (CL:WHEN
   (CL:AND
    (CL:= (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF) NULL-INTEGER)
    (CL:>= INDEX 5))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF)
    (%DECODED-DATE-TIME.DATE-TIME-SECOND DEFAULT)))
  (CL:WHEN
   (CL:AND (CL:= (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF) NULL-FLOAT)
    (CL:>= INDEX 6))
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF)
    (%DECODED-DATE-TIME.DATE-TIME-MILLIS DEFAULT)))
  (CL:WHEN (CL:= (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF) NULL-FLOAT)
   (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF)
    (%DECODED-DATE-TIME.DATE-TIME-ZONE DEFAULT)))
  (SET-CONSISTENT-DOW SELF)
  :VOID)

;;; (DEFMETHOD MERGE-NULL-FIELDS ...)

(CL:DEFMETHOD MERGE-NULL-FIELDS ((SELF DECODED-DATE-TIME) DEFAULT)
  "Replace any null valued fields in `self' with values from `default'.
The day of the week will be set consistently, if possible."
  (HELP-MERGE-NULL-FIELDS SELF DEFAULT 6)
  :VOID)

;;; (DEFMETHOD MERGE-SUPERIOR-NULL-FIELDS ...)

(CL:DEFMETHOD MERGE-SUPERIOR-NULL-FIELDS ((SELF DECODED-DATE-TIME) DEFAULT)
  "Replace only null valued fields in `self' that represent larger
time units than the smallest non-null in `self' with values from `default'.
The day of the week will be set consistently, if possible.
Example: if `self' just has the month being non-null, then only the year
will be filled in from `default'.  If the day and minute were non-null,
then hour, month and year will be filled.

This can be useful when one doesn't want to extend the precision
of the answer."
  (CL:COND
   ((CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF) NULL-FLOAT))
    (HELP-MERGE-NULL-FIELDS SELF DEFAULT 6))
   ((CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF) NULL-INTEGER))
    (HELP-MERGE-NULL-FIELDS SELF DEFAULT 5))
   ((CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF) NULL-INTEGER))
    (HELP-MERGE-NULL-FIELDS SELF DEFAULT 4))
   ((CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF) NULL-INTEGER))
    (HELP-MERGE-NULL-FIELDS SELF DEFAULT 3))
   ((CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY SELF) NULL-INTEGER))
    (HELP-MERGE-NULL-FIELDS SELF DEFAULT 2))
   ((CL:NOT
     (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF) NULL-INTEGER))
    (HELP-MERGE-NULL-FIELDS SELF DEFAULT 1))
   (CL:T (HELP-MERGE-NULL-FIELDS SELF DEFAULT 0)))
  :VOID)

(CL:DEFUN NEW-DECODED-TIME-DURATION ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-DECODED-TIME-DURATION))
   (CL:SETF (%DECODED-TIME-DURATION.DURATION-DAYS SELF) 0)
   (CL:SETF (%DECODED-TIME-DURATION.DURATION-HOURS SELF) 0)
   (CL:SETF (%DECODED-TIME-DURATION.DURATION-MINUTES SELF) 0)
   (CL:SETF (%DECODED-TIME-DURATION.DURATION-SECONDS SELF) 0)
   (CL:SETF (%DECODED-TIME-DURATION.DURATION-MILLIS SELF) 0.0d0)
   (CL:RETURN-FROM NEW-DECODED-TIME-DURATION SELF)))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF DECODED-TIME-DURATION))
  (CL:RETURN-FROM PRIMARY-TYPE
   SGT-DATE-TIME-STELLA-DECODED-TIME-DURATION))

(CL:DEFUN ACCESS-DECODED-TIME-DURATION-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DURATION-MILLIS)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-TIME-DURATION.DURATION-MILLIS SELF)
      (%FLOAT-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-FLOAT (%DECODED-TIME-DURATION.DURATION-MILLIS SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DURATION-SECONDS)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-TIME-DURATION.DURATION-SECONDS SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-TIME-DURATION.DURATION-SECONDS SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DURATION-MINUTES)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-TIME-DURATION.DURATION-MINUTES SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-TIME-DURATION.DURATION-MINUTES SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DURATION-HOURS)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-TIME-DURATION.DURATION-HOURS SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-TIME-DURATION.DURATION-HOURS SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DURATION-DAYS)
    (CL:IF SETVALUE?
     (CL:SETF (%DECODED-TIME-DURATION.DURATION-DAYS SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%DECODED-TIME-DURATION.DURATION-DAYS SELF)))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:RETURN-FROM ACCESS-DECODED-TIME-DURATION-SLOT-VALUE VALUE))

;;; (DEFMETHOD (HASH-CODE INTEGER) ...)

(CL:DEFMETHOD HASH-CODE ((SELF DECODED-TIME-DURATION))
  (CL:RETURN-FROM HASH-CODE
   (CL:THE CL:FIXNUM
    (CL:LOGXOR
     (CL:THE CL:FIXNUM (%DECODED-TIME-DURATION.DURATION-DAYS SELF))
     (CL:THE CL:FIXNUM
      (CL:LOGIOR
       (CL:THE CL:FIXNUM
        (CL:LOGIOR
         (CL:THE CL:FIXNUM
          (CL:ASH
           (CL:THE CL:FIXNUM
            (%DECODED-TIME-DURATION.DURATION-HOURS SELF))
           12))
         (CL:THE CL:FIXNUM
          (CL:ASH
           (CL:THE CL:FIXNUM
            (%DECODED-TIME-DURATION.DURATION-MINUTES SELF))
           6))))
       (CL:THE CL:FIXNUM
        (%DECODED-TIME-DURATION.DURATION-SECONDS SELF))))))))

(CL:DEFUN NEW-CALENDAR-DATE ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-CALENDAR-DATE))
   (CL:SETF (%CALENDAR-DATE.TIME-MILLIS SELF) NULL-INTEGER)
   (CL:SETF (%CALENDAR-DATE.MODIFIED-JULIAN-DAY SELF) NULL-INTEGER)
   (CL:RETURN-FROM NEW-CALENDAR-DATE SELF)))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF CALENDAR-DATE))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-DATE-TIME-STELLA-CALENDAR-DATE))

(CL:DEFUN ACCESS-CALENDAR-DATE-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY)
    (CL:IF SETVALUE?
     (CL:SETF (%CALENDAR-DATE.MODIFIED-JULIAN-DAY SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE
      (WRAP-INTEGER (%CALENDAR-DATE.MODIFIED-JULIAN-DAY SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-TIME-MILLIS)
    (CL:IF SETVALUE?
     (CL:SETF (%CALENDAR-DATE.TIME-MILLIS SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-INTEGER (%CALENDAR-DATE.TIME-MILLIS SELF)))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:RETURN-FROM ACCESS-CALENDAR-DATE-SLOT-VALUE VALUE))

(CL:DEFMETHOD PRINT-OBJECT ((SELF CALENDAR-DATE) STREAM)
  (PRINT-CALENDAR-DATE SELF STREAM)
  :VOID)

;;; (DEFMETHOD (COERCE-TO CALENDAR-DATE) ...)

(CL:DEFMETHOD COERCE-TO ((X CALENDAR-DATE) Y)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE Y)
     SGT-DATE-TIME-STELLA-CALENDAR-DATE)
    (CL:PROGN (CL:RETURN-FROM COERCE-TO Y)))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't coerce `" Y "' to a CALENDAR-DATE")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (HASH-CODE INTEGER) ...)

(CL:DEFMETHOD HASH-CODE ((SELF CALENDAR-DATE))
  (CL:RETURN-FROM HASH-CODE
   (CL:THE CL:FIXNUM
    (CL:LOGXOR
     (CL:THE CL:FIXNUM (%CALENDAR-DATE.MODIFIED-JULIAN-DAY SELF))
     (CL:THE CL:FIXNUM (%CALENDAR-DATE.TIME-MILLIS SELF))))))

;;; (DEFMETHOD (CALENDAR-DATE-TO-DATE-STRING STRING) ...)

(CL:DEFMETHOD CALENDAR-DATE-TO-DATE-STRING ((DATE CALENDAR-DATE) TIMEZONE NUMERIC-MONTH?)
  "Returns the date part of the string representation of `date' 
adjusted for `timezone'.  Format is YYYY-MMM-DD, where MMM is a three letter
English abbreviation of the month if `numeric-month?' is `false' and a two
digit numeric value if `numeric-month?' is `true'.  The value `false' is
recommended."
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:LET*
   ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
    (DOW NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
   (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
    (GET-CALENDAR-DATE DATE TIMEZONE))
   (CL:SETQ DOW DOW)
   (CL:LET*
    ((YEAR-STRING
      (CL:IF (CL:< YEAR 0)
       (CONCATENATE (INTEGER-TO-STRING (CL:TRUNCATE (CL:- 0 YEAR)))
        "BC")
       (INTEGER-TO-STRING (CL:TRUNCATE YEAR))))
     (MONTH-STRING
      (CL:IF NUMERIC-MONTH?
       (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE MONTH)) 2
        #\0 KWD-DATE-TIME-RIGHT CL:NIL)
       (UNWRAP-STRING
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%VECTOR.THE-ARRAY *MONTH-ABBREVIATION-VECTOR*))
         MONTH)))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING YEAR-STRING MONTH-STRING))
    (CL:RETURN-FROM CALENDAR-DATE-TO-DATE-STRING
     (CONCATENATE YEAR-STRING "-" MONTH-STRING "-"
      (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE DAY)) 2 #\0
       KWD-DATE-TIME-RIGHT CL:NIL))))))

;;; (DEFMETHOD (CALENDAR-DATE-TO-TIME-STRING STRING) ...)

(CL:DEFMETHOD CALENDAR-DATE-TO-TIME-STRING ((DATE CALENDAR-DATE) TIMEZONE INCLUDE-TIMEZONE? INCLUDE-MILLIS? PAD-HOURS?)
  "Returns the time part of the string representation of `date'
adjusted for `timezone'.  The timezone is included in the string if
`include-timezone?' is `true'.  The value `true' is recommended.
Milliseconds will be included if `include-millis?' is `true'.
Hours will be zero-padded to length 2 if `pad-hours?' is `true'.
"
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:LET*
   ((HOURS NULL-INTEGER) (MINUTES NULL-INTEGER) (SECONDS NULL-INTEGER)
    (MILLI NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM HOURS MINUTES SECONDS MILLI))
   (CL:MULTIPLE-VALUE-SETQ (HOURS MINUTES SECONDS MILLI)
    (GET-TIME DATE TIMEZONE))
   (CL:LET*
    ((TIMEZONE-STRING
      (CL:IF INCLUDE-TIMEZONE?
       (CL:IF (CL:= TIMEZONE 0.0d0) " UTC"
        (CONCATENATE " " (FLOAT-TO-STRING TIMEZONE)))
       ""))
     (MILLI-STRING
      (CL:IF INCLUDE-MILLIS?
       (CONCATENATE "."
        (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE MILLI)) 3
         #\0 KWD-DATE-TIME-RIGHT CL:NIL))
       "")))
    (CL:DECLARE
     (CL:TYPE CL:SIMPLE-STRING TIMEZONE-STRING MILLI-STRING))
    (CL:RETURN-FROM CALENDAR-DATE-TO-TIME-STRING
     (CONCATENATE
      (CL:IF PAD-HOURS?
       (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE HOURS)) 2
        #\0 KWD-DATE-TIME-RIGHT CL:NIL)
       (INTEGER-TO-STRING (CL:TRUNCATE HOURS)))
      ":"
      (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE MINUTES)) 2
       #\0 KWD-DATE-TIME-RIGHT CL:NIL)
      ":"
      (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE SECONDS)) 2
       #\0 KWD-DATE-TIME-RIGHT CL:NIL)
      MILLI-STRING TIMEZONE-STRING)))))

;;; (DEFMETHOD (CALENDAR-DATE-TO-STRING STRING) ...)

(CL:DEFMETHOD CALENDAR-DATE-TO-STRING ((DATE CALENDAR-DATE) TIMEZONE NUMERIC-MONTH? INCLUDE-TIMEZONE?)
  "Returns a string representation of `date' adjusted for `timezone'.
The Format is YYYY-MMM-DD hh:mm:ss z.z, where MMM is a three letter
English abbreviation of the month if `numeric-month?' is `false' and a two
digit numeric value if `numeric-month?' is `true'.  The timezone as a
float offset z.z is included if `include-timezone?' is `true'.

Recommended values for the flags are `false' and `true' respectively."
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:RETURN-FROM CALENDAR-DATE-TO-STRING
   (CONCATENATE
    (CALENDAR-DATE-TO-DATE-STRING DATE TIMEZONE NUMERIC-MONTH?) " "
    (CALENDAR-DATE-TO-TIME-STRING DATE TIMEZONE INCLUDE-TIMEZONE? CL:T
     CL:NIL))))

;;; (DEFMETHOD (CALENDAR-DATE-TO-ISO8601-STRING STRING) ...)

(CL:DEFMETHOD CALENDAR-DATE-TO-ISO8601-STRING ((DATE CALENDAR-DATE) TIMEZONE INCLUDE-TIMEZONE?)
  "Returns an ISO-8601 string representation of `date' adjusted for `timezone'.
The Format is YYYY-MM-DDThh:mm:ss z:zz.  The timezone as an offset
hh:mm is included if `include-timezone?' is `true'.

Recommended values for the flag is `true'."
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:LET* ((TZ-STRING ""))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TZ-STRING))
   (CL:WHEN INCLUDE-TIMEZONE?
    (CL:IF (CL:= TIMEZONE 0.0d0) (CL:SETQ TZ-STRING "Z")
     (CL:SETQ TZ-STRING (TIME-ZONE-FORMAT60 TIMEZONE CL:T))))
   (CL:RETURN-FROM CALENDAR-DATE-TO-ISO8601-STRING
    (CONCATENATE (CALENDAR-DATE-TO-DATE-STRING DATE TIMEZONE CL:T) "T"
     (CALENDAR-DATE-TO-TIME-STRING DATE TIMEZONE CL:NIL CL:NIL CL:T)
     TZ-STRING))))

;;; (DEFMETHOD (CALENDAR-DATE-TO-NATIVE-DATE-TIME NATIVE-DATE-TIME) ...)

(CL:DEFMETHOD CALENDAR-DATE-TO-NATIVE-DATE-TIME ((DATE CALENDAR-DATE))
  (CL:LET*
   ((MJD (%CALENDAR-DATE.MODIFIED-JULIAN-DAY DATE))
    (MILLIS (%CALENDAR-DATE.TIME-MILLIS DATE)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM MJD MILLIS))
   (CL:RETURN-FROM CALENDAR-DATE-TO-NATIVE-DATE-TIME
    (CL:+ (CL:* (CL:- mjd 15021) 86400) (CL:TRUNCATE millis 1000)))))

;;; (DEFUN (NATIVE-DATE-TIME-TO-CALENDAR-DATE CALENDAR-DATE) ...)

(CL:DEFUN NATIVE-DATE-TIME-TO-CALENDAR-DATE (DATE)
  (CL:LET* ((MJD 0) (MILLIS 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM MJD MILLIS)) 
    (CL:PROGN
      (CL:MULTIPLE-VALUE-SETQ (mjd millis) (CL:TRUNCATE date 86400))
      (CL:INCF mjd 15021)
      (CL:SETQ millis (CL:* millis 1000)))

   (CL:RETURN-FROM NATIVE-DATE-TIME-TO-CALENDAR-DATE
    (MAKE-CALENDAR-DATE MJD MILLIS))))

;;; (DEFMETHOD PRINT-CALENDAR-DATE ...)

(CL:DEFMETHOD PRINT-CALENDAR-DATE ((DATE CALENDAR-DATE) STREAM)
  (CL:IF *PRINTREADABLY?* (%%PRINT-STREAM STREAM "\"")
   (%%PRINT-STREAM STREAM "<" (%CALENDAR-DATE.MODIFIED-JULIAN-DAY DATE)
    " "))
  (%%PRINT-STREAM STREAM
   (CALENDAR-DATE-TO-STRING DATE 0.0d0 CL:NIL CL:NIL))
  (CL:IF *PRINTREADABLY?* (%%PRINT-STREAM STREAM " UTC\"")
   (%%PRINT-STREAM STREAM " UTC>"))
  :VOID)

(CL:DEFUN NEW-TIME-DURATION ()
  (CL:LET* ((SELF NULL)) (CL:SETQ SELF (%MAKE-TIME-DURATION))
   (CL:SETF (%TIME-DURATION.MILLIS SELF) NULL-INTEGER)
   (CL:SETF (%TIME-DURATION.DAYS SELF) NULL-INTEGER)
   (CL:RETURN-FROM NEW-TIME-DURATION SELF)))

(CL:DEFMETHOD PRIMARY-TYPE ((SELF TIME-DURATION))
  (CL:RETURN-FROM PRIMARY-TYPE SGT-DATE-TIME-STELLA-TIME-DURATION))

(CL:DEFUN ACCESS-TIME-DURATION-SLOT-VALUE (SELF SLOTNAME VALUE SETVALUE?)
  (CL:COND
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-DAYS)
    (CL:IF SETVALUE?
     (CL:SETF (%TIME-DURATION.DAYS SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-INTEGER (%TIME-DURATION.DAYS SELF)))))
   ((CL:EQ SLOTNAME SYM-DATE-TIME-STELLA-MILLIS)
    (CL:IF SETVALUE?
     (CL:SETF (%TIME-DURATION.MILLIS SELF)
      (%INTEGER-WRAPPER.WRAPPER-VALUE VALUE))
     (CL:SETQ VALUE (WRAP-INTEGER (%TIME-DURATION.MILLIS SELF)))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" SLOTNAME "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:RETURN-FROM ACCESS-TIME-DURATION-SLOT-VALUE VALUE))

(CL:DEFMETHOD PRINT-OBJECT ((SELF TIME-DURATION) STREAM)
  (PRINT-TIME-DURATION SELF STREAM)
  :VOID)

;;; (DEFMETHOD (COERCE-TO TIME-DURATION) ...)

(CL:DEFMETHOD COERCE-TO ((X TIME-DURATION) Y)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE Y)
     SGT-DATE-TIME-STELLA-TIME-DURATION)
    (CL:PROGN (CL:RETURN-FROM COERCE-TO Y)))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't coerce `" Y "' to a TIME-DURATION")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (HASH-CODE INTEGER) ...)

(CL:DEFMETHOD HASH-CODE ((SELF TIME-DURATION))
  (CL:RETURN-FROM HASH-CODE
   (CL:THE CL:FIXNUM
    (CL:LOGXOR (CL:THE CL:FIXNUM (%TIME-DURATION.DAYS SELF))
     (CL:THE CL:FIXNUM (%TIME-DURATION.MILLIS SELF))))))

;;; (DEFMETHOD (TIME-DURATION-TO-STRING STRING) ...)

(CL:DEFMETHOD TIME-DURATION-TO-STRING ((DATE TIME-DURATION))
  "Returns a string representation of `date'"
  (CL:LET*
   ((N-DAYS (%TIME-DURATION.DAYS DATE))
    (N-MILLIS (%TIME-DURATION.MILLIS DATE)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM N-DAYS N-MILLIS))
   (CL:IF (CL:< N-DAYS 0)
    (CL:IF (CL:<= N-MILLIS 0)
     (CL:RETURN-FROM TIME-DURATION-TO-STRING
      (CONCATENATE "minus "
       (INTEGER-TO-STRING (CL:TRUNCATE (CL:- 0 N-DAYS))) " days; "
       (INTEGER-TO-STRING (CL:TRUNCATE (CL:- 0 N-MILLIS))) " ms"))
     (CL:RETURN-FROM TIME-DURATION-TO-STRING
      (CONCATENATE "minus "
       (INTEGER-TO-STRING (CL:TRUNCATE (CL:- 0 (CL:1+ N-DAYS))))
       " days; "
       (INTEGER-TO-STRING (CL:TRUNCATE (CL:- MILLIS-PER-DAY N-MILLIS)))
       " ms")))
    (CL:IF (CL:< N-MILLIS 0)
     (CL:IF (CL:> N-DAYS 0)
      (CL:RETURN-FROM TIME-DURATION-TO-STRING
       (CONCATENATE "plus "
        (INTEGER-TO-STRING (CL:TRUNCATE (CL:1- N-DAYS))) " days; "
        (INTEGER-TO-STRING
         (CL:TRUNCATE (CL:+ MILLIS-PER-DAY N-MILLIS)))
        " ms"))
      (CL:RETURN-FROM TIME-DURATION-TO-STRING
       (CONCATENATE "minus 0 days; "
        (INTEGER-TO-STRING (CL:TRUNCATE (CL:- 0 N-MILLIS))) " ms")))
     (CL:RETURN-FROM TIME-DURATION-TO-STRING
      (CONCATENATE "plus " (INTEGER-TO-STRING (CL:TRUNCATE N-DAYS))
       " days; " (INTEGER-TO-STRING (CL:TRUNCATE N-MILLIS)) " ms"))))))

;;; (DEFUN (STRING-TO-TIME-DURATION TIME-DURATION) ...)

(CL:DEFUN STRING-TO-TIME-DURATION (DURATION)
  "Parses and returns an time-duration object corresponding to `duration'.
The syntax for time duration strings is \"{plus|minus} N days[; M ms]\" where N and M are
integer values for days and milliseconds.  If no valid parse is found, `null' is returned."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DURATION))
  #+MCL
  (CL:CHECK-TYPE DURATION CL:SIMPLE-STRING)
  (CL:LET*
   ((N-DAYS 0) (N-MILLIS 0)
    (NEGATIVE?
     (CL:NOT (CL:= (STRING-SEARCH DURATION "minus" 0) NULL-INTEGER)))
    (DAY-START-POSITION 0) (DAY-END-POSITION 0) (MS-START-POSITION 0)
    (MS-END-POSITION 0))
   (CL:DECLARE
    (CL:TYPE CL:FIXNUM N-DAYS N-MILLIS DAY-START-POSITION
     DAY-END-POSITION MS-START-POSITION MS-END-POSITION))
   (CL:COND (NEGATIVE? (CL:SETQ DAY-START-POSITION 6))
    ((CL:NOT (CL:= (STRING-SEARCH DURATION "plus" 0) NULL-INTEGER))
     (CL:SETQ DAY-START-POSITION 5))
    (CL:T (CL:SETQ DAY-START-POSITION 0)))
   (CL:SETQ DAY-END-POSITION
    (STRING-SEARCH DURATION "days" DAY-START-POSITION))
   (CL:IF (CL:= DAY-END-POSITION NULL-INTEGER)
    (CL:RETURN-FROM STRING-TO-TIME-DURATION NULL)
    (CL:SETQ N-DAYS
     (CL:TRUNCATE
      (STRING-TO-INTEGER
       (SUBSEQUENCE DURATION DAY-START-POSITION
        (CL:1- DAY-END-POSITION))))))
   (CL:SETQ MS-START-POSITION (POSITION DURATION #\  DAY-END-POSITION))
   (CL:WHEN (CL:NOT (CL:= MS-START-POSITION NULL-INTEGER))
    (CL:SETQ MS-END-POSITION
     (STRING-SEARCH DURATION "ms" MS-START-POSITION))
    (CL:WHEN (CL:NOT (CL:= MS-END-POSITION NULL-INTEGER))
     (CL:SETQ N-MILLIS
      (CL:TRUNCATE
       (STRING-TO-INTEGER
        (SUBSEQUENCE DURATION (CL:1+ MS-START-POSITION)
         (CL:1- MS-END-POSITION)))))))
   (CL:IF NEGATIVE?
    (CL:RETURN-FROM STRING-TO-TIME-DURATION
     (MAKE-TIME-DURATION (CL:- 0 N-DAYS) (CL:- 0 N-MILLIS)))
    (CL:RETURN-FROM STRING-TO-TIME-DURATION
     (MAKE-TIME-DURATION N-DAYS N-MILLIS)))))

;;; (DEFMETHOD PRINT-TIME-DURATION ...)

(CL:DEFMETHOD PRINT-TIME-DURATION ((DATE TIME-DURATION) STREAM)
  (%%PRINT-STREAM STREAM "<" (TIME-DURATION-TO-STRING DATE) ">")
  :VOID)

;;; (DEFUN (MAKE-DATE-TIME CALENDAR-DATE) ...)

(CL:DEFUN MAKE-DATE-TIME (YEAR MONTH DAY HOUR MINUTE SECOND MILLIS TIMEZONE)
  "Create a calendar date with the specified components.  `year' must be
the complete year (i.e., a year of 98 is 98 A.D in the 1st century).
`timezone' is a real number in the range -12.0 to +14.0 where UTC is zone 0.0;  The number
is the number of hours to add to UTC to arrive at local time."
  (CL:DECLARE
   (CL:TYPE CL:FIXNUM YEAR MONTH DAY HOUR MINUTE SECOND MILLIS)
   (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE YEAR CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MONTH CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE DAY CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE HOUR CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MINUTE CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE SECOND CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MILLIS CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:LET*
   ((TIME
     (CL:+ (CL:* HOUR MILLIS-PER-HOUR) (CL:* MINUTE 60000)
      (CL:* SECOND 1000) MILLIS)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM TIME))
   (CL:SETQ TIME
    (CL:TRUNCATE (CL:- TIME (CL:* TIMEZONE MILLIS-PER-HOUR))))
   (CL:RETURN-FROM MAKE-DATE-TIME
    (MAKE-CALENDAR-DATE
     (JULIAN-DAY-TO-MODIFIED-JULIAN-DAY
      (COMPUTE-JULIAN-DAY YEAR MONTH DAY))
     TIME))))

;;; (DEFUN (MAKE-CURRENT-DATE-TIME CALENDAR-DATE) ...)

(CL:DEFUN MAKE-CURRENT-DATE-TIME ()
  "Create a calendar date with current time and date."
  (CL:LET*
   ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
    (DOW NULL) (HOUR NULL-INTEGER) (MINUTE NULL-INTEGER)
    (SECOND NULL-INTEGER) (MILLISECOND NULL-INTEGER))
   (CL:DECLARE
    (CL:TYPE CL:FIXNUM YEAR MONTH DAY HOUR MINUTE SECOND MILLISECOND))
   (CL:MULTIPLE-VALUE-SETQ
    (YEAR MONTH DAY DOW HOUR MINUTE SECOND MILLISECOND)
    (GET-CURRENT-DATE-TIME))
   (CL:SETQ DOW DOW)
   (CL:RETURN-FROM MAKE-CURRENT-DATE-TIME
    (MAKE-DATE-TIME YEAR MONTH DAY HOUR MINUTE SECOND MILLISECOND
     0.0d0))))

;;; (DEFUN (MAKE-CALENDAR-DATE CALENDAR-DATE) ...)

(CL:DEFUN MAKE-CALENDAR-DATE (DAY TIME)
  (CL:DECLARE (CL:TYPE CL:FIXNUM DAY TIME))
  #+MCL
  (CL:CHECK-TYPE DAY CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE TIME CL:FIXNUM)
  (CL:LOOP WHILE (CL:< TIME 0) DO
   (CL:SETQ TIME (CL:+ TIME MILLIS-PER-DAY)) (CL:SETQ DAY (CL:1- DAY)))
  (CL:LOOP WHILE (CL:> TIME MILLIS-PER-DAY) DO
   (CL:SETQ TIME (CL:- TIME MILLIS-PER-DAY)) (CL:SETQ DAY (CL:1+ DAY)))
  (CL:LET* ((SELF-000 (NEW-CALENDAR-DATE)))
   (CL:SETF (%CALENDAR-DATE.MODIFIED-JULIAN-DAY SELF-000) DAY)
   (CL:SETF (%CALENDAR-DATE.TIME-MILLIS SELF-000) TIME)
   (CL:LET* ((VALUE-000 SELF-000))
    (CL:RETURN-FROM MAKE-CALENDAR-DATE VALUE-000))))

;;; (DEFUN (MAKE-TIME-DURATION TIME-DURATION) ...)

(CL:DEFUN MAKE-TIME-DURATION (DAYS MILLIS)
  (CL:DECLARE (CL:TYPE CL:FIXNUM DAYS MILLIS))
  #+MCL
  (CL:CHECK-TYPE DAYS CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE MILLIS CL:FIXNUM)
  (CL:LOOP WHILE (CL:< MILLIS (CL:- 0 MILLIS-PER-DAY)) DO
   (CL:SETQ MILLIS (CL:+ MILLIS MILLIS-PER-DAY))
   (CL:SETQ DAYS (CL:1- DAYS)))
  (CL:LOOP WHILE (CL:> MILLIS MILLIS-PER-DAY) DO
   (CL:SETQ MILLIS (CL:- MILLIS MILLIS-PER-DAY))
   (CL:SETQ DAYS (CL:1+ DAYS)))
  (CL:COND
   ((CL:< DAYS 0)
    (CL:WHEN (CL:> MILLIS 0) (CL:SETQ DAYS (CL:1+ DAYS))
     (CL:SETQ MILLIS (CL:- MILLIS MILLIS-PER-DAY))))
   ((CL:> DAYS 0)
    (CL:WHEN (CL:< MILLIS 0) (CL:SETQ DAYS (CL:1- DAYS))
     (CL:SETQ MILLIS (CL:+ MILLIS MILLIS-PER-DAY))))
   (CL:T))
  (CL:LET* ((SELF-000 (NEW-TIME-DURATION)))
   (CL:SETF (%TIME-DURATION.DAYS SELF-000) DAYS)
   (CL:SETF (%TIME-DURATION.MILLIS SELF-000) MILLIS)
   (CL:LET* ((VALUE-000 SELF-000))
    (CL:RETURN-FROM MAKE-TIME-DURATION VALUE-000))))

;;; (DEFUN (DECODE-TIME-IN-MILLIS INTEGER INTEGER INTEGER INTEGER) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION (CL:FIXNUM)
   (CL:VALUES CL:FIXNUM CL:FIXNUM CL:FIXNUM CL:FIXNUM))
  DECODE-TIME-IN-MILLIS))
(CL:DEFUN DECODE-TIME-IN-MILLIS (TIME)
  "Returns multiple values of hours, minutes, seconds, milliseconds for
`time' specified in milliseconds."
  (CL:DECLARE (CL:TYPE CL:FIXNUM TIME))
  #+MCL
  (CL:CHECK-TYPE TIME CL:FIXNUM)
  (CL:LET*
   ((MILLIS (CL:THE CL:FIXNUM (CL:REM TIME 1000)))
    (SECS
     (CL:THE CL:FIXNUM
      (CL:REM
       (CL:THE CL:FIXNUM
        (CL:LET ((X TIME) (Y 1000))
         (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
         (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y)))))
       60)))
    (MINS
     (CL:THE CL:FIXNUM
      (CL:REM
       (CL:THE CL:FIXNUM
        (CL:LET ((X TIME) (Y 60000))
         (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
         (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y)))))
       60)))
    (HOURS
     (CL:LET ((X TIME) (Y MILLIS-PER-HOUR))
      (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
      (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y))))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM MILLIS SECS MINS HOURS))
   (CL:RETURN-FROM DECODE-TIME-IN-MILLIS
    (CL:VALUES HOURS MINS SECS MILLIS))))

;;; (DEFMETHOD (GET-CALENDAR-DATE INTEGER INTEGER INTEGER KEYWORD) ...)

(CL:DEFMETHOD GET-CALENDAR-DATE ((DATE CALENDAR-DATE) TIMEZONE)
  "Returns multiple values of year, month, day and day of week for `date'
in `timezone'.  `timezone' is the number of hours added to UTC to get local time.  It
is in the range -12.0 to +14.0 where UTC is zone 0.0"
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:WHEN (CL:= TIMEZONE NULL-FLOAT)
   (CL:WARN
    "Timezone not specified in GET-CALENDAR-DATE  Using local zone.")
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
     (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (COMPUTE-CALENDAR-DATE
      (MODIFIED-JULIAN-DAY-TO-JULIAN-DAY
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY DATE))))
    (CL:SETQ DOW DOW)
    (CL:SETQ TIMEZONE
     (GET-LOCAL-TIME-ZONE-FOR-DATE YEAR MONTH DAY 12 0 0))))
  (CL:LET*
   ((TIME (%CALENDAR-DATE.TIME-MILLIS DATE))
    (TIMEZONE-ADJUSTED-TIME
     (CL:TRUNCATE (CL:+ TIME (CL:* TIMEZONE MILLIS-PER-HOUR))))
    (DAY-OFFSET 0))
   (CL:DECLARE
    (CL:TYPE CL:FIXNUM TIME TIMEZONE-ADJUSTED-TIME DAY-OFFSET))
   (CL:COND ((CL:< TIMEZONE-ADJUSTED-TIME 0) (CL:SETQ DAY-OFFSET -1))
    ((CL:> TIMEZONE-ADJUSTED-TIME MILLIS-PER-DAY)
     (CL:SETQ DAY-OFFSET 1))
    (CL:T))
   (CL:RETURN-FROM GET-CALENDAR-DATE
    (COMPUTE-CALENDAR-DATE
     (MODIFIED-JULIAN-DAY-TO-JULIAN-DAY
      (CL:+ (%CALENDAR-DATE.MODIFIED-JULIAN-DAY DATE) DAY-OFFSET))))))

;;; (DEFMETHOD (GET-TIME INTEGER INTEGER INTEGER INTEGER) ...)

(CL:DEFMETHOD GET-TIME ((DATE CALENDAR-DATE) TIMEZONE)
  "Returns multiple values of hours, minutes, seconds, milliseconds for
the calendar date `date' in `timezone'.  `timezone' is the number of hours added to UTC
to get local time.  It is in the range -12.0 to +14.0 where UTC is zone 0.0"
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:WHEN (CL:= TIMEZONE NULL-FLOAT)
   (CL:WARN "Timezone not specified in GET-TIME.  Using local zone.")
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
     (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (COMPUTE-CALENDAR-DATE
      (MODIFIED-JULIAN-DAY-TO-JULIAN-DAY
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY DATE))))
    (CL:SETQ DOW DOW)
    (CL:SETQ TIMEZONE
     (GET-LOCAL-TIME-ZONE-FOR-DATE YEAR MONTH DAY 12 0 0))))
  (CL:COND
   ((CL:= TIMEZONE 0.0d0)
    (CL:RETURN-FROM GET-TIME
     (DECODE-TIME-IN-MILLIS (%CALENDAR-DATE.TIME-MILLIS DATE))))
   ((CL:< TIMEZONE 0.0d0)
    (CL:RETURN-FROM GET-TIME
     (DECODE-TIME-IN-MILLIS
      (CL:THE CL:FIXNUM
       (CL:REM
        (CL:THE CL:FIXNUM
         (CL:TRUNCATE
          (CL:+ (%CALENDAR-DATE.TIME-MILLIS DATE) MILLIS-PER-DAY
           (CL:* TIMEZONE MILLIS-PER-HOUR))))
        MILLIS-PER-DAY)))))
   (CL:T
    (CL:RETURN-FROM GET-TIME
     (DECODE-TIME-IN-MILLIS
      (CL:THE CL:FIXNUM
       (CL:REM
        (CL:THE CL:FIXNUM
         (CL:TRUNCATE
          (CL:+ (%CALENDAR-DATE.TIME-MILLIS DATE)
           (CL:* TIMEZONE MILLIS-PER-HOUR))))
        MILLIS-PER-DAY)))))))

;;; (DEFMETHOD (DECODE-CALENDAR-DATE DECODED-DATE-TIME) ...)

(CL:DEFMETHOD DECODE-CALENDAR-DATE ((DATE CALENDAR-DATE) TIMEZONE)
  "Returns a decoded time object for `date' interpreted in `timezone'
`timezone' is the number of hours added to UTC to get local time.  It is 
in the range -12.0 to +14.0 where UTC is zone 0.0"
  (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TIMEZONE))
  #+MCL
  (CL:CHECK-TYPE TIMEZONE CL:DOUBLE-FLOAT)
  (CL:LET*
   ((HOUR NULL-INTEGER) (MIN NULL-INTEGER) (SEC NULL-INTEGER)
    (MILLIS NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR MIN SEC MILLIS))
   (CL:MULTIPLE-VALUE-SETQ (HOUR MIN SEC MILLIS)
    (GET-TIME DATE TIMEZONE))
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
     (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (GET-CALENDAR-DATE DATE TIMEZONE))
    (CL:LET* ((SELF-000 (NEW-DECODED-DATE-TIME)))
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF-000)
      (CL:FLOAT MILLIS 0.0d0))
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF-000) SEC)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF-000) MIN)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF-000) HOUR)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY SELF-000) DAY)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF-000) MONTH)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF-000) YEAR)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF-000) TIMEZONE)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW SELF-000) DOW)
     (CL:LET* ((VALUE-000 SELF-000))
      (CL:RETURN-FROM DECODE-CALENDAR-DATE VALUE-000))))))

;;; (DEFCONSTANT *DEFAULT-DECODED-DATE-TIME* ...)

(CL:DEFVAR *DEFAULT-DECODED-DATE-TIME* NULL)

;;; (DEFCONSTANT *NULL-DECODED-DATE-TIME* ...)

(CL:DEFVAR *NULL-DECODED-DATE-TIME* NULL)

;;; (DEFMETHOD (ENCODE-CALENDAR-DATE CALENDAR-DATE) ...)

(CL:DEFMETHOD ENCODE-CALENDAR-DATE ((TIME-STRUCTURE DECODED-DATE-TIME))
  "Returns a calendar date object for `time-structure'."
  (CL:RETURN-FROM ENCODE-CALENDAR-DATE
   (MAKE-DATE-TIME
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-YEAR TIME-STRUCTURE)
       NULL-INTEGER))
     (%DECODED-DATE-TIME.DATE-TIME-YEAR TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-YEAR *DEFAULT-DECODED-DATE-TIME*))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-MONTH TIME-STRUCTURE)
       NULL-INTEGER))
     (%DECODED-DATE-TIME.DATE-TIME-MONTH TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-MONTH *DEFAULT-DECODED-DATE-TIME*))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-DAY TIME-STRUCTURE)
       NULL-INTEGER))
     (%DECODED-DATE-TIME.DATE-TIME-DAY TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-DAY *DEFAULT-DECODED-DATE-TIME*))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-HOUR TIME-STRUCTURE)
       NULL-INTEGER))
     (%DECODED-DATE-TIME.DATE-TIME-HOUR TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-HOUR *DEFAULT-DECODED-DATE-TIME*))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-MINUTE TIME-STRUCTURE)
       NULL-INTEGER))
     (%DECODED-DATE-TIME.DATE-TIME-MINUTE TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-MINUTE *DEFAULT-DECODED-DATE-TIME*))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-SECOND TIME-STRUCTURE)
       NULL-INTEGER))
     (%DECODED-DATE-TIME.DATE-TIME-SECOND TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-SECOND *DEFAULT-DECODED-DATE-TIME*))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-MILLIS TIME-STRUCTURE)
       NULL-FLOAT))
     (ROUND (%DECODED-DATE-TIME.DATE-TIME-MILLIS TIME-STRUCTURE))
     (ROUND
      (%DECODED-DATE-TIME.DATE-TIME-MILLIS
       *DEFAULT-DECODED-DATE-TIME*)))
    (CL:IF
     (CL:NOT
      (CL:= (%DECODED-DATE-TIME.DATE-TIME-ZONE TIME-STRUCTURE)
       NULL-FLOAT))
     (%DECODED-DATE-TIME.DATE-TIME-ZONE TIME-STRUCTURE)
     (%DECODED-DATE-TIME.DATE-TIME-ZONE *DEFAULT-DECODED-DATE-TIME*)))))

;;; (DEFMETHOD (DECODE-TIME-DURATION DECODED-TIME-DURATION) ...)

(CL:DEFMETHOD DECODE-TIME-DURATION ((DURATION TIME-DURATION))
  (CL:IF (CL:> (%TIME-DURATION.MILLIS DURATION) 0)
   (CL:LET* ((SELF-000 (NEW-DECODED-TIME-DURATION)))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-DAYS SELF-000)
     (%TIME-DURATION.DAYS DURATION))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-HOURS SELF-000)
     (CL:LET ((X (%TIME-DURATION.MILLIS DURATION)) (Y MILLIS-PER-HOUR))
      (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
      (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y)))))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-MINUTES SELF-000)
     (CL:LET
      ((X
        (CL:THE CL:FIXNUM
         (CL:REM (CL:THE CL:FIXNUM (%TIME-DURATION.MILLIS DURATION))
          MILLIS-PER-HOUR)))
       (Y 60000))
      (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
      (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y)))))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-SECONDS SELF-000)
     (CL:LET
      ((X
        (CL:THE CL:FIXNUM
         (CL:REM (CL:THE CL:FIXNUM (%TIME-DURATION.MILLIS DURATION))
          60000)))
       (Y 1000))
      (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
      (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y)))))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-MILLIS SELF-000)
     (CL:FLOAT
      (CL:THE CL:FIXNUM
       (CL:REM (CL:THE CL:FIXNUM (%TIME-DURATION.MILLIS DURATION))
        1000))
      0.0d0))
    (CL:LET* ((VALUE-000 SELF-000))
     (CL:RETURN-FROM DECODE-TIME-DURATION VALUE-000)))
   (CL:LET* ((SELF-001 (NEW-DECODED-TIME-DURATION)))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-DAYS SELF-001)
     (%TIME-DURATION.DAYS DURATION))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-HOURS SELF-001)
     (CL:- 0
      (CL:LET
       ((X (CL:- 0 (%TIME-DURATION.MILLIS DURATION)))
        (Y MILLIS-PER-HOUR))
       (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
       (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y))))))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-MINUTES SELF-001)
     (CL:- 0
      (CL:LET
       ((X
         (CL:THE CL:FIXNUM
          (CL:REM
           (CL:THE CL:FIXNUM (CL:- 0 (%TIME-DURATION.MILLIS DURATION)))
           MILLIS-PER-HOUR)))
        (Y 60000))
       (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
       (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y))))))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-SECONDS SELF-001)
     (CL:- 0
      (CL:LET
       ((X
         (CL:THE CL:FIXNUM
          (CL:REM
           (CL:THE CL:FIXNUM (CL:- 0 (%TIME-DURATION.MILLIS DURATION)))
           60000)))
        (Y 1000))
       (CL:DECLARE (CL:TYPE CL:FIXNUM X Y))
       (CL:THE CL:FIXNUM (CL:VALUES (CL:TRUNCATE X Y))))))
    (CL:SETF (%DECODED-TIME-DURATION.DURATION-MILLIS SELF-001)
     (CL:FLOAT
      (CL:- 0
       (CL:THE CL:FIXNUM
        (CL:REM
         (CL:THE CL:FIXNUM (CL:- 0 (%TIME-DURATION.MILLIS DURATION)))
         1000)))
      0.0d0))
    (CL:LET* ((VALUE-001 SELF-001))
     (CL:RETURN-FROM DECODE-TIME-DURATION VALUE-001)))))

;;; (DEFMETHOD (ENCODE-TIME-DURATION TIME-DURATION) ...)

(CL:DEFMETHOD ENCODE-TIME-DURATION ((TIME-STRUCTURE DECODED-TIME-DURATION))
  (CL:RETURN-FROM ENCODE-TIME-DURATION
   (MAKE-TIME-DURATION
    (%DECODED-TIME-DURATION.DURATION-DAYS TIME-STRUCTURE)
    (CL:TRUNCATE
     (CL:+
      (CL:* (%DECODED-TIME-DURATION.DURATION-HOURS TIME-STRUCTURE)
       MILLIS-PER-HOUR)
      (CL:* (%DECODED-TIME-DURATION.DURATION-MINUTES TIME-STRUCTURE)
       60000)
      (CL:* (%DECODED-TIME-DURATION.DURATION-SECONDS TIME-STRUCTURE)
       1000)
      (%DECODED-TIME-DURATION.DURATION-MILLIS TIME-STRUCTURE))))))

;;; (DEFUN (TIME-ADD DATE-TIME-OBJECT) ...)

(CL:DEFUN TIME-ADD (T1 T2)
  "Add `t1' to `t2'.
If one of `t1' or `t2' is a calendar date, then the result is a calendar date.
If both `t1' and `t2' are relative dates, then the result is a relative date.
`t1' and `t2' cannot both be calendar dates."
  (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE T1)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-002 SGT-DATE-TIME-STELLA-CALENDAR-DATE)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
            "You can't add two calendar dates: `" T1 "'  `" T2 "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:RETURN-FROM TIME-ADD
           (MAKE-CALENDAR-DATE
            (CL:+ (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
             (%TIME-DURATION.DAYS T2))
            (CL:+ (%CALENDAR-DATE.TIME-MILLIS T1)
             (%TIME-DURATION.MILLIS T2))))))
        (CL:T
         (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))))
    ((SUBTYPE-OF? TEST-VALUE-002 SGT-DATE-TIME-STELLA-TIME-DURATION)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:RETURN-FROM TIME-ADD
           (MAKE-CALENDAR-DATE
            (CL:+ (%TIME-DURATION.DAYS T1)
             (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
            (CL:+ (%TIME-DURATION.MILLIS T1)
             (%CALENDAR-DATE.TIME-MILLIS T2))))))
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:RETURN-FROM TIME-ADD
           (MAKE-TIME-DURATION
            (CL:+ (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
            (CL:+ (%TIME-DURATION.MILLIS T1)
             (%TIME-DURATION.MILLIS T2))))))
        (CL:T
         (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))))
    (CL:T
     (CL:LET* ((STREAM-003 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-003)
       "`" TEST-VALUE-002 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-003))))))))

;;; (DEFUN (TIME-SUBTRACT DATE-TIME-OBJECT) ...)

(CL:DEFUN TIME-SUBTRACT (T1 T2)
  "Subtract `t2' from `t1'.  If `t1' is a calendar date, then `t2' can
be either a calendar date (in which case the return value is a relative date) or it
can be a relative date (in which case the return value is a calendar date).  If `t1'
is a relative date, then `t2' must also be a relative date and a relative date is returned."
  (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE T1)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-002 SGT-DATE-TIME-STELLA-CALENDAR-DATE)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:RETURN-FROM TIME-SUBTRACT
           (MAKE-TIME-DURATION
            (CL:- (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
             (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
            (CL:- (%CALENDAR-DATE.TIME-MILLIS T1)
             (%CALENDAR-DATE.TIME-MILLIS T2))))))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:RETURN-FROM TIME-SUBTRACT
           (MAKE-CALENDAR-DATE
            (CL:- (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
             (%TIME-DURATION.DAYS T2))
            (CL:- (%CALENDAR-DATE.TIME-MILLIS T1)
             (%TIME-DURATION.MILLIS T2))))))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
    ((SUBTYPE-OF? TEST-VALUE-002 SGT-DATE-TIME-STELLA-TIME-DURATION)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
            "You can't subtract a calendar date from a relative date: `"
            T1 "'  `" T2 "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:RETURN-FROM TIME-SUBTRACT
           (MAKE-TIME-DURATION
            (CL:- (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
            (CL:- (%TIME-DURATION.MILLIS T1)
             (%TIME-DURATION.MILLIS T2))))))
        (CL:T
         (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))))
    (CL:T
     (CL:LET* ((STREAM-003 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-003)
       "`" TEST-VALUE-002 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-003))))))))

;;; (DEFUN (TIME-MULTIPLY TIME-DURATION) ...)

(CL:DEFUN TIME-MULTIPLY (T1 T2)
  "Multiplies a relative date by a wrapped number.  One of `t1' or `t2'
must be a relative date and the other a wrapped number."
  (CL:LET* ((TEST-VALUE-003 (SAFE-PRIMARY-TYPE T1)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-003 SGT-DATE-TIME-STELLA-CALENDAR-DATE)
     (CL:PROGN
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "Calendar dates cannot be involved in multiplication:  `" T1
        "'  `" T2 "'")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
    ((SUBTYPE-OF? TEST-VALUE-003 SGT-DATE-TIME-STELLA-TIME-DURATION)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
            "Calendar dates cannot be involved in multiplication:  `"
            T1 "'  `" T2 "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))
        ((SUBTYPE-OF? TEST-VALUE-000
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
            "You can't multiply two relative dates: `" T1 "'  `" T2
            "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002))))))
        ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
         (CL:PROGN
          (CL:RETURN-FROM TIME-MULTIPLY
           (MAKE-TIME-DURATION
            (CL:* (%TIME-DURATION.DAYS T1)
             (%INTEGER-WRAPPER.WRAPPER-VALUE T2))
            (CL:* (%TIME-DURATION.MILLIS T1)
             (%INTEGER-WRAPPER.WRAPPER-VALUE T2))))))
        ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
         (CL:PROGN
          (CL:RETURN-FROM TIME-MULTIPLY
           (MAKE-TIME-DURATION
            (ROUND
             (CL:* (%TIME-DURATION.DAYS T1)
              (%FLOAT-WRAPPER.WRAPPER-VALUE T2)))
            (ROUND
             (CL:* (%TIME-DURATION.MILLIS T1)
              (%FLOAT-WRAPPER.WRAPPER-VALUE T2)))))))
        (CL:T
         (CL:LET* ((STREAM-003 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-003) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-003)))))))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-003)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:LET* ((STREAM-004 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-004)
            "Calendar dates cannot be involved in multiplication:  `"
            T1 "'  `" T2 "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-004))))))
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:RETURN-FROM TIME-MULTIPLY
           (MAKE-TIME-DURATION
            (CL:* (%INTEGER-WRAPPER.WRAPPER-VALUE T1)
             (%TIME-DURATION.DAYS T2))
            (CL:* (%INTEGER-WRAPPER.WRAPPER-VALUE T1)
             (%TIME-DURATION.MILLIS T2))))))
        ((SUBTYPE-OF? TEST-VALUE-001
          SGT-DATE-TIME-STELLA-NUMBER-WRAPPER)
         (CL:PROGN
          (CL:LET* ((STREAM-005 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-005)
            "One argument must be a relative date:  `" T1 "'  `" T2
            "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-005))))))
        (CL:T
         (CL:LET* ((STREAM-006 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-006) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-006)))))))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-003)
     (CL:PROGN
      (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE T2)))
       (CL:COND
        ((SUBTYPE-OF? TEST-VALUE-002
          SGT-DATE-TIME-STELLA-CALENDAR-DATE)
         (CL:PROGN
          (CL:LET* ((STREAM-007 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-007)
            "Calendar dates cannot be involved in multiplication:  `"
            T1 "'  `" T2 "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-007))))))
        ((SUBTYPE-OF? TEST-VALUE-002
          SGT-DATE-TIME-STELLA-TIME-DURATION)
         (CL:PROGN
          (CL:RETURN-FROM TIME-MULTIPLY
           (MAKE-TIME-DURATION
            (ROUND
             (CL:* (%FLOAT-WRAPPER.WRAPPER-VALUE T1)
              (%TIME-DURATION.DAYS T2)))
            (ROUND
             (CL:* (%FLOAT-WRAPPER.WRAPPER-VALUE T1)
              (%TIME-DURATION.MILLIS T2)))))))
        ((SUBTYPE-OF? TEST-VALUE-002
          SGT-DATE-TIME-STELLA-NUMBER-WRAPPER)
         (CL:PROGN
          (CL:LET* ((STREAM-008 (NEW-OUTPUT-STRING-STREAM)))
           (%%PRINT-STREAM
            (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-008)
            "One argument must be a relative date:  `" T1 "'  `" T2
            "'")
           (CL:ERROR
            (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-008))))))
        (CL:T
         (CL:LET* ((STREAM-009 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-009) "`"
           TEST-VALUE-002 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-009)))))))))
    (CL:T
     (CL:LET* ((STREAM-010 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-010)
       "`" TEST-VALUE-003 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-010))))))))

;;; (DEFUN (TIME-DIVIDE OBJECT) ...)

(CL:DEFUN TIME-DIVIDE (T1 T2)
  "Divides the relative date `t1' by `t2'.  `t2' must be
either a relative date or a wrapped number.  If `t2' is a relative date,
then the return value will be a wrapped float.  If `t2' is a wrapped number,
then the reutrn value will be a relative date."
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE T2)))
   (CL:COND
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-DATE-TIME-STELLA-CALENDAR-DATE)
     (CL:PROGN
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "Calendar dates cannot be involved in division:  `" T1 "'  `"
        T2 "'")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
    ((SUBTYPE-OF? TEST-VALUE-000 SGT-DATE-TIME-STELLA-TIME-DURATION)
     (CL:PROGN
      (CL:RETURN-FROM TIME-DIVIDE
       (WRAP-FLOAT
        (CL:/
         (CL:+ (%TIME-DURATION.DAYS T1)
          (CL:/ (CL:FLOAT (%TIME-DURATION.MILLIS T1) 0.0d0)
           MILLIS-PER-DAY))
         (CL:+ (%TIME-DURATION.DAYS T2)
          (CL:/ (CL:FLOAT (%TIME-DURATION.MILLIS T2) 0.0d0)
           MILLIS-PER-DAY)))))))
    ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM TIME-DIVIDE
       (MAKE-TIME-DURATION
        (ROUND
         (CL:/ (CL:FLOAT (%TIME-DURATION.DAYS T1) 0.0d0)
          (%INTEGER-WRAPPER.WRAPPER-VALUE T2)))
        (ROUND
         (CL:/ (CL:FLOAT (%TIME-DURATION.MILLIS T1) 0.0d0)
          (%INTEGER-WRAPPER.WRAPPER-VALUE T2)))))))
    ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM TIME-DIVIDE
       (MAKE-TIME-DURATION
        (ROUND
         (CL:/ (%TIME-DURATION.DAYS T1)
          (%FLOAT-WRAPPER.WRAPPER-VALUE T2)))
        (ROUND
         (CL:/ (%TIME-DURATION.MILLIS T1)
          (%FLOAT-WRAPPER.WRAPPER-VALUE T2)))))))
    (CL:T
     (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001))))))))

;;; (DEFMACRO DEFINE-TIME-COMPARISON ...)

(CL:DEFUN DEFINE-TIME-COMPARISON (NAME OPERATOR ERROR?)
  (CL:LET*
   ((OTHERWISE-CLAUSE
     (CL:IF (CL:EQ ERROR? SYM-DATE-TIME-STELLA-TRUE)
      (LIST* SYM-DATE-TIME-STELLA-SIGNAL
       SYM-DATE-TIME-STELLA-INCOMPATIBLE-QUANTITY-EXCEPTION
       (WRAP-STRING "Can't compare calendar date ")
       SYM-DATE-TIME-STELLA-T1 (WRAP-STRING " with object ")
       SYM-DATE-TIME-STELLA-T2 NIL)
      (LIST* SYM-DATE-TIME-STELLA-RETURN SYM-DATE-TIME-STELLA-FALSE
       NIL))))
   (CL:RETURN-FROM DEFINE-TIME-COMPARISON
    (LIST* SYM-DATE-TIME-STELLA-PROGN
     (LIST* SYM-DATE-TIME-STELLA-DEFMETHOD
      (CONS NAME (CONS SYM-DATE-TIME-STELLA-BOOLEAN NIL))
      (LIST*
       (LIST* SYM-DATE-TIME-STELLA-T1
        SYM-DATE-TIME-STELLA-CALENDAR-DATE NIL)
       (LIST* SYM-DATE-TIME-STELLA-T2 SYM-DATE-TIME-STELLA-OBJECT NIL)
       NIL)
      (LIST* SYM-DATE-TIME-STELLA-TYPECASE SYM-DATE-TIME-STELLA-T2
       (LIST* SYM-DATE-TIME-STELLA-CALENDAR-DATE
        (LIST* SYM-DATE-TIME-STELLA-IF
         (LIST* SYM-DATE-TIME-STELLA-=
          (LIST* SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY
           SYM-DATE-TIME-STELLA-T1 NIL)
          (LIST* SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY
           SYM-DATE-TIME-STELLA-T2 NIL)
          NIL)
         (LIST* SYM-DATE-TIME-STELLA-RETURN
          (CONS OPERATOR
           (LIST*
            (LIST* SYM-DATE-TIME-STELLA-TIME-MILLIS
             SYM-DATE-TIME-STELLA-T1 NIL)
            (LIST* SYM-DATE-TIME-STELLA-TIME-MILLIS
             SYM-DATE-TIME-STELLA-T2 NIL)
            NIL))
          NIL)
         (LIST* SYM-DATE-TIME-STELLA-RETURN
          (CONS OPERATOR
           (LIST*
            (LIST* SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY
             SYM-DATE-TIME-STELLA-T1 NIL)
            (LIST* SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY
             SYM-DATE-TIME-STELLA-T2 NIL)
            NIL))
          NIL)
         NIL)
        NIL)
       (LIST* SYM-DATE-TIME-STELLA-OTHERWISE
        (COPY-CONS-LIST OTHERWISE-CLAUSE) NIL)
       NIL)
      NIL)
     (LIST* SYM-DATE-TIME-STELLA-DEFMETHOD
      (CONS NAME (CONS SYM-DATE-TIME-STELLA-BOOLEAN NIL))
      (LIST*
       (LIST* SYM-DATE-TIME-STELLA-T1
        SYM-DATE-TIME-STELLA-TIME-DURATION NIL)
       (LIST* SYM-DATE-TIME-STELLA-T2 SYM-DATE-TIME-STELLA-OBJECT NIL)
       NIL)
      (LIST* SYM-DATE-TIME-STELLA-TYPECASE SYM-DATE-TIME-STELLA-T2
       (LIST* SYM-DATE-TIME-STELLA-TIME-DURATION
        (LIST* SYM-DATE-TIME-STELLA-IF
         (LIST* SYM-DATE-TIME-STELLA-=
          (LIST* SYM-DATE-TIME-STELLA-DAYS SYM-DATE-TIME-STELLA-T1 NIL)
          (LIST* SYM-DATE-TIME-STELLA-DAYS SYM-DATE-TIME-STELLA-T2 NIL)
          NIL)
         (LIST* SYM-DATE-TIME-STELLA-RETURN
          (CONS OPERATOR
           (LIST*
            (LIST* SYM-DATE-TIME-STELLA-MILLIS SYM-DATE-TIME-STELLA-T1
             NIL)
            (LIST* SYM-DATE-TIME-STELLA-MILLIS SYM-DATE-TIME-STELLA-T2
             NIL)
            NIL))
          NIL)
         (LIST* SYM-DATE-TIME-STELLA-RETURN
          (CONS OPERATOR
           (LIST*
            (LIST* SYM-DATE-TIME-STELLA-DAYS SYM-DATE-TIME-STELLA-T1
             NIL)
            (LIST* SYM-DATE-TIME-STELLA-DAYS SYM-DATE-TIME-STELLA-T2
             NIL)
            NIL))
          NIL)
         NIL)
        NIL)
       (LIST* SYM-DATE-TIME-STELLA-OTHERWISE
        (COPY-CONS-LIST OTHERWISE-CLAUSE) NIL)
       NIL)
      NIL)
     NIL))))

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((T1 CALENDAR-DATE) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-CALENDAR-DATE)
    (CL:PROGN
     (CL:IF
      (CL:= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
      (CL:RETURN-FROM OBJECT-EQL?
       (CL:= (%CALENDAR-DATE.TIME-MILLIS T1)
        (%CALENDAR-DATE.TIME-MILLIS T2)))
      (CL:RETURN-FROM OBJECT-EQL?
       (CL:= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
        (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))))))
   (CL:T (CL:RETURN-FROM OBJECT-EQL? CL:NIL))))

;;; (DEFMETHOD (OBJECT-EQL? BOOLEAN) ...)

(CL:DEFMETHOD OBJECT-EQL? ((T1 TIME-DURATION) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-TIME-DURATION)
    (CL:PROGN
     (CL:IF (CL:= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
      (CL:RETURN-FROM OBJECT-EQL?
       (CL:= (%TIME-DURATION.MILLIS T1) (%TIME-DURATION.MILLIS T2)))
      (CL:RETURN-FROM OBJECT-EQL?
       (CL:= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))))))
   (CL:T (CL:RETURN-FROM OBJECT-EQL? CL:NIL))))

;;; (DEFMETHOD (LESS? BOOLEAN) ...)

(CL:DEFMETHOD LESS? ((T1 CALENDAR-DATE) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-CALENDAR-DATE)
    (CL:PROGN
     (CL:IF
      (CL:= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
      (CL:RETURN-FROM LESS?
       (< (%CALENDAR-DATE.TIME-MILLIS T1)
        (%CALENDAR-DATE.TIME-MILLIS T2)))
      (CL:RETURN-FROM LESS?
       (< (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
        (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (LESS? BOOLEAN) ...)

(CL:DEFMETHOD LESS? ((T1 TIME-DURATION) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-TIME-DURATION)
    (CL:PROGN
     (CL:IF (CL:= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
      (CL:RETURN-FROM LESS?
       (< (%TIME-DURATION.MILLIS T1) (%TIME-DURATION.MILLIS T2)))
      (CL:RETURN-FROM LESS?
       (< (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (GREATER? BOOLEAN) ...)

(CL:DEFMETHOD GREATER? ((T1 CALENDAR-DATE) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-CALENDAR-DATE)
    (CL:PROGN
     (CL:IF
      (CL:= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
      (CL:RETURN-FROM GREATER?
       (> (%CALENDAR-DATE.TIME-MILLIS T1)
        (%CALENDAR-DATE.TIME-MILLIS T2)))
      (CL:RETURN-FROM GREATER?
       (> (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
        (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (GREATER? BOOLEAN) ...)

(CL:DEFMETHOD GREATER? ((T1 TIME-DURATION) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-TIME-DURATION)
    (CL:PROGN
     (CL:IF (CL:= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
      (CL:RETURN-FROM GREATER?
       (> (%TIME-DURATION.MILLIS T1) (%TIME-DURATION.MILLIS T2)))
      (CL:RETURN-FROM GREATER?
       (> (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (LESS-EQUAL? BOOLEAN) ...)

(CL:DEFMETHOD LESS-EQUAL? ((T1 CALENDAR-DATE) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-CALENDAR-DATE)
    (CL:PROGN
     (CL:IF
      (CL:= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
      (CL:RETURN-FROM LESS-EQUAL?
       (<= (%CALENDAR-DATE.TIME-MILLIS T1)
        (%CALENDAR-DATE.TIME-MILLIS T2)))
      (CL:RETURN-FROM LESS-EQUAL?
       (<= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
        (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (LESS-EQUAL? BOOLEAN) ...)

(CL:DEFMETHOD LESS-EQUAL? ((T1 TIME-DURATION) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-TIME-DURATION)
    (CL:PROGN
     (CL:IF (CL:= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
      (CL:RETURN-FROM LESS-EQUAL?
       (<= (%TIME-DURATION.MILLIS T1) (%TIME-DURATION.MILLIS T2)))
      (CL:RETURN-FROM LESS-EQUAL?
       (<= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (GREATER-EQUAL? BOOLEAN) ...)

(CL:DEFMETHOD GREATER-EQUAL? ((T1 CALENDAR-DATE) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-CALENDAR-DATE)
    (CL:PROGN
     (CL:IF
      (CL:= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
       (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))
      (CL:RETURN-FROM GREATER-EQUAL?
       (>= (%CALENDAR-DATE.TIME-MILLIS T1)
        (%CALENDAR-DATE.TIME-MILLIS T2)))
      (CL:RETURN-FROM GREATER-EQUAL?
       (>= (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T1)
        (%CALENDAR-DATE.MODIFIED-JULIAN-DAY T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFMETHOD (GREATER-EQUAL? BOOLEAN) ...)

(CL:DEFMETHOD GREATER-EQUAL? ((T1 TIME-DURATION) T2)
  (CL:COND
   ((SUBTYPE-OF? (SAFE-PRIMARY-TYPE T2)
     SGT-DATE-TIME-STELLA-TIME-DURATION)
    (CL:PROGN
     (CL:IF (CL:= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))
      (CL:RETURN-FROM GREATER-EQUAL?
       (>= (%TIME-DURATION.MILLIS T1) (%TIME-DURATION.MILLIS T2)))
      (CL:RETURN-FROM GREATER-EQUAL?
       (>= (%TIME-DURATION.DAYS T1) (%TIME-DURATION.DAYS T2))))))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "Can't compare calendar date `" T1 "' with object `" T2 "'")
     (CL:ERROR
      (NEW-INCOMPATIBLE-QUANTITY-EXCEPTION
       (THE-STRING-READER STREAM-000)))))))

;;; (DEFUN FILL-IN-DATE-SUBSTITUTION ...)

(CL:DEFUN FILL-IN-DATE-SUBSTITUTION (SUBSTITUTION-LIST)
  "Fill in `substitution-list' with template variable substitions
for the names YEAR and DATE which correspond to the current year and date.
These substitutions can then be used with `substitute-template-variables-in-string'
DEPRECATED.  Use `add-date-subsitution' or `add-current-date-substitution' instead."
  (CL:LET*
   ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
    (DOW NULL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
   (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
    (GET-CALENDAR-DATE (MAKE-CURRENT-DATE-TIME) (GET-LOCAL-TIME-ZONE)))
   (CL:SETQ DOW DOW)
   (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "YEAR")
    (WRAP-STRING (INTEGER-TO-STRING (CL:TRUNCATE YEAR))))
   (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "DATE")
    (WRAP-STRING
     (CONCATENATE
      (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE DAY)) 2 #\0
       KWD-DATE-TIME-RIGHT CL:NIL)
      "-"
      (%STRING-WRAPPER.WRAPPER-VALUE
       (CL:AREF
        (CL:THE CL:SIMPLE-VECTOR
         (%VECTOR.THE-ARRAY *MONTH-ABBREVIATION-VECTOR*))
        MONTH))
      "-" (INTEGER-TO-STRING (CL:TRUNCATE YEAR))))))
  :VOID)

;;; (DEFUN ADD-DATE-SUBSTITUTION ...)

(CL:DEFUN ADD-DATE-SUBSTITUTION (DATE SUBSTITUTION-LIST)
  "Fill in `substitution-list' with template variable substitions
for the names YEAR, MONTH, MON, DAY, HOUR, MINUTE, SECOND, TIMEZONE,
DAY-OF-WEEK, DOW with their values for `date'.  Also, pre-formatted
DATE, TIME and ISO8601 variables are set.

TIMEZONE is in the format \"{+|-}hhmm\".  MONTH is the full English
month name and MON is the numeric month.  DAY-OF-WEEK is an English
string and DOW is the first three letters.  Minutes and seconds are
zero-padded.

These substitutions can be used with `substitute-template-variables-in-string'"
  (CL:LET* ((TZ (GET-LOCAL-TIME-ZONE)))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT TZ))
   (CL:LET*
    ((YEAR NULL-INTEGER) (MONTH NULL-INTEGER) (DAY NULL-INTEGER)
     (DOW NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR MONTH DAY))
    (CL:MULTIPLE-VALUE-SETQ (YEAR MONTH DAY DOW)
     (GET-CALENDAR-DATE DATE TZ))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "YEAR")
     (WRAP-STRING (INTEGER-TO-STRING (CL:TRUNCATE YEAR))))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "MONTH")
     (CL:AREF
      (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY *MONTH-NAME-VECTOR*))
      MONTH))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "MON")
     (WRAP-STRING (INTEGER-TO-STRING (CL:TRUNCATE MONTH))))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "DAY")
     (WRAP-STRING (INTEGER-TO-STRING (CL:TRUNCATE DAY))))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "DAY-OF-WEEK")
     (WRAP-STRING (STRING-CAPITALIZE (%KEYWORD.SYMBOL-NAME DOW))))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "DOW")
     (WRAP-STRING
      (STRING-CAPITALIZE
       (SUBSEQUENCE (%KEYWORD.SYMBOL-NAME DOW) 0 3))))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "DATE")
     (WRAP-STRING
      (CONCATENATE
       (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE DAY)) 2 #\0
        KWD-DATE-TIME-RIGHT CL:NIL)
       "-"
       (%STRING-WRAPPER.WRAPPER-VALUE
        (CL:AREF
         (CL:THE CL:SIMPLE-VECTOR
          (%VECTOR.THE-ARRAY *MONTH-ABBREVIATION-VECTOR*))
         MONTH))
       "-" (INTEGER-TO-STRING (CL:TRUNCATE YEAR))))))
   (CL:LET*
    ((HOUR NULL-INTEGER) (MIN NULL-INTEGER) (SEC NULL-INTEGER)
     (MILLIS NULL-INTEGER))
    (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR MIN SEC MILLIS))
    (CL:MULTIPLE-VALUE-SETQ (HOUR MIN SEC MILLIS) (GET-TIME DATE TZ))
    (CL:SETQ MILLIS MILLIS)
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "HOUR")
     (WRAP-STRING (INTEGER-TO-STRING (CL:TRUNCATE HOUR))))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "MINUTE")
     (WRAP-STRING
      (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE MIN)) 2 #\0
       KWD-DATE-TIME-RIGHT CL:NIL)))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "SECOND")
     (WRAP-STRING
      (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE SEC)) 2 #\0
       KWD-DATE-TIME-RIGHT CL:NIL)))
    (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "TIME")
     (WRAP-STRING
      (CONCATENATE (INTEGER-TO-STRING (CL:TRUNCATE HOUR)) ":"
       (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE MIN)) 2 #\0
        KWD-DATE-TIME-RIGHT CL:NIL)
       ":"
       (FORMAT-WITH-PADDING (INTEGER-TO-STRING (CL:TRUNCATE SEC)) 2 #\0
        KWD-DATE-TIME-RIGHT CL:NIL)))))
   (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "TIMEZONE")
    (WRAP-STRING (TIME-ZONE-FORMAT60 TZ CL:NIL)))
   (INSERT-AT SUBSTITUTION-LIST (WRAP-STRING "IOS8601")
    (WRAP-STRING (CALENDAR-DATE-TO-ISO8601-STRING DATE TZ CL:T))))
  :VOID)

;;; (DEFUN ADD-CURRENT-DATE-SUBSTITUTION ...)

(CL:DEFUN ADD-CURRENT-DATE-SUBSTITUTION (SUBSTITUTION-LIST)
  "Fill in `substitution-list' with date information for the current
date and time.  See `add-date-substitution' for details."
  (ADD-DATE-SUBSTITUTION (MAKE-CURRENT-DATE-TIME) SUBSTITUTION-LIST)
  :VOID)

;;; (DEFGLOBAL *FORMAT-DATE-HANDLERS* ...)

(CL:DEFVAR *FORMAT-DATE-HANDLERS* NULL
  "Handler functions indexed by the character code of their control character.")

;;; (DEFUN FORMAT-DATE-PRINT-STRING ...)

(CL:DEFUN FORMAT-DATE-PRINT-STRING (STRING FLAG START END STREAM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING)
   (CL:TYPE CL:FIXNUM START END))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE START CL:FIXNUM)
  #+MCL
  (CL:CHECK-TYPE END CL:FIXNUM)
  (CL:WHEN (CL:< END 0)
   (CL:SETQ END (CL:THE CL:FIXNUM (CL:LENGTH STRING))))
  (CL:SETQ END (CL:1- END))
  (CL:CASE FLAG
   (#\^
    (CL:LET*
     ((I NULL-INTEGER) (ITER-000 START) (UPPER-BOUND-000 END)
      (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
     (CL:LOOP WHILE
      (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
      (CL:SETQ I ITER-000)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
       (CL:LET
        ((SELF *CHARACTER-UPCASE-TABLE*)
         (POSITION
          (CL:THE CL:FIXNUM
           (CL:CHAR-CODE
            (CL:LET ((SELF STRING) (POSITION I))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))))))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
         (CL:THE CL:FIXNUM POSITION))))
      (CL:SETQ ITER-000 (CL:1+ ITER-000)))))
   (#\,
    (CL:LET*
     ((I NULL-INTEGER) (ITER-001 START) (UPPER-BOUND-001 END)
      (UNBOUNDED?-001 (CL:= UPPER-BOUND-001 NULL-INTEGER)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001 UPPER-BOUND-001))
     (CL:LOOP WHILE
      (CL:OR UNBOUNDED?-001 (CL:<= ITER-001 UPPER-BOUND-001)) DO
      (CL:SETQ I ITER-001)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
       (CL:LET
        ((SELF *CHARACTER-DOWNCASE-TABLE*)
         (POSITION
          (CL:THE CL:FIXNUM
           (CL:CHAR-CODE
            (CL:LET ((SELF STRING) (POSITION I))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))))))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
         (CL:THE CL:FIXNUM POSITION))))
      (CL:SETQ ITER-001 (CL:1+ ITER-001)))))
   (CL:OTHERWISE
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
     (CL:LET
      ((SELF *CHARACTER-UPCASE-TABLE*)
       (POSITION
        (CL:THE CL:FIXNUM
         (CL:CHAR-CODE
          (CL:LET ((SELF STRING) (POSITION START))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
            (CL:THE CL:FIXNUM POSITION)))))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION))))
    (CL:LET*
     ((I NULL-INTEGER) (ITER-002 (CL:1+ START)) (UPPER-BOUND-002 END)
      (UNBOUNDED?-002 (CL:= UPPER-BOUND-002 NULL-INTEGER)))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-002 UPPER-BOUND-002))
     (CL:LOOP WHILE
      (CL:OR UNBOUNDED?-002 (CL:<= ITER-002 UPPER-BOUND-002)) DO
      (CL:SETQ I ITER-002)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
       (CL:LET
        ((SELF *CHARACTER-DOWNCASE-TABLE*)
         (POSITION
          (CL:THE CL:FIXNUM
           (CL:CHAR-CODE
            (CL:LET ((SELF STRING) (POSITION I))
             (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
              (CL:TYPE CL:FIXNUM POSITION))
             (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
              (CL:THE CL:FIXNUM POSITION)))))))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
         (CL:THE CL:FIXNUM POSITION))))
      (CL:SETQ ITER-002 (CL:1+ ITER-002))))))
  :VOID)

;;; (DEFUN FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER ...)

(CL:DEFUN FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER (NUMBER FLAG STREAM)
  (CL:DECLARE (CL:TYPE CL:FIXNUM NUMBER))
  #+MCL
  (CL:CHECK-TYPE NUMBER CL:FIXNUM)
  (CL:WHEN (CL:<= NUMBER 9) (CL:WHEN (NULL? FLAG) (CL:SETQ FLAG #\0))
   (CL:CASE FLAG
    (#\_ (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) " "))
    ((#\0 NULL-CHARACTER)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "0"))
    (CL:OTHERWISE)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) NUMBER)
  :VOID)

;;; (DEFUN FORMAT-DATE-ABBREVIATED-WEEKDAY-HANDLER ...)

(CL:DEFUN FORMAT-DATE-ABBREVIATED-WEEKDAY-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-STRING
   (%KEYWORD.SYMBOL-NAME (%DECODED-DATE-TIME.DATE-TIME-DOW DATE)) FLAG
   0 3 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-FULL-WEEKDAY-HANDLER ...)

(CL:DEFUN FORMAT-DATE-FULL-WEEKDAY-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-STRING
   (%KEYWORD.SYMBOL-NAME (%DECODED-DATE-TIME.DATE-TIME-DOW DATE)) FLAG
   0 -1 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-ABBREVIATED-MONTH-HANDLER ...)

(CL:DEFUN FORMAT-DATE-ABBREVIATED-MONTH-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-STRING
   (%STRING-WRAPPER.WRAPPER-VALUE
    (CL:AREF
     (CL:THE CL:SIMPLE-VECTOR
      (%VECTOR.THE-ARRAY *MONTH-ABBREVIATION-VECTOR*))
     (CL:THE CL:FIXNUM (%DECODED-DATE-TIME.DATE-TIME-MONTH DATE))))
   FLAG 0 -1 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-FULL-MONTH-HANDLER ...)

(CL:DEFUN FORMAT-DATE-FULL-MONTH-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-STRING
   (%STRING-WRAPPER.WRAPPER-VALUE
    (CL:AREF
     (CL:THE CL:SIMPLE-VECTOR (%VECTOR.THE-ARRAY *MONTH-NAME-VECTOR*))
     (CL:THE CL:FIXNUM (%DECODED-DATE-TIME.DATE-TIME-MONTH DATE))))
   FLAG 0 -1 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-DAY-OF-MONTH-HANDLER ...)

(CL:DEFUN FORMAT-DATE-DAY-OF-MONTH-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER
   (%DECODED-DATE-TIME.DATE-TIME-DAY DATE) FLAG STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-FULL-DATE-HANDLER ...)

(CL:DEFUN FORMAT-DATE-FULL-DATE-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ CONT CONT) (CL:SETQ FLAG FLAG))
  (FORMAT-DATE-MONTH-HANDLER DATE #\m #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "/")
  (FORMAT-DATE-DAY-OF-MONTH-HANDLER DATE #\d #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "/")
  (FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER DATE #\y #\0 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-24-HOUR-HANDLER ...)

(CL:DEFUN FORMAT-DATE-24-HOUR-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER
   (%DECODED-DATE-TIME.DATE-TIME-HOUR DATE) FLAG STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-12-HOUR-HANDLER ...)

(CL:DEFUN FORMAT-DATE-12-HOUR-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (CL:LET*
   ((HOUR
     (CL:1+
      (MOD (CL:1- (%DECODED-DATE-TIME.DATE-TIME-HOUR DATE)) 12))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM HOUR))
   (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER HOUR FLAG STREAM))
  :VOID)

;;; (DEFUN FORMAT-DATE-MONTH-HANDLER ...)

(CL:DEFUN FORMAT-DATE-MONTH-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER
   (%DECODED-DATE-TIME.DATE-TIME-MONTH DATE) FLAG STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-MINUTE-HANDLER ...)

(CL:DEFUN FORMAT-DATE-MINUTE-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER
   (%DECODED-DATE-TIME.DATE-TIME-MINUTE DATE) FLAG STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-AM-PM-HANDLER ...)

(CL:DEFUN FORMAT-DATE-AM-PM-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (CL:LET*
   ((AMPM
     (CL:IF (CL:< (%DECODED-DATE-TIME.DATE-TIME-HOUR DATE) 12) "AM"
      "PM")))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING AMPM))
   (CL:WHEN (NULL? FLAG) (CL:SETQ FLAG #\^))
   (FORMAT-DATE-PRINT-STRING AMPM FLAG 0 2 STREAM))
  :VOID)

;;; (DEFUN FORMAT-DATE-12-HOUR-CLOCK-TIME-HANDLER ...)

(CL:DEFUN FORMAT-DATE-12-HOUR-CLOCK-TIME-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ CONT CONT) (CL:SETQ FLAG FLAG))
  (FORMAT-DATE-12-HOUR-HANDLER DATE #\I #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) ":")
  (FORMAT-DATE-MINUTE-HANDLER DATE #\M #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) ":")
  (FORMAT-DATE-SECOND-HANDLER DATE #\S #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) " ")
  (FORMAT-DATE-AM-PM-HANDLER DATE #\p #\^ STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-24-HOUR-AND-MINUTE-TIME-HANDLER ...)

(CL:DEFUN FORMAT-DATE-24-HOUR-AND-MINUTE-TIME-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ CONT CONT) (CL:SETQ FLAG FLAG))
  (FORMAT-DATE-24-HOUR-HANDLER DATE #\H #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) ":")
  (FORMAT-DATE-MINUTE-HANDLER DATE #\M #\0 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-SECOND-HANDLER ...)

(CL:DEFUN FORMAT-DATE-SECOND-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER
   (%DECODED-DATE-TIME.DATE-TIME-SECOND DATE) FLAG STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-FULL-TIME-HANDLER ...)

(CL:DEFUN FORMAT-DATE-FULL-TIME-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ CONT CONT) (CL:SETQ FLAG FLAG))
  (FORMAT-DATE-24-HOUR-HANDLER DATE #\H #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) ":")
  (FORMAT-DATE-MINUTE-HANDLER DATE #\M #\0 STREAM)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) ":")
  (FORMAT-DATE-SECOND-HANDLER DATE #\S #\0 STREAM)
  :VOID)

;;; (DEFUN FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER ...)

(CL:DEFUN FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ CONT CONT) (CL:SETQ FLAG FLAG))
  (CL:LET* ((YEAR (MOD (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE) 100)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM YEAR))
   (FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER YEAR #\0 STREAM))
  :VOID)

;;; (DEFUN FORMAT-DATE-YEAR-HANDLER ...)

(CL:DEFUN FORMAT-DATE-YEAR-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (CL:WHEN (CL:< (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE) 1000)
   (CL:WHEN (NULL? FLAG) (CL:SETQ FLAG #\0))
   (CL:CASE FLAG
    (#\_
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
      (FORMAT-WITH-PADDING
       (INTEGER-TO-STRING
        (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE)))
       4 #\  KWD-DATE-TIME-RIGHT CL:NIL))
     (CL:RETURN-FROM FORMAT-DATE-YEAR-HANDLER))
    ((#\0 NULL-CHARACTER)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
      (FORMAT-WITH-PADDING
       (INTEGER-TO-STRING
        (CL:TRUNCATE (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE)))
       4 #\0 KWD-DATE-TIME-RIGHT CL:NIL))
     (CL:RETURN-FROM FORMAT-DATE-YEAR-HANDLER))
    (CL:OTHERWISE)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
   (%DECODED-DATE-TIME.DATE-TIME-YEAR DATE))
  :VOID)

;;; (DEFUN FORMAT-DATE-NUMERIC-TIME-ZONE-HANDLER ...)

(CL:DEFUN FORMAT-DATE-NUMERIC-TIME-ZONE-HANDLER (DATE CONT FLAG STREAM)
  (CL:SETQ CONT CONT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM)
   (TIME-ZONE-FORMAT60 (%DECODED-DATE-TIME.DATE-TIME-ZONE DATE)
    (CL:EQL FLAG #\:)))
  :VOID)

;;; (DEFUN FORMAT-DATE-TIME-ALPHABETIC-ZONE-HANDLER ...)

(CL:DEFUN FORMAT-DATE-TIME-ALPHABETIC-ZONE-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ STREAM STREAM) (CL:SETQ FLAG FLAG)
   (CL:SETQ DATE DATE))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
    "format-date: control not yet implemented: `" CONT "'")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))
  :VOID)

;;; (DEFUN FORMAT-DATE-ERROR-HANDLER ...)

(CL:DEFUN FORMAT-DATE-ERROR-HANDLER (DATE CONT FLAG STREAM)
  (CL:PROGN (CL:SETQ STREAM STREAM) (CL:SETQ FLAG FLAG)
   (CL:SETQ DATE DATE))
  (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
   (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
    "format-date: illegal control character: `" CONT "'")
   (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))
  :VOID)

;;; (DEFUN FORMAT-DATE-TO-STREAM ...)

(CL:DEFUN FORMAT-DATE-TO-STREAM (DATE TIMEZONE CONTROL STREAM)
  "Perform formatted printing of `date' relative to `timezone' onto `stream'.  `date'
has to be either a calendar-date or a decoded-date-time object.  `timezone' can be null to indicate
the local timezone, or a float or supported timezone name.  `control' is a format control string whose
characters are printed literally, unless they are a %-code such as one of these (inspired by the codes
supported by the Unix `date' command):
       %%     a literal %
       %a     abbreviated weekday name (e.g., Sun)
       %A     full weekday name (e.g., Sunday)
       %b     abbreviated month name (e.g., Jan)
       %B     full month name (e.g., January)
       %d     day of month (e.g., 01)
       %D     date; same as %m/%d/%y
       %F     full date; same as %Y-%m-%d
       %H     hour (00..23)
       %I     hour (01..12)
       %m     month (01..12)
       %M     minute (00..59)
       %p     either AM or PM
       %r     12-hour clock time (e.g., 11:11:04 PM)
       %R     24-hour hour and minute; same as %H:%M
       %S     second (00..60)
       %T     time; same as %H:%M:%S
       %y     last two digits of year (00..99)
       %Y     year
       %z     +hhmm numeric time zone (e.g., -0400)
       %:z    +hhmm numeric time zone (e.g., -04:00)
       %Z     alphabetic time zone abbreviation (e.g., EDT)
By default, numeric fields are padded with zeroes. The following optional flags may follow '%':
       -      (hyphen) do not pad the field
       _      (underscore) pad with spaces
       0      (zero) pad with zeros
       ^      use upper case if possible
       ,      use lower case if possible"
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CONTROL))
  #+MCL
  (CL:CHECK-TYPE CONTROL CL:SIMPLE-STRING)
  (CL:LET*
   ((DECODEDZONE (GET-LOCAL-TIME-ZONE)) (DECODEDDATE NULL)
    (END (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH CONTROL)))) (I 0)
    (CH NULL-CHARACTER) (FLAG NULL-CHARACTER))
   (CL:DECLARE (CL:TYPE CL:DOUBLE-FLOAT DECODEDZONE)
    (CL:TYPE CL:FIXNUM END I))
   (CL:WHEN (CL:NOT (CL:EQ TIMEZONE NULL))
    (CL:LET* ((DECZONE (ZONE TIMEZONE)))
     (CL:WHEN (CL:AND (CL:EQ DECZONE NULL) (STRING? TIMEZONE))
      (CL:SETQ DECZONE
       (ZONE
        (WRAP-STRING
         (STRING-DOWNCASE (%STRING-WRAPPER.WRAPPER-VALUE TIMEZONE))))))
     (CL:WHEN (CL:NOT (CL:EQ DECZONE NULL))
      (CL:SETQ DECODEDZONE (%FLOAT-WRAPPER.WRAPPER-VALUE DECZONE)))))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE DATE)))
    (CL:COND
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-DATE-TIME-STELLA-CALENDAR-DATE)
      (CL:PROGN
       (CL:SETQ DECODEDDATE (DECODE-CALENDAR-DATE DATE DECODEDZONE))))
     ((SUBTYPE-OF? TEST-VALUE-000
       SGT-DATE-TIME-STELLA-DECODED-DATE-TIME)
      (CL:PROGN (CL:SETQ DECODEDDATE DATE)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "format-date: unsupported date type: `" (PRIMARY-TYPE DATE)
        "'")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:LOOP WHILE (CL:<= I END) DO
    (CL:TAGBODY
     (CL:SETQ CH
      (CL:LET ((SELF CONTROL) (POSITION I))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:COND
      ((CL:EQL CH #\%)
       (CL:WHEN (CL:= I END)
        (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001)
          "format-date: end of control string encountered: `" CONTROL
          "'")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))
       (CL:SETQ I (CL:1+ I)) (CL:SETQ FLAG NULL-CHARACTER)
       (CL:SETQ CH
        (CL:LET ((SELF CONTROL) (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))))
       (CL:WHEN (CL:EQL CH #\%)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) "%")
        (CL:SETQ I (CL:1+ I)) (CL:GO :CONTINUE))
       (CL:WHEN
        (CL:NOT
         (CL:EQ
          (CL:AREF *CHARACTER-TYPE-TABLE*
           (CL:THE CL:FIXNUM (CL:CHAR-CODE CH)))
          KWD-DATE-TIME-LETTER))
        (CL:WHEN (CL:= I END)
         (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002)
           "format-date: end of control string encountered: `" CONTROL
           "'")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))
        (CL:SETQ I (CL:1+ I)) (CL:SETQ FLAG CH)
        (CL:SETQ CH
         (CL:LET ((SELF CONTROL) (POSITION I))
          (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
           (CL:TYPE CL:FIXNUM POSITION))
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))))
        (CL:WHEN (CL:= (POSITION "-_0^,:" FLAG 0) NULL-INTEGER)
         (CL:LET* ((STREAM-003 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-003)
           "format-date: illegal control flag: `" FLAG "'")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-003)))))
        (CL:WHEN
         (CL:NOT
          (CL:EQ
           (CL:AREF *CHARACTER-TYPE-TABLE*
            (CL:THE CL:FIXNUM (CL:CHAR-CODE CH)))
           KWD-DATE-TIME-LETTER))
         (CL:LET* ((STREAM-004 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-004)
           "format-date: illegal control character: `" CH "'")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-004))))))
       (CL:FUNCALL
        (%FUNCTION-CODE-WRAPPER.WRAPPER-VALUE
         (CL:AREF
          (CL:THE CL:SIMPLE-VECTOR
           (%VECTOR.THE-ARRAY *FORMAT-DATE-HANDLERS*))
          (CL:THE CL:FIXNUM (CL:CHAR-CODE CH))))
        DECODEDDATE CH FLAG STREAM))
      (CL:T (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STREAM) CH)))
     (CL:SETQ I (CL:1+ I)) :CONTINUE)))
  :VOID)

;;; (DEFUN (FORMAT-DATE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  FORMAT-DATE))
(CL:DEFUN FORMAT-DATE (DATE TIMEZONE CONTROL)
  "Format `date' just like `format-date-to-stream' (which see), but return the result as a string."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CONTROL))
  #+MCL
  (CL:CHECK-TYPE CONTROL CL:SIMPLE-STRING)
  (CL:LET* ((OUT (NEW-OUTPUT-STRING-STREAM)))
   (FORMAT-DATE-TO-STREAM DATE TIMEZONE CONTROL OUT)
   (CL:RETURN-FROM FORMAT-DATE (THE-STRING-READER OUT))))

(CL:DEFUN HELP-STARTUP-DATE-TIME1 ()
  (CL:PROGN
   (CL:SETQ KWD-DATE-TIME-MONDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MONDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-TUESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TUESDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-WEDNESDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WEDNESDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-THURSDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THURSDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-FRIDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRIDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-SATURDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SATURDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-SUNDAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUNDAY" NULL 2))
   (CL:SETQ KWD-DATE-TIME-NEW-MOON
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW-MOON" NULL 2))
   (CL:SETQ KWD-DATE-TIME-FIRST-QUARTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FIRST-QUARTER" NULL 2))
   (CL:SETQ KWD-DATE-TIME-FULL-MOON
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FULL-MOON" NULL 2))
   (CL:SETQ KWD-DATE-TIME-LAST-QUARTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LAST-QUARTER" NULL 2))
   (CL:SETQ KWD-DATE-TIME-RIGHT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RIGHT" NULL 2))
   (CL:SETQ SGT-DATE-TIME-STELLA-DECODED-DATE-TIME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DECODED-DATE-TIME" NULL 1))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-MILLIS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-MILLIS" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-SECOND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-SECOND" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-MINUTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-MINUTE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-HOUR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-HOUR" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-DAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-DAY" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-MONTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-MONTH" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-YEAR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-YEAR" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-ZONE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-ZONE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DATE-TIME-DOW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DATE-TIME-DOW" NULL 0))
   (CL:SETQ KWD-DATE-TIME-PRESERVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRESERVE" NULL 2))
   (CL:SETQ SGT-DATE-TIME-STELLA-DECODED-TIME-DURATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DECODED-TIME-DURATION" NULL 1))
   (CL:SETQ SYM-DATE-TIME-STELLA-DURATION-MILLIS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DURATION-MILLIS" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DURATION-SECONDS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DURATION-SECONDS" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DURATION-MINUTES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DURATION-MINUTES" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DURATION-HOURS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DURATION-HOURS" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DURATION-DAYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DURATION-DAYS" NULL 0))
   (CL:SETQ SGT-DATE-TIME-STELLA-CALENDAR-DATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CALENDAR-DATE" NULL 1))
   (CL:SETQ SYM-DATE-TIME-STELLA-MODIFIED-JULIAN-DAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MODIFIED-JULIAN-DAY" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-TIME-MILLIS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-MILLIS" NULL 0))
   (CL:SETQ SGT-DATE-TIME-STELLA-TIME-DURATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-DURATION" NULL 1))
   (CL:SETQ SYM-DATE-TIME-STELLA-DAYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DAYS" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-MILLIS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MILLIS" NULL 0))
   (CL:SETQ SGT-DATE-TIME-STELLA-NUMBER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER-WRAPPER" NULL 1))
   (CL:SETQ SYM-DATE-TIME-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNAL" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-INCOMPATIBLE-QUANTITY-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INCOMPATIBLE-QUANTITY-EXCEPTION"
     NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-T1
    (INTERN-RIGID-SYMBOL-WRT-MODULE "T1" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-T2
    (INTERN-RIGID-SYMBOL-WRT-MODULE "T2" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-FALSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-DEFMETHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFMETHOD" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-CALENDAR-DATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CALENDAR-DATE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-TYPECASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPECASE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-=
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-OTHERWISE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-TIME-DURATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TIME-DURATION" NULL 0))
   (CL:SETQ KWD-DATE-TIME-LETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LETTER" NULL 2))
   (CL:SETQ SYM-DATE-TIME-STELLA-STARTUP-DATE-TIME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-DATE-TIME" NULL 0))
   (CL:SETQ SYM-DATE-TIME-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-DATE-TIME2 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "COMPUTE-JULIAN-DAY"
    "(DEFUN (COMPUTE-JULIAN-DAY INTEGER) ((YYYY INTEGER) (MM INTEGER) (DD INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the Julian day that starts at noon on yyyy-mm-dd.
`yyyy' is the year.  `mm' is the month.  `dd' is the day of month.
Negative years are B.C.  Remember there is no year zero.\")"
    (CL:FUNCTION COMPUTE-JULIAN-DAY) NULL)
   (DEFINE-FUNCTION-OBJECT "JULIAN-DAY-TO-MODIFIED-JULIAN-DAY"
    "(DEFUN (JULIAN-DAY-TO-MODIFIED-JULIAN-DAY INTEGER) ((JULIAN-DAY INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the modified Julian day during which `julian-day'starts at noon.\")"
    (CL:FUNCTION JULIAN-DAY-TO-MODIFIED-JULIAN-DAY) NULL)
   (DEFINE-FUNCTION-OBJECT "MODIFIED-JULIAN-DAY-TO-JULIAN-DAY"
    "(DEFUN (MODIFIED-JULIAN-DAY-TO-JULIAN-DAY INTEGER) ((MODIFIED-JULIAN-DAY INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the modified Julian day during which `julian-day'starts at noon.\")"
    (CL:FUNCTION MODIFIED-JULIAN-DAY-TO-JULIAN-DAY) NULL)
   (DEFINE-FUNCTION-OBJECT "COMPUTE-DAY-OF-WEEK-JULIAN"
    "(DEFUN (COMPUTE-DAY-OF-WEEK-JULIAN KEYWORD) ((JULIAN-DAY INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the day of the week for julian-day\")"
    (CL:FUNCTION COMPUTE-DAY-OF-WEEK-JULIAN) NULL)
   (DEFINE-FUNCTION-OBJECT "COMPUTE-DAY-OF-WEEK"
    "(DEFUN (COMPUTE-DAY-OF-WEEK KEYWORD) ((YYYY INTEGER) (MM INTEGER) (DD INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the day of the week for yyyy-mm-dd.\")"
    (CL:FUNCTION COMPUTE-DAY-OF-WEEK) NULL)
   (DEFINE-FUNCTION-OBJECT "COMPUTE-NEXT-MOON-PHASE"
    "(DEFUN (COMPUTE-NEXT-MOON-PHASE INTEGER FLOAT) ((N INTEGER) (PHASE KEYWORD)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the Julian Day and fraction of day of the Nth occurence
since January 1, 1900 of moon PHASE.  PHASE is one of :NEW-MOON, :FIRST-QUARTER,
:FULL-MOON, :LAST-QUARTER\")" (CL:FUNCTION COMPUTE-NEXT-MOON-PHASE)
    NULL)
   (DEFINE-FUNCTION-OBJECT "COMPUTE-CALENDAR-DATE"
    "(DEFUN (COMPUTE-CALENDAR-DATE INTEGER INTEGER INTEGER KEYWORD) ((JULIAN-DAY INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the YEAR, MONTH, DAY, DAY-OF-WEEK on which the given
`julian-day' begins at noon.\")" (CL:FUNCTION COMPUTE-CALENDAR-DATE)
    NULL)
   (DEFINE-FUNCTION-OBJECT "GET-CURRENT-DATE-TIME"
    "(DEFUN (GET-CURRENT-DATE-TIME INTEGER INTEGER INTEGER KEYWORD INTEGER INTEGER INTEGER INTEGER) () :PUBLIC? TRUE :DOCUMENTATION \"Returns the current time in UTC as multiple values of
year month day day-of-week hour minute second millisecond.  Currently
millisecond will always be zero (even in Java where it is technically available).\")"
    (CL:FUNCTION GET-CURRENT-DATE-TIME) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-LOCAL-TIME-ZONE"
    "(DEFUN (GET-LOCAL-TIME-ZONE FLOAT) () :PUBLIC? TRUE :DOCUMENTATION \"Returns the current time zone offset from UTC as a float,
considering the effects of daylight savings time.\")"
    (CL:FUNCTION GET-LOCAL-TIME-ZONE) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-LOCAL-STANDARD-TIME-ZONE"
    "(DEFUN (GET-LOCAL-STANDARD-TIME-ZONE FLOAT) () :PUBLIC? TRUE :DOCUMENTATION \"Returns the standard time zone offset from UTC as a float,
without considering the effects of daylight savings time.\")"
    (CL:FUNCTION GET-LOCAL-STANDARD-TIME-ZONE) NULL)
   (DEFINE-FUNCTION-OBJECT "GET-LOCAL-TIME-ZONE-FOR-DATE"
    "(DEFUN (GET-LOCAL-TIME-ZONE-FOR-DATE FLOAT) ((YEAR INTEGER) (MONTH INTEGER) (DAY INTEGER) (HOUR INTEGER) (MINUTE INTEGER) (SECOND INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the time zone offset from UTC (as a float)
that is applicable to the given date.  Assumes that the date is one
that is valid for the underlying programming language.  If not, then
returns 0.0\")" (CL:FUNCTION GET-LOCAL-TIME-ZONE-FOR-DATE) NULL)
   (DEFINE-FUNCTION-OBJECT "TIME-ZONE-FORMAT60"
    "(DEFUN (TIME-ZONE-FORMAT60 STRING) ((TIMEZONE FLOAT) (INCLUDE-COLON? BOOLEAN)) :PUBLIC? FALSE :DOCUMENTATION \"Format `zone' as an hh:mm or hhmm string depending on `include-colon?'\")"
    (CL:FUNCTION TIME-ZONE-FORMAT60) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (HASH-CODE INTEGER) ((SELF DECODED-DATE-TIME)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (LOGXOR (LOGOR (LOGOR (SHIFT-LEFT (DATE-TIME-YEAR SELF) 9) (SHIFT-LEFT (DATE-TIME-MONTH SELF) 5)) (DATE-TIME-DAY SELF)) (LOGOR (LOGOR (SHIFT-LEFT (DATE-TIME-HOUR SELF) 12) (SHIFT-LEFT (DATE-TIME-MINUTE SELF) 6)) (DATE-TIME-SECOND SELF)))))"
    (WRAP-METHOD-CODE (CL:FUNCTION HASH-CODE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD SET-CURRENT-TIME ((VALUES-STRUCTURE DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Sets the current time into `values-structure'\")"
    (WRAP-METHOD-CODE (CL:FUNCTION SET-CURRENT-TIME)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD SET-CURRENT-DATE ((VALUES-STRUCTURE DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Sets the current date into `values-structure'\")"
    (WRAP-METHOD-CODE (CL:FUNCTION SET-CURRENT-DATE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD SET-CURRENT-DATE-TIME ((VALUES-STRUCTURE DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Sets the current date and time into `values-structure'\")"
    (WRAP-METHOD-CODE (CL:FUNCTION SET-CURRENT-DATE-TIME)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (DECODED-DATE-TIME-TO-ISO8601-STRING STRING) ((DATE DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Returns an ISO-8601 string representation of `date'
The Format is YYYY-MM-DDThh:mm:ss+zz:zz, with the string stopping at
when a null value is first encountered.  The time zone will only
be included (if present) if a time value is given.\")"
    (WRAP-METHOD-CODE
     (CL:FUNCTION DECODED-DATE-TIME-TO-ISO8601-STRING))
    NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD SET-CONSISTENT-DOW ((SELF DECODED-DATE-TIME)) :PUBLIC? FALSE)"
    (WRAP-METHOD-CODE (CL:FUNCTION SET-CONSISTENT-DOW)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD HELP-MERGE-NULL-FIELDS ((SELF DECODED-DATE-TIME) (DEFAULT DECODED-DATE-TIME) (INDEX INTEGER)) :PUBLIC? FALSE)"
    (WRAP-METHOD-CODE (CL:FUNCTION HELP-MERGE-NULL-FIELDS)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD MERGE-NULL-FIELDS ((SELF DECODED-DATE-TIME) (DEFAULT DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Replace any null valued fields in `self' with values from `default'.
The day of the week will be set consistently, if possible.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION MERGE-NULL-FIELDS)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD MERGE-SUPERIOR-NULL-FIELDS ((SELF DECODED-DATE-TIME) (DEFAULT DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Replace only null valued fields in `self' that represent larger
time units than the smallest non-null in `self' with values from `default'.
The day of the week will be set consistently, if possible.
Example: if `self' just has the month being non-null, then only the year
will be filled in from `default'.  If the day and minute were non-null,
then hour, month and year will be filled.

This can be useful when one doesn't want to extend the precision
of the answer.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION MERGE-SUPERIOR-NULL-FIELDS)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (HASH-CODE INTEGER) ((SELF DECODED-TIME-DURATION)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (LOGXOR (DURATION-DAYS SELF) (LOGOR (LOGOR (SHIFT-LEFT (DURATION-HOURS SELF) 12) (SHIFT-LEFT (DURATION-MINUTES SELF) 6)) (DURATION-SECONDS SELF)))))"
    (WRAP-METHOD-CODE (CL:FUNCTION HASH-CODE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (COERCE-TO CALENDAR-DATE) ((X CALENDAR-DATE) (Y OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION COERCE-TO)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (HASH-CODE INTEGER) ((SELF CALENDAR-DATE)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (LOGXOR (MODIFIED-JULIAN-DAY SELF) (TIME-MILLIS SELF))))"
    (WRAP-METHOD-CODE (CL:FUNCTION HASH-CODE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CALENDAR-DATE-TO-DATE-STRING STRING) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT) (NUMERIC-MONTH? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the date part of the string representation of `date' 
adjusted for `timezone'.  Format is YYYY-MMM-DD, where MMM is a three letter
English abbreviation of the month if `numeric-month?' is `false' and a two
digit numeric value if `numeric-month?' is `true'.  The value `false' is
recommended.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION CALENDAR-DATE-TO-DATE-STRING)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CALENDAR-DATE-TO-TIME-STRING STRING) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT) (INCLUDE-TIMEZONE? BOOLEAN) (INCLUDE-MILLIS? BOOLEAN) (PAD-HOURS? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Returns the time part of the string representation of `date'
adjusted for `timezone'.  The timezone is included in the string if
`include-timezone?' is `true'.  The value `true' is recommended.
Milliseconds will be included if `include-millis?' is `true'.
Hours will be zero-padded to length 2 if `pad-hours?' is `true'.
\")" (WRAP-METHOD-CODE (CL:FUNCTION CALENDAR-DATE-TO-TIME-STRING))
    NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CALENDAR-DATE-TO-STRING STRING) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT) (NUMERIC-MONTH? BOOLEAN) (INCLUDE-TIMEZONE? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Returns a string representation of `date' adjusted for `timezone'.
The Format is YYYY-MMM-DD hh:mm:ss z.z, where MMM is a three letter
English abbreviation of the month if `numeric-month?' is `false' and a two
digit numeric value if `numeric-month?' is `true'.  The timezone as a
float offset z.z is included if `include-timezone?' is `true'.

Recommended values for the flags are `false' and `true' respectively.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION CALENDAR-DATE-TO-STRING)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CALENDAR-DATE-TO-ISO8601-STRING STRING) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT) (INCLUDE-TIMEZONE? BOOLEAN)) :PUBLIC? TRUE :DOCUMENTATION \"Returns an ISO-8601 string representation of `date' adjusted for `timezone'.
The Format is YYYY-MM-DDThh:mm:ss z:zz.  The timezone as an offset
hh:mm is included if `include-timezone?' is `true'.

Recommended values for the flag is `true'.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION CALENDAR-DATE-TO-ISO8601-STRING))
    NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (CALENDAR-DATE-TO-NATIVE-DATE-TIME NATIVE-DATE-TIME) ((DATE CALENDAR-DATE)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CALENDAR-DATE-TO-NATIVE-DATE-TIME))
    NULL)
   (DEFINE-FUNCTION-OBJECT "NATIVE-DATE-TIME-TO-CALENDAR-DATE"
    "(DEFUN (NATIVE-DATE-TIME-TO-CALENDAR-DATE CALENDAR-DATE) ((DATE NATIVE-DATE-TIME)) :CONSTRUCTOR? TRUE)"
    (CL:FUNCTION NATIVE-DATE-TIME-TO-CALENDAR-DATE) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD PRINT-CALENDAR-DATE ((DATE CALENDAR-DATE) (STREAM NATIVE-OUTPUT-STREAM)))"
    (WRAP-METHOD-CODE (CL:FUNCTION PRINT-CALENDAR-DATE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (COERCE-TO TIME-DURATION) ((X TIME-DURATION) (Y OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION COERCE-TO)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (HASH-CODE INTEGER) ((SELF TIME-DURATION)) :PUBLIC? TRUE :GLOBALLY-INLINE? TRUE (RETURN (LOGXOR (DAYS SELF) (MILLIS SELF))))"
    (WRAP-METHOD-CODE (CL:FUNCTION HASH-CODE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (TIME-DURATION-TO-STRING STRING) ((DATE TIME-DURATION)) :PUBLIC? TRUE :DOCUMENTATION \"Returns a string representation of `date'\")"
    (WRAP-METHOD-CODE (CL:FUNCTION TIME-DURATION-TO-STRING)) NULL)
   (DEFINE-FUNCTION-OBJECT "STRING-TO-TIME-DURATION"
    "(DEFUN (STRING-TO-TIME-DURATION TIME-DURATION) ((DURATION STRING)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Parses and returns an time-duration object corresponding to `duration'.
The syntax for time duration strings is \\\"{plus|minus} N days[; M ms]\\\" where N and M are
integer values for days and milliseconds.  If no valid parse is found, `null' is returned.\")"
    (CL:FUNCTION STRING-TO-TIME-DURATION) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD PRINT-TIME-DURATION ((DATE TIME-DURATION) (STREAM NATIVE-OUTPUT-STREAM)))"
    (WRAP-METHOD-CODE (CL:FUNCTION PRINT-TIME-DURATION)) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-DATE-TIME"
    "(DEFUN (MAKE-DATE-TIME CALENDAR-DATE) ((YEAR INTEGER) (MONTH INTEGER) (DAY INTEGER) (HOUR INTEGER) (MINUTE INTEGER) (SECOND INTEGER) (MILLIS INTEGER) (TIMEZONE FLOAT)) :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Create a calendar date with the specified components.  `year' must be
the complete year (i.e., a year of 98 is 98 A.D in the 1st century).
`timezone' is a real number in the range -12.0 to +14.0 where UTC is zone 0.0;  The number
is the number of hours to add to UTC to arrive at local time.\")"
    (CL:FUNCTION MAKE-DATE-TIME) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-CURRENT-DATE-TIME"
    "(DEFUN (MAKE-CURRENT-DATE-TIME CALENDAR-DATE) () :PUBLIC? TRUE :CONSTRUCTOR? TRUE :DOCUMENTATION \"Create a calendar date with current time and date.\")"
    (CL:FUNCTION MAKE-CURRENT-DATE-TIME) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-CALENDAR-DATE"
    "(DEFUN (MAKE-CALENDAR-DATE CALENDAR-DATE) ((DAY INTEGER) (TIME INTEGER)) :CONSTRUCTOR? TRUE)"
    (CL:FUNCTION MAKE-CALENDAR-DATE) NULL)
   (DEFINE-FUNCTION-OBJECT "MAKE-TIME-DURATION"
    "(DEFUN (MAKE-TIME-DURATION TIME-DURATION) ((DAYS INTEGER) (MILLIS INTEGER)) :CONSTRUCTOR? TRUE)"
    (CL:FUNCTION MAKE-TIME-DURATION) NULL)
   (DEFINE-FUNCTION-OBJECT "DECODE-TIME-IN-MILLIS"
    "(DEFUN (DECODE-TIME-IN-MILLIS INTEGER INTEGER INTEGER INTEGER) ((TIME INTEGER)) :PUBLIC? TRUE :DOCUMENTATION \"Returns multiple values of hours, minutes, seconds, milliseconds for
`time' specified in milliseconds.\")"
    (CL:FUNCTION DECODE-TIME-IN-MILLIS) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (GET-CALENDAR-DATE INTEGER INTEGER INTEGER KEYWORD) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT)) :PUBLIC? TRUE :DOCUMENTATION \"Returns multiple values of year, month, day and day of week for `date'
in `timezone'.  `timezone' is the number of hours added to UTC to get local time.  It
is in the range -12.0 to +14.0 where UTC is zone 0.0\")"
    (WRAP-METHOD-CODE (CL:FUNCTION GET-CALENDAR-DATE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (GET-TIME INTEGER INTEGER INTEGER INTEGER) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT)) :PUBLIC? TRUE :DOCUMENTATION \"Returns multiple values of hours, minutes, seconds, milliseconds for
the calendar date `date' in `timezone'.  `timezone' is the number of hours added to UTC
to get local time.  It is in the range -12.0 to +14.0 where UTC is zone 0.0\")"
    (WRAP-METHOD-CODE (CL:FUNCTION GET-TIME)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (DECODE-CALENDAR-DATE DECODED-DATE-TIME) ((DATE CALENDAR-DATE) (TIMEZONE FLOAT)) :PUBLIC? TRUE :DOCUMENTATION \"Returns a decoded time object for `date' interpreted in `timezone'
`timezone' is the number of hours added to UTC to get local time.  It is 
in the range -12.0 to +14.0 where UTC is zone 0.0\")"
    (WRAP-METHOD-CODE (CL:FUNCTION DECODE-CALENDAR-DATE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (ENCODE-CALENDAR-DATE CALENDAR-DATE) ((TIME-STRUCTURE DECODED-DATE-TIME)) :PUBLIC? TRUE :DOCUMENTATION \"Returns a calendar date object for `time-structure'.\")"
    (WRAP-METHOD-CODE (CL:FUNCTION ENCODE-CALENDAR-DATE)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (DECODE-TIME-DURATION DECODED-TIME-DURATION) ((DURATION TIME-DURATION)))"
    (WRAP-METHOD-CODE (CL:FUNCTION DECODE-TIME-DURATION)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (ENCODE-TIME-DURATION TIME-DURATION) ((TIME-STRUCTURE DECODED-TIME-DURATION)))"
    (WRAP-METHOD-CODE (CL:FUNCTION ENCODE-TIME-DURATION)) NULL)
   (DEFINE-FUNCTION-OBJECT "TIME-ADD"
    "(DEFUN (TIME-ADD DATE-TIME-OBJECT) ((T1 DATE-TIME-OBJECT) (T2 DATE-TIME-OBJECT)) :PUBLIC? TRUE :DOCUMENTATION \"Add `t1' to `t2'.
If one of `t1' or `t2' is a calendar date, then the result is a calendar date.
If both `t1' and `t2' are relative dates, then the result is a relative date.
`t1' and `t2' cannot both be calendar dates.\")" (CL:FUNCTION TIME-ADD)
    NULL)
   (DEFINE-FUNCTION-OBJECT "TIME-SUBTRACT"
    "(DEFUN (TIME-SUBTRACT DATE-TIME-OBJECT) ((T1 DATE-TIME-OBJECT) (T2 DATE-TIME-OBJECT)) :PUBLIC? TRUE :DOCUMENTATION \"Subtract `t2' from `t1'.  If `t1' is a calendar date, then `t2' can
be either a calendar date (in which case the return value is a relative date) or it
can be a relative date (in which case the return value is a calendar date).  If `t1'
is a relative date, then `t2' must also be a relative date and a relative date is returned.\")"
    (CL:FUNCTION TIME-SUBTRACT) NULL)
   (DEFINE-FUNCTION-OBJECT "TIME-MULTIPLY"
    "(DEFUN (TIME-MULTIPLY TIME-DURATION) ((T1 OBJECT) (T2 OBJECT)) :PUBLIC? TRUE :DOCUMENTATION \"Multiplies a relative date by a wrapped number.  One of `t1' or `t2'
must be a relative date and the other a wrapped number.\")"
    (CL:FUNCTION TIME-MULTIPLY) NULL)
   (DEFINE-FUNCTION-OBJECT "TIME-DIVIDE"
    "(DEFUN (TIME-DIVIDE OBJECT) ((T1 TIME-DURATION) (T2 OBJECT)) :PUBLIC? TRUE :DOCUMENTATION \"Divides the relative date `t1' by `t2'.  `t2' must be
either a relative date or a wrapped number.  If `t2' is a relative date,
then the return value will be a wrapped float.  If `t2' is a wrapped number,
then the reutrn value will be a relative date.\")"
    (CL:FUNCTION TIME-DIVIDE) NULL)
   (DEFINE-FUNCTION-OBJECT "DEFINE-TIME-COMPARISON"
    "(DEFUN DEFINE-TIME-COMPARISON ((NAME SYMBOL) (OPERATOR SYMBOL) (ERROR? SYMBOL)) :TYPE OBJECT :MACRO? TRUE :PUBLIC? FALSE)"
    (CL:FUNCTION DEFINE-TIME-COMPARISON) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((T1 CALENDAR-DATE) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION OBJECT-EQL?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((T1 TIME-DURATION) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION OBJECT-EQL?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (LESS? BOOLEAN) ((T1 CALENDAR-DATE) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION LESS?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (LESS? BOOLEAN) ((T1 TIME-DURATION) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION LESS?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (GREATER? BOOLEAN) ((T1 CALENDAR-DATE) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION GREATER?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (GREATER? BOOLEAN) ((T1 TIME-DURATION) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION GREATER?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (LESS-EQUAL? BOOLEAN) ((T1 CALENDAR-DATE) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION LESS-EQUAL?)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (LESS-EQUAL? BOOLEAN) ((T1 TIME-DURATION) (T2 OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION LESS-EQUAL?)) NULL))
  :VOID)

(CL:DEFUN STARTUP-DATE-TIME ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-DATE-TIME1))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ MILLIS-PER-DAY (CL:* 1000 60 60 24))
    (CL:SETQ MILLIS-PER-HOUR (CL:* 1000 60 60))
    (CL:SETQ *MONTH-NAME-VECTOR* (NEW-VECTOR 13))
    (CL:LET*
     ((I NULL-INTEGER) (ITER-032 0) (UPPER-BOUND-033 12)
      (ABBREVIATION NULL)
      (ITER-034
       (GET-QUOTED-TREE
        "((\"NUL\" \"January\" \"February\" \"March\" \"April\" \"May\" \"June\" \"July\" \"August\" \"September\" \"October\" \"November\" \"December\") \"/STELLA\")"
        "/STELLA")))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-032 UPPER-BOUND-033))
     (CL:LOOP WHILE
      (CL:AND (CL:<= ITER-032 UPPER-BOUND-033)
       (CL:NOT (CL:EQ ITER-034 NIL)))
      DO (CL:SETQ I ITER-032) (CL:SETQ ABBREVIATION (%%VALUE ITER-034))
      (CL:LET
       ((SELF (%VECTOR.THE-ARRAY *MONTH-NAME-VECTOR*))
        (VALUE ABBREVIATION) (POSITION I))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SETF (CL:AREF SELF POSITION) VALUE))
      (CL:SETQ ITER-032 (CL:1+ ITER-032))
      (CL:SETQ ITER-034 (%%REST ITER-034))))
    (CL:SETQ *MONTH-ABBREVIATION-VECTOR* (NEW-VECTOR 13))
    (CL:LET*
     ((I NULL-INTEGER) (ITER-036 0) (UPPER-BOUND-037 12)
      (ABBREVIATION NULL)
      (ITER-038
       (GET-QUOTED-TREE
        "((\"NUL\" \"JAN\" \"FEB\" \"MAR\" \"APR\" \"MAY\" \"JUN\" \"JUL\" \"AUG\" \"SEP\" \"OCT\" \"NOV\" \"DEC\") \"/STELLA\")"
        "/STELLA")))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-036 UPPER-BOUND-037))
     (CL:LOOP WHILE
      (CL:AND (CL:<= ITER-036 UPPER-BOUND-037)
       (CL:NOT (CL:EQ ITER-038 NIL)))
      DO (CL:SETQ I ITER-036) (CL:SETQ ABBREVIATION (%%VALUE ITER-038))
      (CL:LET
       ((SELF (%VECTOR.THE-ARRAY *MONTH-ABBREVIATION-VECTOR*))
        (VALUE ABBREVIATION) (POSITION I))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SETF (CL:AREF SELF POSITION) VALUE))
      (CL:SETQ ITER-036 (CL:1+ ITER-036))
      (CL:SETQ ITER-038 (%%REST ITER-038))))
    (CL:SETQ *DEFAULT-DECODED-DATE-TIME* (NEW-DECODED-DATE-TIME))
    (CL:LET* ((SELF-040 (NEW-DECODED-DATE-TIME)))
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MILLIS SELF-040)
      NULL-FLOAT)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-SECOND SELF-040)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MINUTE SELF-040)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-HOUR SELF-040)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DAY SELF-040) NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-MONTH SELF-040)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-YEAR SELF-040)
      NULL-INTEGER)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-ZONE SELF-040) NULL-FLOAT)
     (CL:SETF (%DECODED-DATE-TIME.DATE-TIME-DOW SELF-040) NULL)
     (CL:SETQ *NULL-DECODED-DATE-TIME* SELF-040))
    (CL:SETQ *FORMAT-DATE-HANDLERS* (NEW-VECTOR 128)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 5)
    (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "NATIVE-DATE-TIME"
     "(DEFCLASS NATIVE-DATE-TIME () :PUBLIC? TRUE :DOCUMENTATION \"A data type that is used to hold the native date and time
information.   It is opaque to the Stella users.  It is provided so that
Stella `calendar-date' objects can be translated into and out of native format.
Note that there is no way to initialize a variable holding a `native-date-time'
except by such a translation.\" :CPP-NATIVE-TYPE \"time_t\" :CL-NATIVE-TYPE \"INTEGER\" :JAVA-NATIVE-TYPE \"long\")")
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "DECODED-DATE-TIME"
        "(DEFCLASS DECODED-DATE-TIME (STANDARD-OBJECT) :PUBLIC? TRUE :DOCUMENTATION \"A data structure for holding decoded time values with fields
for easy access of the components.\" :PUBLIC-SLOTS ((DATE-TIME-MILLIS :INITIALLY 0.0 :TYPE FLOAT) (DATE-TIME-SECOND :INITIALLY 0 :TYPE INTEGER) (DATE-TIME-MINUTE :INITIALLY 0 :TYPE INTEGER) (DATE-TIME-HOUR :INITIALLY 0 :TYPE INTEGER) (DATE-TIME-DAY :INITIALLY 1 :TYPE INTEGER) (DATE-TIME-MONTH :INITIALLY 1 :TYPE INTEGER) (DATE-TIME-YEAR :INITIALLY 1900 :TYPE INTEGER) (DATE-TIME-ZONE :INITIALLY 0.0 :TYPE FLOAT) (DATE-TIME-DOW :INITIALLY :SUNDAY :TYPE KEYWORD)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-DECODED-DATE-TIME))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-DECODED-DATE-TIME-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "DECODED-TIME-DURATION"
        "(DEFCLASS DECODED-TIME-DURATION (STANDARD-OBJECT) :PUBLIC? TRUE :DOCUMENTATION \"A data structure for holding decoded time duration values with
fields for easy access of the components.  Note that all non-zero values
should have the same sign.\" :PUBLIC-SLOTS ((DURATION-MILLIS :INITIALLY 0.0 :TYPE FLOAT) (DURATION-SECONDS :INITIALLY 0 :TYPE INTEGER) (DURATION-MINUTES :INITIALLY 0 :TYPE INTEGER) (DURATION-HOURS :INITIALLY 0 :TYPE INTEGER) (DURATION-DAYS :INITIALLY 0 :TYPE INTEGER)))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-DECODED-TIME-DURATION))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-DECODED-TIME-DURATION-SLOT-VALUE)))
    (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "DATE-TIME-OBJECT"
     "(DEFCLASS DATE-TIME-OBJECT (QUANTITY) :ABSTRACT? TRUE)")
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "CALENDAR-DATE"
        "(DEFCLASS CALENDAR-DATE (DATE-TIME-OBJECT) :PUBLIC? TRUE :DOCUMENTATION \"Representation of Date and Time with the date represented
as a modified Julian day (starting at midnight instead of noon) and the
time as the offset in milliseconds from midnight, UTC\" :PUBLIC-SLOTS ((MODIFIED-JULIAN-DAY :TYPE INTEGER) (TIME-MILLIS :TYPE INTEGER)) :PRINT-FORM (PRINT-CALENDAR-DATE SELF STREAM))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-CALENDAR-DATE))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-CALENDAR-DATE-SLOT-VALUE)))
    (CL:LET*
     ((CLASS
       (DEFINE-CLASS-FROM-STRINGIFIED-SOURCE "TIME-DURATION"
        "(DEFCLASS TIME-DURATION (DATE-TIME-OBJECT) :PUBLIC? TRUE :DOCUMENTATION \"Representation of Relative Days and Time with the date represented
as a number of days and the time in milliseconds.\" :PUBLIC-SLOTS ((DAYS :TYPE INTEGER) (MILLIS :TYPE INTEGER)) :PRINT-FORM (PRINT-TIME-DURATION SELF STREAM))")))
     (CL:SETF (%CLASS.CLASS-CONSTRUCTOR-CODE CLASS)
      (CL:FUNCTION NEW-TIME-DURATION))
     (CL:SETF (%CLASS.CLASS-SLOT-ACCESSOR-CODE CLASS)
      (CL:FUNCTION ACCESS-TIME-DURATION-SLOT-VALUE))))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-DATE-TIME2)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GREATER-EQUAL? BOOLEAN) ((T1 CALENDAR-DATE) (T2 OBJECT)))"
     (WRAP-METHOD-CODE (CL:FUNCTION GREATER-EQUAL?)) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (GREATER-EQUAL? BOOLEAN) ((T1 TIME-DURATION) (T2 OBJECT)))"
     (WRAP-METHOD-CODE (CL:FUNCTION GREATER-EQUAL?)) NULL)
    (DEFINE-FUNCTION-OBJECT "FILL-IN-DATE-SUBSTITUTION"
     "(DEFUN FILL-IN-DATE-SUBSTITUTION ((SUBSTITUTION-LIST (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))) :DOCUMENTATION \"Fill in `substitution-list' with template variable substitions
for the names YEAR and DATE which correspond to the current year and date.
These substitutions can then be used with `substitute-template-variables-in-string'
DEPRECATED.  Use `add-date-subsitution' or `add-current-date-substitution' instead.\" :PUBLIC? TRUE)"
     (CL:FUNCTION FILL-IN-DATE-SUBSTITUTION) NULL)
    (DEFINE-FUNCTION-OBJECT "ADD-DATE-SUBSTITUTION"
     "(DEFUN ADD-DATE-SUBSTITUTION ((DATE CALENDAR-DATE) (SUBSTITUTION-LIST (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))) :DOCUMENTATION \"Fill in `substitution-list' with template variable substitions
for the names YEAR, MONTH, MON, DAY, HOUR, MINUTE, SECOND, TIMEZONE,
DAY-OF-WEEK, DOW with their values for `date'.  Also, pre-formatted
DATE, TIME and ISO8601 variables are set.

TIMEZONE is in the format \\\"{+|-}hhmm\\\".  MONTH is the full English
month name and MON is the numeric month.  DAY-OF-WEEK is an English
string and DOW is the first three letters.  Minutes and seconds are
zero-padded.

These substitutions can be used with `substitute-template-variables-in-string'\" :PUBLIC? TRUE)"
     (CL:FUNCTION ADD-DATE-SUBSTITUTION) NULL)
    (DEFINE-FUNCTION-OBJECT "ADD-CURRENT-DATE-SUBSTITUTION"
     "(DEFUN ADD-CURRENT-DATE-SUBSTITUTION ((SUBSTITUTION-LIST (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))) :DOCUMENTATION \"Fill in `substitution-list' with date information for the current
date and time.  See `add-date-substitution' for details.\" :PUBLIC? TRUE)"
     (CL:FUNCTION ADD-CURRENT-DATE-SUBSTITUTION) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-PRINT-STRING"
     "(DEFUN FORMAT-DATE-PRINT-STRING ((STRING STRING) (FLAG CHARACTER) (START INTEGER) (END INTEGER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-PRINT-STRING) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER"
     "(DEFUN FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER ((NUMBER INTEGER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-PRINT-TWO-DIGIT-NUMBER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-ABBREVIATED-WEEKDAY-HANDLER"
     "(DEFUN FORMAT-DATE-ABBREVIATED-WEEKDAY-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-ABBREVIATED-WEEKDAY-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-FULL-WEEKDAY-HANDLER"
     "(DEFUN FORMAT-DATE-FULL-WEEKDAY-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-FULL-WEEKDAY-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-ABBREVIATED-MONTH-HANDLER"
     "(DEFUN FORMAT-DATE-ABBREVIATED-MONTH-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-ABBREVIATED-MONTH-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-FULL-MONTH-HANDLER"
     "(DEFUN FORMAT-DATE-FULL-MONTH-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-FULL-MONTH-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-DAY-OF-MONTH-HANDLER"
     "(DEFUN FORMAT-DATE-DAY-OF-MONTH-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-DAY-OF-MONTH-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-FULL-DATE-HANDLER"
     "(DEFUN FORMAT-DATE-FULL-DATE-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-FULL-DATE-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-24-HOUR-HANDLER"
     "(DEFUN FORMAT-DATE-24-HOUR-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-24-HOUR-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-12-HOUR-HANDLER"
     "(DEFUN FORMAT-DATE-12-HOUR-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-12-HOUR-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-MONTH-HANDLER"
     "(DEFUN FORMAT-DATE-MONTH-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-MONTH-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-MINUTE-HANDLER"
     "(DEFUN FORMAT-DATE-MINUTE-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-MINUTE-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-AM-PM-HANDLER"
     "(DEFUN FORMAT-DATE-AM-PM-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-AM-PM-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-12-HOUR-CLOCK-TIME-HANDLER"
     "(DEFUN FORMAT-DATE-12-HOUR-CLOCK-TIME-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-12-HOUR-CLOCK-TIME-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT
     "FORMAT-DATE-24-HOUR-AND-MINUTE-TIME-HANDLER"
     "(DEFUN FORMAT-DATE-24-HOUR-AND-MINUTE-TIME-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-24-HOUR-AND-MINUTE-TIME-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-SECOND-HANDLER"
     "(DEFUN FORMAT-DATE-SECOND-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-SECOND-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-FULL-TIME-HANDLER"
     "(DEFUN FORMAT-DATE-FULL-TIME-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-FULL-TIME-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER"
     "(DEFUN FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-YEAR-HANDLER"
     "(DEFUN FORMAT-DATE-YEAR-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-YEAR-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-NUMERIC-TIME-ZONE-HANDLER"
     "(DEFUN FORMAT-DATE-NUMERIC-TIME-ZONE-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-NUMERIC-TIME-ZONE-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-TIME-ALPHABETIC-ZONE-HANDLER"
     "(DEFUN FORMAT-DATE-TIME-ALPHABETIC-ZONE-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-TIME-ALPHABETIC-ZONE-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-ERROR-HANDLER"
     "(DEFUN FORMAT-DATE-ERROR-HANDLER ((DATE DECODED-DATE-TIME) (CONT CHARACTER) (FLAG CHARACTER) (STREAM OUTPUT-STREAM)))"
     (CL:FUNCTION FORMAT-DATE-ERROR-HANDLER) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE-TO-STREAM"
     "(DEFUN FORMAT-DATE-TO-STREAM ((DATE OBJECT) (TIMEZONE OBJECT) (CONTROL STRING) (STREAM OUTPUT-STREAM)) :DOCUMENTATION \"Perform formatted printing of `date' relative to `timezone' onto `stream'.  `date'
has to be either a calendar-date or a decoded-date-time object.  `timezone' can be null to indicate
the local timezone, or a float or supported timezone name.  `control' is a format control string whose
characters are printed literally, unless they are a %-code such as one of these (inspired by the codes
supported by the Unix `date' command):
       %%     a literal %
       %a     abbreviated weekday name (e.g., Sun)
       %A     full weekday name (e.g., Sunday)
       %b     abbreviated month name (e.g., Jan)
       %B     full month name (e.g., January)
       %d     day of month (e.g., 01)
       %D     date; same as %m/%d/%y
       %F     full date; same as %Y-%m-%d
       %H     hour (00..23)
       %I     hour (01..12)
       %m     month (01..12)
       %M     minute (00..59)
       %p     either AM or PM
       %r     12-hour clock time (e.g., 11:11:04 PM)
       %R     24-hour hour and minute; same as %H:%M
       %S     second (00..60)
       %T     time; same as %H:%M:%S
       %y     last two digits of year (00..99)
       %Y     year
       %z     +hhmm numeric time zone (e.g., -0400)
       %:z    +hhmm numeric time zone (e.g., -04:00)
       %Z     alphabetic time zone abbreviation (e.g., EDT)
By default, numeric fields are padded with zeroes. The following optional flags may follow '%':
       -      (hyphen) do not pad the field
       _      (underscore) pad with spaces
       0      (zero) pad with zeros
       ^      use upper case if possible
       ,      use lower case if possible\" :PUBLIC? TRUE)"
     (CL:FUNCTION FORMAT-DATE-TO-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "FORMAT-DATE"
     "(DEFUN (FORMAT-DATE STRING) ((DATE OBJECT) (TIMEZONE OBJECT) (CONTROL STRING)) :DOCUMENTATION \"Format `date' just like `format-date-to-stream' (which see), but return the result as a string.\" :PUBLIC? TRUE)"
     (CL:FUNCTION FORMAT-DATE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-DATE-TIME"
     "(DEFUN STARTUP-DATE-TIME () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-DATE-TIME) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-DATE-TIME-STELLA-STARTUP-DATE-TIME)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-DATE-TIME-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupDateTime") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT MILLIS-PER-DAY INTEGER (* 1000 60 60 24) :PUBLIC? FALSE)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT MILLIS-PER-HOUR INTEGER (* 1000 60 60) :PUBLIC? FALSE)"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *MONTH-NAME-VECTOR* (VECTOR OF STRING-WRAPPER) NULL :DOCUMENTATION \"A vector of month names for printing dates\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *MONTH-ABBREVIATION-VECTOR* (VECTOR OF STRING-WRAPPER) NULL :DOCUMENTATION \"A vector of month abbreviations for printing dates\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT *DEFAULT-DECODED-DATE-TIME* DECODED-DATE-TIME (NEW DECODED-DATE-TIME))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFCONSTANT *NULL-DECODED-DATE-TIME* DECODED-DATE-TIME (NEW DECODED-DATE-TIME :DATE-TIME-MILLIS NULL :DATE-TIME-SECOND NULL :DATE-TIME-MINUTE NULL :DATE-TIME-HOUR NULL :DATE-TIME-DAY NULL :DATE-TIME-MONTH NULL :DATE-TIME-YEAR NULL :DATE-TIME-ZONE NULL :DATE-TIME-DOW NULL))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *FORMAT-DATE-HANDLERS* (VECTOR OF FUNCTION-CODE-WRAPPER) (NEW VECTOR :ARRAY-SIZE 128) :DOCUMENTATION \"Handler functions indexed by the character code of their control character.\")"
     NULL)
    (CL:LET* ((TABLE *FORMAT-DATE-HANDLERS*))
     (CL:LET*
      ((I NULL-INTEGER) (ITER-042 0)
       (UPPER-BOUND-043 (CL:1- (LENGTH TABLE))))
      (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-042 UPPER-BOUND-043))
      (CL:LOOP WHILE (CL:<= ITER-042 UPPER-BOUND-043) DO
       (CL:SETQ I ITER-042)
       (CL:LET
        ((SELF (%VECTOR.THE-ARRAY *FORMAT-DATE-HANDLERS*))
         (VALUE
          (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-ERROR-HANDLER)))
         (POSITION I))
        (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
         (CL:TYPE CL:FIXNUM POSITION))
        (CL:SETF (CL:AREF SELF POSITION) VALUE))
       (CL:SETQ ITER-042 (CL:1+ ITER-042))))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-ABBREVIATED-WEEKDAY-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\a))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-FULL-WEEKDAY-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\A))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-ABBREVIATED-MONTH-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\b))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-FULL-MONTH-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\B))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-DAY-OF-MONTH-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\d))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-FULL-DATE-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\D))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-24-HOUR-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\H))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-12-HOUR-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\I))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-MONTH-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\m))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-MINUTE-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\M))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-AM-PM-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\p))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-12-HOUR-CLOCK-TIME-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\r))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-24-HOUR-AND-MINUTE-TIME-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\R))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-SECOND-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\S))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-FULL-TIME-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\T))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-TWO-DIGIT-YEAR-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\y))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE (CL:FUNCTION FORMAT-DATE-YEAR-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\Y))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-NUMERIC-TIME-ZONE-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\z))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE))
     (CL:LET
      ((SELF (%VECTOR.THE-ARRAY TABLE))
       (VALUE
        (WRAP-FUNCTION-CODE
         (CL:FUNCTION FORMAT-DATE-TIME-ALPHABETIC-ZONE-HANDLER)))
       (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\Z))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-VECTOR SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SETF (CL:AREF SELF POSITION) VALUE)))))
  :VOID)
