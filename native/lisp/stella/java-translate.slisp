;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; java-translate.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA-FLOTSAM-CLASS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CLASS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-TYPE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-STARTUP-TIME-PROGN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-VERBATIM NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-UNBOUND-SPECIAL-VARIABLE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_GLOBAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_TYPE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-THIS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-DOCUMENTATION NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_COMMENT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SELF NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SPECIAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-UNWIND-PROTECT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-SIGNAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-HANDLER-CASE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-HANDLE-EXCEPTION NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-VOID-SYS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-TYPED-SYS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-BAD-SYS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SETQ NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-SET-DEFAULT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE-SETTER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-SUPER-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PROGN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-WITH-PROCESS-LOCK NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-LOOP NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-FOREACH NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-LET NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CAST NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SAFE-CAST NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-RETURN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-BREAK NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CONTINUE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-WHILE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-IF NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CHOOSE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-WHEN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-UNLESS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-AND NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-OR NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NOT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-EQ? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-> NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA->= NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-< NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-<= NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-++ NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA--- NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-COND NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CASE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-MAKE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-NEW NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-MV-SETQ NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION-CODE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD-CODE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYS-INLINE-CALL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-THE-CODE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-INLINE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-IGNORE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PRINT-STREAM NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PRINT-NATIVE-STREAM NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-CONS NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-KEY-VALUE-LIST NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-+ NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-- NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-* NULL)
(CL:DEFVAR |SYM-JAVA-TRANSLATE-STELLA-/| NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-=> NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-=< NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-UPPERCASE NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-LOWERCASE NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-CAPITALIZED NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-CLEVER NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-YES NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-NO NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-PRESERVE NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-UPCASE NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-TITLECASEX NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-TITLECASE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-LITERAL NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-STRING NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-MUTABLE-STRING NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-CODE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-BOOLEAN NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-INTEGER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-SHORT-INTEGER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-SHORT-INTEGER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-BYTE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-OCTET NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-THIRY-TWO-BIT-VECTOR NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-FLOAT NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-DOUBLE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-CHARACTER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-LONG-INTEGER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-SINGLE-FLOAT NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-CAPITALIZE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-MODULE NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-MINIMIZE-JAVA-PREFIXES NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CLASS-JAVA-NATIVE-TYPE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-ANY-VALUE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-ABSTRACT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-BOOLEAN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-BYTE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CATCH NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CHAR NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CONST NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-DEFAULT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-DO NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-DOUBLE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-ELSE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-EXTENDS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-FINAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-FINALLY NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-FLOAT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-FOR NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-GOTO NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-IMPLEMENTS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-IMPORT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-INSTANCEOF NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-INT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-INTERFACE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-LONG NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NATIVE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NEW NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PACKAGE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PRIVATE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PROTECTED NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-PUBLIC NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SHORT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-STATIC NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SUPER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SWITCH NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYNCHRONIZED NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-THROW NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-THROWS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-TRANSIENT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-TRY NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-VOID NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-VOLATILE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-ASSERT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-ENUM NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_UNWIND_PROTECT NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-JAVA NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_SIGNAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-FILL-IN-STACK-TRACE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_HANDLER_CASE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_CATCH NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-VARIABLE-TYPE-SPECIFIER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE_SETTER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_WITH_PROCESS_LOCK NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_NAMED_STATEMENT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_LOOP NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_FOREACH NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-NUMBER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-NUMBER-WRAPPER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-WRAP-FUNCTION NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_AREF NULL)
(CL:DEFVAR |SYM-JAVA-TRANSLATE-STELLA-MV_returnarray| NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_RETURN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_BREAK NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_CONTINUE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_IF NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-SYMBOL-ID NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-OTHERWISE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_CASE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_COND NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_WHILE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_WHEN NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_UNLESS NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE_ARRAY NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER NULL)
(CL:DEFVAR |SYM-JAVA-TRANSLATE-STELLA-caller_MV_returnarray| NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_SIGNATURE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-VOID NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCALL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CODE_CALL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA-PACKAGE NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-ARGUMENT-LIST NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-METHOD-NATIVE? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-METHOD-CONSTRUCTOR? NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-DOUBLE-FLOAT NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-LONG-INTEGER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-THIRTY-TWO-BIT-VECTOR NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-TICKTOCK NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-NATIVE-DATE-TIME NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_ANONYMOUS_ARRAY NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-FUNCTION NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-METHOD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_PRINT_STREAM NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-WARN NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-ERROR NULL)
(CL:DEFVAR KWD-JAVA-TRANSLATE-CONTINUABLE-ERROR NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_STANDARD_ERROR NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_STANDARD_OUT NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-OBJECT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_LITERAL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_PRINT_NATIVE_STREAM NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_EOL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-EOL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-TRUE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-FALSE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NULL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-GET-SYM NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-INTEGER-WRAPPER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_SYMBOL NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-GET-KWD NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-GET-SGT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-DEFINED? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NULL? NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-CONCATENATE NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NTH NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-NTH-SETTER NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-AREF NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-AREF-SETTER NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-METHOD-SLOT NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_UNARY_OP NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_BINARY_OP NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-JAVA_TERNARY_OP NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-ARRAY NULL)
(CL:DEFVAR SGT-JAVA-TRANSLATE-STELLA-NATIVE-VECTOR NULL)
(CL:DEFVAR SYM-JAVA-TRANSLATE-STELLA-STARTUP-JAVA-TRANSLATE NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* FALSE-WRAPPER *ROOT-MODULE*
  *CURRENT-STREAM* *CURRENT-JAVA-OUTPUT-CLASS*
  *CURRENT-STELLA-FEATURES* *SYMBOL-REGISTRY* EOL *MODULE*
  NULL-CHARACTER *CHARACTER-DOWNCASE-TABLE* *CHARACTER-UPCASE-TABLE*
  NULL-INTEGER *METHODBEINGWALKED* *DUMMYDECLARATIONS* *CONTEXT* NIL
  NULL-STRING-WRAPPER))

;;; (DEFGLOBAL *JAVA-TRUE-STRING-WRAPPER* ...)

(CL:DEFVAR *JAVA-TRUE-STRING-WRAPPER* NULL
  "Wrapped true string, used to reduce consing.")

;;; (DEFGLOBAL *JAVA-FALSE-STRING-WRAPPER* ...)

(CL:DEFVAR *JAVA-FALSE-STRING-WRAPPER* NULL
  "Wrapped false string, used to reduce consing.")

;;; (DEFUN (JAVA-YIELD-FLOTSAM-CLASS-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  JAVA-YIELD-FLOTSAM-CLASS-NAME))
(CL:DEFUN JAVA-YIELD-FLOTSAM-CLASS-NAME (MOD)
  (CL:LET*
   ((FLOTSAMCLASSNAME
     (%STRING-WRAPPER.WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MOD)
       SYM-JAVA-TRANSLATE-STELLA-JAVA-FLOTSAM-CLASS
       NULL-STRING-WRAPPER))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FLOTSAMCLASSNAME))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ FLOTSAMCLASSNAME STELLA::NULL-STRING))
     (CL:NOT (CL:EQ FLOTSAMCLASSNAME "")))
    (CL:RETURN-FROM JAVA-YIELD-FLOTSAM-CLASS-NAME FLOTSAMCLASSNAME)
    (CL:PROGN
     (CL:SETQ FLOTSAMCLASSNAME
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-CLASS-NAMESTRING (WRAP-STRING (NAME MOD)))))
     (SET-DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MOD)
      SYM-JAVA-TRANSLATE-STELLA-JAVA-FLOTSAM-CLASS
      (WRAP-STRING FLOTSAMCLASSNAME) NULL-STRING-WRAPPER)
     (CL:RETURN-FROM JAVA-YIELD-FLOTSAM-CLASS-NAME FLOTSAMCLASSNAME)))))

;;; (DEFUN (JAVA-YIELD-NATIVE-CLASS-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  JAVA-YIELD-NATIVE-CLASS-NAME))
(CL:DEFUN JAVA-YIELD-NATIVE-CLASS-NAME ()
  (CL:IF
   (CL:OR (CL:NOT (CL:EQ (GET-STELLA-CLASS "NATIVE" CL:NIL) NULL))
    (INHERITED-CLASS-NAME-CONFLICTS? "NATIVE"))
   (CL:RETURN-FROM JAVA-YIELD-NATIVE-CLASS-NAME
    (JAVA-YIELD-FULL-NATIVE-CLASS-NAME))
   (CL:RETURN-FROM JAVA-YIELD-NATIVE-CLASS-NAME "Native")))

;;; (DEFUN (JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME))
(CL:DEFUN JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME ()
  (CL:IF
   (CL:OR
    (CL:NOT
     (CL:EQ (GET-STELLA-CLASS "STELLA-SPECIAL-VARIABLE" CL:NIL) NULL))
    (INHERITED-CLASS-NAME-CONFLICTS? "STELLA-SPECIAL-VARIABLE"))
   (CL:RETURN-FROM JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME
    (CONCATENATE (JAVA-STELLA-PACKAGE)
     ".javalib.StellaSpecialVariable"))
   (CL:RETURN-FROM JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME
    "StellaSpecialVariable")))

;;; (DEFUN (JAVA-YIELD-FULL-NATIVE-CLASS-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  JAVA-YIELD-FULL-NATIVE-CLASS-NAME))
(CL:DEFUN JAVA-YIELD-FULL-NATIVE-CLASS-NAME ()
  (CL:RETURN-FROM JAVA-YIELD-FULL-NATIVE-CLASS-NAME
   (CONCATENATE (JAVA-STELLA-PACKAGE) ".javalib.Native")))

;;; (DEFUN (JAVA-TRANSLATE-UNIT CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-UNIT (UNIT)
  (CL:LET* ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-GLOBAL-VARIABLE)
     (CL:RETURN-FROM JAVA-TRANSLATE-UNIT
      (JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-CLASS)
     (CL:RETURN-FROM JAVA-TRANSLATE-UNIT
      (JAVA-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-TYPE)
     (CL:RETURN-FROM JAVA-TRANSLATE-UNIT NIL))
    ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-METHOD)
      (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-MACRO))
     (CL:RETURN-FROM JAVA-TRANSLATE-UNIT
      (JAVA-TRANSLATE-DEFINE-METHOD-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-PRINT-METHOD)
     (CL:RETURN-FROM JAVA-TRANSLATE-UNIT
      (JAVA-TRANSLATE-DEFPRINT-UNIT UNIT)))
    ((CL:OR
      (CL:EQ TEST-VALUE-000
       SYM-JAVA-TRANSLATE-STELLA-STARTUP-TIME-PROGN)
      (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-VERBATIM))
     (CL:RETURN-FROM JAVA-TRANSLATE-UNIT
      (JAVA-TRANSLATE-A-TREE (%TRANSLATION-UNIT.THE-OBJECT UNIT))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT (UNIT)
  (CL:LET* ((GLOBAL (%TRANSLATION-UNIT.THE-OBJECT UNIT)))
   (CL:LET*
    ((*CONTEXT* (HOME-MODULE GLOBAL))
     (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
    (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
    (CL:LET*
     ((VARIABLETYPE
       (CL:IF (%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBAL)
        (WRAP-STRING (JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME))
        (JAVA-TRANSLATE-TYPE-SPEC (GLOBAL-VARIABLE-TYPE-SPEC GLOBAL))))
      (TYPELIST (CONS VARIABLETYPE NIL))
      (INITIALVALUETREE
       (JAVA-TRANSLATE-A-TREE (%TRANSLATION-UNIT.CODE-REGISTER UNIT)))
      (VARIABLENAME
       (JAVA-TRANSLATE-GLOBAL-NAME
        (%GLOBAL-VARIABLE.VARIABLE-NAME GLOBAL) CL:T)))
     (CL:SETQ TYPELIST (CONS (WRAP-STRING "static") TYPELIST))
     (CL:WHEN
      (CL:OR (%GLOBAL-VARIABLE.VARIABLE-CONSTANT? GLOBAL)
       (%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBAL))
      (CL:SETQ TYPELIST (CONS (WRAP-STRING "final") TYPELIST)))
     (CL:WHEN (%GLOBAL-VARIABLE.VARIABLE-PUBLIC? GLOBAL)
      (CL:SETQ TYPELIST (CONS (WRAP-STRING "public") TYPELIST)))
     (CL:IF
      (CL:OR
       (CL:EQ (%TRANSLATION-UNIT.CODE-REGISTER UNIT)
        KWD-JAVA-TRANSLATE-UNBOUND-SPECIAL-VARIABLE)
       (%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBAL))
      (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_GLOBAL
        (WRAP-STRING (%GLOBAL-VARIABLE.DOCUMENTATION GLOBAL))
        (LIST*
         (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_TYPE
          (CONCATENATE TYPELIST NIL))
         VARIABLENAME
         (CONS
          (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE
           (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT VARIABLETYPE
            NIL)
           (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NIL) NIL)
          NIL))))
      (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_GLOBAL
        (WRAP-STRING (%GLOBAL-VARIABLE.DOCUMENTATION GLOBAL))
        (LIST*
         (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_TYPE
          (CONCATENATE TYPELIST NIL))
         VARIABLENAME (CONS INITIALVALUETREE NIL)))))))))

;;; (DEFUN (WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS CONS) ...)

(CL:DEFUN WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS (METHODBODY DECLARATIONS)
  (CL:LET* ((ODECLARATIONS NIL) (OTREE NULL))
   (CL:SETQ DECLARATIONS (REVERSE DECLARATIONS))
   (CL:LET* ((DECLARATION NULL) (ITER-000 DECLARATIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DECLARATION (%%VALUE ITER-000))
     (CL:LET* ((D DECLARATION))
      (CL:SETQ ODECLARATIONS
       (CONS
        (CONS (JAVA-TRANSLATE-TYPE-SPEC (%%VALUE (%%REST D)))
         (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE D))
          (CONCATENATE
           (CL:IF (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST D))) NULL))
            (CONS-LIST
             (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST D)))))
            NIL)
           NIL)))
        ODECLARATIONS)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK
      (REVERSE ODECLARATIONS) (CONS METHODBODY NIL))
     NIL))
   (CL:RETURN-FROM WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS
    OTREE)))

;;; (DEFUN (JAVA-SYNCHRONIZED-METHOD? BOOLEAN) ...)

(CL:DEFUN JAVA-SYNCHRONIZED-METHOD? (METHOD)
  (CL:SETQ METHOD METHOD)
  (CL:RETURN-FROM JAVA-SYNCHRONIZED-METHOD? CL:NIL))

;;; (DEFUN (JAVA-TRANSLATE-METHOD-SIGNATURE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-METHOD-SIGNATURE (METHOD)
  (CL:LET* ((MODIFIERS NIL) (RETURNTYPE NULL))
   (CL:WHEN (JAVA-SYNCHRONIZED-METHOD? METHOD)
    (CL:SETQ MODIFIERS (CONS (WRAP-STRING "synchronized") MODIFIERS)))
   (CL:WHEN (JAVA-METHOD-OBJECT-IS-FUNCTION? METHOD)
    (CL:SETQ MODIFIERS (CONS (WRAP-STRING "static") MODIFIERS)))
   (CL:WHEN (%METHOD-SLOT.ABSTRACT? METHOD)
    (CL:SETQ MODIFIERS (CONS (WRAP-STRING "abstract") MODIFIERS)))
   (CL:WHEN (PUBLIC? METHOD)
    (CL:SETQ MODIFIERS (CONS (WRAP-STRING "public") MODIFIERS)))
   (CL:SETQ RETURNTYPE
    (CONS
     (JAVA-TRANSLATE-TYPE-SPEC
      (COMPUTE-MOST-GENERAL-RETURN-TYPE METHOD
       (COMPUTE-RETURN-TYPE-SPEC METHOD
        (%METHOD-SLOT.SLOT-OWNER METHOD))))
     NIL))
   (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-SIGNATURE
    (CONS MODIFIERS
     (CONS RETURNTYPE
      (CONS (JAVA-TRANSLATE-METHOD-NAME METHOD)
       (CONS (JAVA-TRANSLATE-METHOD-PARAMETERS METHOD) NIL)))))))

;;; (DEFUN (JAVA-TRANSLATE-DEFINE-METHOD-UNIT CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-DEFINE-METHOD-UNIT (UNIT)
  (CL:LET*
   ((*LOCALGENSYMTABLE* (NEW-KEY-VALUE-LIST))
    (*METHODBEINGWALKED* NULL) (*CURRENTDUMMYINDEX* 0)
    (*DUMMYDECLARATIONS* NIL))
   (CL:DECLARE
    (CL:SPECIAL *LOCALGENSYMTABLE* *METHODBEINGWALKED*
     *CURRENTDUMMYINDEX* *DUMMYDECLARATIONS*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *CURRENTDUMMYINDEX*))
   (CL:LET*
    ((METHOD (%TRANSLATION-UNIT.THE-OBJECT UNIT))
     (UNITISFUNCTION (JAVA-METHOD-OBJECT-IS-FUNCTION? METHOD))
     (BODYTREE (%TRANSLATION-UNIT.CODE-REGISTER UNIT)) (OTREE NIL)
     (TRANSLATEDMETHODBODY NULL))
    (CL:WHEN
     (CL:AND (CL:NOT (CL:EQ (%TRANSLATION-UNIT.TRANSLATION UNIT) NULL))
      (CL:NOT (CL:EQ (%TRANSLATION-UNIT.TRANSLATION UNIT) NULL)))
     (CL:SETQ OTREE (%TRANSLATION-UNIT.TRANSLATION UNIT))
     (CL:SETF (%TRANSLATION-UNIT.TRANSLATION UNIT) NIL)
     (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-METHOD-UNIT OTREE))
    (CL:SETQ *METHODBEINGWALKED* METHOD)
    (CL:SETQ BODYTREE (DELETE-QUOTED-NULL-STATEMENTS BODYTREE))
    (CL:WHEN (CL:NOT UNITISFUNCTION)
     (CL:SETQ *DUMMYDECLARATIONS*
      (CONS
       (CONS (FIRST (METHOD-PARAMETER-NAMES METHOD))
        (CONS (%METHOD-SLOT.SLOT-OWNER METHOD)
         (CONS SYM-JAVA-TRANSLATE-STELLA-THIS NIL)))
       *DUMMYDECLARATIONS*)))
    (CL:IF (%METHOD-SLOT.ABSTRACT? METHOD)
     (CL:SETQ TRANSLATEDMETHODBODY NIL)
     (CL:PROGN
      (CL:SETQ TRANSLATEDMETHODBODY
       (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
        (CONCATENATE (JAVA-TRANSLATE-LIST-OF-TREES BODYTREE) NIL)))
      (CL:WHEN (CL:NOT (CL:EQ *DUMMYDECLARATIONS* NIL))
       (CL:SETQ TRANSLATEDMETHODBODY
        (WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS
         TRANSLATEDMETHODBODY *DUMMYDECLARATIONS*)))))
    (CL:WHEN
     (CL:NOT
      (CL:EQ
       (%STRING-WRAPPER.WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
         SYM-JAVA-TRANSLATE-STELLA-DOCUMENTATION NULL-STRING-WRAPPER))
       STELLA::NULL-STRING))
     (CL:IF (CL:EQ TRANSLATEDMETHODBODY NIL)
      (CL:SETQ TRANSLATEDMETHODBODY
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_COMMENT
         (WRAP-STRING
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
            SYM-JAVA-TRANSLATE-STELLA-DOCUMENTATION
            NULL-STRING-WRAPPER)))
         NIL)
        NIL))
      (CL:SETF (%%REST TRANSLATEDMETHODBODY)
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_COMMENT
         (WRAP-STRING
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
            SYM-JAVA-TRANSLATE-STELLA-DOCUMENTATION
            NULL-STRING-WRAPPER)))
         NIL)
        (CONCATENATE (%%REST TRANSLATEDMETHODBODY) NIL)))))
    (CL:SETQ OTREE
     (CONS
      (CL:IF UNITISFUNCTION SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION
       SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD)
      (CONCATENATE (JAVA-TRANSLATE-METHOD-SIGNATURE METHOD)
       (CONS TRANSLATEDMETHODBODY NIL))))
    (CL:SETF (%TRANSLATION-UNIT.TRANSLATION UNIT) NIL)
    (CL:RETURN-FROM JAVA-TRANSLATE-DEFINE-METHOD-UNIT OTREE))))

;;; (DEFUN (JAVA-TRANSLATE-DEFPRINT-UNIT CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-DEFPRINT-UNIT (UNIT)
  (CL:LET*
   ((*METHODBEINGWALKED* (NEW-METHOD-SLOT))
    (*LOCALGENSYMTABLE* (NEW-KEY-VALUE-LIST)) (*CURRENTDUMMYINDEX* 0)
    (*DUMMYDECLARATIONS* NIL))
   (CL:DECLARE
    (CL:SPECIAL *METHODBEINGWALKED* *LOCALGENSYMTABLE*
     *CURRENTDUMMYINDEX* *DUMMYDECLARATIONS*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *CURRENTDUMMYINDEX*))
   (CL:LET*
    ((CLASS (%TRANSLATION-UNIT.THE-OBJECT UNIT))
     (BODYTREE (%TRANSLATION-UNIT.CODE-REGISTER UNIT)) (OTREE NIL)
     (TRANSLATEDMETHODBODY NULL))
    (CL:LET*
     ((*CONTEXT* (HOME-MODULE CLASS))
      (*MODULE* (%CONTEXT.BASE-MODULE *CONTEXT*)))
     (CL:DECLARE (CL:SPECIAL *CONTEXT* *MODULE*))
     (CL:SETQ BODYTREE (DELETE-QUOTED-NULL-STATEMENTS BODYTREE))
     (CL:SETQ *DUMMYDECLARATIONS*
      (CONS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-SELF
        (CANONICAL-TYPE (%CLASS.CLASS-TYPE CLASS))
        (CONS SYM-JAVA-TRANSLATE-STELLA-THIS NIL))
       *DUMMYDECLARATIONS*))
     (CL:SETQ TRANSLATEDMETHODBODY
      (WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
        (JAVA-TRANSLATE-A-TREE BODYTREE) NIL)
       *DUMMYDECLARATIONS*))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD
       (CONS (WRAP-STRING "public") NIL)
       (CONS (WRAP-STRING "String") NIL) (WRAP-STRING "toString")
       (LIST* NIL TRANSLATEDMETHODBODY NIL)))
     (CL:SETF (%TRANSLATION-UNIT.TRANSLATION UNIT) NIL)
     (CL:RETURN-FROM JAVA-TRANSLATE-DEFPRINT-UNIT OTREE)))))

;;; (DEFUN (JAVA-TRANSLATE-LIST-OF-TREES CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-LIST-OF-TREES (TREES)
  (CL:LET* ((CURSOR TREES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
    (CL:SETF (%%VALUE CURSOR) (JAVA-TRANSLATE-A-TREE (%%VALUE CURSOR)))
    (CL:SETQ CURSOR (%%REST CURSOR)))
   (CL:RETURN-FROM JAVA-TRANSLATE-LIST-OF-TREES TREES)))

;;; (DEFUN (JAVA-TRANSLATE-A-TREE OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-A-TREE (TREE)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-JAVA-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:WHEN (CL:EQ TREE NIL)
      (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
       (JAVA-TRANSLATE-ATOMIC-TREE TREE)))
     (CL:LET* ((TEST-VALUE-000 (%%VALUE TREE)))
      (CL:COND
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SPECIAL)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SPECIAL-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-VERBATIM)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-VERBATIM-TREE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-UNWIND-PROTECT)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-UNWIND-PROTECT TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SYS-SIGNAL)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SIGNAL TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-HANDLER-CASE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-HANDLER-CASE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-HANDLE-EXCEPTION)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-HANDLE-EXCEPTION TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-VOID-SYS)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-VOID-SYS TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-TYPED-SYS)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-TYPED-SYS TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-BAD-SYS)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-BAD-SYS TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SETQ)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SETQ-TREE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-SET-DEFAULT)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SYS-SET-DEFAULT TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SYS-SLOT-VALUE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE-SETTER)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-METHOD-CALL TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-FUNCTION-CALL TREE NULL)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-SUPER-METHOD)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SUPER-METHOD-CALL TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-PROGN)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-PROGN TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-WITH-PROCESS-LOCK)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-WITH-PROCESS-LOCK TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-LOOP)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-LOOP TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SYS-FOREACH)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-FOREACH-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-LET)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-LET-TREE TREE)))
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-CAST)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SAFE-CAST))
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-CAST TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-RETURN)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-RETURN-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-BREAK)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-BREAK TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-CONTINUE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-CONTINUE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-WHILE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-WHILE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-IF)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-IF-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-CHOOSE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-CHOOSE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-WHEN)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-WHEN-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-UNLESS)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-UNLESS-TREE TREE)))
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-AND)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-OR)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-NOT)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-EQ?)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA->)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA->=)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-<)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-<=)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-++)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA---))
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-OPERATOR-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-COND)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-COND-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-CASE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-CASE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-MAKE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-MAKE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-SYS-NEW)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-SYS-NEW TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-MV-SETQ)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-MV-SETQ TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION-CODE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-CALL-FUNCTION-CODE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD-CODE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-CALL-METHOD-CODE TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-SYS-INLINE-CALL)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-INLINE-CALL-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-THE-CODE)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-THE-CODE TREE)))
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-INLINE)
         (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-IGNORE))
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-IGNORE-TREE TREE)))
       ((CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-PRINT-STREAM)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-PRINT-STREAM TREE)))
       ((CL:EQ TEST-VALUE-000
         SYM-JAVA-TRANSLATE-STELLA-PRINT-NATIVE-STREAM)
        (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
         (JAVA-TRANSLATE-PRINT-NATIVE-STREAM TREE)))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
          TEST-VALUE-000 "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))
   (CL:T
    (CL:WHEN (CL:EQ TREE NULL)
     (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE (JAVA-TRANSLATE-NULL)))
    (CL:RETURN-FROM JAVA-TRANSLATE-A-TREE
     (JAVA-TRANSLATE-ATOMIC-TREE TREE)))))

;;; (DEFSPECIAL *VARARGSTATEMENTS* ...)

(CL:DEFVAR *VARARGSTATEMENTS* NULL
  "A list of new vectors generated for variable-length argument 
             lists")

;;; (DEFSPECIAL *VARARGDECLS* ...)

(CL:DEFVAR *VARARGDECLS* NULL
  "A list of vector-pushes generated for variable-length argument 
             lists")

;;; (DEFSPECIAL *CURRENTVARARGINDEX* ...)

(CL:DEFVAR *CURRENTVARARGINDEX* 1
  "The current index of the variable length arguments")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *CURRENTVARARGINDEX*))

;;; (DEFGLOBAL *JAVA-OPERATOR-TABLE* ...)

(CL:DEFVAR *JAVA-OPERATOR-TABLE* NULL
  "Mapping from STELLA operators to Java operators")

;;; (DEFUN (JAVA-LOOKUP-OPERATOR-TABLE CONS) ...)

(CL:DEFUN JAVA-LOOKUP-OPERATOR-TABLE (OPERATOR)
  (CL:LET*
   ((ENTRY (LOOKUP *JAVA-OPERATOR-TABLE* OPERATOR)) (COPIEDENTRY NIL))
   (CL:WHEN (CL:NOT (CL:EQ ENTRY NULL))
    (CL:LET* ((WRAPPER NULL) (ITER-000 ENTRY) (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ WRAPPER (%%VALUE ITER-000))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS (WRAP-STRING (%STRING-WRAPPER.WRAPPER-VALUE WRAPPER))
          NIL))
        (CL:IF (CL:EQ COPIEDENTRY NIL)
         (CL:SETQ COPIEDENTRY COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST COPIEDENTRY COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (WRAP-STRING (%STRING-WRAPPER.WRAPPER-VALUE WRAPPER))
          NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:RETURN-FROM JAVA-LOOKUP-OPERATOR-TABLE COPIEDENTRY))
   (CL:RETURN-FROM JAVA-LOOKUP-OPERATOR-TABLE NULL)))

;;; (DEFUN (JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE))
(CL:DEFUN JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE ()
  (CL:LET*
   ((TABLE
     (CL:THE CL:SIMPLE-STRING
      (CL:MAKE-STRING 256 :INITIAL-ELEMENT #\_))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TABLE))
   (CL:LET*
    ((CODE NULL-INTEGER)
     (ITER-000 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\0)))
     (UPPER-BOUND-000 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\9)))
     (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CODE ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
     (CL:SETQ CODE ITER-000)
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:LET*
    ((CODE NULL-INTEGER)
     (ITER-001 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\A)))
     (UPPER-BOUND-001 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\Z)))
     (UNBOUNDED?-001 (CL:= UPPER-BOUND-001 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CODE ITER-001 UPPER-BOUND-001))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-001 (CL:<= ITER-001 UPPER-BOUND-001)) DO
     (CL:SETQ CODE ITER-001)
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (CL:LET*
    ((CODE NULL-INTEGER)
     (ITER-002 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\a)))
     (UPPER-BOUND-002 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\z)))
     (UNBOUNDED?-002 (CL:= UPPER-BOUND-002 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CODE ITER-002 UPPER-BOUND-002))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-002 (CL:<= ITER-002 UPPER-BOUND-002)) DO
     (CL:SETQ CODE ITER-002)
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ ITER-002 (CL:1+ ITER-002))))
   (CL:LET
    ((SELF TABLE) (CH #\=)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\_))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\ ))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\X)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\!))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\"))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\H)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\#))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\B)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\$))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\R)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\%))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\A)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\&))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Q)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\'))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\())))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\)))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\$)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\*))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\I)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\+))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\,))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\-))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\D)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\.))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\S)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\/))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\C)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\:))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\;))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\L)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\<))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\E)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\=))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\G)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\>))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\P)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\?))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\M)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\@))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\J)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\[))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\\))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\K)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\]))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\U)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\^))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\`))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Y)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\{))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\V)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\|))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Z)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\}))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\T)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\~))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:RETURN-FROM JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE
    (CL:LET ((S TABLE)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFGLOBAL *JAVA-CHARACTER-SUBSTITUTION-TABLE* ...)

(CL:DEFVAR *JAVA-CHARACTER-SUBSTITUTION-TABLE* STELLA::NULL-STRING)
(CL:DECLAIM
 (CL:TYPE CL:SIMPLE-STRING *JAVA-CHARACTER-SUBSTITUTION-TABLE*))

;;; (DEFUN (JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:T) CL:SIMPLE-STRING)
  JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS))
(CL:DEFUN JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS (NAME CASECONVENTION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
  #+MCL
  (CL:CHECK-TYPE NAME CL:SIMPLE-STRING)
  (CL:LET* ((RESULT STELLA::NULL-STRING) (SUBSTITUTION NULL-CHARACTER))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT))
   (CL:CASE
    (CL:LET ((SELF NAME) (POSITION 0))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
      (CL:TYPE CL:FIXNUM POSITION))
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION)))
    (#\0
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "zero"))))))
    (#\1
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "one"))))))
    (#\2
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "two"))))))
    (#\3
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "three"))))))
    (#\4
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "four"))))))
    (#\5
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "five"))))))
    (#\6
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "six"))))))
    (#\7
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "seven"))))))
    (#\8
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "eight"))))))
    (#\9
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "nine"))))))
    (CL:OTHERWISE
     (CL:SETQ RESULT (CL:THE CL:SIMPLE-STRING (CL:COPY-SEQ NAME)))))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 0)
     (UPPER-BOUND-000 (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH RESULT)))))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO
     (CL:SETQ I ITER-000)
     (CL:SETQ SUBSTITUTION
      (CL:LET
       ((SELF *JAVA-CHARACTER-SUBSTITUTION-TABLE*)
        (POSITION
         (CL:THE CL:FIXNUM
          (CL:CHAR-CODE
           (CL:LET ((SELF RESULT) (POSITION I))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION)))))))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:WHEN (CL:NOT (CL:EQL SUBSTITUTION #\=))
      (CL:COND
       ((CL:EQ CASECONVENTION KWD-JAVA-TRANSLATE-UPPERCASE)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-DOWNCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       ((CL:EQ CASECONVENTION KWD-JAVA-TRANSLATE-LOWERCASE)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-UPCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       ((CL:EQ CASECONVENTION KWD-JAVA-TRANSLATE-CAPITALIZED)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-UPCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
          CASECONVENTION "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:RETURN-FROM JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS
    (CL:LET ((S RESULT)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFUN (JAVA-CHANGE-CASE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:SIMPLE-STRING) JAVA-CHANGE-CASE))
(CL:DEFUN JAVA-CHANGE-CASE (SYMBOL CASECONVENTION)
  (CL:LET*
   ((MODULE (%GENERALIZED-SYMBOL.HOME-CONTEXT SYMBOL))
    (NAME (%GENERALIZED-SYMBOL.SYMBOL-NAME SYMBOL))
    (ALL-UPPER? (ALL-UPPER-CASE-STRING? NAME))
    (CAPS-BREAK-KEYWORD
     (CL:IF ALL-UPPER? KWD-JAVA-TRANSLATE-CLEVER
      KWD-JAVA-TRANSLATE-YES)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
   (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
   (CL:WHEN
    (CL:OR (%MODULE.CASE-SENSITIVE? MODULE) (CL:NOT ALL-UPPER?))
    (CL:RETURN-FROM JAVA-CHANGE-CASE
     (MAKE-MATCHING-NAME-FULL NAME KWD-JAVA-TRANSLATE-NO
      KWD-JAVA-TRANSLATE-NO "- " "" "" "" ""
      KWD-JAVA-TRANSLATE-PRESERVE "_")))
   (CL:COND
    ((CL:EQ CASECONVENTION KWD-JAVA-TRANSLATE-UPPERCASE)
     (CL:RETURN-FROM JAVA-CHANGE-CASE
      (MAKE-MATCHING-NAME-FULL NAME KWD-JAVA-TRANSLATE-NO
       KWD-JAVA-TRANSLATE-NO "- " "" "" "" "" KWD-JAVA-TRANSLATE-UPCASE
       "_")))
    ((CL:EQ CASECONVENTION KWD-JAVA-TRANSLATE-LOWERCASE)
     (CL:RETURN-FROM JAVA-CHANGE-CASE
      (MAKE-MATCHING-NAME-FULL NAME CAPS-BREAK-KEYWORD
       KWD-JAVA-TRANSLATE-CLEVER "- " "" "" "" ""
       KWD-JAVA-TRANSLATE-TITLECASEX "")))
    ((CL:EQ CASECONVENTION KWD-JAVA-TRANSLATE-CAPITALIZED)
     (CL:RETURN-FROM JAVA-CHANGE-CASE
      (MAKE-MATCHING-NAME-FULL NAME CAPS-BREAK-KEYWORD
       KWD-JAVA-TRANSLATE-CLEVER "- " "" "" "" ""
       KWD-JAVA-TRANSLATE-TITLECASE "")))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" CASECONVENTION "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (JAVA-LITERAL? BOOLEAN) ...)

(CL:DEFUN JAVA-LITERAL? (TYPESPEC)
  (CL:RETURN-FROM JAVA-LITERAL?
   (CL:AND
    (SUB-TYPE-SPEC-OF? TYPESPEC SGT-JAVA-TRANSLATE-STELLA-LITERAL)
    (CL:NOT
     (SUB-TYPE-SPEC-OF? TYPESPEC SGT-JAVA-TRANSLATE-STELLA-STRING))
    (CL:NOT
     (SUB-TYPE-SPEC-OF? TYPESPEC
      SGT-JAVA-TRANSLATE-STELLA-MUTABLE-STRING))
    (CL:NOT
     (SUB-TYPE-SPEC-OF? TYPESPEC SGT-JAVA-TRANSLATE-STELLA-CODE)))))

;;; (DEFUN (JAVA-NATIVE-LITERAL-WRAPPER-NAMES STRING-WRAPPER STRING-WRAPPER) ...)

(CL:DEFUN JAVA-NATIVE-LITERAL-WRAPPER-NAMES (TYPESPEC)
  (CL:LET* ((TEST-VALUE-000 TYPESPEC))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-BOOLEAN)
     (CL:RETURN-FROM JAVA-NATIVE-LITERAL-WRAPPER-NAMES
      (CL:VALUES (WRAP-STRING "Boolean")
       (WRAP-STRING "booleanValue"))))
    ((CL:OR (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-INTEGER)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-SHORT-INTEGER)
      (CL:EQ TEST-VALUE-000
       SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-SHORT-INTEGER)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-BYTE)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-OCTET)
      (CL:EQ TEST-VALUE-000
       SGT-JAVA-TRANSLATE-STELLA-THIRY-TWO-BIT-VECTOR))
     (CL:RETURN-FROM JAVA-NATIVE-LITERAL-WRAPPER-NAMES
      (CL:VALUES (WRAP-STRING "Integer") (WRAP-STRING "intValue"))))
    ((CL:OR (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-FLOAT)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-DOUBLE))
     (CL:RETURN-FROM JAVA-NATIVE-LITERAL-WRAPPER-NAMES
      (CL:VALUES (WRAP-STRING "Double") (WRAP-STRING "doubleValue"))))
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-CHARACTER)
     (CL:RETURN-FROM JAVA-NATIVE-LITERAL-WRAPPER-NAMES
      (CL:VALUES (WRAP-STRING "Character") (WRAP-STRING "charValue"))))
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-LONG-INTEGER)
     (CL:RETURN-FROM JAVA-NATIVE-LITERAL-WRAPPER-NAMES
      (CL:VALUES (WRAP-STRING "Long") (WRAP-STRING "longValue"))))
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-SINGLE-FLOAT)
     (CL:RETURN-FROM JAVA-NATIVE-LITERAL-WRAPPER-NAMES
      (CL:VALUES (WRAP-STRING "Float") (WRAP-STRING "floatValue"))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (JAVA-SPECIAL-SETTER-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-SPECIAL-SETTER-NAME (TYPESPEC)
  (CL:LET* ((TEST-VALUE-000 (TYPE-SPEC-TO-BASE-TYPE TYPESPEC)))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-BOOLEAN)
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setBooleanSpecial")))
    ((CL:OR (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-INTEGER)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-SHORT-INTEGER)
      (CL:EQ TEST-VALUE-000
       SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-SHORT-INTEGER)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-BYTE)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-OCTET)
      (CL:EQ TEST-VALUE-000
       SGT-JAVA-TRANSLATE-STELLA-THIRY-TWO-BIT-VECTOR))
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setIntSpecial")))
    ((CL:OR (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-FLOAT)
      (CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-DOUBLE))
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setDoubleSpecial")))
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-CHARACTER)
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setCharSpecial")))
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-LONG-INTEGER)
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setLongSpecial")))
    ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-SINGLE-FLOAT)
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setFloatSpecial")))
    (CL:T
     (CL:RETURN-FROM JAVA-SPECIAL-SETTER-NAME
      (WRAP-STRING "setSpecial"))))))

;;; (DEFUN (JAVA-YIELD-FLOTSAM-TYPE-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  JAVA-YIELD-FLOTSAM-TYPE-NAME))
(CL:DEFUN JAVA-YIELD-FLOTSAM-TYPE-NAME (FLOTSAM-CLASS-NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING FLOTSAM-CLASS-NAME))
  #+MCL
  (CL:CHECK-TYPE FLOTSAM-CLASS-NAME CL:SIMPLE-STRING)
  (CL:LET*
   ((LAST-PERIOD NULL-INTEGER)
    (NEXT-PERIOD (POSITION FLOTSAM-CLASS-NAME #\. 0))
    (BARE-CLASS-NAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:FIXNUM LAST-PERIOD NEXT-PERIOD)
    (CL:TYPE CL:SIMPLE-STRING BARE-CLASS-NAME))
   (CL:LOOP WHILE (CL:NOT (CL:= NEXT-PERIOD NULL-INTEGER)) DO
    (CL:SETQ LAST-PERIOD NEXT-PERIOD)
    (CL:SETQ NEXT-PERIOD
     (POSITION FLOTSAM-CLASS-NAME #\. NEXT-PERIOD)))
   (CL:IF (CL:NOT (CL:= LAST-PERIOD NULL-INTEGER))
    (CL:SETQ BARE-CLASS-NAME
     (SUBSEQUENCE FLOTSAM-CLASS-NAME LAST-PERIOD NULL-INTEGER))
    (CL:SETQ BARE-CLASS-NAME FLOTSAM-CLASS-NAME))
   (CL:RETURN-FROM JAVA-YIELD-FLOTSAM-TYPE-NAME
    (MAKE-MATCHING-NAME-FULL BARE-CLASS-NAME KWD-JAVA-TRANSLATE-YES
     KWD-JAVA-TRANSLATE-NO "_" "" "" "" "" KWD-JAVA-TRANSLATE-UPCASE
     "-"))))

;;; (DEFUN (JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME (SYMBOL)
  (CL:LET*
   ((GLOBALSYMBOL (LOOKUP *SYMBOL-REGISTRY* SYMBOL))
    (TRANSLATEDNAME "") (FLOTSAM-CLASS-NAME ""))
   (CL:DECLARE
    (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME FLOTSAM-CLASS-NAME))
   (CL:WHEN (CL:EQ GLOBALSYMBOL NULL)
    (CL:WARN
     "Couldn't lookup symbol name for `~A'~%     in java-translate-symbol-constant-name"
     SYMBOL))
   (CL:SETQ FLOTSAM-CLASS-NAME
    (JAVA-YIELD-FLOTSAM-CLASS-NAME (HOME-MODULE GLOBALSYMBOL)))
   (CL:SETQ TRANSLATEDNAME
    (CONCATENATE FLOTSAM-CLASS-NAME "."
     (JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS
      (%GENERALIZED-SYMBOL.SYMBOL-NAME GLOBALSYMBOL)
      KWD-JAVA-TRANSLATE-UPPERCASE)))
   (CL:WHEN
    (CL:NOT
     (OMIT-JAVA-PACKAGE-PREFIX? (HOME-MODULE GLOBALSYMBOL)
      (JAVA-YIELD-FLOTSAM-TYPE-NAME FLOTSAM-CLASS-NAME)))
    (CL:SETQ TRANSLATEDNAME
     (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE GLOBALSYMBOL) ".")
      TRANSLATEDNAME)))
   (CL:RETURN-FROM JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME
    (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (JAVA-TRANSLATE-SYMBOL-CONSTANT-ID STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-SYMBOL-CONSTANT-ID (SYMBOL)
  (CL:LET*
   ((TRANSLATEDSYMBOL (JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME SYMBOL)))
   (CL:SETF (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDSYMBOL)
    (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDSYMBOL)
     "_id"))
   (CL:RETURN-FROM JAVA-TRANSLATE-SYMBOL-CONSTANT-ID TRANSLATEDSYMBOL)))

;;; (DEFUN (JAVA-TRANSLATE-SYMBOL-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-SYMBOL-NAME (SYMBOL)
  (CL:RETURN-FROM JAVA-TRANSLATE-SYMBOL-NAME
   (JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME SYMBOL)))

;;; (DEFUN (JAVA-TRANSLATE-SYMBOL-ID STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-SYMBOL-ID (SYMBOL)
  (CL:RETURN-FROM JAVA-TRANSLATE-SYMBOL-ID
   (JAVA-TRANSLATE-SYMBOL-CONSTANT-ID SYMBOL)))

;;; (DEFUN (JAVA-TRANSLATE-SURROGATE-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-SURROGATE-NAME (SURROGATE)
  (CL:RETURN-FROM JAVA-TRANSLATE-SURROGATE-NAME
   (JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME SURROGATE)))

;;; (DEFUN (JAVA-TRANSLATE-SURROGATE-ID STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-SURROGATE-ID (SURROGATE)
  (CL:RETURN-FROM JAVA-TRANSLATE-SURROGATE-ID
   (JAVA-TRANSLATE-SYMBOL-CONSTANT-ID SURROGATE)))

;;; (DEFUN (JAVA-TRANSLATE-KEYWORD-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-KEYWORD-NAME (KEYWORD)
  (CL:RETURN-FROM JAVA-TRANSLATE-KEYWORD-NAME
   (JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME KEYWORD)))

;;; (DEFUN (JAVA-TRANSLATE-KEYWORD-ID STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-KEYWORD-ID (KEYWORD)
  (CL:RETURN-FROM JAVA-TRANSLATE-KEYWORD-ID
   (JAVA-TRANSLATE-SYMBOL-CONSTANT-ID KEYWORD)))

;;; (DEFUN (JAVA-TRANSLATE-CLASS-NAMESTRING STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-CLASS-NAMESTRING (NAMESTRING)
  (CL:LET* ((TRANSLATEDNAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:IF
    (ALL-UPPER-CASE-STRING? (%STRING-WRAPPER.WRAPPER-VALUE NAMESTRING))
    (CL:SETQ TRANSLATEDNAME
     (MAKE-MATCHING-NAME-FULL
      (%STRING-WRAPPER.WRAPPER-VALUE NAMESTRING)
      KWD-JAVA-TRANSLATE-CLEVER KWD-JAVA-TRANSLATE-CLEVER "- " "" "" ""
      "" KWD-JAVA-TRANSLATE-TITLECASE ""))
    (CL:SETQ TRANSLATEDNAME
     (MAKE-MATCHING-NAME-FULL
      (%STRING-WRAPPER.WRAPPER-VALUE NAMESTRING)
      KWD-JAVA-TRANSLATE-CLEVER KWD-JAVA-TRANSLATE-CLEVER "- " "" "" ""
      "" KWD-JAVA-TRANSLATE-PRESERVE "")))
   (CL:SETQ TRANSLATEDNAME
    (JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS TRANSLATEDNAME
     KWD-JAVA-TRANSLATE-CAPITALIZE))
   (CL:IF
    (CL:NOT
     (CL:EQ (JAVA-LOOKUP-RESERVED-WORD-TABLE TRANSLATEDNAME)
      STELLA::NULL-STRING))
    (CL:RETURN-FROM JAVA-TRANSLATE-CLASS-NAMESTRING
     (WRAP-STRING (CONCATENATE "Stella_" TRANSLATEDNAME)))
    (CL:RETURN-FROM JAVA-TRANSLATE-CLASS-NAMESTRING
     (WRAP-STRING TRANSLATEDNAME)))))

;;; (DEFUN (JAVA-TRANSLATE-CLASS-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-CLASS-NAME (NAMESYMBOL)
  (CL:RETURN-FROM JAVA-TRANSLATE-CLASS-NAME
   (JAVA-TRANSLATE-TYPE-SPEC (SURROGATIFY NAMESYMBOL))))

;;; (DEFUN (IN-CURRENT-JAVA-PACKAGE? BOOLEAN) ...)

(CL:DEFUN IN-CURRENT-JAVA-PACKAGE? (MODULE)
  (CL:RETURN-FROM IN-CURRENT-JAVA-PACKAGE?
   (CL:OR (CL:EQ MODULE *MODULE*)
    (STRING-EQL? (JAVA-PACKAGE-PREFIX MODULE ".")
     (JAVA-PACKAGE-PREFIX *MODULE* ".")))))

;;; (DEFUN (INHERITED-CLASS-NAME-CONFLICTS? BOOLEAN) ...)

(CL:DEFUN INHERITED-CLASS-NAME-CONFLICTS? (STELLA-CLASS-NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STELLA-CLASS-NAME))
  #+MCL
  (CL:CHECK-TYPE STELLA-CLASS-NAME CL:SIMPLE-STRING)
  (CL:LET*
   ((STELLA-CLASS (GET-STELLA-CLASS STELLA-CLASS-NAME CL:NIL))
    (TEST-CLASS NULL) (JAVA-CLASS-NAME "") (CATCHALL-MODULE NULL))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING JAVA-CLASS-NAME))
   (CL:LET*
    ((MODULE NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (%MODULE.USES *MODULE*))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-000))
     (CL:LET* ((*MODULE* MODULE)) (CL:DECLARE (CL:SPECIAL *MODULE*))
      (CL:SETQ TEST-CLASS (GET-STELLA-CLASS STELLA-CLASS-NAME CL:NIL))
      (CL:WHEN (CL:EQ STELLA-CLASS NULL)
       (CL:SETQ STELLA-CLASS TEST-CLASS))
      (CL:WHEN
       (CL:AND (CL:NOT (CL:EQ TEST-CLASS NULL))
        (CL:NOT (CL:EQ TEST-CLASS STELLA-CLASS)))
       (CL:RETURN-FROM INHERITED-CLASS-NAME-CONFLICTS? CL:T)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET*
    ((MODULE NULL) (ITER-001 (%MODULE.ALL-SUPER-CONTEXTS *MODULE*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-001))
     (CL:WHEN (ISA? MODULE SGT-JAVA-TRANSLATE-STELLA-MODULE)
      (CL:LET* ((*MODULE* MODULE)) (CL:DECLARE (CL:SPECIAL *MODULE*))
       (CL:SETQ TEST-CLASS (GET-STELLA-CLASS STELLA-CLASS-NAME CL:NIL))
       (CL:WHEN (CL:EQ STELLA-CLASS NULL)
        (CL:SETQ STELLA-CLASS TEST-CLASS))
       (CL:WHEN
        (CL:AND (CL:NOT (CL:EQ TEST-CLASS NULL))
         (CL:NOT (CL:EQ TEST-CLASS STELLA-CLASS)))
        (CL:RETURN-FROM INHERITED-CLASS-NAME-CONFLICTS? CL:T))))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:SETQ JAVA-CLASS-NAME
    (%STRING-WRAPPER.WRAPPER-VALUE
     (JAVA-TRANSLATE-CLASS-NAMESTRING
      (WRAP-STRING STELLA-CLASS-NAME))))
   (CL:LET*
    ((MODULE NULL)
     (ITER-002 (%LIST.THE-CONS-LIST (%MODULE.USES *MODULE*))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-002))
     (CL:WHEN
      (STRING-EQL? JAVA-CLASS-NAME
       (JAVA-YIELD-FLOTSAM-CLASS-NAME MODULE))
      (CL:WHEN
       (CL:OR (CL:NOT (CL:EQ STELLA-CLASS NULL))
        (CL:NOT (CL:EQ CATCHALL-MODULE NULL)))
       (CL:RETURN-FROM INHERITED-CLASS-NAME-CONFLICTS? CL:T))
      (CL:SETQ CATCHALL-MODULE MODULE))
     (CL:SETQ ITER-002 (%%REST ITER-002))))
   (CL:LET*
    ((MODULE NULL) (ITER-003 (%MODULE.ALL-SUPER-CONTEXTS *MODULE*)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
     (CL:SETQ MODULE (%%VALUE ITER-003))
     (CL:WHEN
      (CL:AND (ISA? MODULE SGT-JAVA-TRANSLATE-STELLA-MODULE)
       (STRING-EQL? JAVA-CLASS-NAME
        (JAVA-YIELD-FLOTSAM-CLASS-NAME MODULE)))
      (CL:WHEN
       (CL:OR (CL:NOT (CL:EQ STELLA-CLASS NULL))
        (CL:NOT (CL:EQ CATCHALL-MODULE NULL)))
       (CL:RETURN-FROM INHERITED-CLASS-NAME-CONFLICTS? CL:T))
      (CL:SETQ CATCHALL-MODULE MODULE))
     (CL:SETQ ITER-003 (%%REST ITER-003))))
   (CL:RETURN-FROM INHERITED-CLASS-NAME-CONFLICTS? CL:NIL)))

;;; (DEFUN (CLASS-NAME-CONFLICTS-WITH-SLOT-NAME? BOOLEAN) ...)

(CL:DEFUN CLASS-NAME-CONFLICTS-WITH-SLOT-NAME? (DEFINING-CLASS JAVA-CLASS-NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING JAVA-CLASS-NAME))
  #+MCL
  (CL:CHECK-TYPE JAVA-CLASS-NAME CL:SIMPLE-STRING)
  (CL:WHEN (CL:NOT (CL:EQ DEFINING-CLASS NULL))
   (CL:LET* ((SLOT NULL) (ITER-000 (CLASS-SLOTS DEFINING-CLASS)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ SLOT (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (STORAGE-SLOT? SLOT)
       (EQUAL? (WRAP-STRING JAVA-CLASS-NAME)
        (JAVA-TRANSLATE-NAME (%SLOT.SLOT-NAME SLOT))))
      (CL:RETURN-FROM CLASS-NAME-CONFLICTS-WITH-SLOT-NAME? CL:T)))))
  (CL:RETURN-FROM CLASS-NAME-CONFLICTS-WITH-SLOT-NAME? CL:NIL))

;;; (DEFUN (OMIT-JAVA-PACKAGE-PREFIX? BOOLEAN) ...)

(CL:DEFUN OMIT-JAVA-PACKAGE-PREFIX? (MODULE STELLA-CLASS-NAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STELLA-CLASS-NAME))
  #+MCL
  (CL:CHECK-TYPE STELLA-CLASS-NAME CL:SIMPLE-STRING)
  (CL:IF
   (MEMB? *CURRENT-STELLA-FEATURES*
    KWD-JAVA-TRANSLATE-MINIMIZE-JAVA-PREFIXES)
   (CL:RETURN-FROM OMIT-JAVA-PACKAGE-PREFIX?
    (CL:OR (IN-CURRENT-JAVA-PACKAGE? MODULE)
     (CL:AND
      (CL:OR (MEMB? (%MODULE.USES *MODULE*) MODULE)
       (MEMB? (%MODULE.ALL-SUPER-CONTEXTS *MODULE*) MODULE))
      (CL:NOT (INHERITED-CLASS-NAME-CONFLICTS? STELLA-CLASS-NAME)))))
   (CL:RETURN-FROM OMIT-JAVA-PACKAGE-PREFIX?
    (IN-CURRENT-JAVA-PACKAGE? MODULE))))

;;; (DEFUN (JAVA-TRANSLATE-TYPE-SPEC STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-TYPE-SPEC (TYPE-SPEC)
  (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC
   (JAVA-TRANSLATE-TYPE-SPEC-HELPER TYPE-SPEC CL:NIL)))

;;; (DEFUN (JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION (TYPE-SPEC)
  (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION
   (JAVA-TRANSLATE-TYPE-SPEC-HELPER TYPE-SPEC CL:T)))

;;; (DEFUN (JAVA-TRANSLATE-TYPE-SPEC-HELPER STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-TYPE-SPEC-HELPER (TYPE-SPEC FUNCTION?)
  (CL:LET* ((FINAL-TYPE NULL) (TYPE-NAME ""))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TYPE-NAME))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPE-SPEC)))
    (CL:COND
     ((SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER? TEST-VALUE-000)
      (CL:PROGN
       (CL:IF (ARRAY-TYPE-SPECIFIER? TYPE-SPEC)
        (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-HELPER
         (JAVA-TRANSLATE-ARRAY-TYPE TYPE-SPEC))
        (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-HELPER
         (JAVA-TRANSLATE-TYPE-SPEC
          (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-BASE-TYPE
           TYPE-SPEC))))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN
       (CL:COND
        ((CL:NOT
          (CL:EQ
           (%STRING-WRAPPER.WRAPPER-VALUE
            (DYNAMIC-SLOT-VALUE
             (%CLASS.DYNAMIC-SLOTS
              (%SURROGATE.SURROGATE-VALUE TYPE-SPEC))
             SYM-JAVA-TRANSLATE-STELLA-CLASS-JAVA-NATIVE-TYPE
             NULL-STRING-WRAPPER))
           STELLA::NULL-STRING))
         (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-HELPER
          (WRAP-STRING
           (JAVA-NATIVE-TYPE (%SURROGATE.SURROGATE-VALUE TYPE-SPEC)))))
        (CL:T
         (CL:SETQ FINAL-TYPE
          (%CLASS.CLASS-TYPE (%SURROGATE.SURROGATE-VALUE TYPE-SPEC)))
         (CL:SETQ TYPE-NAME
          (%STRING-WRAPPER.WRAPPER-VALUE
           (JAVA-TRANSLATE-CLASS-NAMESTRING
            (WRAP-STRING (%SURROGATE.SYMBOL-NAME FINAL-TYPE)))))
         (CL:COND
          ((CL:NOT
            (OMIT-JAVA-PACKAGE-PREFIX? (HOME-MODULE FINAL-TYPE)
             (%SURROGATE.SYMBOL-NAME FINAL-TYPE)))
           (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-HELPER
            (WRAP-STRING
             (CONCATENATE
              (JAVA-PACKAGE-PREFIX (HOME-MODULE FINAL-TYPE) ".")
              TYPE-NAME))))
          ((CL:AND FUNCTION?
            (CLASS-NAME-CONFLICTS-WITH-SLOT-NAME?
             *CURRENT-JAVA-OUTPUT-CLASS* TYPE-NAME))
           (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-HELPER
            (WRAP-STRING
             (CONCATENATE
              (JAVA-PACKAGE-PREFIX (HOME-MODULE FINAL-TYPE) ".")
              TYPE-NAME))))
          (CL:T
           (CL:RETURN-FROM JAVA-TRANSLATE-TYPE-SPEC-HELPER
            (WRAP-STRING TYPE-NAME))))))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))))

;;; (DEFUN (JAVA-TRANSLATE-ARRAY-TYPE STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-ARRAY-TYPE (ARRAYTYPE)
  (CL:LET*
   ((DIMENSIONS (ARRAY-TYPE-DIMENSIONS ARRAYTYPE))
    (ELEMENTTYPE
     (EXTRACT-PARAMETER-TYPE ARRAYTYPE
      SYM-JAVA-TRANSLATE-STELLA-ANY-VALUE))
    (TRANSLATEDTYPE
     (%STRING-WRAPPER.WRAPPER-VALUE
      (JAVA-TRANSLATE-TYPE-SPEC ELEMENTTYPE))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDTYPE))
   (CL:CASE (LENGTH DIMENSIONS)
    (1
     (CL:RETURN-FROM JAVA-TRANSLATE-ARRAY-TYPE
      (WRAP-STRING (CONCATENATE TRANSLATEDTYPE "[]"))))
    (2
     (CL:RETURN-FROM JAVA-TRANSLATE-ARRAY-TYPE
      (WRAP-STRING (CONCATENATE TRANSLATEDTYPE "[][]"))))
    (3
     (CL:RETURN-FROM JAVA-TRANSLATE-ARRAY-TYPE
      (WRAP-STRING (CONCATENATE TRANSLATEDTYPE "[][][]"))))
    (CL:OTHERWISE
     (CL:LET*
      ((UNUSED-DIM NULL) (ITER-000 (%LIST.THE-CONS-LIST DIMENSIONS)))
      (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
       (CL:SETQ UNUSED-DIM (%%VALUE ITER-000))
       (CL:SETQ UNUSED-DIM UNUSED-DIM)
       (CL:SETQ TRANSLATEDTYPE (CONCATENATE TRANSLATEDTYPE "[]"))
       (CL:SETQ ITER-000 (%%REST ITER-000))))
     (CL:RETURN-FROM JAVA-TRANSLATE-ARRAY-TYPE
      (WRAP-STRING TRANSLATEDTYPE))))))

;;; (DEFUN (JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC (TYPESPEC FULLYQUALIFIED?)
  (CL:LET*
   ((BASETYPESTRING
     (CL:IF FULLYQUALIFIED?
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME TYPESPEC))
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-TYPE-SPEC TYPESPEC)))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASETYPESTRING))
   (CL:RETURN-FROM JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC
    (WRAP-STRING (CONCATENATE BASETYPESTRING " []")))))

;;; (DEFUN (JAVA-YIELD-RENAMED-RESERVED-WORD STRING-WRAPPER) ...)

(CL:DEFUN JAVA-YIELD-RENAMED-RESERVED-WORD (WORD)
  (CL:RETURN-FROM JAVA-YIELD-RENAMED-RESERVED-WORD
   (WRAP-STRING
    (CONCATENATE "renamed_"
     (STRING-CAPITALIZE (%SYMBOL.SYMBOL-NAME WORD))))))

;;; (DEFUN (JAVA-CREATE-RESERVED-WORD-TABLE STRING-HASH-TABLE) ...)

(CL:DEFUN JAVA-CREATE-RESERVED-WORD-TABLE ()
  (CL:LET* ((TABLE (NEW-STRING-HASH-TABLE)))
   (CL:LET*
    ((WORD NULL)
     (ITER-000
      (LIST* SYM-JAVA-TRANSLATE-STELLA-OBJECT
       SYM-JAVA-TRANSLATE-STELLA-ABSTRACT
       SYM-JAVA-TRANSLATE-STELLA-BOOLEAN
       SYM-JAVA-TRANSLATE-STELLA-BREAK SYM-JAVA-TRANSLATE-STELLA-BYTE
       SYM-JAVA-TRANSLATE-STELLA-CASE SYM-JAVA-TRANSLATE-STELLA-CATCH
       SYM-JAVA-TRANSLATE-STELLA-CHAR SYM-JAVA-TRANSLATE-STELLA-CLASS
       SYM-JAVA-TRANSLATE-STELLA-CONST
       SYM-JAVA-TRANSLATE-STELLA-CONTINUE
       SYM-JAVA-TRANSLATE-STELLA-DEFAULT SYM-JAVA-TRANSLATE-STELLA-DO
       SYM-JAVA-TRANSLATE-STELLA-DOUBLE SYM-JAVA-TRANSLATE-STELLA-ELSE
       SYM-JAVA-TRANSLATE-STELLA-EXTENDS
       SYM-JAVA-TRANSLATE-STELLA-FINAL
       SYM-JAVA-TRANSLATE-STELLA-FINALLY
       SYM-JAVA-TRANSLATE-STELLA-FLOAT SYM-JAVA-TRANSLATE-STELLA-FOR
       SYM-JAVA-TRANSLATE-STELLA-GOTO SYM-JAVA-TRANSLATE-STELLA-IF
       SYM-JAVA-TRANSLATE-STELLA-IMPLEMENTS
       SYM-JAVA-TRANSLATE-STELLA-IMPORT
       SYM-JAVA-TRANSLATE-STELLA-INSTANCEOF
       SYM-JAVA-TRANSLATE-STELLA-INT
       SYM-JAVA-TRANSLATE-STELLA-INTERFACE
       SYM-JAVA-TRANSLATE-STELLA-LONG SYM-JAVA-TRANSLATE-STELLA-NATIVE
       SYM-JAVA-TRANSLATE-STELLA-NEW SYM-JAVA-TRANSLATE-STELLA-PACKAGE
       SYM-JAVA-TRANSLATE-STELLA-PRIVATE
       SYM-JAVA-TRANSLATE-STELLA-PROTECTED
       SYM-JAVA-TRANSLATE-STELLA-PUBLIC
       SYM-JAVA-TRANSLATE-STELLA-RETURN SYM-JAVA-TRANSLATE-STELLA-SHORT
       SYM-JAVA-TRANSLATE-STELLA-STATIC SYM-JAVA-TRANSLATE-STELLA-SUPER
       SYM-JAVA-TRANSLATE-STELLA-SWITCH
       SYM-JAVA-TRANSLATE-STELLA-SYNCHRONIZED
       SYM-JAVA-TRANSLATE-STELLA-THROW SYM-JAVA-TRANSLATE-STELLA-THROWS
       SYM-JAVA-TRANSLATE-STELLA-TRANSIENT
       SYM-JAVA-TRANSLATE-STELLA-TRY SYM-JAVA-TRANSLATE-STELLA-VOID
       SYM-JAVA-TRANSLATE-STELLA-VOLATILE
       SYM-JAVA-TRANSLATE-STELLA-WHILE SYM-JAVA-TRANSLATE-STELLA-ASSERT
       SYM-JAVA-TRANSLATE-STELLA-ENUM NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ WORD (%%VALUE ITER-000))
     (INSERT-AT TABLE (STRING-DOWNCASE (%SYMBOL.SYMBOL-NAME WORD))
      (JAVA-YIELD-RENAMED-RESERVED-WORD WORD))
     (INSERT-AT TABLE (STRING-CAPITALIZE (%SYMBOL.SYMBOL-NAME WORD))
      (JAVA-YIELD-RENAMED-RESERVED-WORD WORD))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (INSERT-AT TABLE "++" (WRAP-STRING "stella_Increment"))
   (INSERT-AT TABLE "--" (WRAP-STRING "stella_Decrement"))
   (CL:RETURN-FROM JAVA-CREATE-RESERVED-WORD-TABLE TABLE)))

;;; (DEFGLOBAL *JAVA-RESERVED-WORD-TABLE* ...)

(CL:DEFVAR *JAVA-RESERVED-WORD-TABLE* NULL)

;;; (DEFUN (JAVA-LOOKUP-RESERVED-WORD-TABLE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  JAVA-LOOKUP-RESERVED-WORD-TABLE))
(CL:DEFUN JAVA-LOOKUP-RESERVED-WORD-TABLE (WORD)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING WORD))
  #+MCL
  (CL:CHECK-TYPE WORD CL:SIMPLE-STRING)
  (CL:LET* ((ENTRY (LOOKUP *JAVA-RESERVED-WORD-TABLE* WORD)))
   (CL:IF (CL:NOT (CL:EQ ENTRY NULL))
    (CL:RETURN-FROM JAVA-LOOKUP-RESERVED-WORD-TABLE
     (%STRING-WRAPPER.WRAPPER-VALUE ENTRY))
    (CL:RETURN-FROM JAVA-LOOKUP-RESERVED-WORD-TABLE
     STELLA::NULL-STRING))))

;;; (DEFUN (JAVA-TRANSLATE-NAMESTRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  JAVA-TRANSLATE-NAMESTRING))
(CL:DEFUN JAVA-TRANSLATE-NAMESTRING (NAMESTRING)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAMESTRING))
  #+MCL
  (CL:CHECK-TYPE NAMESTRING CL:SIMPLE-STRING)
  (CL:LET*
   ((RESERVEDNAME (JAVA-LOOKUP-RESERVED-WORD-TABLE NAMESTRING)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESERVEDNAME))
   (CL:WHEN (CL:EQ NAMESTRING STELLA::NULL-STRING)
    (CL:RETURN-FROM JAVA-TRANSLATE-NAMESTRING "NULL"))
   (CL:WHEN (CL:NOT (CL:EQ RESERVEDNAME STELLA::NULL-STRING))
    (CL:RETURN-FROM JAVA-TRANSLATE-NAMESTRING RESERVEDNAME))
   (CL:RETURN-FROM JAVA-TRANSLATE-NAMESTRING
    (JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS NAMESTRING
     KWD-JAVA-TRANSLATE-LOWERCASE))))

;;; (DEFUN (JAVA-TRANSLATE-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-NAME (NAMESYMBOL)
  (CL:RETURN-FROM JAVA-TRANSLATE-NAME
   (WRAP-STRING
    (JAVA-TRANSLATE-NAMESTRING
     (JAVA-CHANGE-CASE NAMESYMBOL KWD-JAVA-TRANSLATE-LOWERCASE)))))

;;; (DEFUN (JAVA-TRANSLATE-SPECIAL-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-SPECIAL-TREE (TREE)
  (CL:LET*
   ((SAVEDECLARATIONS NIL) (SETFORMS NIL) (RESTOREFORMS NIL)
    (OTREE NULL))
   (CL:LET* ((DECLARATION NULL) (ITER-000 (%%VALUE (%%REST TREE))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DECLARATION (%%VALUE ITER-000))
     (CL:LET*
      ((D DECLARATION) (SPECIALVARIABLENAME (%%VALUE D))
       (OLDVALUEVARIABLE
        (JAVA-TRANSLATE-A-TREE
         (LOCAL-GENSYM
          (CONCATENATE "OLD-"
           (%SYMBOL.SYMBOL-NAME SPECIALVARIABLENAME))))))
      (CL:SETQ SAVEDECLARATIONS
       (CONS
        (CONS (WRAP-STRING "Object")
         (CONS OLDVALUEVARIABLE
          (CONS
           (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
            (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
             (WRAP-STRING "") NIL)
            (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
             (WRAP-STRING "get") NIL)
            (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
             (JAVA-TRANSLATE-GLOBAL-NAME SPECIALVARIABLENAME CL:NIL)
             NIL)
            (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NIL) NIL)
           NIL)))
        SAVEDECLARATIONS))
      (CL:SETQ SETFORMS
       (CONS
        (JAVA-TRANSLATE-A-TREE
         (LIST* SYM-JAVA-TRANSLATE-STELLA-SETQ (%%VALUE D)
          (CONS (%%VALUE (%%REST (%%REST D))) NIL)))
        SETFORMS))
      (CL:SETQ RESTOREFORMS
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "")
          NIL)
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
          (WRAP-STRING "set") NIL)
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
          (JAVA-TRANSLATE-GLOBAL-NAME SPECIALVARIABLENAME CL:NIL) NIL)
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS OLDVALUEVARIABLE
          NIL)
         NIL)
        RESTOREFORMS)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK
     (REVERSE SAVEDECLARATIONS)
     (CONS
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_UNWIND_PROTECT
        (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
         (CONCATENATE (REVERSE SETFORMS)
          (CONCATENATE
           (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE))) NIL)))
        (CONCATENATE RESTOREFORMS NIL))
       NIL)
      NIL)))
   (CL:RETURN-FROM JAVA-TRANSLATE-SPECIAL-TREE OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-VERBATIM-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-VERBATIM-TREE (TREE)
  (CL:LET* ((CURSOR (%%REST TREE)) (VERBATIMCODE NULL))
   (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
    (CL:WHEN (CL:EQ (%%VALUE CURSOR) KWD-JAVA-TRANSLATE-JAVA)
     (CL:SETQ VERBATIMCODE (%%VALUE (%%REST CURSOR)))
     (CL:RETURN-FROM JAVA-TRANSLATE-VERBATIM-TREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM VERBATIMCODE
       NIL)))
    (CL:SETQ CURSOR (%%REST (%%REST CURSOR))))
   (CL:ERROR (NEW-STELLA-EXCEPTION "Verbatim has no :java option"))))

;;; (DEFUN (JAVA-TRANSLATE-INLINE-CALL-TREE OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-INLINE-CALL-TREE (TREE)
  (CL:LET*
   ((CALLTREE (%%VALUE (%%REST TREE)))
    (ARGUMENTS
     (CL:IF
      (CL:EQ (%%VALUE CALLTREE)
       SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
      (NTH-REST CALLTREE 2) (NTH-REST CALLTREE 3)))
    (TOKENIZEDBODY (TOKENIZE-VERBATIM-METHOD-BODY CALLTREE)))
   (CL:WHEN (CL:NOT (CL:EQ TOKENIZEDBODY NULL))
    (CL:LET*
     ((INLINEDPARAMETERS (NEW-LIST)) (INLINEDBODY STELLA::NULL-STRING)
      (SUCCESS? CL:T))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING INLINEDBODY))
     (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
      (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
      (CL:LET* ((TOKEN NULL) (ITER-000 TOKENIZEDBODY))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ TOKEN (%%VALUE ITER-000))
        (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TOKEN)))
         (CL:COND
          ((SUBTYPE-OF-STRING? TEST-VALUE-000)
           (CL:PROGN
            (%%PRINT-STREAM
             (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
             (%STRING-WRAPPER.WRAPPER-VALUE TOKEN))))
          ((CL:EQ TEST-VALUE-000 SGT-JAVA-TRANSLATE-STELLA-CONS)
           (CL:PROGN
            (CL:LET*
             ((PARAMETER (%%VALUE TOKEN))
              (POSITION (%%VALUE (%%REST TOKEN)))
              (ARGUMENT
               (NTH ARGUMENTS
                (%INTEGER-WRAPPER.WRAPPER-VALUE POSITION))))
             (CL:WHEN (CL:NOT (SIDE-EFFECT-FREE-EXPRESSION? ARGUMENT))
              (CL:IF (MEMBER? INLINEDPARAMETERS PARAMETER)
               (CL:PROGN (CL:SETQ SUCCESS? CL:NIL) (CL:RETURN))
               (INSERT INLINEDPARAMETERS PARAMETER)))
             (CL:WHEN (CL:NOT (ATOMIC-EXPRESSION? ARGUMENT))
              (%%PRINT-STREAM
               (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "("))
             (JAVA-OUTPUT-STATEMENT
              (JAVA-TRANSLATE-A-TREE (COPY-CONS-TREE ARGUMENT)))
             (CL:WHEN (CL:NOT (ATOMIC-EXPRESSION? ARGUMENT))
              (%%PRINT-STREAM
               (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")))))
          (CL:T
           (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
            (%%PRINT-STREAM
             (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
             TEST-VALUE-000 "' is not a valid case option")
            (CL:ERROR
             (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (CL:SETQ INLINEDBODY (THE-STRING-READER *CURRENT-STREAM*))
      (CL:WHEN SUCCESS?
       (CL:RETURN-FROM JAVA-TRANSLATE-INLINE-CALL-TREE
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
         (NEW-VERBATIM-STRING-WRAPPER INLINEDBODY) NIL))))))
   (CL:RETURN-FROM JAVA-TRANSLATE-INLINE-CALL-TREE
    (JAVA-TRANSLATE-A-TREE CALLTREE))))

;;; (DEFUN (JAVA-TRANSLATE-UNWIND-PROTECT CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-UNWIND-PROTECT (TREE)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_UNWIND_PROTECT)
  (CL:SETF (%%REST TREE) (JAVA-TRANSLATE-LIST-OF-TREES (%%REST TREE)))
  (CL:RETURN-FROM JAVA-TRANSLATE-UNWIND-PROTECT TREE))

;;; (DEFUN (JAVA-TRANSLATE-SIGNAL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-SIGNAL (TREE)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_SIGNAL)
  (SECOND-SETTER TREE
   (JAVA-TRANSLATE-A-TREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-CAST
     (LIST* SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD
      (%%VALUE (%%REST (%%REST TREE)))
      (LIST* SYM-JAVA-TRANSLATE-STELLA-FILL-IN-STACK-TRACE
       (%%VALUE (%%REST TREE)) NIL))
     (%%VALUE (%%REST (%%REST TREE))) NIL)))
  (CL:SETF (%%REST (%%REST TREE)) NIL)
  (CL:RETURN-FROM JAVA-TRANSLATE-SIGNAL TREE))

;;; (DEFUN (JAVA-TRANSLATE-HANDLER-CASE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-HANDLER-CASE (TREE)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_HANDLER_CASE)
  (CL:SETF (%%REST TREE) (JAVA-TRANSLATE-LIST-OF-TREES (%%REST TREE)))
  (CL:RETURN-FROM JAVA-TRANSLATE-HANDLER-CASE TREE))

;;; (DEFUN (JAVA-TRANSLATE-HANDLE-EXCEPTION CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-HANDLE-EXCEPTION (TREE)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_CATCH)
  (SECOND-SETTER TREE
   (CONS
    (JAVA-TRANSLATE-TYPE-SPEC
     (%%VALUE (%%REST (%%VALUE (%%REST TREE)))))
    (CONS (JAVA-TRANSLATE-NAME (%%VALUE (%%VALUE (%%REST TREE)))) NIL)))
  (CL:SETF (%%REST (%%REST TREE))
   (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE))))
  (CL:RETURN-FROM JAVA-TRANSLATE-HANDLE-EXCEPTION TREE))

;;; (DEFUN (JAVA-TRANSLATE-VOID-SYS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-VOID-SYS (TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-VOID-SYS
   (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))

;;; (DEFUN (JAVA-TRANSLATE-TYPED-SYS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-TYPED-SYS (TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-TYPED-SYS
   (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))

;;; (DEFUN (JAVA-TRANSLATE-BAD-SYS OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-BAD-SYS (TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-BAD-SYS
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
    (WRAP-STRING
     (CONCATENATE "*** TRANSLATION FAILURE FROM "
      (STRINGIFY (%%VALUE (%%REST TREE)))))
    NIL)))

;;; (DEFUN (JAVA-TRANSLATE-SETQ-TREE OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-SETQ-TREE (TREE)
  (CL:LET*
   ((VARIABLENAME (%%VALUE (%%REST TREE)))
    (GLOBALVAR
     (LOOKUP-GLOBAL-VARIABLE (SOFT-PERMANENTIFY VARIABLENAME))))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ GLOBALVAR NULL))
     (%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBALVAR))
    (CL:RETURN-FROM JAVA-TRANSLATE-SETQ-TREE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (WRAP-STRING (JAVA-YIELD-NATIVE-CLASS-NAME)) NIL)
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (JAVA-SPECIAL-SETTER-NAME (GLOBAL-VARIABLE-TYPE-SPEC GLOBALVAR))
       NIL)
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
        (JAVA-TRANSLATE-GLOBAL-NAME VARIABLENAME CL:NIL) NIL)
       (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))) NIL)
      NIL))
    (CL:RETURN-FROM JAVA-TRANSLATE-SETQ-TREE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN
      (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))
      (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE))))
       NIL))))))

;;; (DEFUN (JAVA-TRANSLATE-SYS-SET-DEFAULT OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-SYS-SET-DEFAULT (TREE)
  (CL:LET*
   ((VARIABLENAME (%%VALUE (%%REST TREE)))
    (GLOBALVAR
     (LOOKUP-GLOBAL-VARIABLE (SOFT-PERMANENTIFY VARIABLENAME))))
   (CL:RETURN-FROM JAVA-TRANSLATE-SYS-SET-DEFAULT
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "") NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
      (WRAP-STRING "setDefaultValue") NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
      (JAVA-TRANSLATE-GLOBAL-NAME VARIABLENAME CL:NIL) NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
      (JAVA-TRANSLATE-WITH-NATIVE-WRAPPER
       (%%VALUE (%%REST (%%REST TREE)))
       (CL:IF
        (CL:NOT
         (CL:EQ
          (DYNAMIC-SLOT-VALUE
           (%GLOBAL-VARIABLE.DYNAMIC-SLOTS GLOBALVAR)
           SYM-JAVA-TRANSLATE-STELLA-VARIABLE-TYPE-SPECIFIER NULL)
          NULL))
        (DYNAMIC-SLOT-VALUE (%GLOBAL-VARIABLE.DYNAMIC-SLOTS GLOBALVAR)
         SYM-JAVA-TRANSLATE-STELLA-VARIABLE-TYPE-SPECIFIER NULL)
        (%GLOBAL-VARIABLE.VARIABLE-TYPE GLOBALVAR)))
      NIL)
     NIL))))

;;; (DEFUN (JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER (TREE)
  (CL:LET*
   ((OBJECTREF (FOURTH TREE)) (OBJECTTYPE (%%VALUE (%%REST TREE)))
    (SLOTNAME
     (TRUE-SLOT-NAME (%%VALUE (%%REST (%%REST TREE))) OBJECTTYPE))
    (VALUEREF (JAVA-TRANSLATE-A-TREE (FIFTH TREE)))
    (OTREE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE_SETTER
      (JAVA-TRANSLATE-A-TREE OBJECTREF)
      (CONS (JAVA-TRANSLATE-NAME SLOTNAME) (CONS VALUEREF NIL)))))
   (THIRD-SETTER TREE NULL) (FOURTH-SETTER TREE NULL)
   (FIFTH-SETTER TREE NULL)
   (CL:RETURN-FROM JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-SYS-SLOT-VALUE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-SYS-SLOT-VALUE (TREE)
  (CL:LET*
   ((OBJECTTYPE (%%VALUE (%%REST TREE))) (OBJECTREF (FOURTH TREE))
    (SLOTNAME
     (TRUE-SLOT-NAME (%%VALUE (%%REST (%%REST TREE))) OBJECTTYPE))
    (OTREE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE
      (JAVA-TRANSLATE-A-TREE OBJECTREF)
      (CONS (JAVA-TRANSLATE-NAME SLOTNAME) NIL))))
   (CL:RETURN-FROM JAVA-TRANSLATE-SYS-SLOT-VALUE OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-PROGN CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-PROGN (TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-PROGN
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
    (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
     (CONCATENATE (JAVA-TRANSLATE-LIST-OF-TREES (%%REST TREE)) NIL))
    NIL)))

;;; (DEFUN (JAVA-TRANSLATE-WITH-PROCESS-LOCK CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-WITH-PROCESS-LOCK (TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-WITH-PROCESS-LOCK
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_WITH_PROCESS_LOCK
    (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))
    (CONS
     (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
      (CONCATENATE
       (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE))) NIL))
     NIL))))

;;; (DEFSPECIAL *JAVA-LOOP-NAME* ...)

(CL:DEFVAR *JAVA-LOOP-NAME* NULL)

;;; (DEFSPECIAL *JAVA-LOOP-NAME-USED?* ...)

(CL:DEFVAR *JAVA-LOOP-NAME-USED?* CL:NIL)

;;; (DEFUN (JAVA-TRANSLATE-LOOP CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-LOOP (TREE)
  (CL:LET*
   ((*JAVA-LOOP-NAME* (LOCAL-GENSYM "LOOP"))
    (*JAVA-LOOP-NAME-USED?* CL:NIL))
   (CL:DECLARE (CL:SPECIAL *JAVA-LOOP-NAME* *JAVA-LOOP-NAME-USED?*))
   (CL:LET* ((BODY (JAVA-TRANSLATE-LIST-OF-TREES (%%REST TREE))))
    (CL:IF *JAVA-LOOP-NAME-USED?*
     (CL:RETURN-FROM JAVA-TRANSLATE-LOOP
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_NAMED_STATEMENT
       (JAVA-TRANSLATE-A-TREE *JAVA-LOOP-NAME*)
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_LOOP
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
          (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
           (CONCATENATE BODY NIL))
          NIL)
         NIL)
        NIL)))
     (CL:RETURN-FROM JAVA-TRANSLATE-LOOP
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_LOOP
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
        (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
         (CONCATENATE BODY NIL))
        NIL)
       NIL))))))

;;; (DEFUN (JAVA-TRANSLATE-FOREACH-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-FOREACH-TREE (TREE)
  (CL:LET*
   ((*JAVA-LOOP-NAME* (LOCAL-GENSYM "LOOP"))
    (*JAVA-LOOP-NAME-USED?* CL:NIL))
   (CL:DECLARE (CL:SPECIAL *JAVA-LOOP-NAME* *JAVA-LOOP-NAME-USED?*))
   (CL:LET*
    ((ITERATORBINDINGS (%%VALUE (%%REST TREE)))
     (VALUETREES (%%VALUE (%%REST (%%REST TREE))))
     (NEXTTREES (FOURTH TREE))
     (CONTINUATIONTEST (JAVA-TRANSLATE-A-TREE (FIFTH TREE)))
     (BODY (JAVA-TRANSLATE-LIST-OF-TREES (NTH-REST TREE 5)))
     (DECLARATIONS NIL) (VALUEASSIGNMENTS NIL) (NEXTASSIGNMENTS NIL)
     (VARIABLES NIL))
    (CL:LET*
     ((BINDING NULL) (ITER-000 ITERATORBINDINGS) (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ BINDING (%%VALUE ITER-000))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS
          (CONS-LIST
           (JAVA-TRANSLATE-TYPE-SPEC (%%VALUE (%%REST BINDING)))
           (JAVA-TRANSLATE-A-TREE (%%VALUE BINDING))
           (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST BINDING)))))
          NIL))
        (CL:IF (CL:EQ DECLARATIONS NIL)
         (CL:SETQ DECLARATIONS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST DECLARATIONS COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS
          (CONS-LIST
           (JAVA-TRANSLATE-TYPE-SPEC (%%VALUE (%%REST BINDING)))
           (JAVA-TRANSLATE-A-TREE (%%VALUE BINDING))
           (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST BINDING)))))
          NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:LET* ((TREE NULL) (ITER-001 VALUETREES) (COLLECT-001 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:SETQ TREE (%%VALUE ITER-001))
      (CL:IF (CL:EQ COLLECT-001 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-001 (CONS (JAVA-TRANSLATE-A-TREE TREE) NIL))
        (CL:IF (CL:EQ VALUEASSIGNMENTS NIL)
         (CL:SETQ VALUEASSIGNMENTS COLLECT-001)
         (ADD-CONS-TO-END-OF-CONS-LIST VALUEASSIGNMENTS COLLECT-001)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-001)
         (CONS (JAVA-TRANSLATE-A-TREE TREE) NIL))
        (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))
      (CL:SETQ ITER-001 (%%REST ITER-001))))
    (CL:LET* ((TREE NULL) (ITER-002 NEXTTREES) (COLLECT-002 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-002 NIL)) DO
      (CL:SETQ TREE (%%VALUE ITER-002))
      (CL:IF (CL:EQ COLLECT-002 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-002 (CONS (JAVA-TRANSLATE-A-TREE TREE) NIL))
        (CL:IF (CL:EQ NEXTASSIGNMENTS NIL)
         (CL:SETQ NEXTASSIGNMENTS COLLECT-002)
         (ADD-CONS-TO-END-OF-CONS-LIST NEXTASSIGNMENTS COLLECT-002)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-002)
         (CONS (JAVA-TRANSLATE-A-TREE TREE) NIL))
        (CL:SETQ COLLECT-002 (%%REST COLLECT-002))))
      (CL:SETQ ITER-002 (%%REST ITER-002))))
    (CL:LET* ((DECL NULL) (ITER-003 DECLARATIONS) (COLLECT-003 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-003 NIL)) DO
      (CL:SETQ DECL (%%VALUE ITER-003))
      (CL:IF (CL:EQ COLLECT-003 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-003 (CONS (%%VALUE (%%REST DECL)) NIL))
        (CL:IF (CL:EQ VARIABLES NIL) (CL:SETQ VARIABLES COLLECT-003)
         (ADD-CONS-TO-END-OF-CONS-LIST VARIABLES COLLECT-003)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-003)
         (CONS (%%VALUE (%%REST DECL)) NIL))
        (CL:SETQ COLLECT-003 (%%REST COLLECT-003))))
      (CL:SETQ ITER-003 (%%REST ITER-003))))
    (CL:IF *JAVA-LOOP-NAME-USED?*
     (CL:RETURN-FROM JAVA-TRANSLATE-FOREACH-TREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK DECLARATIONS
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_NAMED_STATEMENT
          (JAVA-TRANSLATE-A-TREE *JAVA-LOOP-NAME*)
          (CONS
           (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FOREACH VARIABLES
            (CONS CONTINUATIONTEST
             (CONS VALUEASSIGNMENTS
              (CONS NEXTASSIGNMENTS (CONS BODY NIL)))))
           NIL))
         NIL)
        NIL)))
     (CL:RETURN-FROM JAVA-TRANSLATE-FOREACH-TREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK DECLARATIONS
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FOREACH VARIABLES
          (CONS CONTINUATIONTEST
           (CONS VALUEASSIGNMENTS
            (CONS NEXTASSIGNMENTS (CONS BODY NIL)))))
         NIL)
        NIL)))))))

;;; (DEFUN (JAVA-TRANSLATE-LET-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-LET-TREE (TREE)
  (CL:LET* ((ODECLARATIONS NIL) (OTREE NULL))
   (CL:LET* ((DECLARATION NULL) (ITER-000 (%%VALUE (%%REST TREE))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DECLARATION (%%VALUE ITER-000))
     (CL:LET* ((D DECLARATION))
      (CL:SETQ ODECLARATIONS
       (CONS
        (CONS (JAVA-TRANSLATE-TYPE-SPEC (%%VALUE (%%REST D)))
         (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE D))
          (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST D))))
           NIL)))
        ODECLARATIONS)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK (REVERSE ODECLARATIONS)
     (CONS
      (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
       (CONCATENATE
        (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE))) NIL))
      NIL)))
   (CL:RETURN-FROM JAVA-TRANSLATE-LET-TREE OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-CAST CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CAST (TREE)
  (CL:LET*
   ((EXPRESSION (%%VALUE (%%REST TREE)))
    (TYPE (TYPE-SPEC-TO-BASE-TYPE (%%VALUE (%%REST (%%REST TREE))))))
   (CL:WHEN
    (CL:AND (SUBTYPE-OF? TYPE SGT-JAVA-TRANSLATE-STELLA-NUMBER)
     (ISA? EXPRESSION SGT-JAVA-TRANSLATE-STELLA-NUMBER-WRAPPER))
    (CL:RETURN-FROM JAVA-TRANSLATE-CAST
     (JAVA-TRANSLATE-A-TREE
      (COERCE-NUMERIC-CONSTANT EXPRESSION TYPE))))
   (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST)
   (SECOND-SETTER TREE (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
   (THIRD-SETTER TREE
    (JAVA-TRANSLATE-TYPE-SPEC (%%VALUE (%%REST (%%REST TREE)))))
   (CL:RETURN-FROM JAVA-TRANSLATE-CAST TREE)))

;;; (DEFUN (JAVA-TRANSLATE-RETURN-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-RETURN-TREE (TREE)
  (CL:LET*
   ((OTREE NULL) (RETURNASSIGNMENTS NIL)
    (METHODOTHERRETURNTYPES
     (REST (METHOD-RETURN-TYPE-SPECIFIERS *METHODBEINGWALKED*)))
    (RETURNEXPRESSION NULL) (TRANSLATEDRETURNEXPRESSION NIL)
    (MVRETURNPARAMETERTRANSLATION NIL))
   (CL:LET*
    ((EXP NULL) (ITER-000 (%%REST (%%REST TREE)))
     (PARAMETERINDEX NULL-INTEGER) (ITER-001 0) (PARAMETERTYPE NULL)
     (ITER-002 METHODOTHERRETURNTYPES))
    (CL:DECLARE (CL:TYPE CL:FIXNUM PARAMETERINDEX ITER-001))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
      (CL:NOT (CL:EQ ITER-002 NIL)))
     DO (CL:SETQ EXP (%%VALUE ITER-000))
     (CL:SETQ PARAMETERINDEX ITER-001)
     (CL:SETQ PARAMETERTYPE (%%VALUE ITER-002))
     (CL:IF
      (SUBTYPE-OF? (TYPE-SPEC-TO-BASE-TYPE PARAMETERTYPE)
       SGT-JAVA-TRANSLATE-STELLA-LITERAL)
      (CL:SETQ MVRETURNPARAMETERTRANSLATION
       (JAVA-TRANSLATE-A-TREE
        (LIST* SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION
         (LOOKUP-LITERAL-TYPE-INFO
          (TYPE-SPEC-TO-BASE-TYPE PARAMETERTYPE)
          KWD-JAVA-TRANSLATE-WRAP-FUNCTION)
         (CONS EXP NIL))))
      (CL:SETQ MVRETURNPARAMETERTRANSLATION
       (JAVA-TRANSLATE-A-TREE EXP)))
     (CL:SETQ RETURNASSIGNMENTS
      (CONS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_AREF
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
          (WRAP-STRING "MV_returnarray") NIL)
         (WRAP-INTEGER PARAMETERINDEX) NIL)
        MVRETURNPARAMETERTRANSLATION NIL)
       RETURNASSIGNMENTS))
     (CL:SETQ ITER-000 (%%REST ITER-000))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))
     (CL:SETQ ITER-002 (%%REST ITER-002))))
   (CL:SETQ RETURNASSIGNMENTS (REVERSE RETURNASSIGNMENTS))
   (CL:SETQ RETURNEXPRESSION (%%VALUE (%%REST TREE)))
   (CL:IF
    (CL:AND (CL:> (LENGTH METHODOTHERRETURNTYPES) 0)
     (CL:EQ (%%REST (%%REST TREE)) NIL) (CONS? RETURNEXPRESSION)
     (CL:NOT (CL:EQ (%%VALUE RETURNEXPRESSION) NULL))
     (CL:OR
      (CL:EQ (%%VALUE RETURNEXPRESSION)
       SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
      (CL:EQ (%%VALUE RETURNEXPRESSION)
       SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD)))
    (CL:SETQ TRANSLATEDRETURNEXPRESSION
     (JAVA-TRANSLATE-MV-FUNCTION-CALL RETURNEXPRESSION
      |SYM-JAVA-TRANSLATE-STELLA-MV_returnarray|))
    (CL:SETQ TRANSLATEDRETURNEXPRESSION
     (JAVA-TRANSLATE-A-TREE RETURNEXPRESSION)))
   (CL:IF (CL:EQ RETURNASSIGNMENTS NIL)
    (CL:IF (CL:EQ (%%REST TREE) NIL)
     (CL:SETQ OTREE (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_RETURN NIL))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_RETURN
       TRANSLATEDRETURNEXPRESSION NIL)))
    (CL:LET* ((TEMPVARNAME "_return_temp"))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TEMPVARNAME))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK
       (CONS
        (CONS
         (JAVA-TRANSLATE-TYPE-SPEC
          (COMPUTE-RETURN-TYPE-SPEC *METHODBEINGWALKED*
           (%METHOD-SLOT.SLOT-OWNER *METHODBEINGWALKED*)))
         (LIST*
          (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
           (WRAP-STRING TEMPVARNAME) NIL)
          TRANSLATEDRETURNEXPRESSION NIL))
        NIL)
       (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
        (CONCATENATE RETURNASSIGNMENTS
         (CONS
          (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_RETURN
           (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
            (WRAP-STRING TEMPVARNAME) NIL)
           NIL)
          NIL)))
       NIL))))
   (CL:RETURN-FROM JAVA-TRANSLATE-RETURN-TREE OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-BREAK CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-BREAK (TREE)
  (CL:WHEN (CL:EQ *JAVA-LOOP-NAME* NULL)
   (%BREAK-PROGRAM "No loop name in (BREAK)"))
  (CL:SETQ *JAVA-LOOP-NAME-USED?* CL:T)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_BREAK)
  (CL:SETF (%%REST TREE)
   (CONS (JAVA-TRANSLATE-A-TREE *JAVA-LOOP-NAME*) NIL))
  (CL:RETURN-FROM JAVA-TRANSLATE-BREAK TREE))

;;; (DEFUN (JAVA-TRANSLATE-CONTINUE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CONTINUE (TREE)
  (CL:WHEN (CL:EQ *JAVA-LOOP-NAME* NULL)
   (%BREAK-PROGRAM "No loop name in (CONTINUE)"))
  (CL:SETQ *JAVA-LOOP-NAME-USED?* CL:T)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_CONTINUE)
  (CL:SETF (%%REST TREE)
   (CONS (JAVA-TRANSLATE-A-TREE *JAVA-LOOP-NAME*) NIL))
  (CL:RETURN-FROM JAVA-TRANSLATE-CONTINUE TREE))

;;; (DEFUN (JAVA-TRANSLATE-IF-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-IF-TREE (TREE)
  (CL:LET*
   ((TEST (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (TRUEBODY (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))))
    (FALSEBODY
     (JAVA-TRANSLATE-A-TREE
      (%%VALUE (%%REST (%%REST (%%REST TREE)))))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:IF
    (CL:AND (CONS? (%%VALUE TRUEBODY))
     (CL:NOT (CL:EQ (%%REST TRUEBODY) NIL)))
    (CL:SETQ TRUEBODY
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
      (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
       (CONCATENATE TRUEBODY NIL))
      NIL))
    (CL:SETQ TRUEBODY
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS TRUEBODY NIL)
      NIL)))
   (CL:IF
    (CL:AND (CONS? (%%VALUE FALSEBODY))
     (CL:NOT (CL:EQ (%%REST FALSEBODY) NIL)))
    (CL:SETQ FALSEBODY
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
      (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
       (CONCATENATE FALSEBODY NIL))
      NIL))
    (CL:SETQ FALSEBODY
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS FALSEBODY NIL)
      NIL)))
   (CL:RETURN-FROM JAVA-TRANSLATE-IF-TREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IF TEST
     (CONS TRUEBODY (CONS FALSEBODY NIL))))))

;;; (DEFUN (JAVA-SYMBOL-CASE? BOOLEAN) ...)

(CL:DEFUN JAVA-SYMBOL-CASE? (KEYFORM)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE KEYFORM) SGT-JAVA-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:RETURN-FROM JAVA-SYMBOL-CASE?
      (CL:AND
       (CL:EQ (%%VALUE KEYFORM)
        SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE)
       (CL:EQ (%%VALUE (%%REST (%%REST KEYFORM)))
        SYM-JAVA-TRANSLATE-STELLA-SYMBOL-ID)))))
   (CL:T (CL:RETURN-FROM JAVA-SYMBOL-CASE? CL:NIL))))

;;; (DEFUN (JAVA-YIELD-SYMBOL-ID-FORM CONS) ...)

(CL:DEFUN JAVA-YIELD-SYMBOL-ID-FORM (SYMBOLID)
  (CL:DECLARE (CL:TYPE CL:FIXNUM SYMBOLID))
  #+MCL
  (CL:CHECK-TYPE SYMBOLID CL:FIXNUM)
  (CL:LET* ((SYMBOL (GET-SYM SYMBOLID)))
   (CL:RETURN-FROM JAVA-YIELD-SYMBOL-ID-FORM
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
     (JAVA-TRANSLATE-SYMBOL-ID SYMBOL) NIL))))

;;; (DEFUN (JAVA-TRANSLATE-CONDITION CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CONDITION (CONDITION SYMBOLCASEP)
  (CL:LET*
   ((TRANSLATEDACTIONS
     (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
      (CONCATENATE (JAVA-TRANSLATE-LIST-OF-TREES (%%REST CONDITION))
       NIL)))
    (KEYS (%%VALUE CONDITION)) (TRANSLATEDKEYS NULL)
    (TRANSLATEDKEYSLIST NIL))
   (CL:IF SYMBOLCASEP
    (CL:IF (CONS? KEYS)
     (CL:PROGN
      (CL:LET* ((KEY NULL) (ITER-000 KEYS) (COLLECT-000 NULL))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
        (CL:SETQ KEY (%%VALUE ITER-000))
        (CL:IF (CL:EQ COLLECT-000 NULL)
         (CL:PROGN
          (CL:SETQ COLLECT-000
           (CONS
            (JAVA-YIELD-SYMBOL-ID-FORM
             (%INTEGER-WRAPPER.WRAPPER-VALUE KEY))
            NIL))
          (CL:IF (CL:EQ TRANSLATEDKEYSLIST NIL)
           (CL:SETQ TRANSLATEDKEYSLIST COLLECT-000)
           (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDKEYSLIST
            COLLECT-000)))
         (CL:PROGN
          (CL:SETF (%%REST COLLECT-000)
           (CONS
            (JAVA-YIELD-SYMBOL-ID-FORM
             (%INTEGER-WRAPPER.WRAPPER-VALUE KEY))
            NIL))
          (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
        (CL:SETQ ITER-000 (%%REST ITER-000))))
      (CL:SETQ TRANSLATEDKEYS TRANSLATEDKEYSLIST))
     (CL:SETQ TRANSLATEDKEYS
      (JAVA-YIELD-SYMBOL-ID-FORM
       (%INTEGER-WRAPPER.WRAPPER-VALUE KEYS))))
    (CL:SETQ TRANSLATEDKEYS
     (CL:IF (CONS? KEYS) (JAVA-TRANSLATE-LIST-OF-TREES KEYS)
      (JAVA-TRANSLATE-A-TREE KEYS))))
   (CL:RETURN-FROM JAVA-TRANSLATE-CONDITION
    (CONS TRANSLATEDKEYS (CONS TRANSLATEDACTIONS NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-CASE-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CASE-TREE (TREE)
  (CL:LET*
   ((OTHERWISECONDITION NULL) (CONDITIONS NIL) (KEYFORM NULL)
    (SYMBOLCASEP CL:NIL))
   (CL:SETQ SYMBOLCASEP (JAVA-SYMBOL-CASE? (%%VALUE (%%REST TREE))))
   (CL:SETQ KEYFORM (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
   (CL:LET* ((CONDITION NULL) (ITER-000 (%%REST (%%REST TREE))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ CONDITION (%%VALUE ITER-000))
     (CL:COND
      ((CL:EQ (SAFE-PRIMARY-TYPE CONDITION)
        SGT-JAVA-TRANSLATE-STELLA-CONS)
       (CL:PROGN
        (CL:IF
         (CL:EQ (%%VALUE CONDITION)
          SYM-JAVA-TRANSLATE-STELLA-OTHERWISE)
         (CL:SETQ OTHERWISECONDITION
          (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
           (CONCATENATE
            (JAVA-TRANSLATE-LIST-OF-TREES (%%REST CONDITION)) NIL)))
         (CL:SETQ CONDITIONS
          (CONS (JAVA-TRANSLATE-CONDITION CONDITION SYMBOLCASEP)
           CONDITIONS)))))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM
         (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
         (SAFE-PRIMARY-TYPE CONDITION) "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM JAVA-TRANSLATE-CASE-TREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_CASE KEYFORM
     (CONS OTHERWISECONDITION (CONS (REVERSE CONDITIONS) NIL))))))

;;; (DEFUN (JAVA-TRANSLATE-COND-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-COND-TREE (TREE)
  (CL:LET* ((OTHERWISECONDITION NULL) (CONDITIONS NIL))
   (CL:LET* ((CONDITION NULL) (ITER-000 (%%REST TREE)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ CONDITION (%%VALUE ITER-000))
     (CL:COND
      ((CL:EQ (SAFE-PRIMARY-TYPE CONDITION)
        SGT-JAVA-TRANSLATE-STELLA-CONS)
       (CL:PROGN
        (CL:IF
         (CL:EQ (%%VALUE CONDITION)
          SYM-JAVA-TRANSLATE-STELLA-OTHERWISE)
         (CL:SETQ OTHERWISECONDITION
          (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
           (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
            (CONCATENATE
             (JAVA-TRANSLATE-LIST-OF-TREES (%%REST CONDITION)) NIL))
           NIL))
         (CL:SETQ CONDITIONS
          (CONS
           (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE CONDITION))
            (CONS
             (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
              (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
               (CONCATENATE
                (JAVA-TRANSLATE-LIST-OF-TREES (%%REST CONDITION)) NIL))
              NIL)
             NIL))
           CONDITIONS)))))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM
         (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
         (SAFE-PRIMARY-TYPE CONDITION) "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:RETURN-FROM JAVA-TRANSLATE-COND-TREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_COND OTHERWISECONDITION
     (CONS (REVERSE CONDITIONS) NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-WHILE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-WHILE (TREE)
  (CL:LET*
   ((*JAVA-LOOP-NAME* (LOCAL-GENSYM "LOOP"))
    (*JAVA-LOOP-NAME-USED?* CL:NIL))
   (CL:DECLARE (CL:SPECIAL *JAVA-LOOP-NAME* *JAVA-LOOP-NAME-USED?*))
   (CL:LET*
    ((TEST (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
     (BODY (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))))
    (CL:SETF (%%REST (%%REST TREE)) NIL)
    (CL:IF *JAVA-LOOP-NAME-USED?*
     (CL:RETURN-FROM JAVA-TRANSLATE-WHILE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_NAMED_STATEMENT
       (JAVA-TRANSLATE-A-TREE *JAVA-LOOP-NAME*)
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_WHILE TEST
         (CONS
          (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
           (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
            (CONCATENATE BODY NIL))
           NIL)
          NIL))
        NIL)))
     (CL:RETURN-FROM JAVA-TRANSLATE-WHILE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_WHILE TEST
       (CONS
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
         (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
          (CONCATENATE BODY NIL))
         NIL)
        NIL)))))))

;;; (DEFUN (JAVA-TRANSLATE-CHOOSE-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CHOOSE-TREE (TREE)
  (CL:LET*
   ((TEST (%%VALUE (%%REST TREE)))
    (TRUEBODY (%%VALUE (%%REST (%%REST TREE))))
    (FALSEBODY (%%VALUE (%%REST (%%REST (%%REST TREE))))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM JAVA-TRANSLATE-CHOOSE-TREE
    (JAVA-TRANSLATE-OPERATOR-CALL
     (CONS (WRAP-STRING "?") (CONS (WRAP-STRING ":") NIL))
     (CONS TEST (CONS TRUEBODY (CONS FALSEBODY NIL))) 3))))

;;; (DEFUN (JAVA-TRANSLATE-WHEN-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-WHEN-TREE (TREE)
  (CL:LET*
   ((TEST (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (BODY (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM JAVA-TRANSLATE-WHEN-TREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_WHEN TEST
     (CONS
      (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
       (CONCATENATE BODY NIL))
      NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-UNLESS-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-UNLESS-TREE (TREE)
  (CL:LET*
   ((TEST (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE))))
    (BODY (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST TREE)))))
   (CL:SETF (%%REST (%%REST TREE)) NIL)
   (CL:RETURN-FROM JAVA-TRANSLATE-UNLESS-TREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_UNLESS TEST
     (CONS
      (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
       (CONCATENATE BODY NIL))
      NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-MAKE-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-MAKE-TREE (TREE)
  (CL:LET*
   ((CLASS (GET-STELLA-CLASS (%%VALUE (%%REST TREE)) CL:T))
    (CLASSNAME
     (CL:IF
      (CL:NOT
       (CL:EQ
        (%STRING-WRAPPER.WRAPPER-VALUE
         (DYNAMIC-SLOT-VALUE (%CLASS.DYNAMIC-SLOTS CLASS)
          SYM-JAVA-TRANSLATE-STELLA-CLASS-JAVA-NATIVE-TYPE
          NULL-STRING-WRAPPER))
        STELLA::NULL-STRING))
      (WRAP-STRING (JAVA-NATIVE-TYPE CLASS))
      (JAVA-TRANSLATE-CLASS-NAME (%%VALUE (%%REST TREE)))))
    (OTREE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT CLASSNAME NIL)
      (JAVA-TRANSLATE-ACTUAL-PARAMETERS (%%REST (%%REST TREE))) NIL)))
   (CL:RETURN-FROM JAVA-TRANSLATE-MAKE-TREE OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-SYS-NEW CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-SYS-NEW (TREE)
  (CL:LET* ((TYPESPEC (%%VALUE (%%REST TREE))))
   (CL:IF (ARRAY-TYPE-SPECIFIER? TYPESPEC)
    (CL:RETURN-FROM JAVA-TRANSLATE-SYS-NEW
     (JAVA-TRANSLATE-NEW-ARRAY TREE))
    (CL:RETURN-FROM JAVA-TRANSLATE-SYS-NEW
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION TYPESPEC) NIL)
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (JAVA-TRANSLATE-NAME
        (YIELD-CONSTRUCTOR-NAME (TYPE-SPEC-TO-CLASS TYPESPEC)))
       NIL)
      (JAVA-TRANSLATE-ACTUAL-PARAMETERS (%%REST (%%REST TREE))) NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-NEW-ARRAY CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-NEW-ARRAY (TREE)
  (CL:LET*
   ((ARRAYTYPE (%%VALUE (%%REST TREE)))
    (INITIALELEMENT (%%VALUE (%%REST (%%REST TREE))))
    (DIMENSIONS
     (JAVA-TRANSLATE-LIST-OF-TREES (%%REST (%%REST (%%REST TREE)))))
    (ELEMENTTYPE
     (EXTRACT-PARAMETER-TYPE ARRAYTYPE
      SYM-JAVA-TRANSLATE-STELLA-ANY-VALUE)))
   (CL:SETQ INITIALELEMENT INITIALELEMENT)
   (CL:RETURN-FROM JAVA-TRANSLATE-NEW-ARRAY
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE_ARRAY
     (JAVA-TRANSLATE-TYPE-SPEC ELEMENTTYPE)
     (CONCATENATE DIMENSIONS NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-MV-SETQ CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-MV-SETQ (TREE)
  (CL:LET*
   ((VARIABLES (%%VALUE (%%REST TREE)))
    (FUNCTIONCALL (%%VALUE (%%REST (%%REST TREE)))) (MVASSIGNMENTS NIL)
    (OTREE NULL) (OTHERRETURNTYPES NIL) (MVRETURNEDVALUE NIL))
   (CL:IF
    (CL:EQ (%%VALUE FUNCTIONCALL)
     SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION)
    (CL:SETQ OTHERRETURNTYPES
     (REST
      (METHOD-RETURN-TYPE-SPECIFIERS
       (LOOKUP-FUNCTION (%%VALUE (%%REST FUNCTIONCALL))))))
    (CL:SETQ OTHERRETURNTYPES
     (REST
      (METHOD-RETURN-TYPE-SPECIFIERS
       (LOOKUP-SLOT
        (%SURROGATE.SURROGATE-VALUE (%%VALUE (%%REST FUNCTIONCALL)))
        (%%VALUE (%%REST (%%REST FUNCTIONCALL))))))))
   (CL:LET*
    ((VARIABLE NULL) (ITER-000 (%%REST VARIABLES))
     (CURRENTINDEX NULL-INTEGER) (ITER-001 0) (RETURNTYPE NULL)
     (ITER-002 OTHERRETURNTYPES))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CURRENTINDEX ITER-001))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
      (CL:NOT (CL:EQ ITER-002 NIL)))
     DO (CL:SETQ VARIABLE (%%VALUE ITER-000))
     (CL:SETQ CURRENTINDEX ITER-001)
     (CL:SETQ RETURNTYPE (%%VALUE ITER-002))
     (CL:SETQ MVRETURNEDVALUE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_AREF
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
        (WRAP-STRING "caller_MV_returnarray") NIL)
       (WRAP-INTEGER CURRENTINDEX) NIL))
     (CL:WHEN
      (SUBTYPE-OF? (TYPE-SPEC-TO-BASE-TYPE RETURNTYPE)
       SGT-JAVA-TRANSLATE-STELLA-LITERAL)
      (CL:SETQ MVRETURNEDVALUE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST MVRETURNEDVALUE
         (CONS
          (JAVA-TRANSLATE-TYPE-SPEC
           (YIELD-TYPE-SPECIFIER
            (TYPE-TO-WRAPPED-TYPE
             (TYPE-SPEC-TO-BASE-TYPE RETURNTYPE))))
          NIL))
        (WRAP-STRING "wrapperValue") NIL)))
     (CL:SETQ MVASSIGNMENTS
      (CONS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN
        (JAVA-TRANSLATE-A-TREE VARIABLE)
        (CONS
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST MVRETURNEDVALUE
          (CONS (JAVA-TRANSLATE-TYPE-SPEC RETURNTYPE) NIL))
         NIL))
       MVASSIGNMENTS))
     (CL:SETQ ITER-000 (%%REST ITER-000))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))
     (CL:SETQ ITER-002 (%%REST ITER-002))))
   (CL:SETQ OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK
     (CONS
      (CONS
       (JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC
        SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER CL:NIL)
       (LIST*
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "caller_MV_returnarray") NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE_ARRAY
         (JAVA-TRANSLATE-TYPE-SPEC
          SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER)
         (CONS (WRAP-INTEGER (LENGTH OTHERRETURNTYPES)) NIL))
        NIL))
      NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN
       (JAVA-TRANSLATE-A-TREE (%%VALUE VARIABLES))
       (CONS
        (JAVA-TRANSLATE-MV-FUNCTION-CALL FUNCTIONCALL
         |SYM-JAVA-TRANSLATE-STELLA-caller_MV_returnarray|)
        NIL))
      (CONCATENATE (REVERSE MVASSIGNMENTS) NIL))
     NIL))
   (CL:RETURN-FROM JAVA-TRANSLATE-MV-SETQ OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-MV-FUNCTION-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-MV-FUNCTION-CALL (FUNCTIONCALL MVVECTORNAME)
  (CL:RETURN-FROM JAVA-TRANSLATE-MV-FUNCTION-CALL
   (JAVA-TRANSLATE-A-TREE
    (CONCATENATE FUNCTIONCALL (CONS MVVECTORNAME NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-CODE-SIGNATURE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CODE-SIGNATURE (SIGNATURE)
  (CL:LET* ((TRANSLATEDRETURNTYPES NIL) (TRANSLATEDPARAMETERTYPES NIL))
   (CL:LET*
    ((RETURNTYPE NULL) (ITER-000 (%%VALUE SIGNATURE))
     (COLLECT-000 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ RETURNTYPE (%%VALUE ITER-000))
     (CL:IF (CL:EQ COLLECT-000 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-000
        (CONS (JAVA-TRANSLATE-TYPE-SPEC RETURNTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDRETURNTYPES NIL)
        (CL:SETQ TRANSLATEDRETURNTYPES COLLECT-000)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDRETURNTYPES
         COLLECT-000)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-000)
        (CONS (JAVA-TRANSLATE-TYPE-SPEC RETURNTYPE) NIL))
       (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:LET*
    ((PARAMETERTYPE NULL) (ITER-001 (%%REST SIGNATURE))
     (COLLECT-001 NULL))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ PARAMETERTYPE (%%VALUE ITER-001))
     (CL:IF (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001
        (CONS (JAVA-TRANSLATE-TYPE-SPEC PARAMETERTYPE) NIL))
       (CL:IF (CL:EQ TRANSLATEDPARAMETERTYPES NIL)
        (CL:SETQ TRANSLATEDPARAMETERTYPES COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDPARAMETERTYPES
         COLLECT-001)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-001)
        (CONS (JAVA-TRANSLATE-TYPE-SPEC PARAMETERTYPE) NIL))
       (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:RETURN-FROM JAVA-TRANSLATE-CODE-SIGNATURE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_SIGNATURE
     TRANSLATEDRETURNTYPES (CONS TRANSLATEDPARAMETERTYPES NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-WITH-NATIVE-WRAPPER CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-WITH-NATIVE-WRAPPER (TREE TYPE)
  (CL:IF (JAVA-LITERAL? TYPE)
   (CL:RETURN-FROM JAVA-TRANSLATE-WITH-NATIVE-WRAPPER
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
      (JAVA-NATIVE-LITERAL-WRAPPER-NAMES TYPE) NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
      (JAVA-TRANSLATE-A-TREE TREE) NIL)
     NIL))
   (CL:RETURN-FROM JAVA-TRANSLATE-WITH-NATIVE-WRAPPER
    (JAVA-TRANSLATE-A-TREE TREE))))

;;; (DEFUN (JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS (TREES PARAMETERTYPES)
  (CL:LET* ((CURSOR TREES) (TYPECURSOR PARAMETERTYPES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ CURSOR NIL)) DO
    (CL:SETF (%%VALUE CURSOR)
     (JAVA-TRANSLATE-WITH-NATIVE-WRAPPER (%%VALUE CURSOR)
      (%%VALUE TYPECURSOR)))
    (CL:SETQ CURSOR (%%REST CURSOR))
    (CL:SETQ TYPECURSOR (%%REST TYPECURSOR)))
   (CL:RETURN-FROM
    JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS TREES)))

;;; (DEFUN (JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION CONS) ...)

(CL:DEFUN JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION (TREE PRIMARYRETURNTYPE)
  (CL:LET* ((WRAPPERTYPE NULL) (EXTRACTORNAME NULL))
   (CL:MULTIPLE-VALUE-SETQ (WRAPPERTYPE EXTRACTORNAME)
    (JAVA-NATIVE-LITERAL-WRAPPER-NAMES PRIMARYRETURNTYPE))
   (CL:RETURN-FROM JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "") NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT EXTRACTORNAME NIL)
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST TREE
      (CONS WRAPPERTYPE NIL))
     (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NIL) NIL))))

;;; (DEFUN (JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE (TREE RETURNTYPE)
  (CL:COND
   ((JAVA-LITERAL? RETURNTYPE)
    (CL:RETURN-FROM JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE
     (JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION TREE RETURNTYPE)))
   ((CL:OR (CL:EQ RETURNTYPE SGT-JAVA-TRANSLATE-STELLA-STRING)
     (CL:EQ RETURNTYPE SGT-JAVA-TRANSLATE-STELLA-MUTABLE-STRING))
    (CL:RETURN-FROM JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST TREE
      (CONS (JAVA-TRANSLATE-TYPE-SPEC RETURNTYPE) NIL))))
   ((CL:EQ RETURNTYPE SGT-JAVA-TRANSLATE-STELLA-VOID)
    (CL:RETURN-FROM JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE TREE))
   (CL:T
    (CL:RETURN-FROM JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST TREE
      (CONS (JAVA-TRANSLATE-TYPE-SPEC RETURNTYPE) NIL))))))

;;; (DEFUN (JAVA-TRANSLATE-CALL-FUNCTION-CODE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CALL-FUNCTION-CODE (TREE)
  (CL:LET*
   ((SIGNATURE (JAVA-TRANSLATE-CODE-SIGNATURE (%%VALUE (%%REST TREE))))
    (FUNCTIONNAMEEXPR
     (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))))
    (FUNCTIONARGS (%%REST (%%REST (%%REST TREE))))
    (PRIMARYRETURNTYPE (%%VALUE (%%VALUE (%%VALUE (%%REST TREE)))))
    (OTREE NULL))
   (CL:SETQ OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCALL SIGNATURE
     (CONS FUNCTIONNAMEEXPR
      (CONS
       (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
        (CONCATENATE
         (JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS
          FUNCTIONARGS (%%REST (%%VALUE (%%REST TREE))))
         NIL))
       NIL))))
   (CL:RETURN-FROM JAVA-TRANSLATE-CALL-FUNCTION-CODE
    (JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE OTREE PRIMARYRETURNTYPE))))

;;; (DEFUN (JAVA-TRANSLATE-CALL-METHOD-CODE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CALL-METHOD-CODE (TREE)
  (CL:LET*
   ((SIGNATURE (JAVA-TRANSLATE-CODE-SIGNATURE (%%VALUE (%%REST TREE))))
    (METHODNAMEEXPR
     (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST (%%REST TREE)))))
    (PRIMARYRETURNTYPE (%%VALUE (%%VALUE (%%VALUE (%%REST TREE)))))
    (THEOBJECT (%%VALUE (%%REST (%%REST (%%REST TREE)))))
    (METHODARGS (%%REST (%%REST (%%REST (%%REST TREE))))) (OTREE NULL))
   (CL:SETQ OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CODE_CALL SIGNATURE
     (CONS METHODNAMEEXPR
      (CONS (JAVA-TRANSLATE-A-TREE THEOBJECT)
       (CONS
        (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
         (CONCATENATE
          (JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS
           METHODARGS (%%REST (%%REST (%%VALUE (%%REST TREE)))))
          NIL))
        NIL)))))
   (CL:RETURN-FROM JAVA-TRANSLATE-CALL-METHOD-CODE
    (JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE OTREE PRIMARYRETURNTYPE))))

;;; (DEFUN (JAVA-PACKAGE-PREFIX STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  JAVA-PACKAGE-PREFIX))
(CL:DEFUN JAVA-PACKAGE-PREFIX (MODULE SEPARATOR)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SEPARATOR))
  #+MCL
  (CL:CHECK-TYPE SEPARATOR CL:SIMPLE-STRING)
  (CL:LET*
   ((RESULT "")
    (SEPARATOR-CHAR
     (CL:LET ((SELF SEPARATOR) (POSITION 0))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
       (CL:THE CL:FIXNUM POSITION))))
    (PACKAGE-PREFIX (JAVA-PACKAGE MODULE)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT PACKAGE-PREFIX))
   (CL:WHEN (CL:NOT (CL:EQ PACKAGE-PREFIX STELLA::NULL-STRING))
    (CL:IF (CL:EQL SEPARATOR-CHAR #\.) (CL:SETQ RESULT PACKAGE-PREFIX)
     (CL:SETQ RESULT (SUBSTITUTE PACKAGE-PREFIX SEPARATOR-CHAR #\.)))
    (CL:RETURN-FROM JAVA-PACKAGE-PREFIX
     (CONCATENATE RESULT SEPARATOR)))
   (CL:SETQ RESULT
    (CONCATENATE
     (JAVA-TRANSLATE-NAMESTRING (STRING-DOWNCASE (NAME MODULE)))
     SEPARATOR))
   (CL:LET* ((MOD NULL) (ITER-000 (PARENT-CONTEXTS MODULE)))
    (CL:LOOP WHILE (NEXT? ITER-000) DO
     (CL:SETQ MOD (%ITERATOR.VALUE ITER-000))
     (CL:WHEN
      (CL:AND (ISA? MOD SGT-JAVA-TRANSLATE-STELLA-MODULE)
       (CL:NOT (CL:EQ MOD *ROOT-MODULE*)))
      (CL:SETQ RESULT
       (CONCATENATE (JAVA-PACKAGE-PREFIX MOD SEPARATOR) RESULT))
      (CL:RETURN))))
   (CL:WHEN (CL:EQL SEPARATOR-CHAR #\.)
    (SET-DYNAMIC-SLOT-VALUE (%MODULE.DYNAMIC-SLOTS MODULE)
     SYM-JAVA-TRANSLATE-STELLA-JAVA-PACKAGE
     (WRAP-STRING
      (SUBSEQUENCE RESULT 0
       (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH RESULT)))))
     NULL-STRING-WRAPPER))
   (CL:RETURN-FROM JAVA-PACKAGE-PREFIX RESULT)))

;;; (DEFUN (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME (TYPESPEC)
  (CL:LET*
   ((BASETYPESPEC (TYPE-SPEC-TO-BASE-TYPE TYPESPEC))
    (TRANSLATEDTYPE NULL)
    (NATIVETYPE
     (JAVA-NATIVE-TYPE (%SURROGATE.SURROGATE-VALUE BASETYPESPEC))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NATIVETYPE))
   (CL:WHEN
    (CL:EQ BASETYPESPEC SGT-JAVA-TRANSLATE-STELLA-ARGUMENT-LIST)
    (CL:SETQ BASETYPESPEC SGT-JAVA-TRANSLATE-STELLA-CONS)
    (CL:SETQ NATIVETYPE STELLA::NULL-STRING))
   (CL:WHEN (CL:NOT (CL:EQ NATIVETYPE STELLA::NULL-STRING))
    (CL:IF (CL:OR (MEMBER? NATIVETYPE #\.) (JAVA-LITERAL? TYPESPEC))
     (CL:RETURN-FROM JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
      (WRAP-STRING NATIVETYPE))
     (CL:RETURN-FROM JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
      (WRAP-STRING (CONCATENATE "java.lang." NATIVETYPE)))))
   (CL:SETQ TRANSLATEDTYPE (JAVA-TRANSLATE-TYPE-SPEC BASETYPESPEC))
   (CL:IF (MEMBER? (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE) #\.)
    (CL:RETURN-FROM JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
     TRANSLATEDTYPE)
    (CL:RETURN-FROM JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
     (WRAP-STRING
      (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE BASETYPESPEC) ".")
       (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDTYPE)))))))

;;; (DEFUN (JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES STRING-WRAPPER STRING-WRAPPER) ...)

(CL:DEFUN JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES (F)
  (CL:COND
   ((JAVA-FLOTSAM-FUNCTION? F)
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES
     (CL:VALUES
      (WRAP-STRING
       (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE F) ".")
        (JAVA-YIELD-FLOTSAM-CLASS-NAME (HOME-MODULE F))))
      (JAVA-TRANSLATE-FUNCTION-NAME F))))
   ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS F)
      SYM-JAVA-TRANSLATE-STELLA-METHOD-NATIVE? FALSE-WRAPPER))
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES
     (CL:VALUES (WRAP-STRING (JAVA-YIELD-FULL-NATIVE-CLASS-NAME))
      (JAVA-TRANSLATE-FUNCTION-NAME F))))
   ((METHOD-STARTUP-FUNCTION? F)
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES
     (CL:VALUES
      (WRAP-STRING
       (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE F) ".")
        (%STRING-WRAPPER.WRAPPER-VALUE
         (JAVA-TRANSLATE-CLASS-NAMESTRING
          (WRAP-STRING
           (%STRING-WRAPPER.WRAPPER-VALUE
            (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS F)
             SYM-JAVA-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
             NULL-STRING-WRAPPER)))))))
      (JAVA-TRANSLATE-FUNCTION-NAME F))))
   ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS F)
      SYM-JAVA-TRANSLATE-STELLA-METHOD-CONSTRUCTOR? FALSE-WRAPPER))
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES
     (CL:VALUES
      (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
       (FIRST (METHOD-RETURN-TYPE-SPECIFIERS F)))
      (JAVA-TRANSLATE-FUNCTION-NAME F))))
   (CL:T
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES
     (CL:VALUES
      (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
       (FIRST (METHOD-PARAMETER-TYPE-SPECIFIERS F)))
      (JAVA-TRANSLATE-FUNCTION-NAME F))))))

;;; (DEFUN (JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES STRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION (CL:T CL:T)
   (CL:VALUES CL:SIMPLE-STRING CL:SIMPLE-STRING))
  JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES))
(CL:DEFUN JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES (OWNER F)
  (CL:COND
   ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS F)
      SYM-JAVA-TRANSLATE-STELLA-METHOD-NATIVE? FALSE-WRAPPER))
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES
     (CL:VALUES (JAVA-YIELD-FULL-NATIVE-CLASS-NAME)
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-FUNCTION-NAME F)))))
   ((JAVA-FLOTSAM-FUNCTION? F)
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES
     (CL:VALUES
      (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE F) ".")
       (JAVA-YIELD-FLOTSAM-CLASS-NAME (HOME-MODULE F)))
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-FUNCTION-NAME F)))))
   ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS F)
      SYM-JAVA-TRANSLATE-STELLA-METHOD-CONSTRUCTOR? FALSE-WRAPPER))
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES
     (CL:VALUES
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME
        (FIRST (METHOD-RETURN-TYPE-SPECIFIERS F))))
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-FUNCTION-NAME F)))))
   (CL:T
    (CL:RETURN-FROM JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES
     (CL:VALUES
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME OWNER))
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-FUNCTION-NAME F)))))))

;;; (DEFUN (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP (CLASSNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CLASSNAME))
  #+MCL
  (CL:CHECK-TYPE CLASSNAME CL:SIMPLE-STRING)
  (CL:RETURN-FROM JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
     (WRAP-STRING (JAVA-YIELD-NATIVE-CLASS-NAME)) NIL)
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
     (WRAP-STRING "find_java_class") NIL)
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
     (WRAP-STRING CLASSNAME) NIL)
    NIL)))

;;; (DEFUN (JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION CONS) ...)

(CL:DEFUN JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION (TYPESPEC NDIMENSIONS)
  (CL:DECLARE (CL:TYPE CL:FIXNUM NDIMENSIONS))
  #+MCL
  (CL:CHECK-TYPE NDIMENSIONS CL:FIXNUM)
  (CL:LET*
   ((PREFIX (MAKE-STRING NDIMENSIONS #\[)) (CLASSTYPE NULL)
    (CLASSID STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX CLASSID))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPESPEC)))
    (CL:COND
     ((SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ CLASSTYPE
        (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-BASE-TYPE TYPESPEC))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ CLASSTYPE
        (%CLASS.CLASS-TYPE (%SURROGATE.SURROGATE-VALUE TYPESPEC)))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:COND
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-VOID)
     (CL:ERROR
      (NEW-STELLA-EXCEPTION "VOID is an invalid array base type.")))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-BOOLEAN)
     (CL:SETQ CLASSID "Z"))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-INTEGER)
     (CL:SETQ CLASSID "I"))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-CHARACTER)
     (CL:SETQ CLASSID "C"))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-BYTE)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-OCTET))
     (CL:SETQ CLASSID "B"))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-FLOAT)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-DOUBLE-FLOAT))
     (CL:SETQ CLASSID "D"))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-SHORT-INTEGER)
      (CL:EQ CLASSTYPE
       SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-SHORT-INTEGER))
     (CL:SETQ CLASSID "S"))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-LONG-INTEGER)
      (CL:EQ CLASSTYPE
       SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-LONG-INTEGER))
     (CL:SETQ CLASSID "J"))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-SINGLE-FLOAT)
     (CL:SETQ CLASSID "F"))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-STRING)
     (CL:SETQ CLASSID "Ljava.lang.String;"))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-MUTABLE-STRING)
     (CL:SETQ CLASSID "Ljava.lang.StringBuffer;"))
    (CL:T
     (CL:SETQ CLASSID
      (CONCATENATE "L"
       (%STRING-WRAPPER.WRAPPER-VALUE
        (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME TYPESPEC))
       ";"))))
   (CL:RETURN-FROM JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION
    (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP (CONCATENATE PREFIX CLASSID)))))

;;; (DEFUN (JAVA-YIELD-CLASS-OBJECT-EXPRESSION CONS) ...)

(CL:DEFUN JAVA-YIELD-CLASS-OBJECT-EXPRESSION (TYPESPEC)
  (CL:LET* ((OTREE NULL) (CLASSTYPE NULL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPESPEC)))
    (CL:COND
     ((SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER? TEST-VALUE-000)
      (CL:PROGN
       (CL:IF (ARRAY-TYPE-SPECIFIER? TYPESPEC)
        (CL:RETURN-FROM JAVA-YIELD-CLASS-OBJECT-EXPRESSION
         (JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION
          (EXTRACT-PARAMETER-TYPE TYPESPEC
           SYM-JAVA-TRANSLATE-STELLA-ANY-VALUE)
          (LENGTH (ARRAY-TYPE-DIMENSIONS TYPESPEC))))
        (CL:SETQ CLASSTYPE
         (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-BASE-TYPE TYPESPEC)))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ CLASSTYPE
        (%CLASS.CLASS-TYPE (%SURROGATE.SURROGATE-VALUE TYPESPEC)))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:COND
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-VOID)
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Void.TYPE") NIL)))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-BOOLEAN)
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Boolean.TYPE") NIL)))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-INTEGER)
      (CL:EQ CLASSTYPE
       SGT-JAVA-TRANSLATE-STELLA-THIRTY-TWO-BIT-VECTOR))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Integer.TYPE") NIL)))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-CHARACTER)
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Character.TYPE") NIL)))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-BYTE)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-OCTET))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Byte.TYPE") NIL)))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-FLOAT)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-DOUBLE-FLOAT))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Double.TYPE") NIL)))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-SHORT-INTEGER)
      (CL:EQ CLASSTYPE
       SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-SHORT-INTEGER))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Short.TYPE") NIL)))
    ((CL:OR (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-LONG-INTEGER)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-LONG-INTEGER)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-TICKTOCK)
      (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-NATIVE-DATE-TIME))
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Long.TYPE") NIL)))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-SINGLE-FLOAT)
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
       (WRAP-STRING "java.lang.Float.TYPE") NIL)))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-STRING)
     (CL:SETQ OTREE
      (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP "java.lang.String")))
    ((CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-MUTABLE-STRING)
     (CL:SETQ OTREE
      (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP "java.lang.StringBuffer")))
    (CL:T
     (CL:IF
      (CL:AND
       (CL:NOT
        (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-ARGUMENT-LIST))
       (CL:NOT
        (CL:EQ
         (%STRING-WRAPPER.WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE
           (%CLASS.DYNAMIC-SLOTS
            (%SURROGATE.SURROGATE-VALUE CLASSTYPE))
           SYM-JAVA-TRANSLATE-STELLA-CLASS-JAVA-NATIVE-TYPE
           NULL-STRING-WRAPPER))
         STELLA::NULL-STRING)))
      (CL:SETQ OTREE
       (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP
        (YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE
         (JAVA-NATIVE-TYPE (%SURROGATE.SURROGATE-VALUE CLASSTYPE)))))
      (CL:SETQ OTREE
       (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP
        (%STRING-WRAPPER.WRAPPER-VALUE
         (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME TYPESPEC)))))))
   (CL:RETURN-FROM JAVA-YIELD-CLASS-OBJECT-EXPRESSION OTREE)))

;;; (DEFGLOBAL *JAVA-PRIMITIVE-ARRAY-TYPE-NAMES* ...)

(CL:DEFVAR *JAVA-PRIMITIVE-ARRAY-TYPE-NAMES* NULL)

;;; (DEFUN (YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE))
(CL:DEFUN YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE (NATIVETYPE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NATIVETYPE))
  #+MCL
  (CL:CHECK-TYPE NATIVETYPE CL:SIMPLE-STRING)
  (CL:LET*
   ((BASETYPE NATIVETYPE) (PACKAGE "java.lang.") (ARRAYDIMENSIONS 0)
    (INDEX -1) (ARRAYMARKERINDEX NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BASETYPE PACKAGE)
    (CL:TYPE CL:FIXNUM ARRAYDIMENSIONS INDEX ARRAYMARKERINDEX))
   (CL:LET*
    ((CH NULL-CHARACTER) (VECTOR-000 NATIVETYPE) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000)))
     (I NULL-INTEGER) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CH
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:SETQ I ITER-000) (CL:WHEN (CL:EQL CH #\.) (CL:SETQ INDEX I))
     (CL:WHEN (CL:EQL CH #\[)
      (CL:WHEN (CL:= ARRAYMARKERINDEX NULL-INTEGER)
       (CL:SETQ ARRAYMARKERINDEX I))
      (CL:SETQ ARRAYDIMENSIONS (CL:1+ ARRAYDIMENSIONS)))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:WHEN (CL:>= INDEX 0)
    (CL:SETQ PACKAGE (SUBSEQUENCE NATIVETYPE 0 (CL:1+ INDEX))))
   (CL:SETQ BASETYPE
    (SUBSEQUENCE NATIVETYPE (CL:1+ INDEX) ARRAYMARKERINDEX))
   (CL:COND
    ((CL:NOT
      (CL:EQ
       (LOOKUP *JAVA-PRIMITIVE-ARRAY-TYPE-NAMES*
        (WRAP-STRING BASETYPE))
       NULL))
     (CL:SETQ BASETYPE
      (%STRING-WRAPPER.WRAPPER-VALUE
       (LOOKUP *JAVA-PRIMITIVE-ARRAY-TYPE-NAMES*
        (WRAP-STRING BASETYPE)))))
    ((CL:> ARRAYDIMENSIONS 0)
     (CL:SETQ BASETYPE (CONCATENATE "L" PACKAGE BASETYPE ";")))
    (CL:T (CL:SETQ BASETYPE (CONCATENATE PACKAGE BASETYPE))))
   (CL:CASE ARRAYDIMENSIONS
    (0
     (CL:RETURN-FROM YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE
      BASETYPE))
    (1
     (CL:RETURN-FROM YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE
      (CONCATENATE "[" BASETYPE)))
    (2
     (CL:RETURN-FROM YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE
      (CONCATENATE "[[" BASETYPE)))
    (CL:OTHERWISE
     (CL:RETURN-FROM YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE
      (CONCATENATE (MAKE-STRING ARRAYDIMENSIONS #\[) BASETYPE))))))

;;; (DEFUN (JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS (FN OWNER)
  (CL:LET*
   ((PARAMCLASSES NIL)
    (SKIPPARAMETER?
     (CL:AND (CL:NOT (%METHOD-SLOT.METHOD-FUNCTION? FN))
      (CL:NOT (JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE? FN)))))
   (CL:LET*
    ((TS NULL)
     (ITER-000
      (%LIST.THE-CONS-LIST (METHOD-PARAMETER-TYPE-SPECIFIERS FN))))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ TS (%%VALUE ITER-000))
     (CL:COND (SKIPPARAMETER? (CL:SETQ SKIPPARAMETER? CL:NIL))
      ((ANCHORED-TYPE-SPECIFIER? TS)
       (CL:SETQ PARAMCLASSES
        (CONS
         (JAVA-YIELD-CLASS-OBJECT-EXPRESSION
          (COMPUTE-ANCHORED-TYPE-SPEC OWNER TS))
         PARAMCLASSES)))
      (CL:T
       (CL:SETQ PARAMCLASSES
        (CONS (JAVA-YIELD-CLASS-OBJECT-EXPRESSION TS) PARAMCLASSES))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN
    (CL:NOT (CL:EQ (REST (METHOD-RETURN-TYPE-SPECIFIERS FN)) NIL))
    (CL:SETQ PARAMCLASSES
     (CONS
      (JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION
       SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER 1)
      PARAMCLASSES)))
   (CL:RETURN-FROM JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ANONYMOUS_ARRAY
     (WRAP-STRING "java.lang.Class")
     (CONCATENATE (REVERSE PARAMCLASSES) NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-THE-CODE OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-THE-CODE (TREE)
  (CL:LET* ((OTREE NULL) (FN NULL) (CLASSNAME "") (FUNCTIONNAME ""))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CLASSNAME FUNCTIONNAME))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE (%%REST TREE))))
    (CL:COND
     ((CL:EQ TEST-VALUE-000 KWD-JAVA-TRANSLATE-FUNCTION)
      (CL:SETQ FN (LOOKUP-FUNCTION (%%VALUE (%%REST (%%REST TREE)))))
      (CL:WHEN (CL:EQ FN NULL) (CL:SETQ FN (FOURTH TREE)))
      (CL:WHEN (CL:EQ FN NULL)
       (CL:WARN
        "Can't translate the-code form for function `~A'~% because it there is no corresponding function object"
        (%%VALUE (%%REST (%%REST TREE))))
       (CL:RETURN-FROM JAVA-TRANSLATE-THE-CODE (JAVA-TRANSLATE-NULL)))
      (CL:LET* ((VALUE-000 NULL) (VALUE-001 NULL))
       (CL:MULTIPLE-VALUE-SETQ (VALUE-000 VALUE-001)
        (JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES FN))
       (CL:PROGN
        (CL:SETQ CLASSNAME (%STRING-WRAPPER.WRAPPER-VALUE VALUE-000))
        (CL:SETQ FUNCTIONNAME
         (%STRING-WRAPPER.WRAPPER-VALUE VALUE-001))))
      (CL:SETQ OTREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING (JAVA-YIELD-NATIVE-CLASS-NAME)) NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "find_java_method") NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
         (WRAP-STRING CLASSNAME)
         (CONS (WRAP-STRING FUNCTIONNAME)
          (CONS
           (JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS FN
            (%METHOD-SLOT.SLOT-OWNER FN))
           NIL)))
        NIL)))
     ((CL:EQ TEST-VALUE-000 KWD-JAVA-TRANSLATE-METHOD)
      (CL:SETQ FN
       (LOOKUP-SLOT
        (%SURROGATE.SURROGATE-VALUE (%%VALUE (%%REST (%%REST TREE))))
        (FOURTH TREE)))
      (CL:WHEN (CL:EQ FN NULL)
       (CL:WARN
        "Can't translate the-code form for method `~A'~% because it there is no corresponding function object"
        (FOURTH TREE))
       (CL:RETURN-FROM JAVA-TRANSLATE-THE-CODE (JAVA-TRANSLATE-NULL)))
      (CL:MULTIPLE-VALUE-SETQ (CLASSNAME FUNCTIONNAME)
       (JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES
        (%%VALUE (%%REST (%%REST TREE))) FN))
      (CL:SETQ OTREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING (JAVA-YIELD-NATIVE-CLASS-NAME)) NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "find_java_method") NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
         (WRAP-STRING CLASSNAME)
         (CONS (WRAP-STRING FUNCTIONNAME)
          (CONS
           (JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS FN
            (%%VALUE (%%REST (%%REST TREE))))
           NIL)))
        NIL)))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM JAVA-TRANSLATE-THE-CODE OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-FUNCTION-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-FUNCTION-NAME (FUNCTION)
  (CL:LET*
   ((FUNCTIONNAME
     (YIELD-RENAMED-NAME-IF-NATIVE (%METHOD-SLOT.SLOT-NAME FUNCTION)
      KWD-JAVA-TRANSLATE-JAVA KWD-JAVA-TRANSLATE-FUNCTION))
    (TRANSLATEDNAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:WHEN (JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? FUNCTION)
    (CL:SETQ FUNCTIONNAME
     (JAVA-CREATE-OVERLOADED-FUNCTION-NAME FUNCTIONNAME
      (%METHOD-SLOT.SLOT-OWNER FUNCTION))))
   (CL:SETQ TRANSLATEDNAME
    (%STRING-WRAPPER.WRAPPER-VALUE (JAVA-TRANSLATE-NAME FUNCTIONNAME)))
   (CL:WHEN (%METHOD-SLOT.METHOD-SETTER? FUNCTION)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_setter")))
   (CL:WHEN (SLOT-READER? FUNCTION)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_reader")))
   (CL:RETURN-FROM JAVA-TRANSLATE-FUNCTION-NAME
    (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (JAVA-TRANSLATE-IGNORE-TREE OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-IGNORE-TREE (TREE)
  (CL:SETQ TREE TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-IGNORE-TREE (JAVA-TRANSLATE-NULL)))

;;; (DEFUN (JAVA-STREAM-IS-STANDARD-OUTPUT? BOOLEAN) ...)

(CL:DEFUN JAVA-STREAM-IS-STANDARD-OUTPUT? (TREE)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-JAVA-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:RETURN-FROM JAVA-STREAM-IS-STANDARD-OUTPUT?
      (EQUAL-CONS-TREES? TREE
       (GET-QUOTED-TREE
        "((SYS-SLOT-VALUE @OUTPUT-STREAM NATIVE-STREAM STANDARD-OUTPUT) \"/STELLA\")"
        "/STELLA")))))
   (CL:T (CL:RETURN-FROM JAVA-STREAM-IS-STANDARD-OUTPUT? CL:NIL))))

;;; (DEFUN (JAVA-TRANSLATE-PRINT-STREAM CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-PRINT-STREAM (TREE)
  (FIRST-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_PRINT_STREAM)
  (CL:COND
   ((SUBTYPE-OF-KEYWORD? (SAFE-PRIMARY-TYPE (%%VALUE (%%REST TREE))))
    (CL:LET* ((TEST-VALUE-000 (%%VALUE (%%REST TREE))))
     (CL:COND
      ((CL:OR (CL:EQ TEST-VALUE-000 KWD-JAVA-TRANSLATE-WARN)
        (CL:EQ TEST-VALUE-000 KWD-JAVA-TRANSLATE-ERROR)
        (CL:EQ TEST-VALUE-000 KWD-JAVA-TRANSLATE-CONTINUABLE-ERROR))
       (SECOND-SETTER TREE
        SYM-JAVA-TRANSLATE-STELLA-JAVA_STANDARD_ERROR))
      (CL:T
       (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
        (%%PRINT-STREAM
         (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
         TEST-VALUE-000 "' is not a valid case option")
        (CL:ERROR
         (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))
   (CL:T
    (CL:IF
     (CL:AND (JAVA-STREAM-IS-STANDARD-OUTPUT? (%%VALUE (%%REST TREE)))
      CL:NIL)
     (SECOND-SETTER TREE SYM-JAVA-TRANSLATE-STELLA-JAVA_STANDARD_OUT)
     (SECOND-SETTER TREE
      (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST TREE)))))))
  (CL:LET*
   ((ARGS (%%REST (%%REST TREE)))
    (ARG1TYPE (WALKED-EXPRESSION-TYPE (%%VALUE ARGS)))
    (ARG2TYPE (WALKED-EXPRESSION-TYPE (%%VALUE (%%REST ARGS)))))
   (JAVA-TRANSLATE-LIST-OF-TREES ARGS)
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ (%%REST ARGS) NIL))
     (CL:NOT (CL:EQ ARG1TYPE SGT-JAVA-TRANSLATE-STELLA-STRING))
     (CL:NOT (CL:EQ ARG2TYPE SGT-JAVA-TRANSLATE-STELLA-STRING)))
    (CL:COND
     ((SUB-TYPE-SPEC-OF? ARG1TYPE SGT-JAVA-TRANSLATE-STELLA-OBJECT)
      (FIRST-SETTER ARGS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "Object") NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "toString") NIL)
        (%%VALUE ARGS)
        (CONS (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NIL) NIL))))
     ((SUB-TYPE-SPEC-OF? ARG2TYPE SGT-JAVA-TRANSLATE-STELLA-OBJECT)
      (SECOND-SETTER ARGS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "Object") NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (WRAP-STRING "toString") NIL)
        (%%VALUE (%%REST ARGS))
        (CONS (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NIL) NIL))))
     (CL:T (CL:SETF (%%REST ARGS) (CONS (%%VALUE ARGS) (%%REST ARGS)))
      (FIRST-SETTER ARGS
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_LITERAL (WRAP-STRING "")
        NIL)))))
   (CL:RETURN-FROM JAVA-TRANSLATE-PRINT-STREAM TREE)))

;;; (DEFUN (JAVA-TRANSLATE-PRINT-NATIVE-STREAM CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-PRINT-NATIVE-STREAM (TREE)
  (CL:LET* ((OTREE (JAVA-TRANSLATE-PRINT-STREAM TREE)))
   (FIRST-SETTER OTREE
    SYM-JAVA-TRANSLATE-STELLA-JAVA_PRINT_NATIVE_STREAM)
   (CL:RETURN-FROM JAVA-TRANSLATE-PRINT-NATIVE-STREAM OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-NULL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-NULL ()
  (CL:RETURN-FROM JAVA-TRANSLATE-NULL
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "null")
    NIL)))

;;; (DEFUN (JAVA-TRANSLATE-EOL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-EOL ()
  (CL:RETURN-FROM JAVA-TRANSLATE-EOL
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_EOL
    (JAVA-TRANSLATE-GLOBAL-NAME SYM-JAVA-TRANSLATE-STELLA-EOL CL:NIL)
    NIL)))

;;; (DEFMETHOD (JAVA-TRANSLATE-ATOMIC-TREE CONS) ...)

(%%DEFCONSMETHOD JAVA-TRANSLATE-ATOMIC-TREE ((TREE OBJECT))
  (CL:RETURN-FROM JAVA-TRANSLATE-ATOMIC-TREE
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_LITERAL TREE NIL)))

;;; (DEFUN (JAVA-PREPEND-GLOBAL-CLASS-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:T) CL:SIMPLE-STRING)
  JAVA-PREPEND-GLOBAL-CLASS-NAME))
(CL:DEFUN JAVA-PREPEND-GLOBAL-CLASS-NAME (NAMESTRING MODULE)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAMESTRING))
  #+MCL
  (CL:CHECK-TYPE NAMESTRING CL:SIMPLE-STRING)
  (CL:RETURN-FROM JAVA-PREPEND-GLOBAL-CLASS-NAME
   (CONCATENATE (JAVA-YIELD-FLOTSAM-CLASS-NAME MODULE) "." NAMESTRING)))

;;; (DEFUN (JAVA-TRANSLATE-GLOBAL-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-GLOBAL-NAME (NAMESYMBOL DEFINITION?)
  (CL:WHEN (CL:EQ NAMESYMBOL NULL)
   (CL:RETURN-FROM JAVA-TRANSLATE-GLOBAL-NAME (WRAP-STRING "NULL")))
  (CL:WHEN (CL:NOT DEFINITION?)
   (CL:WHEN (CL:EQ NAMESYMBOL SYM-JAVA-TRANSLATE-STELLA-TRUE)
    (CL:RETURN-FROM JAVA-TRANSLATE-GLOBAL-NAME
     *JAVA-TRUE-STRING-WRAPPER*))
   (CL:WHEN (CL:EQ NAMESYMBOL SYM-JAVA-TRANSLATE-STELLA-FALSE)
    (CL:RETURN-FROM JAVA-TRANSLATE-GLOBAL-NAME
     *JAVA-FALSE-STRING-WRAPPER*)))
  (CL:LET*
   ((RAWNAME
     (JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS
      (JAVA-CHANGE-CASE NAMESYMBOL KWD-JAVA-TRANSLATE-UPPERCASE)
      KWD-JAVA-TRANSLATE-UPPERCASE))
    (MODULE (HOME-MODULE NAMESYMBOL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RAWNAME))
   (CL:COND
    (DEFINITION?
     (CL:RETURN-FROM JAVA-TRANSLATE-GLOBAL-NAME (WRAP-STRING RAWNAME)))
    ((OMIT-JAVA-PACKAGE-PREFIX? MODULE
      (JAVA-YIELD-FLOTSAM-TYPE-NAME
       (JAVA-YIELD-FLOTSAM-CLASS-NAME MODULE)))
     (CL:RETURN-FROM JAVA-TRANSLATE-GLOBAL-NAME
      (WRAP-STRING (JAVA-PREPEND-GLOBAL-CLASS-NAME RAWNAME MODULE))))
    (CL:T
     (CL:RETURN-FROM JAVA-TRANSLATE-GLOBAL-NAME
      (WRAP-STRING
       (CONCATENATE (JAVA-PACKAGE-PREFIX MODULE ".")
        (JAVA-PREPEND-GLOBAL-CLASS-NAME RAWNAME MODULE))))))))

;;; (DEFUN (JAVA-TRANSLATE-GENERAL-SYMBOL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-GENERAL-SYMBOL (TREE)
  (CL:LET*
   ((GLOBALVAR (LOOKUP-GLOBAL-VARIABLE (SOFT-PERMANENTIFY TREE))))
   (CL:COND
    ((CL:EQ GLOBALVAR NULL)
     (CL:RETURN-FROM JAVA-TRANSLATE-GENERAL-SYMBOL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (JAVA-TRANSLATE-NAME TREE) NIL)))
    ((%GLOBAL-VARIABLE.VARIABLE-SPECIAL? GLOBALVAR)
     (CL:RETURN-FROM JAVA-TRANSLATE-GENERAL-SYMBOL
      (JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "")
         NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "get")
         NIL)
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
         (JAVA-TRANSLATE-GLOBAL-NAME TREE CL:NIL) NIL)
        (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS NIL) NIL)
       (GLOBAL-VARIABLE-TYPE-SPEC GLOBALVAR))))
    (CL:T
     (CL:RETURN-FROM JAVA-TRANSLATE-GENERAL-SYMBOL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (JAVA-TRANSLATE-GLOBAL-NAME TREE CL:NIL) NIL))))))

;;; (DEFMETHOD (JAVA-TRANSLATE-ATOMIC-TREE CONS) ...)

(CL:DEFMETHOD JAVA-TRANSLATE-ATOMIC-TREE ((TREE SYMBOL))
  (CL:COND
   ((CL:EQ TREE SYM-JAVA-TRANSLATE-STELLA-NULL)
    (CL:RETURN-FROM JAVA-TRANSLATE-ATOMIC-TREE (JAVA-TRANSLATE-NULL)))
   ((CL:EQ TREE SYM-JAVA-TRANSLATE-STELLA-EOL)
    (CL:RETURN-FROM JAVA-TRANSLATE-ATOMIC-TREE (JAVA-TRANSLATE-EOL)))
   (CL:T
    (CL:RETURN-FROM JAVA-TRANSLATE-ATOMIC-TREE
     (JAVA-TRANSLATE-GENERAL-SYMBOL TREE)))))

;;; (DEFUN (JAVA-TRANSLATE-METHOD-PARAMETER OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-METHOD-PARAMETER (NAME TYPE METHOD)
  (CL:SETQ TYPE
   (COMPUTE-RELATIVE-TYPE-SPEC TYPE (%METHOD-SLOT.SLOT-OWNER METHOD)))
  (CL:WHEN
   (CL:AND
    (%BOOLEAN-WRAPPER.WRAPPER-VALUE
     (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
      SYM-JAVA-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
      FALSE-WRAPPER))
    (CL:EQ (VARIABLE-ARGUMENTS-NAME METHOD) NAME)
    (CL:OR (PASS-VARIABLE-ARGUMENTS-AS-LIST? METHOD)
     (STRING-CONCATENATE-METHOD? METHOD)))
   (CL:SETQ TYPE (YIELD-LISTIFIED-VARIABLE-ARGUMENTS-TYPE METHOD)))
  (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-PARAMETER
   (CONS (JAVA-TRANSLATE-TYPE-SPEC TYPE)
    (CONS (JAVA-TRANSLATE-NAME NAME) NIL))))

;;; (DEFUN (JAVA-TRANSLATE-RETURN-PARAMETER CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-RETURN-PARAMETER ()
  (CL:RETURN-FROM JAVA-TRANSLATE-RETURN-PARAMETER
   (LIST* (WRAP-STRING "Object []") (WRAP-STRING "MV_returnarray") NIL)))

;;; (DEFUN (JAVA-TRANSLATE-METHOD-PARAMETERS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-METHOD-PARAMETERS (METHOD)
  (CL:LET*
   ((SKIPFIRSTPARAMETER?
     (CL:NOT (JAVA-METHOD-OBJECT-IS-FUNCTION? METHOD)))
    (TRANSLATEDPARAMETERS NIL))
   (CL:LET*
    ((PNAME NULL)
     (ITER-000 (%LIST.THE-CONS-LIST (METHOD-PARAMETER-NAMES METHOD)))
     (PTYPE NULL)
     (ITER-001
      (%LIST.THE-CONS-LIST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD)))
     (I NULL-INTEGER) (ITER-002 1) (COLLECT-000 NULL))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-002))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
      (CL:NOT (CL:EQ ITER-001 NIL)))
     DO (CL:SETQ PNAME (%%VALUE ITER-000))
     (CL:SETQ PTYPE (%%VALUE ITER-001)) (CL:SETQ I ITER-002)
     (CL:WHEN (CL:OR (CL:NOT SKIPFIRSTPARAMETER?) (CL:> I 1))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000
         (CONS (JAVA-TRANSLATE-METHOD-PARAMETER PNAME PTYPE METHOD)
          NIL))
        (CL:IF (CL:EQ TRANSLATEDPARAMETERS NIL)
         (CL:SETQ TRANSLATEDPARAMETERS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST TRANSLATEDPARAMETERS
          COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS (JAVA-TRANSLATE-METHOD-PARAMETER PNAME PTYPE METHOD)
          NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000)))))
     (CL:SETQ ITER-000 (%%REST ITER-000))
     (CL:SETQ ITER-001 (%%REST ITER-001))
     (CL:SETQ ITER-002 (CL:1+ ITER-002))))
   (CL:WHEN
    (CL:NOT (CL:EQ (REST (METHOD-RETURN-TYPE-SPECIFIERS METHOD)) NIL))
    (CL:SETQ TRANSLATEDPARAMETERS
     (CONCATENATE TRANSLATEDPARAMETERS
      (CONS (JAVA-TRANSLATE-RETURN-PARAMETER) NIL))))
   (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-PARAMETERS
    TRANSLATEDPARAMETERS)))

;;; (DEFUN (ZERO-ARGUMENT-FUNCTION? BOOLEAN) ...)

(CL:DEFUN ZERO-ARGUMENT-FUNCTION? (METHOD)
  (CL:RETURN-FROM ZERO-ARGUMENT-FUNCTION?
   (CL:AND (%METHOD-SLOT.METHOD-FUNCTION? METHOD)
    (EMPTY? (METHOD-PARAMETER-NAMES METHOD)))))

;;; (DEFUN (JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE? BOOLEAN) ...)

(CL:DEFUN JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE? (METHOD)
  (CL:LET*
   ((FIRSTPARAMETERTYPE
     (FIRST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD))))
   (CL:RETURN-FROM JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE?
    (CL:AND (CL:NOT (CL:EQ FIRSTPARAMETERTYPE NULL))
     (CL:NOT
      (CL:EQ
       (%STRING-WRAPPER.WRAPPER-VALUE
        (DYNAMIC-SLOT-VALUE
         (%CLASS.DYNAMIC-SLOTS (TYPE-SPEC-TO-CLASS FIRSTPARAMETERTYPE))
         SYM-JAVA-TRANSLATE-STELLA-CLASS-JAVA-NATIVE-TYPE
         NULL-STRING-WRAPPER))
       STELLA::NULL-STRING))))))

;;; (DEFUN (JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? BOOLEAN) ...)

(CL:DEFUN JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? (METHOD)
  (CL:RETURN-FROM JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?
   (CL:AND (CL:NOT (%METHOD-SLOT.METHOD-FUNCTION? METHOD))
    (JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE? METHOD)
    (CL:OR
     (CL:NOT
      (%BOOLEAN-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS METHOD)
        SYM-JAVA-TRANSLATE-STELLA-METHOD-NATIVE? FALSE-WRAPPER)))
     (SUBTYPE-OF? (%METHOD-SLOT.SLOT-OWNER METHOD)
      SGT-JAVA-TRANSLATE-STELLA-LITERAL)))))

;;; (DEFUN (JAVA-METHOD-OBJECT-IS-FUNCTION? BOOLEAN) ...)

(CL:DEFUN JAVA-METHOD-OBJECT-IS-FUNCTION? (METHOD)
  (CL:RETURN-FROM JAVA-METHOD-OBJECT-IS-FUNCTION?
   (CL:OR (%METHOD-SLOT.METHOD-FUNCTION? METHOD)
    (JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? METHOD))))

;;; (DEFUN (JAVA-FUNCTION-IN-DIFFERENT-MODULE? BOOLEAN) ...)

(CL:DEFUN JAVA-FUNCTION-IN-DIFFERENT-MODULE? (METHOD)
  (CL:LET*
   ((FIRSTPARAMETERTYPE
     (FIRST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD))))
   (CL:IF
    (CL:OR (CL:EQ FIRSTPARAMETERTYPE NULL)
     (CL:EQ (HOME-MODULE METHOD)
      (HOME-MODULE (TYPE-SPEC-TO-CLASS FIRSTPARAMETERTYPE))))
    (CL:RETURN-FROM JAVA-FUNCTION-IN-DIFFERENT-MODULE? CL:NIL)
    (CL:PROGN
     (CL:WHEN (CL:NOT (JAVA-METHOD-OBJECT-IS-FUNCTION? METHOD))
      (CL:WARN
       "Method `~A' being defined on type `~A', but they are not in the same module!"
       METHOD FIRSTPARAMETERTYPE))
     (CL:RETURN-FROM JAVA-FUNCTION-IN-DIFFERENT-MODULE? CL:T)))))

;;; (DEFUN (JAVA-CREATE-OVERLOADED-FUNCTION-NAME SYMBOL) ...)

(CL:DEFUN JAVA-CREATE-OVERLOADED-FUNCTION-NAME (FUNCTIONNAME CLASSTYPE)
  (CL:RETURN-FROM JAVA-CREATE-OVERLOADED-FUNCTION-NAME
   (INTERN-SYMBOL-IN-MODULE
    (CONCATENATE (%SURROGATE.SYMBOL-NAME CLASSTYPE) "_"
     (%SYMBOL.SYMBOL-NAME FUNCTIONNAME))
    (OVERLOADED-FUNCTION-NAME-MODULE FUNCTIONNAME CLASSTYPE) CL:T)))

;;; (DEFMETHOD (JAVA-TRANSLATE-METHOD-NAME STRING-WRAPPER) ...)

(CL:DEFMETHOD JAVA-TRANSLATE-METHOD-NAME ((METHOD METHOD-SLOT))
  (CL:LET*
   ((METHODNAME
     (YIELD-RENAMED-NAME-IF-NATIVE (%METHOD-SLOT.SLOT-NAME METHOD)
      KWD-JAVA-TRANSLATE-JAVA KWD-JAVA-TRANSLATE-FUNCTION))
    (TRANSLATEDNAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:WHEN (JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? METHOD)
    (CL:SETQ METHODNAME
     (JAVA-CREATE-OVERLOADED-FUNCTION-NAME METHODNAME
      (%METHOD-SLOT.SLOT-OWNER METHOD))))
   (CL:SETQ TRANSLATEDNAME
    (%STRING-WRAPPER.WRAPPER-VALUE (JAVA-TRANSLATE-NAME METHODNAME)))
   (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-NAME
    (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (JAVA-DELETE-QUOTED-NULL-STATEMENTS CONS) ...)

(CL:DEFUN JAVA-DELETE-QUOTED-NULL-STATEMENTS (TREES)
  (CL:RETURN-FROM JAVA-DELETE-QUOTED-NULL-STATEMENTS
   (REMOVE TREES SYM-JAVA-TRANSLATE-STELLA-NULL)))

;;; (DEFUN (JAVA-WRAP-METHOD-BODY-WITH-VARARG-DECLARATIONS CONS) ...)

(CL:DEFUN JAVA-WRAP-METHOD-BODY-WITH-VARARG-DECLARATIONS (METHODBODY)
  (CL:RETURN-FROM JAVA-WRAP-METHOD-BODY-WITH-VARARG-DECLARATIONS
   (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK (REVERSE *VARARGDECLS*)
    (CONS METHODBODY NIL))))

;;; (DEFUN (JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP CONS) ...)

(CL:DEFUN JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP (METHODBODY)
  (CL:RETURN-FROM JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP
   (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
    (CONCATENATE (REVERSE *VARARGSTATEMENTS*) (CONS METHODBODY NIL)))))

;;; (DEFUN (JAVA-TRANSLATE-VARIABLE-LENGTH-ARG-NAME STRING-WRAPPER) ...)

(CL:DEFUN JAVA-TRANSLATE-VARIABLE-LENGTH-ARG-NAME (NAMESYMBOL PARAMETERNUMBER)
  (CL:DECLARE (CL:TYPE CL:FIXNUM PARAMETERNUMBER))
  #+MCL
  (CL:CHECK-TYPE PARAMETERNUMBER CL:FIXNUM)
  (CL:LET*
   ((RETURNSYMBOL
     (INTERN-SYMBOL
      (CONCATENATE (%SYMBOL.SYMBOL-NAME NAMESYMBOL)
       (INTEGER-TO-STRING (CL:TRUNCATE PARAMETERNUMBER)))))
    (TRANSLATEDNAME (JAVA-TRANSLATE-NAME RETURNSYMBOL)))
   (CL:RETURN-FROM JAVA-TRANSLATE-VARIABLE-LENGTH-ARG-NAME
    TRANSLATEDNAME)))

;;; (DEFUN (JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS (ACTUALS UNUSED-METHOD)
  (CL:SETQ UNUSED-METHOD UNUSED-METHOD)
  (CL:RETURN-FROM JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS
   (JAVA-TRANSLATE-ACTUAL-PARAMETERS ACTUALS)))

;;; (DEFUN (JAVA-TRANSLATE-ACTUAL-PARAMETERS CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-ACTUAL-PARAMETERS (TREE)
  (CL:RETURN-FROM JAVA-TRANSLATE-ACTUAL-PARAMETERS
   (CONS SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
    (CONCATENATE (JAVA-TRANSLATE-LIST-OF-TREES TREE) NIL))))

;;; (DEFUN (JAVA-YIELD-CLASS-NAME-FOR-FUNCTION STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T) CL:SIMPLE-STRING)
  JAVA-YIELD-CLASS-NAME-FOR-FUNCTION))
(CL:DEFUN JAVA-YIELD-CLASS-NAME-FOR-FUNCTION (FUNCTION)
  (CL:LET* ((RAW-CLASS-NAME ""))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RAW-CLASS-NAME))
   (CL:COND
    ((JAVA-FLOTSAM-FUNCTION? FUNCTION)
     (CL:SETQ RAW-CLASS-NAME
      (JAVA-YIELD-FLOTSAM-CLASS-NAME (HOME-MODULE FUNCTION)))
     (CL:IF
      (OMIT-JAVA-PACKAGE-PREFIX? (HOME-MODULE FUNCTION)
       (JAVA-YIELD-FLOTSAM-TYPE-NAME RAW-CLASS-NAME))
      (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
       RAW-CLASS-NAME)
      (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
       (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE FUNCTION) ".")
        RAW-CLASS-NAME))))
    ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
       SYM-JAVA-TRANSLATE-STELLA-METHOD-NATIVE? FALSE-WRAPPER))
     (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
      (JAVA-YIELD-NATIVE-CLASS-NAME)))
    ((METHOD-STARTUP-FUNCTION? FUNCTION)
     (CL:SETQ RAW-CLASS-NAME
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-CLASS-NAMESTRING
        (WRAP-STRING
         (%STRING-WRAPPER.WRAPPER-VALUE
          (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
           SYM-JAVA-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
           NULL-STRING-WRAPPER))))))
     (CL:IF
      (OMIT-JAVA-PACKAGE-PREFIX? (HOME-MODULE FUNCTION)
       (JAVA-YIELD-FLOTSAM-TYPE-NAME RAW-CLASS-NAME))
      (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
       RAW-CLASS-NAME)
      (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
       (CONCATENATE (JAVA-PACKAGE-PREFIX (HOME-MODULE FUNCTION) ".")
        RAW-CLASS-NAME))))
    ((%BOOLEAN-WRAPPER.WRAPPER-VALUE
      (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
       SYM-JAVA-TRANSLATE-STELLA-METHOD-CONSTRUCTOR? FALSE-WRAPPER))
     (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION
        (FIRST (METHOD-RETURN-TYPE-SPECIFIERS FUNCTION))))))
    (CL:T
     (CL:RETURN-FROM JAVA-YIELD-CLASS-NAME-FOR-FUNCTION
      (%STRING-WRAPPER.WRAPPER-VALUE
       (JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION
        (FIRST (METHOD-PARAMETER-TYPE-SPECIFIERS FUNCTION)))))))))

;;; (DEFUN (JAVA-TRANSLATE-FUNCTION-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-FUNCTION-CALL (TREE METHOD)
  (CL:SETQ TREE (%%REST TREE))
  (CL:LET*
   ((FUNCTIONNAME (%%VALUE TREE))
    (FUNCTIONARGS (COPY-CONS-LIST (%%REST TREE)))
    (FIRSTARG (%%VALUE FUNCTIONARGS))
    (FUNCTION
     (CL:IF (CL:NOT (CL:EQ METHOD NULL)) METHOD
      (LOOKUP-FUNCTION FUNCTIONNAME)))
    (OPERATOR
     (JAVA-LOOKUP-OPERATOR-TABLE (SOFT-PERMANENTIFY FUNCTIONNAME)))
    (OTREE NULL))
   (CL:COND
    ((CL:AND (CL:EQ FUNCTIONNAME SYM-JAVA-TRANSLATE-STELLA-GET-SYM)
      (ISA? FIRSTARG SGT-JAVA-TRANSLATE-STELLA-INTEGER-WRAPPER))
     (CL:RETURN-FROM JAVA-TRANSLATE-FUNCTION-CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_SYMBOL
       (GET-SYM (%INTEGER-WRAPPER.WRAPPER-VALUE FIRSTARG)) NIL)))
    ((CL:AND (CL:EQ FUNCTIONNAME SYM-JAVA-TRANSLATE-STELLA-GET-KWD)
      (ISA? FIRSTARG SGT-JAVA-TRANSLATE-STELLA-INTEGER-WRAPPER))
     (CL:RETURN-FROM JAVA-TRANSLATE-FUNCTION-CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_SYMBOL
       (GET-KWD (%INTEGER-WRAPPER.WRAPPER-VALUE FIRSTARG)) NIL)))
    ((CL:AND (CL:EQ FUNCTIONNAME SYM-JAVA-TRANSLATE-STELLA-GET-SGT)
      (ISA? FIRSTARG SGT-JAVA-TRANSLATE-STELLA-INTEGER-WRAPPER))
     (CL:RETURN-FROM JAVA-TRANSLATE-FUNCTION-CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_SYMBOL
       (GET-SGT (%INTEGER-WRAPPER.WRAPPER-VALUE FIRSTARG)) NIL))))
   (CL:COND
    ((CL:NOT (CL:EQ OPERATOR NULL))
     (CL:SETQ OTREE
      (JAVA-TRANSLATE-OPERATOR-CALL OPERATOR FUNCTIONARGS
       (LENGTH FUNCTIONARGS))))
    ((CL:EQ FUNCTION NULL)
     (CL:WARN
      "Can't translate function call: Undefined function or method `~A'"
      FUNCTIONNAME)
     (CL:SETQ OTREE NIL))
    (CL:T
     (CL:LET* ((*VARARGSTATEMENTS* NIL))
      (CL:DECLARE (CL:SPECIAL *VARARGSTATEMENTS*))
      (CL:LET*
       ((ACTUALS
         (CL:IF
          (%BOOLEAN-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
            SYM-JAVA-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
            FALSE-WRAPPER))
          (JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS FUNCTIONARGS
           FUNCTION)
          (JAVA-TRANSLATE-ACTUAL-PARAMETERS FUNCTIONARGS))))
       (CL:WHEN
        (CL:NOT
         (CL:OR
          (CL:EQ (REST (METHOD-RETURN-TYPE-SPECIFIERS FUNCTION)) NIL)
          (CL:> (CL:1- (LENGTH ACTUALS))
           (LENGTH (METHOD-PARAMETER-NAMES FUNCTION)))))
        (CL:SETQ ACTUALS
         (CONCATENATE ACTUALS
          (CONS
           (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE_ARRAY
            (JAVA-TRANSLATE-TYPE-SPEC
             SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER)
            (CONS
             (WRAP-INTEGER
              (CL:1-
               (LENGTH (METHOD-RETURN-TYPE-SPECIFIERS FUNCTION))))
             NIL))
           NIL))))
       (CL:SETQ OTREE
        (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
          (WRAP-STRING (JAVA-YIELD-CLASS-NAME-FOR-FUNCTION FUNCTION))
          NIL)
         (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
          (JAVA-TRANSLATE-FUNCTION-NAME FUNCTION) NIL)
         ACTUALS NIL))
       (CL:WHEN (CL:NOT (CL:EQ *VARARGSTATEMENTS* NIL))
        (CL:SETQ OTREE
         (JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP OTREE)))))))
   (CL:RETURN-FROM JAVA-TRANSLATE-FUNCTION-CALL OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-DEFINED-OR-NULL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-DEFINED-OR-NULL (CLASSTYPE OBJECT NULL?)
  (CL:LET*
   ((OPERATOR (CL:IF NULL? "==" "!="))
    (NULLVALUE
     (CL:IF (SUBTYPE-OF? CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-LITERAL)
      (TYPE-TO-WALKED-NULL-VALUE-TREE CLASSTYPE CLASSTYPE)
      SYM-JAVA-TRANSLATE-STELLA-NULL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OPERATOR))
   (CL:RETURN-FROM JAVA-TRANSLATE-DEFINED-OR-NULL
    (JAVA-TRANSLATE-OPERATOR-CALL (CONS (WRAP-STRING OPERATOR) NIL)
     (CONS OBJECT (CONS NULLVALUE NIL)) 2))))

;;; (DEFUN (JAVA-TRANSLATE-METHOD-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-METHOD-CALL (TREE)
  (CL:LET*
   ((METHODNAME (%%VALUE (%%REST (%%REST TREE))))
    (CLASSTYPE (%%VALUE (%%REST TREE)))
    (ALLARGS (%%REST (%%REST (%%REST TREE)))) (OBJECT (FOURTH TREE)))
   (CL:COND
    ((CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-DEFINED?)
     (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-CALL
      (JAVA-TRANSLATE-DEFINED-OR-NULL CLASSTYPE OBJECT CL:NIL)))
    ((CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-NULL?)
     (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-CALL
      (JAVA-TRANSLATE-DEFINED-OR-NULL CLASSTYPE OBJECT CL:T)))
    ((CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-CONCATENATE)
     (CL:WHEN (CL:EQ CLASSTYPE SGT-JAVA-TRANSLATE-STELLA-STRING)
      (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-CALL
       (JAVA-TRANSLATE-OPERATOR-CALL
        (GET-QUOTED-TREE "((\"+\") \"/STELLA\")" "/STELLA") ALLARGS
        2))))
    ((CL:OR (CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-NTH)
      (CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-NTH-SETTER))
     (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-CALL
      (JAVA-TRANSLATE-NTH-METHOD-CALL METHODNAME CLASSTYPE ALLARGS)))
    ((CL:OR (CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-AREF)
      (CL:EQ METHODNAME SYM-JAVA-TRANSLATE-STELLA-AREF-SETTER))
     (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-CALL
      (JAVA-TRANSLATE-AREF-METHOD-CALL METHODNAME CLASSTYPE ALLARGS)))
    (CL:T))
   (CL:RETURN-FROM JAVA-TRANSLATE-METHOD-CALL
    (JAVA-TRANSLATE-NORMAL-METHOD-CALL METHODNAME CLASSTYPE ALLARGS))))

;;; (DEFUN (JAVA-TRANSLATE-SUPER-METHOD-CALL OBJECT) ...)

(CL:DEFUN JAVA-TRANSLATE-SUPER-METHOD-CALL (TREE)
  (CL:LET*
   ((OTREE
     (JAVA-TRANSLATE-NORMAL-METHOD-CALL
      (%%VALUE (%%REST (%%REST TREE))) (%%VALUE (%%REST TREE))
      (%%REST (%%REST (%%REST TREE))))))
   (FOURTH-SETTER OTREE
    (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT (WRAP-STRING "super")
     NIL))
   (CL:RETURN-FROM JAVA-TRANSLATE-SUPER-METHOD-CALL OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-NORMAL-METHOD-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-NORMAL-METHOD-CALL (METHODNAME CLASSTYPE ALLARGS)
  (CL:LET*
   ((SLOT
     (LOOKUP-SLOT (%SURROGATE.SURROGATE-VALUE CLASSTYPE) METHODNAME))
    (METHODSLOT
     (CL:IF
      (CL:AND (CL:NOT (CL:EQ SLOT NULL))
       (ISA? SLOT SGT-JAVA-TRANSLATE-STELLA-METHOD-SLOT))
      SLOT NULL))
    (OBJECT (%%VALUE ALLARGS))
    (OPERATOR
     (JAVA-LOOKUP-OPERATOR-TABLE (SOFT-PERMANENTIFY METHODNAME))))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ METHODSLOT NULL))
     (JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? METHODSLOT))
    (CL:RETURN-FROM JAVA-TRANSLATE-NORMAL-METHOD-CALL
     (JAVA-TRANSLATE-FUNCTION-CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION
       (JAVA-CREATE-OVERLOADED-FUNCTION-NAME METHODNAME CLASSTYPE)
       (CONCATENATE ALLARGS NIL))
      METHODSLOT)))
   (CL:IF (CL:NOT (CL:EQ OPERATOR NULL))
    (CL:RETURN-FROM JAVA-TRANSLATE-NORMAL-METHOD-CALL
     (JAVA-TRANSLATE-OPERATOR-CALL OPERATOR ALLARGS (LENGTH ALLARGS)))
    (CL:RETURN-FROM JAVA-TRANSLATE-NORMAL-METHOD-CALL
     (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (JAVA-TRANSLATE-CLASS-NAME
        (INTERN-SYMBOL-IN-MODULE (%SURROGATE.SYMBOL-NAME CLASSTYPE)
         (%SURROGATE.HOME-CONTEXT CLASSTYPE) CL:NIL))
       NIL)
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
       (CL:IF (CL:NOT (CL:EQ METHODSLOT NULL))
        (JAVA-TRANSLATE-METHOD-NAME METHODSLOT)
        (JAVA-TRANSLATE-NAME METHODNAME))
       NIL)
      (JAVA-TRANSLATE-A-TREE OBJECT)
      (CONS
       (CL:IF
        (CL:AND (CL:NOT (CL:EQ METHODSLOT NULL))
         (CL:NOT
          (CL:EQ (REST (METHOD-RETURN-TYPE-SPECIFIERS METHODSLOT))
           NIL))
         (CL:<= (LENGTH ALLARGS)
          (LENGTH (METHOD-PARAMETER-NAMES METHODSLOT))))
        (CONCATENATE
         (JAVA-TRANSLATE-ACTUAL-PARAMETERS (%%REST ALLARGS))
         (CONS
          (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE_ARRAY
           (JAVA-TRANSLATE-TYPE-SPEC
            SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER)
           (CONS
            (WRAP-INTEGER
             (CL:1-
              (LENGTH (METHOD-RETURN-TYPE-SPECIFIERS METHODSLOT))))
            NIL))
          NIL))
        (JAVA-TRANSLATE-ACTUAL-PARAMETERS (%%REST ALLARGS)))
       NIL))))))

;;; (DEFUN (JAVA-TRANSLATE-OPERATOR-TREE CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-OPERATOR-TREE (TREE)
  (CL:LET*
   ((OPERATOR (JAVA-LOOKUP-OPERATOR-TABLE (%%VALUE TREE)))
    (ARGS (%%REST TREE)) (ARITY NULL-INTEGER))
   (CL:DECLARE (CL:TYPE CL:FIXNUM ARITY))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE TREE)))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-AND)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-OR)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-EQ?)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA->)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA->=)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-<)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-<=))
      (CL:SETQ ARITY 2))
     ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-NOT)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA-++)
       (CL:EQ TEST-VALUE-000 SYM-JAVA-TRANSLATE-STELLA---))
      (CL:SETQ ARITY 1))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM JAVA-TRANSLATE-OPERATOR-TREE
    (JAVA-TRANSLATE-OPERATOR-CALL OPERATOR ARGS ARITY))))

;;; (DEFUN (JAVA-TRANSLATE-OPERATOR-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-OPERATOR-CALL (OPERATORNAMES ARGUMENTS ARITY)
  (CL:DECLARE (CL:TYPE CL:FIXNUM ARITY))
  #+MCL
  (CL:CHECK-TYPE ARITY CL:FIXNUM)
  (CL:LET* ((OTREE NULL))
   (CL:ECASE ARITY
    (1
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_UNARY_OP
       (%%VALUE OPERATORNAMES)
       (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE ARGUMENTS)) NIL))))
    (2
     (CL:IF (CL:> (LENGTH ARGUMENTS) 2)
      (CL:SETQ OTREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BINARY_OP
        (JAVA-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
        (CONS (%%VALUE OPERATORNAMES)
         (CONS
          (JAVA-TRANSLATE-OPERATOR-CALL OPERATORNAMES
           (%%REST ARGUMENTS) 2)
          NIL))))
      (CL:SETQ OTREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_BINARY_OP
        (JAVA-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
        (CONS (%%VALUE OPERATORNAMES)
         (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST ARGUMENTS)))
          NIL))))))
    (3
     (CL:SETQ OTREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_TERNARY_OP
       (JAVA-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
       (CONS (%%VALUE OPERATORNAMES)
        (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST ARGUMENTS)))
         (CONS (%%VALUE (%%REST OPERATORNAMES))
          (CONS
           (JAVA-TRANSLATE-A-TREE
            (%%VALUE (%%REST (%%REST ARGUMENTS))))
           NIL))))))))
   (CL:RETURN-FROM JAVA-TRANSLATE-OPERATOR-CALL OTREE)))

;;; (DEFUN (JAVA-TRANSLATE-AREF-METHOD-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-AREF-METHOD-CALL (OPERATOR OWNER ARGUMENTS)
  (CL:COND
   ((CL:EQ OWNER SGT-JAVA-TRANSLATE-STELLA-ARRAY)
    (CL:LET*
     ((SETTER? (CL:EQ OPERATOR SYM-JAVA-TRANSLATE-STELLA-AREF-SETTER))
      (OTREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_AREF
        (JAVA-TRANSLATE-A-TREE (%%VALUE ARGUMENTS))
        (CONCATENATE
         (JAVA-TRANSLATE-LIST-OF-TREES
          (CL:IF SETTER? (%%REST (%%REST ARGUMENTS))
           (%%REST ARGUMENTS)))
         NIL))))
     (CL:WHEN SETTER?
      (CL:SETQ OTREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN OTREE
        (CONS (JAVA-TRANSLATE-A-TREE (%%VALUE (%%REST ARGUMENTS)))
         NIL))))
     (CL:RETURN-FROM JAVA-TRANSLATE-AREF-METHOD-CALL OTREE)))
   (CL:T
    (CL:RETURN-FROM JAVA-TRANSLATE-AREF-METHOD-CALL
     (JAVA-TRANSLATE-NORMAL-METHOD-CALL OPERATOR OWNER ARGUMENTS)))))

;;; (DEFUN (JAVA-TRANSLATE-NTH-METHOD-CALL CONS) ...)

(CL:DEFUN JAVA-TRANSLATE-NTH-METHOD-CALL (OPERATOR OWNER ARGUMENTS)
  (CL:LET*
   ((SETTER? (CL:EQ OPERATOR SYM-JAVA-TRANSLATE-STELLA-NTH-SETTER))
    (COLLECTION (%%VALUE ARGUMENTS)) (POSITION (LAST ARGUMENTS))
    (VALUE (CL:IF SETTER? (%%VALUE (%%REST ARGUMENTS)) NULL))
    (TREE NULL))
   (CL:COND
    ((CL:EQ OWNER SGT-JAVA-TRANSLATE-STELLA-NATIVE-VECTOR)
     (CL:SETQ TREE
      (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_AREF
       (JAVA-TRANSLATE-A-TREE COLLECTION)
       (CONS (JAVA-TRANSLATE-A-TREE POSITION) NIL)))
     (CL:WHEN SETTER?
      (CL:SETQ TREE
       (LIST* SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN TREE
        (CONS (JAVA-TRANSLATE-A-TREE VALUE) NIL))))
     (CL:RETURN-FROM JAVA-TRANSLATE-NTH-METHOD-CALL TREE))
    (CL:T))
   (CL:RETURN-FROM JAVA-TRANSLATE-NTH-METHOD-CALL
    (JAVA-TRANSLATE-NORMAL-METHOD-CALL OPERATOR OWNER ARGUMENTS))))

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE1 ()
  (CL:PROGN
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA-FLOTSAM-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA-FLOTSAM-CLASS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-GLOBAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-MACRO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PRINT-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-STARTUP-TIME-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIME-PROGN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
   (CL:SETQ KWD-JAVA-TRANSLATE-UNBOUND-SPECIAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNBOUND-SPECIAL-VARIABLE" NULL 2))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_GLOBAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_GLOBAL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_TYPE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_MAKE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_IDENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_IDENT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_ACTUALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ACTUALS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_STATEMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_STATEMENTS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_BLOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_BLOCK" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-THIS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THIS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-DOCUMENTATION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOCUMENTATION" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_COMMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_COMMENT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCTION" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SELF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SELF" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-UNWIND-PROTECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-UNWIND-PROTECT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SIGNAL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-HANDLER-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-HANDLER-CASE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-HANDLE-EXCEPTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-HANDLE-EXCEPTION" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-VOID-SYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID-SYS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-TYPED-SYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPED-SYS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-BAD-SYS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BAD-SYS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-SET-DEFAULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SET-DEFAULT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SLOT-VALUE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-SLOT-VALUE-SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-SLOT-VALUE-SETTER" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-METHOD" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-FUNCTION" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-SUPER-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-SUPER-METHOD" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROGN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-WITH-PROCESS-LOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WITH-PROCESS-LOCK" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-LOOP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOOP" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-FOREACH" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-LET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LET" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SAFE-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SAFE-CAST" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BREAK" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHILE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CHOOSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHOOSE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHEN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNLESS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-AND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AND" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-OR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OR" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NOT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-EQ?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EQ?" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA->
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA->=
    (INTERN-RIGID-SYMBOL-WRT-MODULE ">=" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-<
    (INTERN-RIGID-SYMBOL-WRT-MODULE "<" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE2 ()
  (CL:PROGN
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-<=
    (INTERN-RIGID-SYMBOL-WRT-MODULE "<=" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-++
    (INTERN-RIGID-SYMBOL-WRT-MODULE "++" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA---
    (INTERN-RIGID-SYMBOL-WRT-MODULE "--" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "COND" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MAKE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-NEW" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-MV-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MV-SETQ" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-FUNCTION-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-FUNCTION-CODE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-CALL-METHOD-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-CALL-METHOD-CODE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYS-INLINE-CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYS-INLINE-CALL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-THE-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-CODE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-INLINE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INLINE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-IGNORE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IGNORE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PRINT-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-STREAM" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PRINT-NATIVE-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-NATIVE-STREAM" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-KEY-VALUE-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "KEY-VALUE-LIST" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-+
    (INTERN-RIGID-SYMBOL-WRT-MODULE "+" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA--
    (INTERN-RIGID-SYMBOL-WRT-MODULE "-" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*" NULL 0))
   (CL:SETQ |SYM-JAVA-TRANSLATE-STELLA-/|
    (INTERN-RIGID-SYMBOL-WRT-MODULE "/" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-=>
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=>" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-=<
    (INTERN-RIGID-SYMBOL-WRT-MODULE "=<" NULL 0))
   (CL:SETQ KWD-JAVA-TRANSLATE-UPPERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPPERCASE" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-LOWERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOWERCASE" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-CAPITALIZED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAPITALIZED" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-CLEVER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLEVER" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-YES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "YES" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-NO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NO" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-PRESERVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRESERVE" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-UPCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPCASE" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-TITLECASEX
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TITLECASEX" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-TITLECASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TITLECASE" NULL 2))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LITERAL" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-MUTABLE-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MUTABLE-STRING" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-CODE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CODE" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-SHORT-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SHORT-INTEGER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-SHORT-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNSIGNED-SHORT-INTEGER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-BYTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BYTE" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-OCTET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OCTET" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-THIRY-TWO-BIT-VECTOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THIRY-TWO-BIT-VECTOR" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-DOUBLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOUBLE" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-CHARACTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHARACTER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-LONG-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LONG-INTEGER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-SINGLE-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SINGLE-FLOAT" NULL 1))
   (CL:SETQ KWD-JAVA-TRANSLATE-CAPITALIZE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAPITALIZE" NULL 2))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-MODULE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MODULE" NULL 1))
   (CL:SETQ KWD-JAVA-TRANSLATE-MINIMIZE-JAVA-PREFIXES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MINIMIZE-JAVA-PREFIXES" NULL 2))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CLASS-JAVA-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-JAVA-NATIVE-TYPE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-ANY-VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ANY-VALUE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-ABSTRACT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ABSTRACT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-BOOLEAN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-BYTE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BYTE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CATCH" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE3 ()
  (CL:PROGN
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CHAR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHAR" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CONST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONST" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-DEFAULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFAULT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-DO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DO" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-DOUBLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOUBLE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-ELSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ELSE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-EXTENDS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXTENDS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-FINAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FINAL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-FINALLY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FINALLY" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-FOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FOR" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-GOTO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOTO" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-IMPLEMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPLEMENTS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-IMPORT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IMPORT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-INSTANCEOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INSTANCEOF" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-INT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-INTERFACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTERFACE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-LONG
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LONG" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NATIVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PACKAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PACKAGE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PRIVATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRIVATE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PROTECTED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROTECTED" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-PUBLIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SHORT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SHORT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-STATIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STATIC" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SUPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SUPER" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SWITCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SWITCH" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYNCHRONIZED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYNCHRONIZED" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THROW" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-THROWS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THROWS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-TRANSIENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRANSIENT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-TRY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRY" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-VOID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-VOLATILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOLATILE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-ASSERT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ASSERT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-ENUM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ENUM" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_UNWIND_PROTECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_UNWIND_PROTECT" NULL 0))
   (CL:SETQ KWD-JAVA-TRANSLATE-JAVA
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA" NULL 2))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_VERBATIM" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SIGNAL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-FILL-IN-STACK-TRACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FILL-IN-STACK-TRACE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_HANDLER_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_HANDLER_CASE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CATCH" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCTION_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_ASSIGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ASSIGN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-VARIABLE-TYPE-SPECIFIER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VARIABLE-TYPE-SPECIFIER" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE_SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SLOT_VALUE_SETTER" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_SLOT_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SLOT_VALUE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_PROGN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_WITH_PROCESS_LOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_WITH_PROCESS_LOCK" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_NAMED_STATEMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_NAMED_STATEMENT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_LOOP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_LOOP" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FOREACH" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-NUMBER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-NUMBER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NUMBER-WRAPPER" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CAST" NULL 0))
   (CL:SETQ KWD-JAVA-TRANSLATE-WRAP-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAP-FUNCTION" NULL 2))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_AREF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_AREF" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE4 ()
  (CL:PROGN
   (CL:SETQ |SYM-JAVA-TRANSLATE-STELLA-MV_returnarray|
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MV_returnarray" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_RETURN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_BREAK" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CONTINUE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_IF" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-SYMBOL-ID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SYMBOL-ID" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-OTHERWISE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OTHERWISE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CASE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_COND" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_WHILE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_WHEN" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_UNLESS" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_MAKE_ARRAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_MAKE_ARRAY" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-NATIVE-OBJECT-POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE-OBJECT-POINTER" NULL 1))
   (CL:SETQ |SYM-JAVA-TRANSLATE-STELLA-caller_MV_returnarray|
    (INTERN-RIGID-SYMBOL-WRT-MODULE "caller_MV_returnarray" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCTION_SIGNATURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCTION_SIGNATURE" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-VOID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_FUNCALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCALL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_METHOD_CODE_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD_CODE_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA-PACKAGE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA-PACKAGE" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-ARGUMENT-LIST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ARGUMENT-LIST" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-METHOD-NATIVE?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-NATIVE?" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-METHOD-CONSTRUCTOR?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-CONSTRUCTOR?" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-DOUBLE-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOUBLE-FLOAT" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-UNSIGNED-LONG-INTEGER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNSIGNED-LONG-INTEGER" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-THIRTY-TWO-BIT-VECTOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THIRTY-TWO-BIT-VECTOR" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-TICKTOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TICKTOCK" NULL 1))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-NATIVE-DATE-TIME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE-DATE-TIME" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_ANONYMOUS_ARRAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ANONYMOUS_ARRAY" NULL 0))
   (CL:SETQ KWD-JAVA-TRANSLATE-FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FUNCTION" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 2))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_PRINT_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_PRINT_STREAM" NULL 0))
   (CL:SETQ KWD-JAVA-TRANSLATE-WARN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WARN" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ERROR" NULL 2))
   (CL:SETQ KWD-JAVA-TRANSLATE-CONTINUABLE-ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUABLE-ERROR" NULL 2))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_STANDARD_ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_STANDARD_ERROR" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_STANDARD_OUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_STANDARD_OUT" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-OBJECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OBJECT" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_LITERAL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_PRINT_NATIVE_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_PRINT_NATIVE_STREAM" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_EOL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EOL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-TRUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRUE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-FALSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FALSE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-METHOD-VARIABLE-ARGUMENTS?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-VARIABLE-ARGUMENTS?" NULL
     0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-GET-SYM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SYM" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-INTEGER-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INTEGER-WRAPPER" NULL 1))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SYMBOL" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-GET-KWD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-KWD" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-GET-SGT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GET-SGT" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-DEFINED?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFINED?" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NULL?
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL?" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-CONCATENATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONCATENATE" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NTH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-NTH-SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NTH-SETTER" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-AREF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AREF" NULL 0))
   (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-AREF-SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AREF-SETTER" NULL 0))
   (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-METHOD-SLOT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-SLOT" NULL 1)))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE5 ()
  (CL:PROGN (CL:SETQ *JAVA-TRUE-STRING-WRAPPER* (WRAP-STRING "true"))
   (CL:SETQ *JAVA-FALSE-STRING-WRAPPER* (WRAP-STRING "false"))
   (CL:SETQ *VARARGSTATEMENTS* NIL) (CL:SETQ *VARARGDECLS* NIL)
   (CL:SETQ *JAVA-OPERATOR-TABLE*
    (DICTIONARY SGT-JAVA-TRANSLATE-STELLA-KEY-VALUE-LIST
     SYM-JAVA-TRANSLATE-STELLA-++ (CONS (WRAP-STRING "++") NIL)
     SYM-JAVA-TRANSLATE-STELLA--- (CONS (WRAP-STRING "--") NIL)
     SYM-JAVA-TRANSLATE-STELLA-+ (CONS (WRAP-STRING "+") NIL)
     SYM-JAVA-TRANSLATE-STELLA-- (CONS (WRAP-STRING "-") NIL)
     SYM-JAVA-TRANSLATE-STELLA-* (CONS (WRAP-STRING "*") NIL)
     |SYM-JAVA-TRANSLATE-STELLA-/| (CONS (WRAP-STRING "/") NIL)
     SYM-JAVA-TRANSLATE-STELLA-EQ? (CONS (WRAP-STRING "==") NIL)
     SYM-JAVA-TRANSLATE-STELLA-> (CONS (WRAP-STRING ">") NIL)
     SYM-JAVA-TRANSLATE-STELLA->= (CONS (WRAP-STRING ">=") NIL)
     SYM-JAVA-TRANSLATE-STELLA-=> (CONS (WRAP-STRING ">=") NIL)
     SYM-JAVA-TRANSLATE-STELLA-< (CONS (WRAP-STRING "<") NIL)
     SYM-JAVA-TRANSLATE-STELLA-=< (CONS (WRAP-STRING "<=") NIL)
     SYM-JAVA-TRANSLATE-STELLA-<= (CONS (WRAP-STRING "<=") NIL)
     SYM-JAVA-TRANSLATE-STELLA-AND (CONS (WRAP-STRING "&&") NIL)
     SYM-JAVA-TRANSLATE-STELLA-OR (CONS (WRAP-STRING "||") NIL)
     SYM-JAVA-TRANSLATE-STELLA-NOT (CONS (WRAP-STRING "!") NIL)
     SYM-JAVA-TRANSLATE-STELLA-CHOOSE
     (CONS (WRAP-STRING "?") (CONS (WRAP-STRING ":") NIL))))
   (CL:SETQ *JAVA-CHARACTER-SUBSTITUTION-TABLE*
    (JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE))
   (CL:SETQ *JAVA-RESERVED-WORD-TABLE*
    (JAVA-CREATE-RESERVED-WORD-TABLE))
   (CL:SETQ *JAVA-PRIMITIVE-ARRAY-TYPE-NAMES*
    (DICTIONARY SGT-JAVA-TRANSLATE-STELLA-KEY-VALUE-LIST
     (WRAP-STRING "byte") (WRAP-STRING "B") (WRAP-STRING "char")
     (WRAP-STRING "C") (WRAP-STRING "double") (WRAP-STRING "D")
     (WRAP-STRING "float") (WRAP-STRING "F") (WRAP-STRING "int")
     (WRAP-STRING "I") (WRAP-STRING "long") (WRAP-STRING "J")
     (WRAP-STRING "short") (WRAP-STRING "S") (WRAP-STRING "boolean")
     (WRAP-STRING "Z"))))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE6 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-FLOTSAM-CLASS-NAME"
    "(DEFUN (JAVA-YIELD-FLOTSAM-CLASS-NAME STRING) ((MOD MODULE)))"
    (CL:FUNCTION JAVA-YIELD-FLOTSAM-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-NATIVE-CLASS-NAME"
    "(DEFUN (JAVA-YIELD-NATIVE-CLASS-NAME STRING) ())"
    (CL:FUNCTION JAVA-YIELD-NATIVE-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME"
    "(DEFUN (JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME STRING) ())"
    (CL:FUNCTION JAVA-YIELD-SPECIAL-VARIABLE-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-FULL-NATIVE-CLASS-NAME"
    "(DEFUN (JAVA-YIELD-FULL-NATIVE-CLASS-NAME STRING) ())"
    (CL:FUNCTION JAVA-YIELD-FULL-NATIVE-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-UNIT"
    "(DEFUN (JAVA-TRANSLATE-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION JAVA-TRANSLATE-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT"
    "(DEFUN (JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION JAVA-TRANSLATE-DEFINE-GLOBAL-VARIABLE-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT
    "WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS"
    "(DEFUN (WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS CONS) ((METHODBODY CONS) (DECLARATIONS CONS)))"
    (CL:FUNCTION WRAP-METHOD-BODY-WITH-JAVA-AUXILIARY-DECLARATIONS)
    NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-SYNCHRONIZED-METHOD?"
    "(DEFUN (JAVA-SYNCHRONIZED-METHOD? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-SYNCHRONIZED-METHOD?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-METHOD-SIGNATURE"
    "(DEFUN (JAVA-TRANSLATE-METHOD-SIGNATURE CONS) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-TRANSLATE-METHOD-SIGNATURE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-DEFINE-METHOD-UNIT"
    "(DEFUN (JAVA-TRANSLATE-DEFINE-METHOD-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION JAVA-TRANSLATE-DEFINE-METHOD-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-DEFPRINT-UNIT"
    "(DEFUN (JAVA-TRANSLATE-DEFPRINT-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
    (CL:FUNCTION JAVA-TRANSLATE-DEFPRINT-UNIT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-LIST-OF-TREES"
    "(DEFUN (JAVA-TRANSLATE-LIST-OF-TREES CONS) ((TREES CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-LIST-OF-TREES) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-A-TREE"
    "(DEFUN (JAVA-TRANSLATE-A-TREE OBJECT) ((TREE OBJECT)))"
    (CL:FUNCTION JAVA-TRANSLATE-A-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-LOOKUP-OPERATOR-TABLE"
    "(DEFUN (JAVA-LOOKUP-OPERATOR-TABLE CONS) ((OPERATOR SYMBOL)))"
    (CL:FUNCTION JAVA-LOOKUP-OPERATOR-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE"
    "(DEFUN (JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE STRING) ())"
    (CL:FUNCTION JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS"
    "(DEFUN (JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS STRING) ((NAME STRING) (CASECONVENTION KEYWORD)))"
    (CL:FUNCTION JAVA-SUBSTITUTE-FORBIDDEN-CHARACTERS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-CHANGE-CASE"
    "(DEFUN (JAVA-CHANGE-CASE STRING) ((SYMBOL GENERALIZED-SYMBOL) (CASECONVENTION KEYWORD)))"
    (CL:FUNCTION JAVA-CHANGE-CASE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-LITERAL?"
    "(DEFUN (JAVA-LITERAL? BOOLEAN) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-LITERAL?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-NATIVE-LITERAL-WRAPPER-NAMES"
    "(DEFUN (JAVA-NATIVE-LITERAL-WRAPPER-NAMES STRING-WRAPPER STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-NATIVE-LITERAL-WRAPPER-NAMES) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-SPECIAL-SETTER-NAME"
    "(DEFUN (JAVA-SPECIAL-SETTER-NAME STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-SPECIAL-SETTER-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-FLOTSAM-TYPE-NAME"
    "(DEFUN (JAVA-YIELD-FLOTSAM-TYPE-NAME STRING) ((FLOTSAM-CLASS-NAME STRING)))"
    (CL:FUNCTION JAVA-YIELD-FLOTSAM-TYPE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME"
    "(DEFUN (JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME STRING-WRAPPER) ((SYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYMBOL-CONSTANT-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYMBOL-CONSTANT-ID"
    "(DEFUN (JAVA-TRANSLATE-SYMBOL-CONSTANT-ID STRING-WRAPPER) ((SYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYMBOL-CONSTANT-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYMBOL-NAME"
    "(DEFUN (JAVA-TRANSLATE-SYMBOL-NAME STRING-WRAPPER) ((SYMBOL SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYMBOL-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYMBOL-ID"
    "(DEFUN (JAVA-TRANSLATE-SYMBOL-ID STRING-WRAPPER) ((SYMBOL SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYMBOL-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SURROGATE-NAME"
    "(DEFUN (JAVA-TRANSLATE-SURROGATE-NAME STRING-WRAPPER) ((SURROGATE SURROGATE)))"
    (CL:FUNCTION JAVA-TRANSLATE-SURROGATE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SURROGATE-ID"
    "(DEFUN (JAVA-TRANSLATE-SURROGATE-ID STRING-WRAPPER) ((SURROGATE SURROGATE)))"
    (CL:FUNCTION JAVA-TRANSLATE-SURROGATE-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-KEYWORD-NAME"
    "(DEFUN (JAVA-TRANSLATE-KEYWORD-NAME STRING-WRAPPER) ((KEYWORD KEYWORD)))"
    (CL:FUNCTION JAVA-TRANSLATE-KEYWORD-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-KEYWORD-ID"
    "(DEFUN (JAVA-TRANSLATE-KEYWORD-ID STRING-WRAPPER) ((KEYWORD KEYWORD)))"
    (CL:FUNCTION JAVA-TRANSLATE-KEYWORD-ID) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CLASS-NAMESTRING"
    "(DEFUN (JAVA-TRANSLATE-CLASS-NAMESTRING STRING-WRAPPER) ((NAMESTRING STRING-WRAPPER)))"
    (CL:FUNCTION JAVA-TRANSLATE-CLASS-NAMESTRING) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CLASS-NAME"
    "(DEFUN (JAVA-TRANSLATE-CLASS-NAME STRING-WRAPPER) ((NAMESYMBOL GENERALIZED-SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "IN-CURRENT-JAVA-PACKAGE?"
    "(DEFUN (IN-CURRENT-JAVA-PACKAGE? BOOLEAN) ((MODULE MODULE)))"
    (CL:FUNCTION IN-CURRENT-JAVA-PACKAGE?) NULL)
   (DEFINE-FUNCTION-OBJECT "INHERITED-CLASS-NAME-CONFLICTS?"
    "(DEFUN (INHERITED-CLASS-NAME-CONFLICTS? BOOLEAN) ((STELLA-CLASS-NAME STRING)))"
    (CL:FUNCTION INHERITED-CLASS-NAME-CONFLICTS?) NULL)
   (DEFINE-FUNCTION-OBJECT "CLASS-NAME-CONFLICTS-WITH-SLOT-NAME?"
    "(DEFUN (CLASS-NAME-CONFLICTS-WITH-SLOT-NAME? BOOLEAN) ((DEFINING-CLASS CLASS) (JAVA-CLASS-NAME STRING)))"
    (CL:FUNCTION CLASS-NAME-CONFLICTS-WITH-SLOT-NAME?) NULL)
   (DEFINE-FUNCTION-OBJECT "OMIT-JAVA-PACKAGE-PREFIX?"
    "(DEFUN (OMIT-JAVA-PACKAGE-PREFIX? BOOLEAN) ((MODULE MODULE) (STELLA-CLASS-NAME STRING)))"
    (CL:FUNCTION OMIT-JAVA-PACKAGE-PREFIX?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-TYPE-SPEC"
    "(DEFUN (JAVA-TRANSLATE-TYPE-SPEC STRING-WRAPPER) ((TYPE-SPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-TRANSLATE-TYPE-SPEC) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION"
    "(DEFUN (JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION STRING-WRAPPER) ((TYPE-SPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-TRANSLATE-TYPE-SPEC-FOR-FUNCTION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-TYPE-SPEC-HELPER"
    "(DEFUN (JAVA-TRANSLATE-TYPE-SPEC-HELPER STRING-WRAPPER) ((TYPE-SPEC TYPE-SPEC) (FUNCTION? BOOLEAN)))"
    (CL:FUNCTION JAVA-TRANSLATE-TYPE-SPEC-HELPER) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-ARRAY-TYPE"
    "(DEFUN (JAVA-TRANSLATE-ARRAY-TYPE STRING-WRAPPER) ((ARRAYTYPE PARAMETRIC-TYPE-SPECIFIER)))"
    (CL:FUNCTION JAVA-TRANSLATE-ARRAY-TYPE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC"
    "(DEFUN (JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC STRING-WRAPPER) ((TYPESPEC TYPE-SPEC) (FULLYQUALIFIED? BOOLEAN)))"
    (CL:FUNCTION JAVA-TRANSLATE-ARRAY-OF-TYPE-SPEC) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-RENAMED-RESERVED-WORD"
    "(DEFUN (JAVA-YIELD-RENAMED-RESERVED-WORD STRING-WRAPPER) ((WORD SYMBOL)))"
    (CL:FUNCTION JAVA-YIELD-RENAMED-RESERVED-WORD) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-CREATE-RESERVED-WORD-TABLE"
    "(DEFUN (JAVA-CREATE-RESERVED-WORD-TABLE STRING-HASH-TABLE) ())"
    (CL:FUNCTION JAVA-CREATE-RESERVED-WORD-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-LOOKUP-RESERVED-WORD-TABLE"
    "(DEFUN (JAVA-LOOKUP-RESERVED-WORD-TABLE STRING) ((WORD STRING)))"
    (CL:FUNCTION JAVA-LOOKUP-RESERVED-WORD-TABLE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-NAMESTRING"
    "(DEFUN (JAVA-TRANSLATE-NAMESTRING STRING) ((NAMESTRING STRING)))"
    (CL:FUNCTION JAVA-TRANSLATE-NAMESTRING) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-NAME"
    "(DEFUN (JAVA-TRANSLATE-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SPECIAL-TREE"
    "(DEFUN (JAVA-TRANSLATE-SPECIAL-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SPECIAL-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-VERBATIM-TREE"
    "(DEFUN (JAVA-TRANSLATE-VERBATIM-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-VERBATIM-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-INLINE-CALL-TREE"
    "(DEFUN (JAVA-TRANSLATE-INLINE-CALL-TREE OBJECT) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-INLINE-CALL-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-UNWIND-PROTECT"
    "(DEFUN (JAVA-TRANSLATE-UNWIND-PROTECT CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-UNWIND-PROTECT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SIGNAL"
    "(DEFUN (JAVA-TRANSLATE-SIGNAL CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SIGNAL) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-HANDLER-CASE"
    "(DEFUN (JAVA-TRANSLATE-HANDLER-CASE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-HANDLER-CASE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-HANDLE-EXCEPTION"
    "(DEFUN (JAVA-TRANSLATE-HANDLE-EXCEPTION CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-HANDLE-EXCEPTION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-VOID-SYS"
    "(DEFUN (JAVA-TRANSLATE-VOID-SYS CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-VOID-SYS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-TYPED-SYS"
    "(DEFUN (JAVA-TRANSLATE-TYPED-SYS CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-TYPED-SYS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-BAD-SYS"
    "(DEFUN (JAVA-TRANSLATE-BAD-SYS OBJECT) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-BAD-SYS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SETQ-TREE"
    "(DEFUN (JAVA-TRANSLATE-SETQ-TREE OBJECT) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SETQ-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYS-SET-DEFAULT"
    "(DEFUN (JAVA-TRANSLATE-SYS-SET-DEFAULT OBJECT) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYS-SET-DEFAULT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER"
    "(DEFUN (JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYS-SLOT-VALUE-SETTER) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYS-SLOT-VALUE"
    "(DEFUN (JAVA-TRANSLATE-SYS-SLOT-VALUE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYS-SLOT-VALUE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-PROGN"
    "(DEFUN (JAVA-TRANSLATE-PROGN CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-PROGN) NULL))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-TRANSLATE7 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-WITH-PROCESS-LOCK"
    "(DEFUN (JAVA-TRANSLATE-WITH-PROCESS-LOCK CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-WITH-PROCESS-LOCK) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-LOOP"
    "(DEFUN (JAVA-TRANSLATE-LOOP CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-LOOP) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-FOREACH-TREE"
    "(DEFUN (JAVA-TRANSLATE-FOREACH-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-FOREACH-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-LET-TREE"
    "(DEFUN (JAVA-TRANSLATE-LET-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-LET-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CAST"
    "(DEFUN (JAVA-TRANSLATE-CAST CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CAST) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-RETURN-TREE"
    "(DEFUN (JAVA-TRANSLATE-RETURN-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-RETURN-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-BREAK"
    "(DEFUN (JAVA-TRANSLATE-BREAK CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-BREAK) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CONTINUE"
    "(DEFUN (JAVA-TRANSLATE-CONTINUE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CONTINUE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-IF-TREE"
    "(DEFUN (JAVA-TRANSLATE-IF-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-IF-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-SYMBOL-CASE?"
    "(DEFUN (JAVA-SYMBOL-CASE? BOOLEAN) ((KEYFORM OBJECT)))"
    (CL:FUNCTION JAVA-SYMBOL-CASE?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-SYMBOL-ID-FORM"
    "(DEFUN (JAVA-YIELD-SYMBOL-ID-FORM CONS) ((SYMBOLID INTEGER)))"
    (CL:FUNCTION JAVA-YIELD-SYMBOL-ID-FORM) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CONDITION"
    "(DEFUN (JAVA-TRANSLATE-CONDITION CONS) ((CONDITION CONS) (SYMBOLCASEP BOOLEAN)))"
    (CL:FUNCTION JAVA-TRANSLATE-CONDITION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CASE-TREE"
    "(DEFUN (JAVA-TRANSLATE-CASE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CASE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-COND-TREE"
    "(DEFUN (JAVA-TRANSLATE-COND-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-COND-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-WHILE"
    "(DEFUN (JAVA-TRANSLATE-WHILE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-WHILE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CHOOSE-TREE"
    "(DEFUN (JAVA-TRANSLATE-CHOOSE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CHOOSE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-WHEN-TREE"
    "(DEFUN (JAVA-TRANSLATE-WHEN-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-WHEN-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-UNLESS-TREE"
    "(DEFUN (JAVA-TRANSLATE-UNLESS-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-UNLESS-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-MAKE-TREE"
    "(DEFUN (JAVA-TRANSLATE-MAKE-TREE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-MAKE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SYS-NEW"
    "(DEFUN (JAVA-TRANSLATE-SYS-NEW CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-SYS-NEW) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-NEW-ARRAY"
    "(DEFUN (JAVA-TRANSLATE-NEW-ARRAY CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-NEW-ARRAY) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-MV-SETQ"
    "(DEFUN (JAVA-TRANSLATE-MV-SETQ CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-MV-SETQ) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-MV-FUNCTION-CALL"
    "(DEFUN (JAVA-TRANSLATE-MV-FUNCTION-CALL CONS) ((FUNCTIONCALL CONS) (MVVECTORNAME SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-MV-FUNCTION-CALL) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CODE-SIGNATURE"
    "(DEFUN (JAVA-TRANSLATE-CODE-SIGNATURE CONS) ((SIGNATURE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CODE-SIGNATURE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-WITH-NATIVE-WRAPPER"
    "(DEFUN (JAVA-TRANSLATE-WITH-NATIVE-WRAPPER CONS) ((TREE OBJECT) (TYPE TYPE-SPEC)))"
    (CL:FUNCTION JAVA-TRANSLATE-WITH-NATIVE-WRAPPER) NULL)
   (DEFINE-FUNCTION-OBJECT
    "JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS"
    "(DEFUN (JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS CONS) ((TREES CONS) (PARAMETERTYPES (CONS OF TYPE-SPEC))))"
    (CL:FUNCTION JAVA-TRANSLATE-ACTUAL-PARAMETERS-WITH-NATIVE-WRAPPERS)
    NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION"
    "(DEFUN (JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION CONS) ((TREE CONS) (PRIMARYRETURNTYPE TYPE-SPEC)))"
    (CL:FUNCTION JAVA-WRAP-WITH-NATIVE-VALUE-EXTRACTION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE"
    "(DEFUN (JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE CONS) ((TREE CONS) (RETURNTYPE TYPE-SPEC)))"
    (CL:FUNCTION JAVA-TRANSLATE-OBJECT-TO-RETURN-TYPE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CALL-FUNCTION-CODE"
    "(DEFUN (JAVA-TRANSLATE-CALL-FUNCTION-CODE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CALL-FUNCTION-CODE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CALL-METHOD-CODE"
    "(DEFUN (JAVA-TRANSLATE-CALL-METHOD-CODE CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-CALL-METHOD-CODE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-PACKAGE-PREFIX"
    "(DEFUN (JAVA-PACKAGE-PREFIX STRING) ((MODULE MODULE) (SEPARATOR STRING)))"
    (CL:FUNCTION JAVA-PACKAGE-PREFIX) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME"
    "(DEFUN (JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-YIELD-FULLY-QUALIFIED-TYPE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT
    "JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES"
    "(DEFUN (JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES STRING-WRAPPER STRING-WRAPPER) ((F FUNCTION)))"
    (CL:FUNCTION JAVA-YIELD-TRANSLATED-CLASS-AND-FUNCTION-NAMES) NULL)
   (DEFINE-FUNCTION-OBJECT
    "JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES"
    "(DEFUN (JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES STRING STRING) ((OWNER TYPE-SPEC) (F FUNCTION)))"
    (CL:FUNCTION JAVA-YIELD-TRANSLATED-CLASS-AND-METHOD-NAMES) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP"
    "(DEFUN (JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP CONS) ((CLASSNAME STRING)))"
    (CL:FUNCTION JAVA-TRANSLATE-CLASS-OBJECT-LOOKUP) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION"
    "(DEFUN (JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION CONS) ((TYPESPEC TYPE-SPEC) (NDIMENSIONS INTEGER)))"
    (CL:FUNCTION JAVA-YIELD-CLASS-OBJECT-ARRAY-EXPRESSION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-CLASS-OBJECT-EXPRESSION"
    "(DEFUN (JAVA-YIELD-CLASS-OBJECT-EXPRESSION CONS) ((TYPESPEC TYPE-SPEC)))"
    (CL:FUNCTION JAVA-YIELD-CLASS-OBJECT-EXPRESSION) NULL)
   (DEFINE-FUNCTION-OBJECT
    "YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE"
    "(DEFUN (YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE STRING) ((NATIVETYPE STRING)))"
    (CL:FUNCTION YIELD-CLASS-OBJECT-LOOKUP-NAME-FOR-NATIVE-TYPE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS"
    "(DEFUN (JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS CONS) ((FN METHOD-SLOT) (OWNER TYPE-SPEC)))"
    (CL:FUNCTION JAVA-TRANSLATE-PARAM-TYPE-SPECIFICATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-THE-CODE"
    "(DEFUN (JAVA-TRANSLATE-THE-CODE OBJECT) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-THE-CODE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-FUNCTION-NAME"
    "(DEFUN (JAVA-TRANSLATE-FUNCTION-NAME STRING-WRAPPER) ((FUNCTION METHOD-SLOT)))"
    (CL:FUNCTION JAVA-TRANSLATE-FUNCTION-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-IGNORE-TREE"
    "(DEFUN (JAVA-TRANSLATE-IGNORE-TREE OBJECT) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-IGNORE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-STREAM-IS-STANDARD-OUTPUT?"
    "(DEFUN (JAVA-STREAM-IS-STANDARD-OUTPUT? BOOLEAN) ((TREE OBJECT)))"
    (CL:FUNCTION JAVA-STREAM-IS-STANDARD-OUTPUT?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-PRINT-STREAM"
    "(DEFUN (JAVA-TRANSLATE-PRINT-STREAM CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-PRINT-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-PRINT-NATIVE-STREAM"
    "(DEFUN (JAVA-TRANSLATE-PRINT-NATIVE-STREAM CONS) ((TREE CONS)))"
    (CL:FUNCTION JAVA-TRANSLATE-PRINT-NATIVE-STREAM) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-NULL"
    "(DEFUN (JAVA-TRANSLATE-NULL CONS) ())"
    (CL:FUNCTION JAVA-TRANSLATE-NULL) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-EOL"
    "(DEFUN (JAVA-TRANSLATE-EOL CONS) ())"
    (CL:FUNCTION JAVA-TRANSLATE-EOL) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (JAVA-TRANSLATE-ATOMIC-TREE CONS) ((TREE OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-TRANSLATE-ATOMIC-TREE)) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-PREPEND-GLOBAL-CLASS-NAME"
    "(DEFUN (JAVA-PREPEND-GLOBAL-CLASS-NAME STRING) ((NAMESTRING STRING) (MODULE MODULE)))"
    (CL:FUNCTION JAVA-PREPEND-GLOBAL-CLASS-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-GLOBAL-NAME"
    "(DEFUN (JAVA-TRANSLATE-GLOBAL-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL) (DEFINITION? BOOLEAN)))"
    (CL:FUNCTION JAVA-TRANSLATE-GLOBAL-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-GENERAL-SYMBOL"
    "(DEFUN (JAVA-TRANSLATE-GENERAL-SYMBOL CONS) ((TREE SYMBOL)))"
    (CL:FUNCTION JAVA-TRANSLATE-GENERAL-SYMBOL) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD (JAVA-TRANSLATE-ATOMIC-TREE CONS) ((TREE SYMBOL)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-TRANSLATE-ATOMIC-TREE)) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-METHOD-PARAMETER"
    "(DEFUN (JAVA-TRANSLATE-METHOD-PARAMETER OBJECT) ((NAME SYMBOL) (TYPE TYPE-SPEC) (METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-TRANSLATE-METHOD-PARAMETER) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-RETURN-PARAMETER"
    "(DEFUN (JAVA-TRANSLATE-RETURN-PARAMETER CONS) ())"
    (CL:FUNCTION JAVA-TRANSLATE-RETURN-PARAMETER) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-METHOD-PARAMETERS"
    "(DEFUN (JAVA-TRANSLATE-METHOD-PARAMETERS CONS) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-TRANSLATE-METHOD-PARAMETERS) NULL)
   (DEFINE-FUNCTION-OBJECT "ZERO-ARGUMENT-FUNCTION?"
    "(DEFUN (ZERO-ARGUMENT-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION ZERO-ARGUMENT-FUNCTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE?"
    "(DEFUN (JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-METHOD-OBJECT-DEFINED-ON-NATIVE-TYPE?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?"
    "(DEFUN (JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-METHOD-OBJECT-IS-FUNCTION?"
    "(DEFUN (JAVA-METHOD-OBJECT-IS-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-METHOD-OBJECT-IS-FUNCTION?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-FUNCTION-IN-DIFFERENT-MODULE?"
    "(DEFUN (JAVA-FUNCTION-IN-DIFFERENT-MODULE? BOOLEAN) ((METHOD METHOD-SLOT)))"
    (CL:FUNCTION JAVA-FUNCTION-IN-DIFFERENT-MODULE?) NULL))
  :VOID)

(CL:DEFUN STARTUP-JAVA-TRANSLATE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-JAVA-TRANSLATE1) (HELP-STARTUP-JAVA-TRANSLATE2)
    (HELP-STARTUP-JAVA-TRANSLATE3) (HELP-STARTUP-JAVA-TRANSLATE4)
    (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_UNARY_OP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_UNARY_OP" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_BINARY_OP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_BINARY_OP" NULL 0))
    (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-JAVA_TERNARY_OP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_TERNARY_OP" NULL 0))
    (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-ARRAY
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ARRAY" NULL 1))
    (CL:SETQ SGT-JAVA-TRANSLATE-STELLA-NATIVE-VECTOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "NATIVE-VECTOR" NULL 1))
    (CL:SETQ SYM-JAVA-TRANSLATE-STELLA-STARTUP-JAVA-TRANSLATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-JAVA-TRANSLATE" NULL 0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (HELP-STARTUP-JAVA-TRANSLATE5))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (HELP-STARTUP-JAVA-TRANSLATE6) (HELP-STARTUP-JAVA-TRANSLATE7)
    (DEFINE-FUNCTION-OBJECT "JAVA-CREATE-OVERLOADED-FUNCTION-NAME"
     "(DEFUN (JAVA-CREATE-OVERLOADED-FUNCTION-NAME SYMBOL) ((FUNCTIONNAME SYMBOL) (CLASSTYPE TYPE)))"
     (CL:FUNCTION JAVA-CREATE-OVERLOADED-FUNCTION-NAME) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (JAVA-TRANSLATE-METHOD-NAME STRING-WRAPPER) ((METHOD METHOD-SLOT)))"
     (WRAP-METHOD-CODE (CL:FUNCTION JAVA-TRANSLATE-METHOD-NAME)) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-DELETE-QUOTED-NULL-STATEMENTS"
     "(DEFUN (JAVA-DELETE-QUOTED-NULL-STATEMENTS CONS) ((TREES CONS)))"
     (CL:FUNCTION JAVA-DELETE-QUOTED-NULL-STATEMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT
     "JAVA-WRAP-METHOD-BODY-WITH-VARARG-DECLARATIONS"
     "(DEFUN (JAVA-WRAP-METHOD-BODY-WITH-VARARG-DECLARATIONS CONS) ((METHODBODY CONS)))"
     (CL:FUNCTION JAVA-WRAP-METHOD-BODY-WITH-VARARG-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT
     "JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP"
     "(DEFUN (JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP CONS) ((METHODBODY CONS)))"
     (CL:FUNCTION JAVA-WRAP-METHOD-BODY-WITH-VARARG-VALUE-SETUP) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-VARIABLE-LENGTH-ARG-NAME"
     "(DEFUN (JAVA-TRANSLATE-VARIABLE-LENGTH-ARG-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL) (PARAMETERNUMBER INTEGER)))"
     (CL:FUNCTION JAVA-TRANSLATE-VARIABLE-LENGTH-ARG-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS"
     "(DEFUN (JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS CONS) ((ACTUALS CONS) (UNUSED-METHOD METHOD-SLOT)))"
     (CL:FUNCTION JAVA-TRANSLATE-VARIABLE-LENGTH-ACTUALS) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-ACTUAL-PARAMETERS"
     "(DEFUN (JAVA-TRANSLATE-ACTUAL-PARAMETERS CONS) ((TREE CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-ACTUAL-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-YIELD-CLASS-NAME-FOR-FUNCTION"
     "(DEFUN (JAVA-YIELD-CLASS-NAME-FOR-FUNCTION STRING) ((FUNCTION METHOD-SLOT)))"
     (CL:FUNCTION JAVA-YIELD-CLASS-NAME-FOR-FUNCTION) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-FUNCTION-CALL"
     "(DEFUN (JAVA-TRANSLATE-FUNCTION-CALL CONS) ((TREE CONS) (METHOD METHOD-SLOT)))"
     (CL:FUNCTION JAVA-TRANSLATE-FUNCTION-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-DEFINED-OR-NULL"
     "(DEFUN (JAVA-TRANSLATE-DEFINED-OR-NULL CONS) ((CLASSTYPE TYPE) (OBJECT OBJECT) (NULL? BOOLEAN)))"
     (CL:FUNCTION JAVA-TRANSLATE-DEFINED-OR-NULL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-METHOD-CALL"
     "(DEFUN (JAVA-TRANSLATE-METHOD-CALL CONS) ((TREE CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-SUPER-METHOD-CALL"
     "(DEFUN (JAVA-TRANSLATE-SUPER-METHOD-CALL OBJECT) ((TREE CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-SUPER-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-NORMAL-METHOD-CALL"
     "(DEFUN (JAVA-TRANSLATE-NORMAL-METHOD-CALL CONS) ((METHODNAME SYMBOL) (CLASSTYPE TYPE) (ALLARGS CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-NORMAL-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-OPERATOR-TREE"
     "(DEFUN (JAVA-TRANSLATE-OPERATOR-TREE CONS) ((TREE CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-OPERATOR-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-OPERATOR-CALL"
     "(DEFUN (JAVA-TRANSLATE-OPERATOR-CALL CONS) ((OPERATORNAMES CONS) (ARGUMENTS CONS) (ARITY INTEGER)))"
     (CL:FUNCTION JAVA-TRANSLATE-OPERATOR-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-AREF-METHOD-CALL"
     "(DEFUN (JAVA-TRANSLATE-AREF-METHOD-CALL CONS) ((OPERATOR SYMBOL) (OWNER TYPE) (ARGUMENTS CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-AREF-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-TRANSLATE-NTH-METHOD-CALL"
     "(DEFUN (JAVA-TRANSLATE-NTH-METHOD-CALL CONS) ((OPERATOR SYMBOL) (OWNER TYPE) (ARGUMENTS CONS)))"
     (CL:FUNCTION JAVA-TRANSLATE-NTH-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-JAVA-TRANSLATE"
     "(DEFUN STARTUP-JAVA-TRANSLATE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-JAVA-TRANSLATE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-JAVA-TRANSLATE-STELLA-STARTUP-JAVA-TRANSLATE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-JAVA-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupJavaTranslate") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-TRUE-STRING-WRAPPER* STRING-WRAPPER (WRAP-LITERAL \"true\") :PUBLIC? FALSE :DOCUMENTATION \"Wrapped true string, used to reduce consing.\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-FALSE-STRING-WRAPPER* STRING-WRAPPER (WRAP-LITERAL \"false\") :PUBLIC? FALSE :DOCUMENTATION \"Wrapped false string, used to reduce consing.\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *VARARGSTATEMENTS* (CONS OF CONS) NIL :DOCUMENTATION \"A list of new vectors generated for variable-length argument 
             lists\")" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *VARARGDECLS* (CONS OF CONS) NIL :DOCUMENTATION \"A list of vector-pushes generated for variable-length argument 
             lists\")" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *CURRENTVARARGINDEX* INTEGER 1 :DOCUMENTATION \"The current index of the variable length arguments\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-OPERATOR-TABLE* KEY-VALUE-LIST (DICTIONARY @KEY-VALUE-LIST (QUOTE ++) (CONS (WRAP-LITERAL \"++\") NIL) (QUOTE --) (CONS (WRAP-LITERAL \"--\") NIL) (QUOTE +) (CONS (WRAP-LITERAL \"+\") NIL) (QUOTE -) (CONS (WRAP-LITERAL \"-\") NIL) (QUOTE *) (CONS (WRAP-LITERAL \"*\") NIL) (QUOTE /) (CONS (WRAP-LITERAL \"/\") NIL) (QUOTE EQ?) (CONS (WRAP-LITERAL \"==\") NIL) (QUOTE >) (CONS (WRAP-LITERAL \">\") NIL) (QUOTE >=) (CONS (WRAP-LITERAL \">=\") NIL) (QUOTE =>) (CONS (WRAP-LITERAL \">=\") NIL) (QUOTE <) (CONS (WRAP-LITERAL \"<\") NIL) (QUOTE =<) (CONS (WRAP-LITERAL \"<=\") NIL) (QUOTE <=) (CONS (WRAP-LITERAL \"<=\") NIL) (QUOTE AND) (CONS (WRAP-LITERAL \"&&\") NIL) (QUOTE OR) (CONS (WRAP-LITERAL \"||\") NIL) (QUOTE NOT) (CONS (WRAP-LITERAL \"!\") NIL) (QUOTE CHOOSE) (CONS (WRAP-LITERAL \"?\") (CONS (WRAP-LITERAL \":\") NIL))) :DOCUMENTATION \"Mapping from STELLA operators to Java operators\")"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-CHARACTER-SUBSTITUTION-TABLE* STRING (JAVA-CREATE-CHARACTER-SUBSTITUTION-TABLE))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-RESERVED-WORD-TABLE* (STRING-HASH-TABLE OF STRING STRING-WRAPPER) (JAVA-CREATE-RESERVED-WORD-TABLE))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *JAVA-LOOP-NAME* SYMBOL NULL)" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *JAVA-LOOP-NAME-USED?* BOOLEAN FALSE)" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-PRIMITIVE-ARRAY-TYPE-NAMES* KEY-VALUE-LIST (DICTIONARY @KEY-VALUE-LIST \"byte\" \"B\" \"char\" \"C\" \"double\" \"D\" \"float\" \"F\" \"int\" \"I\" \"long\" \"J\" \"short\" \"S\" \"boolean\" \"Z\"))"
     NULL)))
  :VOID)
