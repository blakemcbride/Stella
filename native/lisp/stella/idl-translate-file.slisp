;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; idl-translate-file.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR KWD-IDL-TRANSLATE-FILE-IDL NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-STARTUP-IDL-TRANSLATE-FILE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* NIL *TRANSLATIONUNITS*
  STANDARD-OUTPUT EOL *CURRENT-STREAM*))

;;; (DEFUN IDL-TRANSLATE-CLASS-TO-STREAM ...)

(CL:DEFUN IDL-TRANSLATE-CLASS-TO-STREAM (CLASS NATIVE-STREAM)
  (CL:LET* ((SELF-000 (NEW-TRANSLATION-UNIT)))
   (CL:SETF (%TRANSLATION-UNIT.THE-OBJECT SELF-000) CLASS)
   (CL:LET* ((TEMPUNIT SELF-000))
    (CL:LET* ((*CURRENT-STREAM* NULL))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CL:LET* ((SELF-001 (NEW-OUTPUT-STREAM)))
      (CL:SETF (%OUTPUT-STREAM.NATIVE-STREAM SELF-001) NATIVE-STREAM)
      (CL:SETQ *CURRENT-STREAM* SELF-001))
     (IDL-OUTPUT-STATEMENT
      (IDL-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT TEMPUNIT)))))
  :VOID)

;;; (DEFGLOBAL *IDL-TRANSLATED-FILE-SUFFIX* ...)

(CL:DEFVAR *IDL-TRANSLATED-FILE-SUFFIX* "")
(CL:DECLAIM (CL:TYPE CL:SIMPLE-STRING *IDL-TRANSLATED-FILE-SUFFIX*))

;;; (DEFUN (IDL-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ...)

(CL:DEFUN IDL-MAKE-CODE-OUTPUT-FILE-NAME (SOURCEFILE)
  (CL:RETURN-FROM IDL-MAKE-CODE-OUTPUT-FILE-NAME
   (CONCATENATE (FILE-NAME-WITHOUT-EXTENSION SOURCEFILE)
    (CONCATENATE *IDL-TRANSLATED-FILE-SUFFIX* ".sidl"))))

;;; (DEFUN IDL-OUTPUT-ALL-UNITS-TO-FILE ...)

(CL:DEFUN IDL-OUTPUT-ALL-UNITS-TO-FILE (SOURCEFILE)
  (CL:LET*
   ((CODEOUTPUTFILE (IDL-MAKE-CODE-OUTPUT-FILE-NAME SOURCEFILE))
    (CODEOUTPUTSTREAM (NEW-OUTPUT-FILE-STREAM CODEOUTPUTFILE))
    (GLOBALS NIL) (METHODS NIL) (VERBATIMSTATEMENTS NIL) (FORMS NIL))
   (CL:LET* ((*CURRENT-STREAM* CODEOUTPUTSTREAM))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CL:SETQ *TRANSLATIONUNITS* (REVERSE *TRANSLATIONUNITS*))
    (CL:LET*
     ((UNIT NULL) (ITER-000 (%LIST.THE-CONS-LIST *TRANSLATIONUNITS*)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ UNIT (%%VALUE ITER-000))
      (CL:LET* ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
       (CL:COND
        ((CL:OR
          (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-FILE-STELLA-METHOD)
          (CL:EQ TEST-VALUE-000
           SYM-IDL-TRANSLATE-FILE-STELLA-PRINT-METHOD)
          (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-FILE-STELLA-MACRO))
         (CL:SETQ METHODS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) METHODS)))
        ((CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-FILE-STELLA-VERBATIM)
         (CL:SETQ VERBATIMSTATEMENTS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT)
           VERBATIMSTATEMENTS)))
        ((CL:EQ TEST-VALUE-000
          SYM-IDL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE)
         (CL:SETQ GLOBALS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) GLOBALS)))
        (CL:T
         (CL:SETQ FORMS
          (CONS (%TRANSLATION-UNIT.TRANSLATION UNIT) FORMS)))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
     "Writing `" CODEOUTPUTFILE "'..." EOL)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "// " CODEOUTPUTFILE EOL EOL)
    (CL:WHEN (TRANSLATE-WITH-COPYRIGHT-HEADER?)
     (OUTPUT-COPYRIGHT-HEADER *CURRENT-STREAM*))
    (CL:LET* ((FORM NULL) (ITER-001 FORMS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
      (CL:SETQ FORM (%%VALUE ITER-001)) (IDL-OUTPUT-STATEMENT FORM)
      (CL:SETQ ITER-001 (%%REST ITER-001))))
    (FREE CODEOUTPUTSTREAM)))
  :VOID)

;;; (DEFUN IDL-TRANSLATE-FILE ...)

(CL:DEFUN IDL-TRANSLATE-FILE (FILENAME)
  (TRANSLATE-FILE FILENAME KWD-IDL-TRANSLATE-FILE-IDL CL:NIL)
  :VOID)

(CL:DEFUN STARTUP-IDL-TRANSLATE-FILE ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-PRINT-METHOD
     (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-MACRO
     (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-VERBATIM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-GLOBAL-VARIABLE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
    (CL:SETQ KWD-IDL-TRANSLATE-FILE-IDL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL" NULL 2))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-STARTUP-IDL-TRANSLATE-FILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-IDL-TRANSLATE-FILE" NULL
      0))
    (CL:SETQ SYM-IDL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-CLASS-TO-STREAM"
     "(DEFUN IDL-TRANSLATE-CLASS-TO-STREAM ((CLASS CLASS) (NATIVE-STREAM NATIVE-OUTPUT-STREAM)))"
     (CL:FUNCTION IDL-TRANSLATE-CLASS-TO-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-MAKE-CODE-OUTPUT-FILE-NAME"
     "(DEFUN (IDL-MAKE-CODE-OUTPUT-FILE-NAME FILE-NAME) ((SOURCEFILE FILE-NAME)))"
     (CL:FUNCTION IDL-MAKE-CODE-OUTPUT-FILE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-OUTPUT-ALL-UNITS-TO-FILE"
     "(DEFUN IDL-OUTPUT-ALL-UNITS-TO-FILE ((SOURCEFILE FILE-NAME)))"
     (CL:FUNCTION IDL-OUTPUT-ALL-UNITS-TO-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-FILE"
     "(DEFUN IDL-TRANSLATE-FILE ((FILENAME FILE-NAME)))"
     (CL:FUNCTION IDL-TRANSLATE-FILE) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-IDL-TRANSLATE-FILE"
     "(DEFUN STARTUP-IDL-TRANSLATE-FILE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-IDL-TRANSLATE-FILE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-IDL-TRANSLATE-FILE-STELLA-STARTUP-IDL-TRANSLATE-FILE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-IDL-TRANSLATE-FILE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupIdlTranslateFile") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *IDL-TRANSLATED-FILE-SUFFIX* STRING \"\")" NULL)))
  :VOID)
