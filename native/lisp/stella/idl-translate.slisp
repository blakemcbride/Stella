;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; idl-translate.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-IDL-TRANSLATE-STELLA-CONS NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-GLOBAL-VARIABLE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-TYPE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CLASS NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-METHOD NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-MACRO NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-PRINT-METHOD NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-STARTUP-TIME-PROGN NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-VERBATIM NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-IDL_TYPEDEF NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-IDL_IDENT NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-IDL_LITERAL NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CLASS-IDL-NATIVE-TYPE NULL)
(CL:DEFVAR KWD-IDL-TRANSLATE-CAPITALIZED NULL)
(CL:DEFVAR KWD-IDL-TRANSLATE-UPPERCASE NULL)
(CL:DEFVAR KWD-IDL-TRANSLATE-LOWERCASE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-ASM NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-AUTO NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-BREAK NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CASE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CATCH NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CHAR NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CONST NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-CONTINUE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-DEFAULT NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-DELETE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-DO NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-DOUBLE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-ELSE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-ENUM NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-EXTERN NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-FLOAT NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-FOR NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-FRIEND NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-GOTO NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-IF NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-INLINE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-INT NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-LONG NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-NEW NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-OPERATOR NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-PRIVATE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-PROTECTED NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-PUBLIC NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-REGISTER NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-RETURN NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-SHORT NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-SIGNED NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-SIZEOF NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-STATIC NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-STRUCT NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-SWITCH NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-TEMPLATE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-THROW NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-TRY NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-TYPEDEF NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-UNION NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-UNSIGNED NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-VIRTUAL NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-VOID NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-VOLATILE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-WHILE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-TYPENAME NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-IN NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-STARTUP-IDL-TRANSLATE NULL)
(CL:DEFVAR SYM-IDL-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* NULL-CHARACTER
  *CHARACTER-DOWNCASE-TABLE* *CHARACTER-UPCASE-TABLE* NULL-INTEGER
  NULL-STRING-WRAPPER NIL))

;;; (VERBATIM :COMMON-LISP ...)

(CL:UNLESS (CL:FIND-PACKAGE "IDL") (CL:DEFPACKAGE "IDL"))

;;; (VERBATIM :COMMON-LISP ...)

(CL:UNLESS (CL:FIND-PACKAGE "IDL-USER") (CL:DEFPACKAGE "IDL-USER"))

;;; (DEFUN (IDL-TRANSLATE-A-TREE OBJECT) ...)

(CL:DEFUN IDL-TRANSLATE-A-TREE (TREE)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-IDL-TRANSLATE-STELLA-CONS)
    (CL:PROGN
     (CL:IF (CL:EQ TREE NIL)
      (CL:RETURN-FROM IDL-TRANSLATE-A-TREE
       (IDL-TRANSLATE-ATOMIC-TREE TREE))
      (CL:RETURN-FROM IDL-TRANSLATE-A-TREE (IDL-TRANSLATE-NULL)))))
   (CL:T
    (CL:WHEN (CL:EQ TREE NULL)
     (CL:RETURN-FROM IDL-TRANSLATE-A-TREE (IDL-TRANSLATE-NULL)))
    (CL:RETURN-FROM IDL-TRANSLATE-A-TREE
     (IDL-TRANSLATE-ATOMIC-TREE TREE)))))

;;; (DEFUN (IDL-TRANSLATE-UNIT CONS) ...)

(CL:DEFUN IDL-TRANSLATE-UNIT (UNIT)
  (CL:LET* ((TEST-VALUE-000 (%TRANSLATION-UNIT.CATEGORY UNIT)))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-GLOBAL-VARIABLE)
     (CL:RETURN-FROM IDL-TRANSLATE-UNIT NULL))
    ((CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-TYPE)
     (CL:RETURN-FROM IDL-TRANSLATE-UNIT
      (IDL-TRANSLATE-DEFTYPE-UNIT UNIT)))
    ((CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-CLASS)
     (CL:RETURN-FROM IDL-TRANSLATE-UNIT
      (IDL-TRANSLATE-DEFINE-NATIVE-CLASS-UNIT UNIT)))
    ((CL:OR (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-METHOD)
      (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-MACRO))
     (CL:RETURN-FROM IDL-TRANSLATE-UNIT NULL))
    ((CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-PRINT-METHOD)
     (CL:RETURN-FROM IDL-TRANSLATE-UNIT NULL))
    ((CL:OR
      (CL:EQ TEST-VALUE-000
       SYM-IDL-TRANSLATE-STELLA-STARTUP-TIME-PROGN)
      (CL:EQ TEST-VALUE-000 SYM-IDL-TRANSLATE-STELLA-VERBATIM))
     (CL:RETURN-FROM IDL-TRANSLATE-UNIT NULL))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (IDL-TRANSLATE-DEFTYPE-UNIT CONS) ...)

(CL:DEFUN IDL-TRANSLATE-DEFTYPE-UNIT (UNIT)
  (CL:RETURN-FROM IDL-TRANSLATE-DEFTYPE-UNIT
   (LIST* SYM-IDL-TRANSLATE-STELLA-IDL_TYPEDEF
    (IDL-TRANSLATE-NAME
     (%%VALUE (%%REST (%TRANSLATION-UNIT.CODE-REGISTER UNIT))))
    (CONS
     (IDL-TRANSLATE-TYPE-SPEC
      (%SURROGATE.SURROGATE-VALUE (%TRANSLATION-UNIT.THE-OBJECT UNIT)))
     NIL))))

;;; (DEFUN (IDL-TRANSLATE-NULL CONS) ...)

(CL:DEFUN IDL-TRANSLATE-NULL ()
  (CL:RETURN-FROM IDL-TRANSLATE-NULL
   (LIST* SYM-IDL-TRANSLATE-STELLA-IDL_IDENT (WRAP-STRING "NULL") NIL)))

;;; (DEFMETHOD (IDL-TRANSLATE-ATOMIC-TREE CONS) ...)

(%%DEFCONSMETHOD IDL-TRANSLATE-ATOMIC-TREE ((TREE OBJECT))
  (CL:RETURN-FROM IDL-TRANSLATE-ATOMIC-TREE
   (LIST* SYM-IDL-TRANSLATE-STELLA-IDL_LITERAL TREE NIL)))

;;; (DEFMETHOD (IDL-TRANSLATE-ATOMIC-TREE CONS) ...)

(CL:DEFMETHOD IDL-TRANSLATE-ATOMIC-TREE ((TREE SYMBOL))
  (CL:RETURN-FROM IDL-TRANSLATE-ATOMIC-TREE
   (LIST* SYM-IDL-TRANSLATE-STELLA-IDL_IDENT (IDL-TRANSLATE-NAME TREE)
    NIL)))

;;; (DEFUN (IDL-TRANSLATE-TYPE-SPEC STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-TYPE-SPEC (TYPESPEC)
  (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPESPEC)))
   (CL:COND
    ((SUBTYPE-OF-PARAMETRIC-TYPE-SPECIFIER? TEST-VALUE-000)
     (CL:PROGN
      (CL:RETURN-FROM IDL-TRANSLATE-TYPE-SPEC
       (WRAP-STRING
        (CONCATENATE
         (%STRING-WRAPPER.WRAPPER-VALUE
          (IDL-TRANSLATE-TYPE-SPEC
           (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-BASE-TYPE TYPESPEC)))
         (CONCATENATE "<"
          (CONCATENATE
           (%STRING-WRAPPER.WRAPPER-VALUE
            (IDL-TRANSLATE-TYPE-SPEC
             (FIRST
              (%PARAMETRIC-TYPE-SPECIFIER.SPECIFIER-PARAMETER-TYPES
               TYPESPEC))))
           ">")))))))
    ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
     (CL:PROGN
      (CL:COND
       ((CL:NOT
         (CL:EQ
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE
            (%CLASS.DYNAMIC-SLOTS
             (%SURROGATE.SURROGATE-VALUE TYPESPEC))
            SYM-IDL-TRANSLATE-STELLA-CLASS-IDL-NATIVE-TYPE
            NULL-STRING-WRAPPER))
          STELLA::NULL-STRING))
        (CL:RETURN-FROM IDL-TRANSLATE-TYPE-SPEC
         (WRAP-STRING
          (%STRING-WRAPPER.WRAPPER-VALUE
           (DYNAMIC-SLOT-VALUE
            (%CLASS.DYNAMIC-SLOTS
             (%SURROGATE.SURROGATE-VALUE TYPESPEC))
            SYM-IDL-TRANSLATE-STELLA-CLASS-IDL-NATIVE-TYPE
            NULL-STRING-WRAPPER)))))
       (CL:T
        (CL:RETURN-FROM IDL-TRANSLATE-TYPE-SPEC
         (IDL-TRANSLATE-CLASS-NAME
          (SYMBOLIZE
           (%CLASS.CLASS-TYPE
            (%SURROGATE.SURROGATE-VALUE TYPESPEC)))))))))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" TEST-VALUE-000 "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (IDL-TRANSLATE-CLASS-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-CLASS-NAME (NAMESYMBOL)
  (CL:RETURN-FROM IDL-TRANSLATE-CLASS-NAME
   (WRAP-STRING
    (IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS
     (IDL-CHANGE-CASE
      (%CLASS.CLASS-TYPE
       (%SURROGATE.SURROGATE-VALUE (SURROGATIFY NAMESYMBOL)))
      KWD-IDL-TRANSLATE-CAPITALIZED)
     KWD-IDL-TRANSLATE-CAPITALIZED))))

;;; (DEFUN (IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING)
  IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE))
(CL:DEFUN IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE ()
  (CL:LET*
   ((TABLE
     (CL:THE CL:SIMPLE-STRING
      (CL:MAKE-STRING 256 :INITIAL-ELEMENT #\_))))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TABLE))
   (CL:LET*
    ((CODE NULL-INTEGER)
     (ITER-000 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\0)))
     (UPPER-BOUND-000 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\9)))
     (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CODE ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
     (CL:SETQ CODE ITER-000)
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:LET*
    ((CODE NULL-INTEGER)
     (ITER-001 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\A)))
     (UPPER-BOUND-001 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\Z)))
     (UNBOUNDED?-001 (CL:= UPPER-BOUND-001 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CODE ITER-001 UPPER-BOUND-001))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-001 (CL:<= ITER-001 UPPER-BOUND-001)) DO
     (CL:SETQ CODE ITER-001)
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (CL:LET*
    ((CODE NULL-INTEGER)
     (ITER-002 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\a)))
     (UPPER-BOUND-002 (CL:THE CL:FIXNUM (CL:CHAR-CODE #\z)))
     (UNBOUNDED?-002 (CL:= UPPER-BOUND-002 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM CODE ITER-002 UPPER-BOUND-002))
    (CL:LOOP WHILE
     (CL:OR UNBOUNDED?-002 (CL:<= ITER-002 UPPER-BOUND-002)) DO
     (CL:SETQ CODE ITER-002)
     (CL:LET ((SELF TABLE) (CH #\=) (POSITION CODE))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
       (CL:TYPE CL:FIXNUM POSITION))
      (SETF
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))
       (CL:THE CL:CHARACTER CH)))
     (CL:SETQ ITER-002 (CL:1+ ITER-002))))
   (CL:LET
    ((SELF TABLE) (CH #\=)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\_))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\ ))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\X)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\!))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\"))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\H)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\#))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\B)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\$))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\R)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\%))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\A)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\&))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\Q)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\'))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\())))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\)))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\O)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\*))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\I)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\+))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\,))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\-))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\D)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\.))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\S)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\/))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\C)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\:))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\;))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\L)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\<))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\E)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\=))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\G)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\>))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\P)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\?))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\M)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\@))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\[))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\\))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\]))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\U)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\^))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\`))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\{))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\V)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\|))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\_)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\}))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:LET
    ((SELF TABLE) (CH #\T)
     (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE #\~))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
     (CL:TYPE CL:FIXNUM POSITION))
    (SETF
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION))
     (CL:THE CL:CHARACTER CH)))
   (CL:RETURN-FROM IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE
    (CL:LET ((S TABLE)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFGLOBAL *IDL-CHARACTER-SUBSTITUTION-TABLE* ...)

(CL:DEFVAR *IDL-CHARACTER-SUBSTITUTION-TABLE* STELLA::NULL-STRING)
(CL:DECLAIM
 (CL:TYPE CL:SIMPLE-STRING *IDL-CHARACTER-SUBSTITUTION-TABLE*))

;;; (DEFUN (IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:T) CL:SIMPLE-STRING)
  IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS))
(CL:DEFUN IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS (NAME CASECONVENTION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
  #+MCL
  (CL:CHECK-TYPE NAME CL:SIMPLE-STRING)
  (CL:LET* ((RESULT STELLA::NULL-STRING) (SUBSTITUTION NULL-CHARACTER))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT))
   (CL:CASE
    (CL:LET ((SELF NAME) (POSITION 0))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
      (CL:TYPE CL:FIXNUM POSITION))
     (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
      (CL:THE CL:FIXNUM POSITION)))
    (#\0
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "zero"))))))
    (#\1
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "one"))))))
    (#\2
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "two"))))))
    (#\3
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "three"))))))
    (#\4
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "four"))))))
    (#\5
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "five"))))))
    (#\6
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "six"))))))
    (#\7
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "seven"))))))
    (#\8
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "eight"))))))
    (#\9
     (CL:SETQ RESULT
      (CL:THE CL:SIMPLE-STRING
       (CL:COPY-SEQ
        (CL:THE CL:SIMPLE-STRING
         (REPLACE-FIRST-CHARACTER-WITH-STRING NAME "nine"))))))
    (CL:OTHERWISE
     (CL:SETQ RESULT (CL:THE CL:SIMPLE-STRING (CL:COPY-SEQ NAME)))))
   (CL:LET*
    ((I NULL-INTEGER) (ITER-000 0)
     (UPPER-BOUND-000 (CL:1- (CL:THE CL:FIXNUM (CL:LENGTH RESULT)))))
    (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
    (CL:LOOP WHILE (CL:<= ITER-000 UPPER-BOUND-000) DO
     (CL:SETQ I ITER-000)
     (CL:SETQ SUBSTITUTION
      (CL:LET
       ((SELF *IDL-CHARACTER-SUBSTITUTION-TABLE*)
        (POSITION
         (CL:THE CL:FIXNUM
          (CL:CHAR-CODE
           (CL:LET ((SELF RESULT) (POSITION I))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION)))))))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:WHEN (CL:NOT (CL:EQL SUBSTITUTION #\=))
      (CL:COND
       ((CL:EQ CASECONVENTION KWD-IDL-TRANSLATE-UPPERCASE)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-DOWNCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       ((CL:EQ CASECONVENTION KWD-IDL-TRANSLATE-LOWERCASE)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-UPCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       ((CL:EQ CASECONVENTION KWD-IDL-TRANSLATE-CAPITALIZED)
        (CL:LET
         ((SELF RESULT)
          (CH
           (CL:LET
            ((SELF *CHARACTER-UPCASE-TABLE*)
             (POSITION (CL:THE CL:FIXNUM (CL:CHAR-CODE SUBSTITUTION))))
            (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
             (CL:TYPE CL:FIXNUM POSITION))
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))))
          (POSITION I))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (SETF
          (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
           (CL:THE CL:FIXNUM POSITION))
          (CL:THE CL:CHARACTER CH))))
       (CL:T
        (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
          CASECONVENTION "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:RETURN-FROM IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS
    (CL:LET ((S RESULT)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFUN (IDL-CHANGE-CASE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:T CL:T) CL:SIMPLE-STRING) IDL-CHANGE-CASE))
(CL:DEFUN IDL-CHANGE-CASE (SYMBOL CASECONVENTION)
  (CL:LET*
   ((MODULE (%GENERALIZED-SYMBOL.HOME-CONTEXT SYMBOL))
    (NAME (%GENERALIZED-SYMBOL.SYMBOL-NAME SYMBOL)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING NAME))
   (CL:WHEN (CL:EQ MODULE NULL) (CL:SETQ MODULE *MODULE*))
   (CL:WHEN (%MODULE.CASE-SENSITIVE? MODULE)
    (CL:RETURN-FROM IDL-CHANGE-CASE (COPY NAME)))
   (CL:COND
    ((CL:EQ CASECONVENTION KWD-IDL-TRANSLATE-UPPERCASE)
     (CL:RETURN-FROM IDL-CHANGE-CASE (STRING-UPCASE NAME)))
    ((CL:EQ CASECONVENTION KWD-IDL-TRANSLATE-LOWERCASE)
     (CL:RETURN-FROM IDL-CHANGE-CASE (STRING-DOWNCASE NAME)))
    ((CL:EQ CASECONVENTION KWD-IDL-TRANSLATE-CAPITALIZED)
     (CL:RETURN-FROM IDL-CHANGE-CASE (STRING-CAPITALIZE NAME)))
    (CL:T
     (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
      (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
       "`" CASECONVENTION "' is not a valid case option")
      (CL:ERROR
       (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))))

;;; (DEFUN (IDL-YIELD-RENAMED-RESERVED-WORD STRING-WRAPPER) ...)

(CL:DEFUN IDL-YIELD-RENAMED-RESERVED-WORD (WORD)
  (CL:RETURN-FROM IDL-YIELD-RENAMED-RESERVED-WORD
   (WRAP-STRING
    (CONCATENATE "renamed_"
     (STRING-CAPITALIZE (%SYMBOL.SYMBOL-NAME WORD))))))

;;; (DEFUN (IDL-CREATE-RESERVED-WORD-TABLE STRING-HASH-TABLE) ...)

(CL:DEFUN IDL-CREATE-RESERVED-WORD-TABLE ()
  (CL:LET* ((TABLE (NEW-STRING-HASH-TABLE)))
   (CL:LET*
    ((WORD NULL)
     (ITER-000
      (LIST* SYM-IDL-TRANSLATE-STELLA-ASM SYM-IDL-TRANSLATE-STELLA-AUTO
       SYM-IDL-TRANSLATE-STELLA-BREAK SYM-IDL-TRANSLATE-STELLA-CASE
       SYM-IDL-TRANSLATE-STELLA-CATCH SYM-IDL-TRANSLATE-STELLA-CHAR
       SYM-IDL-TRANSLATE-STELLA-CLASS SYM-IDL-TRANSLATE-STELLA-CONST
       SYM-IDL-TRANSLATE-STELLA-CONTINUE
       SYM-IDL-TRANSLATE-STELLA-DEFAULT SYM-IDL-TRANSLATE-STELLA-DELETE
       SYM-IDL-TRANSLATE-STELLA-DO SYM-IDL-TRANSLATE-STELLA-DOUBLE
       SYM-IDL-TRANSLATE-STELLA-ELSE SYM-IDL-TRANSLATE-STELLA-ENUM
       SYM-IDL-TRANSLATE-STELLA-EXTERN SYM-IDL-TRANSLATE-STELLA-FLOAT
       SYM-IDL-TRANSLATE-STELLA-FOR SYM-IDL-TRANSLATE-STELLA-FRIEND
       SYM-IDL-TRANSLATE-STELLA-GOTO SYM-IDL-TRANSLATE-STELLA-IF
       SYM-IDL-TRANSLATE-STELLA-INLINE SYM-IDL-TRANSLATE-STELLA-INT
       SYM-IDL-TRANSLATE-STELLA-LONG SYM-IDL-TRANSLATE-STELLA-NEW
       SYM-IDL-TRANSLATE-STELLA-OPERATOR
       SYM-IDL-TRANSLATE-STELLA-PRIVATE
       SYM-IDL-TRANSLATE-STELLA-PROTECTED
       SYM-IDL-TRANSLATE-STELLA-PUBLIC
       SYM-IDL-TRANSLATE-STELLA-REGISTER
       SYM-IDL-TRANSLATE-STELLA-RETURN SYM-IDL-TRANSLATE-STELLA-SHORT
       SYM-IDL-TRANSLATE-STELLA-SIGNED SYM-IDL-TRANSLATE-STELLA-SIZEOF
       SYM-IDL-TRANSLATE-STELLA-STATIC SYM-IDL-TRANSLATE-STELLA-STRUCT
       SYM-IDL-TRANSLATE-STELLA-SWITCH
       SYM-IDL-TRANSLATE-STELLA-TEMPLATE SYM-IDL-TRANSLATE-STELLA-THROW
       SYM-IDL-TRANSLATE-STELLA-TRY SYM-IDL-TRANSLATE-STELLA-TYPEDEF
       SYM-IDL-TRANSLATE-STELLA-UNION SYM-IDL-TRANSLATE-STELLA-UNSIGNED
       SYM-IDL-TRANSLATE-STELLA-VIRTUAL SYM-IDL-TRANSLATE-STELLA-VOID
       SYM-IDL-TRANSLATE-STELLA-VOLATILE SYM-IDL-TRANSLATE-STELLA-WHILE
       SYM-IDL-TRANSLATE-STELLA-TYPENAME NIL)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ WORD (%%VALUE ITER-000))
     (INSERT-AT TABLE (%SYMBOL.SYMBOL-NAME WORD)
      (IDL-YIELD-RENAMED-RESERVED-WORD WORD))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (INSERT-AT TABLE "++" (WRAP-STRING "stella_Increment"))
   (INSERT-AT TABLE "--" (WRAP-STRING "stella_Decrement"))
   (CL:RETURN-FROM IDL-CREATE-RESERVED-WORD-TABLE TABLE)))

;;; (DEFGLOBAL *IDL-RESERVED-WORD-TABLE* ...)

(CL:DEFVAR *IDL-RESERVED-WORD-TABLE* NULL)

;;; (DEFUN (IDL-LOOKUP-RESERVED-WORD-TABLE STRING-WRAPPER) ...)

(CL:DEFUN IDL-LOOKUP-RESERVED-WORD-TABLE (WORD)
  (CL:LET*
   ((ENTRY
     (LOOKUP *IDL-RESERVED-WORD-TABLE* (%SYMBOL.SYMBOL-NAME WORD))))
   (CL:IF (CL:NOT (CL:EQ ENTRY NULL))
    (CL:RETURN-FROM IDL-LOOKUP-RESERVED-WORD-TABLE
     (WRAP-STRING (%STRING-WRAPPER.WRAPPER-VALUE ENTRY)))
    (CL:RETURN-FROM IDL-LOOKUP-RESERVED-WORD-TABLE NULL))))

;;; (DEFUN (IDL-TRANSLATE-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-NAME (NAMESYMBOL)
  (CL:LET* ((RESERVEDNAME (IDL-LOOKUP-RESERVED-WORD-TABLE NAMESYMBOL)))
   (CL:WHEN (CL:EQ NAMESYMBOL NULL)
    (CL:RETURN-FROM IDL-TRANSLATE-NAME (WRAP-STRING "NULL")))
   (CL:WHEN (CL:NOT (CL:EQ RESERVEDNAME NULL))
    (CL:RETURN-FROM IDL-TRANSLATE-NAME RESERVEDNAME))
   (CL:RETURN-FROM IDL-TRANSLATE-NAME
    (WRAP-STRING
     (IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS
      (IDL-CHANGE-CASE NAMESYMBOL KWD-IDL-TRANSLATE-LOWERCASE)
      KWD-IDL-TRANSLATE-LOWERCASE)))))

;;; (DEFUN (IDL-TRANSLATE-SYMBOL-CONSTANT-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-SYMBOL-CONSTANT-NAME (SYMBOL)
  (CL:LET* ((PREFIX STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING PREFIX))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE SYMBOL)))
    (CL:COND
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ PREFIX
        (CONCATENATE "SYM_"
         (CONTEXT-NAME (%SYMBOL.HOME-CONTEXT SYMBOL))))))
     ((SUBTYPE-OF-SURROGATE? TEST-VALUE-000)
      (CL:PROGN
       (CL:SETQ PREFIX
        (CONCATENATE "SGT_"
         (CONTEXT-NAME (%SURROGATE.HOME-CONTEXT SYMBOL))))))
     ((SUBTYPE-OF-KEYWORD? TEST-VALUE-000)
      (CL:PROGN (CL:SETQ PREFIX "KWD")))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM IDL-TRANSLATE-SYMBOL-CONSTANT-NAME
    (WRAP-STRING
     (IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS
      (CONCATENATE PREFIX
       (CONCATENATE "_" (%GENERALIZED-SYMBOL.SYMBOL-NAME SYMBOL)))
      KWD-IDL-TRANSLATE-UPPERCASE)))))

;;; (DEFUN (IDL-TRANSLATE-SYMBOL-CONSTANT-ID STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-SYMBOL-CONSTANT-ID (SYMBOL)
  (CL:LET*
   ((TRANSLATEDSYMBOL (IDL-TRANSLATE-SYMBOL-CONSTANT-NAME SYMBOL)))
   (CL:SETF (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDSYMBOL)
    (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE TRANSLATEDSYMBOL)
     "_id"))
   (CL:RETURN-FROM IDL-TRANSLATE-SYMBOL-CONSTANT-ID TRANSLATEDSYMBOL)))

;;; (DEFUN (IDL-TRANSLATE-SYMBOL-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-SYMBOL-NAME (SYMBOL)
  (CL:RETURN-FROM IDL-TRANSLATE-SYMBOL-NAME
   (IDL-TRANSLATE-SYMBOL-CONSTANT-NAME SYMBOL)))

;;; (DEFUN (IDL-TRANSLATE-SYMBOL-ID STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-SYMBOL-ID (SYMBOL)
  (CL:RETURN-FROM IDL-TRANSLATE-SYMBOL-ID
   (IDL-TRANSLATE-SYMBOL-CONSTANT-ID SYMBOL)))

;;; (DEFUN (IDL-TRANSLATE-SURROGATE-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-SURROGATE-NAME (SURROGATE)
  (CL:RETURN-FROM IDL-TRANSLATE-SURROGATE-NAME
   (IDL-TRANSLATE-SYMBOL-CONSTANT-NAME SURROGATE)))

;;; (DEFUN (IDL-TRANSLATE-SURROGATE-ID STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-SURROGATE-ID (SURROGATE)
  (CL:RETURN-FROM IDL-TRANSLATE-SURROGATE-ID
   (IDL-TRANSLATE-SYMBOL-CONSTANT-ID SURROGATE)))

;;; (DEFUN (IDL-TRANSLATE-KEYWORD-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-KEYWORD-NAME (KEYWORD)
  (CL:RETURN-FROM IDL-TRANSLATE-KEYWORD-NAME
   (IDL-TRANSLATE-SYMBOL-CONSTANT-NAME KEYWORD)))

;;; (DEFUN (IDL-TRANSLATE-KEYWORD-ID STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-KEYWORD-ID (KEYWORD)
  (CL:RETURN-FROM IDL-TRANSLATE-KEYWORD-ID
   (IDL-TRANSLATE-SYMBOL-CONSTANT-ID KEYWORD)))

;;; (DEFUN (IDL-TRANSLATE-CLASS-PARAMETER-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-CLASS-PARAMETER-NAME (NAMESYMBOL)
  (CL:RETURN-FROM IDL-TRANSLATE-CLASS-PARAMETER-NAME
   (WRAP-STRING
    (IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS
     (IDL-CHANGE-CASE NAMESYMBOL KWD-IDL-TRANSLATE-UPPERCASE)
     KWD-IDL-TRANSLATE-UPPERCASE))))

;;; (DEFUN (IDL-CREATE-OVERLOADED-FUNCTION-NAME SYMBOL) ...)

(CL:DEFUN IDL-CREATE-OVERLOADED-FUNCTION-NAME (FUNCTIONNAME CLASSTYPE)
  (CL:RETURN-FROM IDL-CREATE-OVERLOADED-FUNCTION-NAME
   (INTERN-SYMBOL
    (CONCATENATE (%SURROGATE.SYMBOL-NAME CLASSTYPE)
     (CONCATENATE "-" (%SYMBOL.SYMBOL-NAME FUNCTIONNAME))))))

;;; (DEFUN (IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? BOOLEAN) ...)

(CL:DEFUN IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? (METHOD)
  (CL:RETURN-FROM IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?
   (CL:AND (CL:NOT (%METHOD-SLOT.METHOD-FUNCTION? METHOD))
    (CL:NOT
     (CL:EQ
      (%STRING-WRAPPER.WRAPPER-VALUE
       (DYNAMIC-SLOT-VALUE
        (%CLASS.DYNAMIC-SLOTS
         (%SURROGATE.SURROGATE-VALUE (%METHOD-SLOT.SLOT-OWNER METHOD)))
        SYM-IDL-TRANSLATE-STELLA-CLASS-IDL-NATIVE-TYPE
        NULL-STRING-WRAPPER))
      STELLA::NULL-STRING)))))

;;; (DEFUN (IDL-TRANSLATE-FUNCTION-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-FUNCTION-NAME (FUNCTION)
  (CL:LET*
   ((FUNCTIONNAME (%METHOD-SLOT.SLOT-NAME FUNCTION))
    (TRANSLATEDNAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDNAME))
   (CL:WHEN (IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? FUNCTION)
    (CL:SETQ FUNCTIONNAME
     (IDL-CREATE-OVERLOADED-FUNCTION-NAME FUNCTIONNAME
      (%METHOD-SLOT.SLOT-OWNER FUNCTION))))
   (CL:SETQ TRANSLATEDNAME
    (%STRING-WRAPPER.WRAPPER-VALUE (IDL-TRANSLATE-NAME FUNCTIONNAME)))
   (CL:WHEN (%METHOD-SLOT.METHOD-SETTER? FUNCTION)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_setter")))
   (CL:WHEN (SLOT-READER? FUNCTION)
    (CL:SETQ TRANSLATEDNAME (CONCATENATE TRANSLATEDNAME "_reader")))
   (CL:RETURN-FROM IDL-TRANSLATE-FUNCTION-NAME
    (WRAP-STRING TRANSLATEDNAME))))

;;; (DEFUN (IDL-TRANSLATE-METHOD-PARAMETER OBJECT) ...)

(CL:DEFUN IDL-TRANSLATE-METHOD-PARAMETER (NAME TYPE DIRECTION)
  (CL:RETURN-FROM IDL-TRANSLATE-METHOD-PARAMETER
   (CONS (IDL-TRANSLATE-NAME DIRECTION)
    (CONS (IDL-TRANSLATE-TYPE-SPEC TYPE)
     (CONS (IDL-TRANSLATE-NAME NAME) NIL)))))

;;; (DEFUN (IDL-TRANSLATE-METHOD-PARAMETERS CONS) ...)

(CL:DEFUN IDL-TRANSLATE-METHOD-PARAMETERS (METHOD)
  (CL:LET* ((RESULT NIL) (DIRECTIONS NIL))
   (CL:IF (EMPTY? (METHOD-PARAMETER-DIRECTIONS METHOD))
    (CL:LET*
     ((NAME NULL) (ITER-000 (REST (METHOD-PARAMETER-NAMES METHOD)))
      (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ NAME (%%VALUE ITER-000)) (CL:SETQ NAME NAME)
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN
        (CL:SETQ COLLECT-000 (CONS SYM-IDL-TRANSLATE-STELLA-IN NIL))
        (CL:IF (CL:EQ DIRECTIONS NIL) (CL:SETQ DIRECTIONS COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST DIRECTIONS COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000)
         (CONS SYM-IDL-TRANSLATE-STELLA-IN NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:SETQ DIRECTIONS (REST (METHOD-PARAMETER-DIRECTIONS METHOD))))
   (CL:LET*
    ((NAME NULL) (ITER-001 (REST (METHOD-PARAMETER-NAMES METHOD)))
     (TYPE NULL)
     (ITER-002 (REST (METHOD-PARAMETER-TYPE-SPECIFIERS METHOD)))
     (DIRECTION NULL) (ITER-003 DIRECTIONS) (COLLECT-001 NULL))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-001 NIL))
      (CL:NOT (CL:EQ ITER-002 NIL)) (CL:NOT (CL:EQ ITER-003 NIL)))
     DO (CL:SETQ NAME (%%VALUE ITER-001))
     (CL:SETQ TYPE (%%VALUE ITER-002))
     (CL:SETQ DIRECTION (%%VALUE ITER-003))
     (CL:IF (CL:EQ COLLECT-001 NULL)
      (CL:PROGN
       (CL:SETQ COLLECT-001
        (CONS (IDL-TRANSLATE-METHOD-PARAMETER NAME TYPE DIRECTION)
         NIL))
       (CL:IF (CL:EQ RESULT NIL) (CL:SETQ RESULT COLLECT-001)
        (ADD-CONS-TO-END-OF-CONS-LIST RESULT COLLECT-001)))
      (CL:PROGN
       (CL:SETF (%%REST COLLECT-001)
        (CONS (IDL-TRANSLATE-METHOD-PARAMETER NAME TYPE DIRECTION)
         NIL))
       (CL:SETQ COLLECT-001 (%%REST COLLECT-001))))
     (CL:SETQ ITER-001 (%%REST ITER-001))
     (CL:SETQ ITER-002 (%%REST ITER-002))
     (CL:SETQ ITER-003 (%%REST ITER-003))))
   (CL:RETURN-FROM IDL-TRANSLATE-METHOD-PARAMETERS RESULT)))

;;; (DEFUN (IDL-TRANSLATE-CONSTRUCTOR-NAME STRING-WRAPPER) ...)

(CL:DEFUN IDL-TRANSLATE-CONSTRUCTOR-NAME (CONSTRUCTOR)
  (CL:RETURN-FROM IDL-TRANSLATE-CONSTRUCTOR-NAME
   (IDL-TRANSLATE-CLASS-NAME (%METHOD-SLOT.SLOT-NAME CONSTRUCTOR))))

(CL:DEFUN HELP-STARTUP-IDL-TRANSLATE1 ()
  (CL:PROGN
   (CL:SETQ SGT-IDL-TRANSLATE-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-GLOBAL-VARIABLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GLOBAL-VARIABLE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-MACRO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "MACRO" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-PRINT-METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRINT-METHOD" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-STARTUP-TIME-PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-TIME-PROGN" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-IDL_TYPEDEF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_TYPEDEF" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-IDL_IDENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_IDENT" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-IDL_LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IDL_LITERAL" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CLASS-IDL-NATIVE-TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLASS-IDL-NATIVE-TYPE" NULL 0))
   (CL:SETQ KWD-IDL-TRANSLATE-CAPITALIZED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAPITALIZED" NULL 2))
   (CL:SETQ KWD-IDL-TRANSLATE-UPPERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPPERCASE" NULL 2))
   (CL:SETQ KWD-IDL-TRANSLATE-LOWERCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LOWERCASE" NULL 2))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-ASM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ASM" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-AUTO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "AUTO" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "BREAK" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CASE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CATCH" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CHAR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CHAR" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CONST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONST" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONTINUE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-DEFAULT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DEFAULT" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-DELETE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DELETE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-DO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DO" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-DOUBLE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "DOUBLE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-ELSE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ELSE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-ENUM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ENUM" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-EXTERN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "EXTERN" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-FLOAT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FLOAT" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-FOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FOR" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-FRIEND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "FRIEND" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-GOTO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "GOTO" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "IF" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-INLINE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INLINE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-INT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "INT" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-LONG
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LONG" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-OPERATOR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OPERATOR" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-PRIVATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRIVATE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-PROTECTED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROTECTED" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-PUBLIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-REGISTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "REGISTER" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RETURN" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-SHORT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SHORT" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-SIGNED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIGNED" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-SIZEOF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SIZEOF" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-STATIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STATIC" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-STRUCT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRUCT" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-SWITCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SWITCH" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-TEMPLATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TEMPLATE" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THROW" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-TRY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TRY" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-TYPEDEF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPEDEF" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-UNION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNION" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-UNSIGNED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNSIGNED" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-VIRTUAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VIRTUAL" NULL 0))
   (CL:SETQ SYM-IDL-TRANSLATE-STELLA-VOID
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VOID" NULL 0)))
  :VOID)

(CL:DEFUN STARTUP-IDL-TRANSLATE ()
  (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 1)
   (DEFINE-MODULE-FROM-STRINGIFIED-SOURCE "/IDL-THEORY"
    "(:CASE-SENSITIVE? TRUE :USES () :LISP-PACKAGE \"IDL\")")
   (DEFINE-MODULE-FROM-STRINGIFIED-SOURCE "/IDL-THEORY/IDL-USER-THEORY"
    "(:CASE-SENSITIVE? TRUE :USES () :LISP-PACKAGE \"IDL-USER\")"))
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (HELP-STARTUP-IDL-TRANSLATE1)
    (CL:SETQ SYM-IDL-TRANSLATE-STELLA-VOLATILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VOLATILE" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-STELLA-WHILE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WHILE" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-STELLA-TYPENAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "TYPENAME" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-STELLA-IN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "IN" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-STELLA-STARTUP-IDL-TRANSLATE
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-IDL-TRANSLATE" NULL 0))
    (CL:SETQ SYM-IDL-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *IDL-CHARACTER-SUBSTITUTION-TABLE*
     (IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE))
    (CL:SETQ *IDL-RESERVED-WORD-TABLE*
     (IDL-CREATE-RESERVED-WORD-TABLE)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-A-TREE"
     "(DEFUN (IDL-TRANSLATE-A-TREE OBJECT) ((TREE OBJECT)))"
     (CL:FUNCTION IDL-TRANSLATE-A-TREE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-UNIT"
     "(DEFUN (IDL-TRANSLATE-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION IDL-TRANSLATE-UNIT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-DEFTYPE-UNIT"
     "(DEFUN (IDL-TRANSLATE-DEFTYPE-UNIT CONS) ((UNIT TRANSLATION-UNIT)))"
     (CL:FUNCTION IDL-TRANSLATE-DEFTYPE-UNIT) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-NULL"
     "(DEFUN (IDL-TRANSLATE-NULL CONS) ())"
     (CL:FUNCTION IDL-TRANSLATE-NULL) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (IDL-TRANSLATE-ATOMIC-TREE CONS) ((TREE OBJECT)))"
     (WRAP-METHOD-CODE (CL:FUNCTION IDL-TRANSLATE-ATOMIC-TREE)) NULL)
    (DEFINE-METHOD-OBJECT
     "(DEFMETHOD (IDL-TRANSLATE-ATOMIC-TREE CONS) ((TREE SYMBOL)))"
     (WRAP-METHOD-CODE (CL:FUNCTION IDL-TRANSLATE-ATOMIC-TREE)) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-TYPE-SPEC"
     "(DEFUN (IDL-TRANSLATE-TYPE-SPEC STRING-WRAPPER) ((TYPESPEC TYPE-SPEC)))"
     (CL:FUNCTION IDL-TRANSLATE-TYPE-SPEC) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-CLASS-NAME"
     "(DEFUN (IDL-TRANSLATE-CLASS-NAME STRING-WRAPPER) ((NAMESYMBOL GENERALIZED-SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-CLASS-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE"
     "(DEFUN (IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE STRING) ())"
     (CL:FUNCTION IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS"
     "(DEFUN (IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS STRING) ((NAME STRING) (CASECONVENTION KEYWORD)))"
     (CL:FUNCTION IDL-SUBSTITUTE-FORBIDDEN-CHARACTERS) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-CHANGE-CASE"
     "(DEFUN (IDL-CHANGE-CASE STRING) ((SYMBOL GENERALIZED-SYMBOL) (CASECONVENTION KEYWORD)))"
     (CL:FUNCTION IDL-CHANGE-CASE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-YIELD-RENAMED-RESERVED-WORD"
     "(DEFUN (IDL-YIELD-RENAMED-RESERVED-WORD STRING-WRAPPER) ((WORD SYMBOL)))"
     (CL:FUNCTION IDL-YIELD-RENAMED-RESERVED-WORD) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-CREATE-RESERVED-WORD-TABLE"
     "(DEFUN (IDL-CREATE-RESERVED-WORD-TABLE STRING-HASH-TABLE) ())"
     (CL:FUNCTION IDL-CREATE-RESERVED-WORD-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-LOOKUP-RESERVED-WORD-TABLE"
     "(DEFUN (IDL-LOOKUP-RESERVED-WORD-TABLE STRING-WRAPPER) ((WORD SYMBOL)))"
     (CL:FUNCTION IDL-LOOKUP-RESERVED-WORD-TABLE) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-NAME"
     "(DEFUN (IDL-TRANSLATE-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-SYMBOL-CONSTANT-NAME"
     "(DEFUN (IDL-TRANSLATE-SYMBOL-CONSTANT-NAME STRING-WRAPPER) ((SYMBOL GENERALIZED-SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-SYMBOL-CONSTANT-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-SYMBOL-CONSTANT-ID"
     "(DEFUN (IDL-TRANSLATE-SYMBOL-CONSTANT-ID STRING-WRAPPER) ((SYMBOL GENERALIZED-SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-SYMBOL-CONSTANT-ID) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-SYMBOL-NAME"
     "(DEFUN (IDL-TRANSLATE-SYMBOL-NAME STRING-WRAPPER) ((SYMBOL SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-SYMBOL-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-SYMBOL-ID"
     "(DEFUN (IDL-TRANSLATE-SYMBOL-ID STRING-WRAPPER) ((SYMBOL SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-SYMBOL-ID) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-SURROGATE-NAME"
     "(DEFUN (IDL-TRANSLATE-SURROGATE-NAME STRING-WRAPPER) ((SURROGATE SURROGATE)))"
     (CL:FUNCTION IDL-TRANSLATE-SURROGATE-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-SURROGATE-ID"
     "(DEFUN (IDL-TRANSLATE-SURROGATE-ID STRING-WRAPPER) ((SURROGATE SURROGATE)))"
     (CL:FUNCTION IDL-TRANSLATE-SURROGATE-ID) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-KEYWORD-NAME"
     "(DEFUN (IDL-TRANSLATE-KEYWORD-NAME STRING-WRAPPER) ((KEYWORD KEYWORD)))"
     (CL:FUNCTION IDL-TRANSLATE-KEYWORD-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-KEYWORD-ID"
     "(DEFUN (IDL-TRANSLATE-KEYWORD-ID STRING-WRAPPER) ((KEYWORD KEYWORD)))"
     (CL:FUNCTION IDL-TRANSLATE-KEYWORD-ID) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-CLASS-PARAMETER-NAME"
     "(DEFUN (IDL-TRANSLATE-CLASS-PARAMETER-NAME STRING-WRAPPER) ((NAMESYMBOL SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-CLASS-PARAMETER-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-CREATE-OVERLOADED-FUNCTION-NAME"
     "(DEFUN (IDL-CREATE-OVERLOADED-FUNCTION-NAME SYMBOL) ((FUNCTIONNAME SYMBOL) (CLASSTYPE TYPE)))"
     (CL:FUNCTION IDL-CREATE-OVERLOADED-FUNCTION-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?"
     "(DEFUN (IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION? BOOLEAN) ((METHOD METHOD-SLOT)))"
     (CL:FUNCTION IDL-METHOD-OBJECT-IS-OVERLOADED-FUNCTION?) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-FUNCTION-NAME"
     "(DEFUN (IDL-TRANSLATE-FUNCTION-NAME STRING-WRAPPER) ((FUNCTION METHOD-SLOT)))"
     (CL:FUNCTION IDL-TRANSLATE-FUNCTION-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-METHOD-PARAMETER"
     "(DEFUN (IDL-TRANSLATE-METHOD-PARAMETER OBJECT) ((NAME SYMBOL) (TYPE TYPE-SPEC) (DIRECTION SYMBOL)))"
     (CL:FUNCTION IDL-TRANSLATE-METHOD-PARAMETER) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-METHOD-PARAMETERS"
     "(DEFUN (IDL-TRANSLATE-METHOD-PARAMETERS CONS) ((METHOD METHOD-SLOT)))"
     (CL:FUNCTION IDL-TRANSLATE-METHOD-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "IDL-TRANSLATE-CONSTRUCTOR-NAME"
     "(DEFUN (IDL-TRANSLATE-CONSTRUCTOR-NAME STRING-WRAPPER) ((CONSTRUCTOR METHOD-SLOT)))"
     (CL:FUNCTION IDL-TRANSLATE-CONSTRUCTOR-NAME) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-IDL-TRANSLATE"
     "(DEFUN STARTUP-IDL-TRANSLATE () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-IDL-TRANSLATE) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION
        SYM-IDL-TRANSLATE-STELLA-STARTUP-IDL-TRANSLATE)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-IDL-TRANSLATE-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupIdlTranslate") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *IDL-CHARACTER-SUBSTITUTION-TABLE* STRING (IDL-CREATE-CHARACTER-SUBSTITUTION-TABLE))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *IDL-RESERVED-WORD-TABLE* (STRING-HASH-TABLE OF STRING STRING-WRAPPER) (IDL-CREATE-RESERVED-WORD-TABLE))"
     NULL)))
  :VOID)
