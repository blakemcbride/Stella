;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; cpp-output.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-VRLET NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-STRING NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-NULL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-SPECIAL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-*CURRENT-STREAM* NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-NEW NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-OUTPUT-STRING-STREAM NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-SETQ NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-THE-STRING NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CAST NULL)
(CL:DEFVAR SGT-CPP-OUTPUT-STELLA-CONS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_PROGN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_STATEMENTS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_COMMENT NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_CLASS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_HANDLER_CASE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_CATCH NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_SIGNAL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_UNWIND_PROTECT NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_VERBATIM NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_CAST NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_GLOBAL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_SPECIAL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_LOCAL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_TYPE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_DEREFERENCE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_ARRAY_REFERENCE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_WITH_PROCESS_LOCK NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_BREAK NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_CONTINUE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_GOTO NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_GOTO_LABEL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_IF NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_SIGNATURE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SIGNATURE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_COND NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_CASE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_WHEN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_UNLESS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_ASSIGN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_LOOP NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_WHILE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_FOREACH NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_BLOCK NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_IDENT NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_PRINT_STREAM NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_PRINT_NATIVE_STREAM NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_LITERAL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_METHOD NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_RETURN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_SYMBOL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_MAKE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_FUNCALL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CODE_CALL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_POINTER NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_METHOD_POINTER NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_SLOT_VALUE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE_SETTER NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_DECLARATIONS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_DEFINITIONS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_SIGNATURES NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_UNARY_OP NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_BINARY_OP NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_TERNARY_OP NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SETTER_CALL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CALL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_METHOD_CALL NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_ACTUALS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_DEFPRINT NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_EXTERN_C NULL)
(CL:DEFVAR KWD-CPP-OUTPUT-UNBIND-WITH-DESTRUCTORS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-NEWLINE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_NULL_VALUE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-ASSIGN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-SCOLON NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-LPAREN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-RPAREN NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_NEW NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_THROW NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_OUT NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_ERROR NULL)
(CL:DEFVAR KWD-CPP-OUTPUT-PUBLIC NULL)
(CL:DEFVAR KWD-CPP-OUTPUT-PRIVATE NULL)
(CL:DEFVAR KWD-CPP-OUTPUT-PROTECTED NULL)
(CL:DEFVAR KWD-CPP-OUTPUT-CPP-STANDALONE NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-CPP_VAR_ARGS NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-STARTUP-CPP-OUTPUT NULL)
(CL:DEFVAR SYM-CPP-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* *MODULE* *TRANSLATOROUTPUTLANGUAGE*
  NULL-INTEGER NULL-CHARACTER EOL *CURRENT-STREAM* NIL))

;;; (DEFSPECIAL *CPP-INDENT-CHARS* ...)

(CL:DEFVAR *CPP-INDENT-CHARS* 0)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *CPP-INDENT-CHARS*))

;;; (DEFSPECIAL *OUTPUTTINGDEFPRINT?* ...)

(CL:DEFVAR *OUTPUTTINGDEFPRINT?* CL:NIL
  "`true' when outputting a defprint, used to 
            conditionally dereference streams in print-native-stream 
            statements.  Also used to take the address of streams
            when passed to functions inside of a defprint")

;;; (DEFMACRO CPP-OUTPUT-TO-STRING ...)

(CL:DEFUN CPP-OUTPUT-TO-STRING (STATEMENT)
  (CL:LET* ((RESULTVAR (LOCAL-GENSYM "RESULT")))
   (CL:RETURN-FROM CPP-OUTPUT-TO-STRING
    (LIST* SYM-CPP-OUTPUT-STELLA-VRLET
     (CONS
      (CONS RESULTVAR
       (LIST* SYM-CPP-OUTPUT-STELLA-STRING SYM-CPP-OUTPUT-STELLA-NULL
        NIL))
      NIL)
     (LIST* SYM-CPP-OUTPUT-STELLA-SPECIAL
      (CONS
       (LIST* SYM-CPP-OUTPUT-STELLA-*CURRENT-STREAM*
        (LIST* SYM-CPP-OUTPUT-STELLA-NEW
         SYM-CPP-OUTPUT-STELLA-OUTPUT-STRING-STREAM NIL)
        NIL)
       NIL)
      STATEMENT
      (CONS
       (LIST* SYM-CPP-OUTPUT-STELLA-SETQ RESULTVAR
        (CONS
         (LIST* SYM-CPP-OUTPUT-STELLA-THE-STRING
          (LIST* SYM-CPP-OUTPUT-STELLA-CAST
           SYM-CPP-OUTPUT-STELLA-*CURRENT-STREAM*
           SYM-CPP-OUTPUT-STELLA-OUTPUT-STRING-STREAM NIL)
          NIL)
         NIL))
       NIL))
     RESULTVAR NIL))))

;;; (DEFUN CPP-OUTPUT-PARSE-TREE ...)

(CL:DEFUN CPP-OUTPUT-PARSE-TREE (CONSTREE)
  (CL:LET* ((*CPP-INDENT-CHARS* 0))
   (CL:DECLARE (CL:SPECIAL *CPP-INDENT-CHARS*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *CPP-INDENT-CHARS*))
   (CPP-OUTPUT-STATEMENT CONSTREE))
  :VOID)

;;; (DEFUN (CPP-FLATTEN-STATEMENTS CONS) ...)

(CL:DEFUN CPP-FLATTEN-STATEMENTS (STATEMENTS)
  (CL:IF
   (CL:AND (CL:NOT (CL:EQ STATEMENTS NULL))
    (CL:NOT (CL:EQ STATEMENTS NIL)))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE (%%VALUE STATEMENTS))))
    (CL:COND
     ((CL:EQ TEST-VALUE-000 SGT-CPP-OUTPUT-STELLA-CONS)
      (CL:LET* ((FLATTENEDSUBTREE NIL) (FLATTENEDTREE NIL))
       (CL:LOOP WHILE (CL:NOT (CL:EQ STATEMENTS NIL)) DO
        (CL:SETQ FLATTENEDSUBTREE
         (CPP-FLATTEN-STATEMENTS (%%VALUE STATEMENTS)))
        (CL:IF (CONS? (%%VALUE FLATTENEDSUBTREE))
         (CL:SETQ FLATTENEDTREE
          (CONCATENATE (REVERSE FLATTENEDSUBTREE) FLATTENEDTREE))
         (CL:SETQ FLATTENEDTREE (CONS FLATTENEDSUBTREE FLATTENEDTREE)))
        (CL:SETQ STATEMENTS (%%REST STATEMENTS)))
       (CL:RETURN-FROM CPP-FLATTEN-STATEMENTS
        (REVERSE FLATTENEDTREE))))
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
      (CL:LET* ((TEST-VALUE-001 (%%VALUE STATEMENTS)))
       (CL:COND
        ((CL:OR (CL:EQ TEST-VALUE-001 SYM-CPP-OUTPUT-STELLA-CPP_PROGN)
          (CL:EQ TEST-VALUE-001 SYM-CPP-OUTPUT-STELLA-CPP_STATEMENTS))
         (CL:IF (CL:EQ (%%REST STATEMENTS) NIL)
          (CL:RETURN-FROM CPP-FLATTEN-STATEMENTS NIL)
          (CL:RETURN-FROM CPP-FLATTEN-STATEMENTS
           (CPP-FLATTEN-STATEMENTS (%%REST STATEMENTS)))))
        (CL:T (CL:RETURN-FROM CPP-FLATTEN-STATEMENTS STATEMENTS)))))
     (CL:T
      (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
       (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
        "`" TEST-VALUE-000 "' is not a valid case option")
       (CL:ERROR
        (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
   (CL:RETURN-FROM CPP-FLATTEN-STATEMENTS STATEMENTS)))

;;; (DEFUN (CPP-PROGNIFY-STATEMENT CONS) ...)

(CL:DEFUN CPP-PROGNIFY-STATEMENT (STATEMENT)
  (CL:IF (CPP-PROGN? STATEMENT)
   (CL:RETURN-FROM CPP-PROGNIFY-STATEMENT STATEMENT)
   (CL:RETURN-FROM CPP-PROGNIFY-STATEMENT
    (LIST* SYM-CPP-OUTPUT-STELLA-CPP_PROGN
     (LIST* SYM-CPP-OUTPUT-STELLA-CPP_STATEMENTS STATEMENT NIL) NIL))))

;;; (DEFUN (CPP-STATEMENT-TO-LIST CONS) ...)

(CL:DEFUN CPP-STATEMENT-TO-LIST (STATEMENT)
  (CL:LET* ((FLATTENEDSTATEMENT (CPP-FLATTEN-STATEMENTS STATEMENT)))
   (CL:IF (CL:EQ FLATTENEDSTATEMENT STATEMENT)
    (CL:RETURN-FROM CPP-STATEMENT-TO-LIST
     (CONS FLATTENEDSTATEMENT NIL))
    (CL:RETURN-FROM CPP-STATEMENT-TO-LIST FLATTENEDSTATEMENT))))

;;; (DEFUN CPP-OUTPUT-STATEMENT ...)

(CL:DEFUN CPP-OUTPUT-STATEMENT (STATEMENT)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE STATEMENT) SGT-CPP-OUTPUT-STELLA-CONS)
    (CL:PROGN
     (CL:WHEN (CL:EQ STATEMENT NIL)
      (CL:RETURN-FROM CPP-OUTPUT-STATEMENT))
     (CL:IF
      (CL:OR (CONS? (%%VALUE STATEMENT))
       (CL:EQ (%%VALUE STATEMENT) NULL))
      (CL:PROGN (CPP-OUTPUT-STATEMENT (%%VALUE STATEMENT))
       (CPP-OUTPUT-STATEMENT (%%REST STATEMENT)))
      (CL:LET* ((TEST-VALUE-000 (%%VALUE STATEMENT)))
       (CL:COND
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_COMMENT)
         (CPP-OUTPUT-COMMENT (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_CLASS)
         (CPP-OUTPUT-CLASS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_HANDLER_CASE)
         (CPP-OUTPUT-HANDLER-CASE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_CATCH)
         (CPP-OUTPUT-CATCH (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_SIGNAL)
         (CPP-OUTPUT-SIGNAL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_UNWIND_PROTECT)
         (CPP-OUTPUT-UNWIND-PROTECT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_VERBATIM)
         (CPP-OUTPUT-VERBATIM (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_CAST)
         (CPP-OUTPUT-CAST (%%REST STATEMENT)))
        ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_GLOBAL)
          (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_SPECIAL)
          (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_LOCAL))
         (CPP-OUTPUT-VARIABLE-DEFINITION STATEMENT))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_TYPE)
         (CPP-OUTPUT-TYPE-EXPRESSION (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_DEREFERENCE)
         (CPP-OUTPUT-DEREFERENCE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_ARRAY_REFERENCE)
         (CPP-OUTPUT-ARRAY-REFERENCE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_PROGN)
         (CPP-OUTPUT-PROGN (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_WITH_PROCESS_LOCK)
         (CPP-OUTPUT-WITH-PROCESS-LOCK (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_BREAK)
         (CPP-OUTPUT-BREAK))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_CONTINUE)
         (CPP-OUTPUT-CONTINUE))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_GOTO)
         (CPP-OUTPUT-GOTO (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_GOTO_LABEL)
         (CPP-OUTPUT-GOTO-LABEL (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_IF)
         (CPP-OUTPUT-IF (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_SIGNATURE)
         (CPP-OUTPUT-FUNCALL-FUNCTION-SIGNATURE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SIGNATURE)
         (CPP-OUTPUT-METHOD-CODE-CALL-SIGNATURE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_COND)
         (CPP-OUTPUT-COND (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_CASE)
         (CPP-OUTPUT-CASE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_WHEN)
         (CPP-OUTPUT-WHEN (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_UNLESS)
         (CPP-OUTPUT-UNLESS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_ASSIGN)
         (CPP-OUTPUT-ASSIGNMENT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_LOOP)
         (CPP-OUTPUT-LOOP (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_WHILE)
         (CPP-OUTPUT-WHILE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_FOREACH)
         (CPP-OUTPUT-FOREACH (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_BLOCK)
         (CPP-OUTPUT-BLOCK (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_IDENT)
         (CPP-OUTPUT-IDENTIFIER (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_PRINT_STREAM)
         (CPP-OUTPUT-PRINT-STREAM (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_PRINT_NATIVE_STREAM)
         (CPP-OUTPUT-PRINT-NATIVE-STREAM (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_LITERAL)
         (CPP-OUTPUT-LITERAL (%%VALUE (%%REST STATEMENT))))
        ((CL:OR
          (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION)
          (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_METHOD))
         (CPP-OUTPUT-FUNCTION (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_RETURN)
         (CPP-OUTPUT-RETURN (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_SYMBOL)
         (CPP-OUTPUT-LITERAL (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_MAKE)
         (CPP-OUTPUT-MAKE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_FUNCALL)
         (CPP-OUTPUT-FUNCALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CODE_CALL)
         (CPP-OUTPUT-METHOD-CODE-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_POINTER)
         (CPP-OUTPUT-FUNCTION-POINTER (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_METHOD_POINTER)
         (CPP-OUTPUT-METHOD-POINTER (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE)
         (CPP-OUTPUT-SLOT-VALUE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_SLOT_VALUE)
         (CPP-OUTPUT-REFERENCED-SLOT-VALUE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE_SETTER)
         (CPP-OUTPUT-SLOT-VALUE-SETTER (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_DECLARATIONS)
         (CPP-OUTPUT-DECLARATIONS (%%VALUE (%%REST STATEMENT))
          (%%VALUE (%%REST (%%REST STATEMENT)))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_DEFINITIONS)
         (CPP-OUTPUT-DEFINITIONS (%%VALUE (%%REST STATEMENT))
          (%%VALUE (%%REST (%%REST STATEMENT)))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_SIGNATURES)
         (CPP-OUTPUT-SIGNATURES (%%VALUE (%%REST STATEMENT))
          (%%VALUE (%%REST (%%REST STATEMENT)))))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_STATEMENTS)
         (CPP-OUTPUT-STATEMENTS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_UNARY_OP)
         (CPP-OUTPUT-UNARY-OPERATOR (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_BINARY_OP)
         (CPP-OUTPUT-BINARY-OPERATOR (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_TERNARY_OP)
         (CPP-OUTPUT-TERNARY-OPERATOR (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL)
         (CPP-OUTPUT-FUNCTION-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SETTER_CALL)
         (CPP-OUTPUT-METHOD-SETTER-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CALL)
         (CPP-OUTPUT-METHOD-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_METHOD_CALL)
         (CPP-OUTPUT-REFERENCED-METHOD-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_ACTUALS)
         (CPP-OUTPUT-ACTUAL-PARAMETERS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_DEFPRINT)
         (CPP-OUTPUT-DEFPRINT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_EXTERN_C)
         (CPP-OUTPUT-EXTERN-C (%%REST STATEMENT)))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION
            (THE-STRING-READER STREAM-000))))))))))
   (CL:T
    (CL:WHEN (CL:EQ STATEMENT NULL)
     (CL:RETURN-FROM CPP-OUTPUT-STATEMENT))
    (CPP-OUTPUT-ATOMIC-EXPRESSION STATEMENT)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-VERBATIM ...)

(CL:DEFUN CPP-OUTPUT-VERBATIM (VERBATIMSTATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE VERBATIMSTATEMENT))
  :VOID)

;;; (DEFUN CPP-OUTPUT-COMMENT ...)

(CL:DEFUN CPP-OUTPUT-COMMENT (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "// ")
  (CL:LET* ((RETURNP CL:NIL))
   (CL:LET*
    ((CHAR NULL-CHARACTER)
     (VECTOR-000 (%STRING-WRAPPER.WRAPPER-VALUE TREE)) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CHAR
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:CASE CHAR
      (#\Linefeed
       (CL:WHEN (CL:NOT RETURNP)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         EOL)
        (CPP-INDENT)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "// "))
       (CL:SETQ RETURNP CL:NIL))
      (#\Return
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        EOL)
       (CPP-INDENT)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "// ")
       (CL:SETQ RETURNP CL:T))
      (CL:OTHERWISE
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        CHAR)
       (CL:SETQ RETURNP CL:NIL)))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-DEREFERENCE ...)

(CL:DEFUN CPP-OUTPUT-DEREFERENCE (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "*")
  (CPP-OUTPUT-STATEMENT TREE)
  :VOID)

;;; (DEFUN CPP-OUTPUT-ARRAY-REFERENCE ...)

(CL:DEFUN CPP-OUTPUT-ARRAY-REFERENCE (TREE)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (%%VALUE TREE))
  (CL:LET* ((INDEXEXPRESSION NULL) (ITER-000 (%%REST TREE)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ INDEXEXPRESSION (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "[")
    (CPP-OUTPUT-STATEMENT INDEXEXPRESSION)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "]")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-CAST ...)

(CL:DEFUN CPP-OUTPUT-CAST (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CL:COND
   ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE (%%VALUE (%%REST TREE))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "("
     (UNWRAP-STRING (%%VALUE (%%REST TREE))) ")"))
   (CL:T (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CPP-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "))")
  :VOID)

;;; (DEFUN CPP-OUTPUT-SIGNAL ...)

(CL:DEFUN CPP-OUTPUT-SIGNAL (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "throw ")
  (CPP-OUTPUT-STATEMENT (%%VALUE TREE))
  :VOID)

;;; (DEFUN CPP-OUTPUT-HANDLER-CASE ...)

(CL:DEFUN CPP-OUTPUT-HANDLER-CASE (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "try {" EOL)
  (CPP-BUMP-INDENT)
  (CPP-OUTPUT-STATEMENTS (CPP-STATEMENT-TO-LIST (%%VALUE TREE)))
  (CPP-UNBUMP-INDENT)
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  (CPP-OUTPUT-STATEMENTS (%%REST TREE))
  :VOID)

;;; (DEFUN CPP-OUTPUT-CATCH ...)

(CL:DEFUN CPP-OUTPUT-CATCH (TREE)
  (CL:LET* ((VARIABLEDECL (%%VALUE TREE)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "catch (")
   (CPP-OUTPUT-STATEMENT (%%VALUE VARIABLEDECL))
   (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST VARIABLEDECL)) NULL))
    (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST VARIABLEDECL))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") {" EOL)
   (CPP-BUMP-INDENT)
   (CPP-OUTPUT-STATEMENTS (CPP-FLATTEN-STATEMENTS (%%REST TREE)))
   (CPP-UNBUMP-INDENT) (CPP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-UNWIND-PROTECT ...)

(CL:DEFUN CPP-OUTPUT-UNWIND-PROTECT (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "try {" EOL)
  (CPP-BUMP-INDENT)
  (CPP-OUTPUT-STATEMENTS (CPP-STATEMENT-TO-LIST (%%VALUE TREE)))
  (CPP-UNBUMP-INDENT)
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "catch (...) {" EOL)
  (CPP-BUMP-INDENT)
  (CPP-OUTPUT-STATEMENTS (COPY-CONS-TREE (%%REST TREE)))
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "throw;" EOL)
  (CPP-UNBUMP-INDENT)
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  (CPP-OUTPUT-STATEMENTS (%%REST TREE))
  :VOID)

;;; (DEFUN CPP-OUTPUT-GLOBAL-DECLARATION ...)

(CL:DEFUN CPP-OUTPUT-GLOBAL-DECLARATION (GLOBAL)
  (CL:LET*
   ((KIND (%%VALUE GLOBAL)) (TYPE (%%VALUE (%%REST (%%REST GLOBAL))))
    (NAME (FOURTH GLOBAL)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "extern ")
   (CL:COND
    ((CL:EQ KIND SYM-CPP-OUTPUT-STELLA-CPP_SPECIAL)
     (CL:IF
      (CL:EQ (SPECIAL-IMPLEMENTATION-STYLE)
       KWD-CPP-OUTPUT-UNBIND-WITH-DESTRUCTORS)
      (CPP-OUTPUT-STATEMENT
       (LIST* SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL
        (LIST* SYM-CPP-OUTPUT-STELLA-CPP_IDENT
         (WRAP-STRING "DECLARE_STELLA_SPECIAL") NIL)
        (LIST* SYM-CPP-OUTPUT-STELLA-CPP_ACTUALS
         (LIST* SYM-CPP-OUTPUT-STELLA-CPP_IDENT NAME NIL) TYPE NIL)
        NIL))
      (CPP-OUTPUT-TYPED-ENTITY TYPE NAME NULL)))
    (CL:T (CPP-OUTPUT-TYPED-ENTITY TYPE NAME NULL)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
    EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-VARIABLE-DEFINITION ...)

(CL:DEFUN CPP-OUTPUT-VARIABLE-DEFINITION (VARIABLE)
  (CL:LET*
   ((KIND (%%VALUE VARIABLE))
    (DOCUMENTATION (UNWRAP-STRING (%%VALUE (%%REST VARIABLE))))
    (TYPE (%%VALUE (%%REST (%%REST VARIABLE))))
    (NAME (FOURTH VARIABLE)) (INITIALVALUE (FIFTH VARIABLE)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOCUMENTATION))
   (CL:WHEN (CL:NOT (CL:EQ DOCUMENTATION STELLA::NULL-STRING))
    (CPP-OUTPUT-COMMENT (WRAP-STRING DOCUMENTATION)))
   (CL:COND
    ((CL:EQ KIND SYM-CPP-OUTPUT-STELLA-CPP_SPECIAL)
     (CL:IF
      (CL:EQ (SPECIAL-IMPLEMENTATION-STYLE)
       KWD-CPP-OUTPUT-UNBIND-WITH-DESTRUCTORS)
      (CL:IF (SUPPORT-UNEXEC?)
       (CPP-OUTPUT-STATEMENT
        (LIST* SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL
         (LIST* SYM-CPP-OUTPUT-STELLA-CPP_IDENT
          (WRAP-STRING "DECLARE_STELLA_SPECIAL") NIL)
         (LIST* SYM-CPP-OUTPUT-STELLA-CPP_ACTUALS
          (LIST* SYM-CPP-OUTPUT-STELLA-CPP_IDENT NAME NIL) TYPE NIL)
         NIL))
       (CPP-OUTPUT-STATEMENT
        (LIST* SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL
         (LIST* SYM-CPP-OUTPUT-STELLA-CPP_IDENT
          (WRAP-STRING "DEFINE_STELLA_SPECIAL") NIL)
         (LIST* SYM-CPP-OUTPUT-STELLA-CPP_ACTUALS
          (LIST* SYM-CPP-OUTPUT-STELLA-CPP_IDENT NAME NIL) TYPE
          (CONS INITIALVALUE NIL))
         NIL)))
      (CPP-OUTPUT-TYPED-ENTITY TYPE NAME INITIALVALUE)))
    (CL:T (CPP-OUTPUT-TYPED-ENTITY TYPE NAME INITIALVALUE)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
    EOL EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCALL-FUNCTION-SIGNATURE ...)

(CL:DEFUN CPP-OUTPUT-FUNCALL-FUNCTION-SIGNATURE (SIGNATURE)
  (CL:LET*
   ((RETURNTYPES (%%VALUE SIGNATURE))
    (RETURNTYPE (%%VALUE RETURNTYPES))
    (PARAMETERTYPES (%%VALUE (%%REST SIGNATURE)))
    (NOFPARAMETERS (LENGTH PARAMETERTYPES)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NOFPARAMETERS))
   (CL:LET* ((RESULT-000 STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-000))
    (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CL:PROGN
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       " (*) (")
      (CL:LET*
       ((PARTYPE NULL) (ITER-000 PARAMETERTYPES) (I NULL-INTEGER)
        (ITER-001 1) (UPPER-BOUND-000 NOFPARAMETERS)
        (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001 UPPER-BOUND-000))
       (CL:LOOP WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
         (CL:OR UNBOUNDED?-000 (CL:<= ITER-001 UPPER-BOUND-000)))
        DO (CL:SETQ PARTYPE (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         (%STRING-WRAPPER.WRAPPER-VALUE PARTYPE))
        (CL:WHEN (CL:< I NOFPARAMETERS)
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ", "))
        (CL:SETQ ITER-000 (%%REST ITER-000))
        (CL:SETQ ITER-001 (CL:1+ ITER-001))))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ")"))
     (CL:SETQ RESULT-000 (THE-STRING-READER *CURRENT-STREAM*)))
    (CL:LET* ((BARESIGNATURE RESULT-000))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BARESIGNATURE))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "(")
     (CPP-OUTPUT-TYPED-ENTITY RETURNTYPE (WRAP-STRING BARESIGNATURE)
      NULL)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ")"))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-METHOD-CODE-CALL-SIGNATURE ...)

(CL:DEFUN CPP-OUTPUT-METHOD-CODE-CALL-SIGNATURE (SIGNATURE)
  (CL:LET*
   ((RETURNTYPES (%%VALUE SIGNATURE))
    (RETURNTYPE (%%VALUE RETURNTYPES))
    (OBJECTTYPE
     (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST SIGNATURE))))
    (PARAMETERTYPES (%%VALUE (%%REST (%%REST SIGNATURE))))
    (NOFPARAMETERS (LENGTH PARAMETERTYPES)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING OBJECTTYPE)
    (CL:TYPE CL:FIXNUM NOFPARAMETERS))
   (CL:LET* ((RESULT-000 STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-000))
    (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CL:PROGN
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       " (")
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       OBJECTTYPE)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "::*) (")
      (CL:LET*
       ((PARTYPE NULL) (ITER-000 PARAMETERTYPES) (I NULL-INTEGER)
        (ITER-001 1) (UPPER-BOUND-000 NOFPARAMETERS)
        (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
       (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001 UPPER-BOUND-000))
       (CL:LOOP WHILE
        (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
         (CL:OR UNBOUNDED?-000 (CL:<= ITER-001 UPPER-BOUND-000)))
        DO (CL:SETQ PARTYPE (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         (%STRING-WRAPPER.WRAPPER-VALUE PARTYPE))
        (CL:WHEN (CL:< I NOFPARAMETERS)
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ", "))
        (CL:SETQ ITER-000 (%%REST ITER-000))
        (CL:SETQ ITER-001 (CL:1+ ITER-001))))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ")"))
     (CL:SETQ RESULT-000 (THE-STRING-READER *CURRENT-STREAM*)))
    (CL:LET* ((BARESIGNATURE RESULT-000))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BARESIGNATURE))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "(")
     (CPP-OUTPUT-TYPED-ENTITY RETURNTYPE (WRAP-STRING BARESIGNATURE)
      NULL)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ")"))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCALL ...)

(CL:DEFUN CPP-OUTPUT-FUNCALL (FUNCALL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CPP-OUTPUT-STATEMENT (%%VALUE FUNCALL))
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST FUNCALL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST FUNCALL))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-METHOD-CODE-CALL ...)

(CL:DEFUN CPP-OUTPUT-METHOD-CODE-CALL (METHODCALL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES
   (%%VALUE (%%REST (%%REST METHODCALL))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "->*(")
  (CPP-OUTPUT-STATEMENT (%%VALUE METHODCALL))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST METHODCALL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")) ")
  (CPP-OUTPUT-STATEMENT (FOURTH METHODCALL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-BREAK ...)

(CL:DEFUN CPP-OUTPUT-BREAK ()
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "break;" EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-CONTINUE ...)

(CL:DEFUN CPP-OUTPUT-CONTINUE ()
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "continue;" EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-GOTO ...)

(CL:DEFUN CPP-OUTPUT-GOTO (LABEL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "goto ")
  (CPP-OUTPUT-STATEMENT LABEL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
   EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-GOTO-LABEL ...)

(CL:DEFUN CPP-OUTPUT-GOTO-LABEL (LABEL)
  (CPP-OUTPUT-STATEMENT LABEL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ":;"
   EOL)
  :VOID)

;;; (DEFUN (CPP-LAST-STATEMENT-IS-RETURN? BOOLEAN) ...)

(CL:DEFUN CPP-LAST-STATEMENT-IS-RETURN? (STATEMENTS)
  (CL:LET* ((LASTITEM (LAST STATEMENTS)))
   (CL:RETURN-FROM CPP-LAST-STATEMENT-IS-RETURN?
    (CL:AND (CONS? LASTITEM)
     (CL:EQ (%%VALUE LASTITEM) SYM-CPP-OUTPUT-STELLA-CPP_RETURN)))))

;;; (DEFUN CPP-OUTPUT-CASE ...)

(CL:DEFUN CPP-OUTPUT-CASE (CASE)
  (CL:LET*
   ((KEYFORM (%%VALUE CASE)) (DEFAULTCASE (%%VALUE (%%REST CASE)))
    (CONDITIONS (%%VALUE (%%REST (%%REST CASE)))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "switch (")
   (CPP-OUTPUT-STATEMENT KEYFORM)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") {" EOL)
   (CPP-BUMP-INDENT)
   (CL:LET* ((C NULL) (ITER-000 CONDITIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (CL:LET* ((CONDITION C))
      (CL:LET*
       ((COND NULL)
        (ITER-001
         (CL:IF (CONS? (%%VALUE (%%VALUE CONDITION)))
          (%%VALUE CONDITION) (CONS (%%VALUE CONDITION) NIL))))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
        (CL:SETQ COND (%%VALUE ITER-001)) (CPP-INDENT)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "case ")
        (CPP-OUTPUT-STATEMENT COND)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         ": " EOL)
        (CL:SETQ ITER-001 (%%REST ITER-001))))
      (CPP-BUMP-INDENT)
      (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST CONDITION)))
      (CL:WHEN
       (CL:NOT
        (CPP-LAST-STATEMENT-IS-RETURN? (%%VALUE (%%REST CONDITION))))
       (CPP-INDENT)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "break;" EOL))
      (CPP-UNBUMP-INDENT))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN (CL:EQ DEFAULTCASE NULL)
    (CL:ERROR
     "Safety violation: INTERNAL ERROR: `cpp-output-case' expects an `otherwise' clause."))
   (CPP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "default:" EOL)
   (CPP-BUMP-INDENT) (CPP-OUTPUT-STATEMENT DEFAULTCASE)
   (CL:WHEN (CL:NOT (CPP-LAST-STATEMENT-IS-RETURN? DEFAULTCASE))
    (CPP-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "break;" EOL))
   (CPP-UNBUMP-INDENT) (CPP-UNBUMP-INDENT) (CPP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-COND ...)

(CL:DEFUN CPP-OUTPUT-COND (COND)
  (CL:LET*
   ((DEFAULTCONDITION (%%VALUE COND))
    (CONDITIONS (%%VALUE (%%REST COND)))
    (FIRSTCONDITION (%%VALUE CONDITIONS))
    (RESTCONDITIONS (%%REST CONDITIONS)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ DEFAULTCONDITION NULL))
     (CL:EQ CONDITIONS NIL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "if (TRUE) ")
    (CPP-OUTPUT-STATEMENT DEFAULTCONDITION)
    (CL:RETURN-FROM CPP-OUTPUT-COND))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "if (")
   (CPP-OUTPUT-STATEMENT (%%VALUE FIRSTCONDITION))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") ")
   (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST FIRSTCONDITION)))
   (CL:LET* ((C NULL) (ITER-000 RESTCONDITIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (CL:LET* ((CONDITION C)) (CPP-INDENT)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "else if (")
      (CPP-OUTPUT-STATEMENT (%%VALUE CONDITION))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ") ")
      (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST CONDITION))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN (CL:NOT (CL:EQ DEFAULTCONDITION NULL)) (CPP-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "else ")
    (CPP-OUTPUT-STATEMENT DEFAULTCONDITION)))
  :VOID)

;;; (DEFUN (CPP-PROGN? BOOLEAN) ...)

(CL:DEFUN CPP-PROGN? (TREE)
  (CL:RETURN-FROM CPP-PROGN?
   (CL:AND (CONS? TREE)
    (CL:EQ (%%VALUE TREE) SYM-CPP-OUTPUT-STELLA-CPP_PROGN))))

;;; (DEFUN (CPP-BLOCK? BOOLEAN) ...)

(CL:DEFUN CPP-BLOCK? (TREE)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TREE) SGT-CPP-OUTPUT-STELLA-CONS)
    (CL:PROGN
     (CL:LET* ((TEST-VALUE-000 (%%VALUE TREE)))
      (CL:COND
       ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_BLOCK)
         (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_PROGN))
        (CL:RETURN-FROM CPP-BLOCK? CL:T))
       (CL:T)))))
   (CL:T))
  (CL:RETURN-FROM CPP-BLOCK? CL:NIL))

;;; (DEFUN CPP-OUTPUT-IF ...)

(CL:DEFUN CPP-OUTPUT-IF (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "if (")
  (CPP-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") ")
  (CL:IF (CPP-BLOCK? (%%VALUE (%%REST TREE)))
   (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
   (CL:PROGN
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     EOL)
    (CPP-BUMP-INDENT) (CPP-INDENT)
    (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)
    (CPP-UNBUMP-INDENT)))
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST TREE))) NULL))
   (CPP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "else ")
   (CL:IF (CPP-BLOCK? (%%VALUE (%%REST (%%REST TREE))))
    (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST TREE))))
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL)
     (CPP-BUMP-INDENT) (CPP-INDENT)
     (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST TREE))))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL)
     (CPP-UNBUMP-INDENT))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-WHEN ...)

(CL:DEFUN CPP-OUTPUT-WHEN (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "if (")
  (CPP-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") {"
   EOL)
  (CPP-BUMP-INDENT)
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
  (CPP-UNBUMP-INDENT)
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-UNLESS ...)

(CL:DEFUN CPP-OUTPUT-UNLESS (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "if (!(")
  (CPP-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   ")) {" EOL)
  (CPP-BUMP-INDENT)
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
  (CPP-UNBUMP-INDENT)
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-ASSIGNMENT ...)

(CL:DEFUN CPP-OUTPUT-ASSIGNMENT (ASSIGNMENT)
  (CPP-OUTPUT-STATEMENT (%%VALUE ASSIGNMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " = ")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST ASSIGNMENT)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-LOOP ...)

(CL:DEFUN CPP-OUTPUT-LOOP (LOOP)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "for (;;) ")
  (CPP-OUTPUT-STATEMENT (%%VALUE LOOP))
  :VOID)

;;; (DEFUN CPP-OUTPUT-WHILE ...)

(CL:DEFUN CPP-OUTPUT-WHILE (LOOP)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "while (")
  (CPP-OUTPUT-STATEMENT (%%VALUE LOOP))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") ")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST LOOP)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FOREACH ...)

(CL:DEFUN CPP-OUTPUT-FOREACH (LOOP)
  (CL:LET*
   ((VARIABLES (%%VALUE LOOP)) (NOFVARIABLES (LENGTH VARIABLES))
    (CONTINUATIONTEST (%%VALUE (%%REST LOOP)))
    (VALUEASSIGNMENTS (%%VALUE (%%REST (%%REST LOOP))))
    (NEXTASSIGNMENTS (FOURTH LOOP))
    (NOFNEXTASSIGNMENTS (LENGTH NEXTASSIGNMENTS)) (BODY (FIFTH LOOP))
    (EOLSEPARATEEXPRESSIONS?
     (CL:OR (CL:> NOFVARIABLES 2) (CL:> *CPP-INDENT-CHARS* 35))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NOFVARIABLES NOFNEXTASSIGNMENTS))
   (CPP-INDENT)
   (CL:IF EOLSEPARATEEXPRESSIONS?
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "for  (")
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "for ("))
   (CPP-BUMP-INDENT) (CPP-BUMP-INDENT) (CPP-BUMP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "; ")
   (CPP-OUTPUT-STATEMENT CONTINUATIONTEST)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "; ")
   (CL:WHEN (CL:NOT (CL:EQ NEXTASSIGNMENTS NIL))
    (CL:WHEN EOLSEPARATEEXPRESSIONS?
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL))
    (CL:LET*
     ((NEXT NULL) (ITER-000 NEXTASSIGNMENTS) (I NULL-INTEGER)
      (ITER-001 1))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ NEXT (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
      (CL:WHEN EOLSEPARATEEXPRESSIONS? (CPP-INDENT))
      (CPP-OUTPUT-STATEMENT NEXT)
      (CL:WHEN (CL:NOT (CL:= I NOFNEXTASSIGNMENTS))
       (CL:IF EOLSEPARATEEXPRESSIONS?
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "," EOL)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         ", ")))
      (CL:SETQ ITER-000 (%%REST ITER-000))
      (CL:SETQ ITER-001 (CL:1+ ITER-001)))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") {" EOL)
   (CPP-UNBUMP-INDENT) (CPP-UNBUMP-INDENT)
   (CPP-OUTPUT-STATEMENTS
    (CPP-FLATTEN-STATEMENTS (CONCATENATE VALUEASSIGNMENTS BODY)))
   (CPP-UNBUMP-INDENT) (CPP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCTION-POINTER ...)

(CL:DEFUN CPP-OUTPUT-FUNCTION-POINTER (FUNCTIONNAME)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "&"
   (%STRING-WRAPPER.WRAPPER-VALUE FUNCTIONNAME))
  :VOID)

;;; (DEFUN CPP-OUTPUT-METHOD-POINTER ...)

(CL:DEFUN CPP-OUTPUT-METHOD-POINTER (METHODNAME)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "&"
   (%STRING-WRAPPER.WRAPPER-VALUE METHODNAME))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SLOT-VALUE ...)

(CL:DEFUN CPP-OUTPUT-SLOT-VALUE (STATEMENT)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (%%VALUE STATEMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "->"
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST STATEMENT))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-REFERENCED-SLOT-VALUE ...)

(CL:DEFUN CPP-OUTPUT-REFERENCED-SLOT-VALUE (STATEMENT)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (%%VALUE STATEMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "."
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST STATEMENT))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SLOT-VALUE-SETTER ...)

(CL:DEFUN CPP-OUTPUT-SLOT-VALUE-SETTER (STATEMENT)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (%%VALUE STATEMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "->"
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST STATEMENT))) " = ")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST STATEMENT))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-MAKE ...)

(CL:DEFUN CPP-OUTPUT-MAKE (STATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "new ")
  (CPP-OUTPUT-STATEMENT (%%VALUE STATEMENT))
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST STATEMENT)) NULL))
   (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST STATEMENT))))
  :VOID)

;;; (DEFUN CPP-BUMP-INDENT ...)

(CL:DEFUN CPP-BUMP-INDENT ()
  (CL:SETQ *CPP-INDENT-CHARS* (CL:+ *CPP-INDENT-CHARS* 2))
  :VOID)

;;; (DEFUN CPP-UNBUMP-INDENT ...)

(CL:DEFUN CPP-UNBUMP-INDENT ()
  (CL:SETQ *CPP-INDENT-CHARS* (CL:- *CPP-INDENT-CHARS* 2))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((OBJECT OBJECT))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((CHARACTER CHARACTER-WRAPPER))
  (CL:LET* ((CH (%CHARACTER-WRAPPER.WRAPPER-VALUE CHARACTER)))
   (CL:CASE CH
    (#\'
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\''"))
    (#\\
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\\\'"))
    (#\Linefeed
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\n'"))
    (#\Backspace
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\b'"))
    (#\Tab
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\t'"))
    (#\Return
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\r'"))
    (#\Page
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\f'"))
    (NULL-CHARACTER
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "'\\0'"))
    (CL:OTHERWISE
     (CL:IF (CL:EQL CH NULL-CHARACTER)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "'\\0'")
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "'" CH "'")))))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((INT INTEGER-WRAPPER))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%INTEGER-WRAPPER.WRAPPER-VALUE INT))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((INT LONG-INTEGER-WRAPPER))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%LONG-INTEGER-WRAPPER.WRAPPER-VALUE INT) "l")
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((FLOAT FLOAT-WRAPPER))
  (CL:LET*
   ((VALUE (FLOAT-TO-STRING (%FLOAT-WRAPPER.WRAPPER-VALUE FLOAT)))
    (INTEGERVALUE? CL:T))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VALUE))
   (CL:LET*
    ((CH NULL-CHARACTER) (VECTOR-000 VALUE) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CH
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:WHEN (MEMBER? ".eE" CH) (CL:SETQ INTEGERVALUE? CL:NIL)
      (CL:RETURN))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:WHEN INTEGERVALUE? (CL:SETQ VALUE (CONCATENATE VALUE ".0")))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    VALUE))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((BOOLEAN BOOLEAN-WRAPPER))
  (CL:IF (%BOOLEAN-WRAPPER.WRAPPER-VALUE BOOLEAN)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "TRUE")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "FALSE"))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(%%DEFCONSMETHOD CPP-OUTPUT-LITERAL ((CONS CL:CONS))
  (CL:IF (CL:EQ CONS NIL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "NIL")
   (CL:PROGN
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "("
     (%%VALUE CONS) " . ")
    (CPP-OUTPUT-LITERAL (%%REST CONS))))
  :VOID)

;;; (DEFUN (REPLACE-CHARACTER-WITH-SUBSTRING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE
  (CL:FUNCTION (CL:SIMPLE-STRING CL:SIMPLE-STRING CL:T)
   CL:SIMPLE-STRING)
  REPLACE-CHARACTER-WITH-SUBSTRING))
(CL:DEFUN REPLACE-CHARACTER-WITH-SUBSTRING (STRING NEW CHARACTER)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING NEW))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE NEW CL:SIMPLE-STRING)
  (CL:RETURN-FROM REPLACE-CHARACTER-WITH-SUBSTRING
   (REPLACE-SUBSTRINGS STRING NEW (MAKE-STRING 1 CHARACTER))))

;;; (DEFGLOBAL *CPP-MAX-STRING-LITERAL-LENGTH* ...)

(CL:DEFVAR *CPP-MAX-STRING-LITERAL-LENGTH* 1024
  "C++ string literals longer than this are broken
into multiple pieces to avoid problems with certain MS compilers.")
(CL:DECLAIM (CL:TYPE CL:FIXNUM *CPP-MAX-STRING-LITERAL-LENGTH*))

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((STRING CL:STRING))
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  (CL:LET* ((FREE *CPP-MAX-STRING-LITERAL-LENGTH*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM FREE))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "\"")
   (CL:LET*
    ((CH NULL-CHARACTER) (VECTOR-000 STRING) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CH
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:WHEN (CL:<= FREE 1)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "\" \"")
      (CL:SETQ FREE *CPP-MAX-STRING-LITERAL-LENGTH*))
     (CL:CASE CH
      ((#\\ #\")
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\")
       (CL:SETQ FREE (CL:1- FREE)))
      (#\Linefeed
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\")
       (CL:SETQ FREE (CL:1- FREE)) (CL:SETQ CH #\n))
      (#\Return
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\")
       (CL:SETQ FREE (CL:1- FREE)) (CL:SETQ CH #\r))
      (CL:OTHERWISE))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      CH)
     (CL:SETQ FREE (CL:1- FREE))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "\""))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((STRING STRING-WRAPPER))
  (CPP-OUTPUT-LITERAL (%STRING-WRAPPER.WRAPPER-VALUE STRING))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((STRING MUTABLE-STRING-WRAPPER))
  (CPP-OUTPUT-LITERAL
   (CL:LET ((S (%MUTABLE-STRING-WRAPPER.WRAPPER-VALUE STRING)))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
    (CL:THE CL:SIMPLE-STRING S)))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((TREE QUOTED-EXPRESSION))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "\""
   TREE "\"")
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((SYMBOL SYMBOL))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (CPP-TRANSLATE-SYMBOL-NAME SYMBOL)))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((SURROGATE SURROGATE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE
    (CPP-TRANSLATE-SURROGATE-NAME SURROGATE)))
  :VOID)

;;; (DEFMETHOD CPP-OUTPUT-LITERAL ...)

(CL:DEFMETHOD CPP-OUTPUT-LITERAL ((KEYWORD KEYWORD))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (CPP-TRANSLATE-KEYWORD-NAME KEYWORD)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-IDENTIFIER ...)

(CL:DEFUN CPP-OUTPUT-IDENTIFIER (IDENTIFIER)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE IDENTIFIER))
  :VOID)

;;; (DEFUN CPP-OUTPUT-ATOMIC-EXPRESSION ...)

(CL:DEFUN CPP-OUTPUT-ATOMIC-EXPRESSION (ATOM)
  (CL:LET* ((TEST-VALUE-000 ATOM))
   (CL:COND
    ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-NEWLINE)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_NULL_VALUE)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "NULL_VALUE"))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-ASSIGN)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "="))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-SCOLON)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";"))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-LPAREN)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "("))
    ((CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-RPAREN)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ")"))
    (CL:T (CPP-OUTPUT-LITERAL ATOM))))
  :VOID)

;;; (DEFUN CPP-INDENT ...)

(CL:DEFUN CPP-INDENT ()
  (CL:LET*
   ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 *CPP-INDENT-CHARS*)
    (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
   (CL:LOOP WHILE
    (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
    (CL:SETQ I ITER-000) (CL:SETQ I I)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " ")
    (CL:SETQ ITER-000 (CL:1+ ITER-000))))
  :VOID)

;;; (DEFUN (CPP-OUTPUT-SEMICOLON? BOOLEAN) ...)

(CL:DEFUN CPP-OUTPUT-SEMICOLON? (STATEMENT)
  (CL:WHEN (CL:NOT (CL:EQ STATEMENT NULL))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE STATEMENT)))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_ASSIGN)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_UNARY_OP)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_BINARY_OP)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_TERNARY_OP)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_CAST)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_FUNCALL)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL)
       (CL:EQ TEST-VALUE-000
        SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_POINTER)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_MAKE)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CALL)
       (CL:EQ TEST-VALUE-000
        SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CODE_CALL)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_METHOD_POINTER)
       (CL:EQ TEST-VALUE-000
        SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SETTER_CALL)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_NEW)
       (CL:EQ TEST-VALUE-000
        SYM-CPP-OUTPUT-STELLA-CPP_PRINT_NATIVE_STREAM)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_PRINT_STREAM)
       (CL:EQ TEST-VALUE-000
        SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_METHOD_CALL)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_RETURN)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_SIGNAL)
       (CL:EQ TEST-VALUE-000
        SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE_SETTER)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_THROW)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_VERBATIM))
      (CL:RETURN-FROM CPP-OUTPUT-SEMICOLON? CL:T))
     (CL:T))))
  (CL:RETURN-FROM CPP-OUTPUT-SEMICOLON? CL:NIL))

;;; (DEFUN (CPP-INDENT-STATEMENT? BOOLEAN) ...)

(CL:DEFUN CPP-INDENT-STATEMENT? (STATEMENT)
  (CL:IF (CL:NOT (CL:EQ STATEMENT NULL))
   (CL:RETURN-FROM CPP-INDENT-STATEMENT?
    (CL:NOT
     (MEMBER?
      (GET-QUOTED-TREE "((CPP_STATEMENTS) \"/STELLA\")" "/STELLA")
      (%%VALUE STATEMENT))))
   (CL:RETURN-FROM CPP-INDENT-STATEMENT? CL:NIL)))

;;; (DEFUN (ILLEGAL-CPP-STATEMENT? BOOLEAN) ...)

(CL:DEFUN ILLEGAL-CPP-STATEMENT? (STATEMENT)
  (CL:WHEN (CL:NOT (CL:EQ STATEMENT NULL))
   (CL:LET* ((TEST-VALUE-000 (%%VALUE STATEMENT)))
    (CL:COND
     ((CL:OR (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_LITERAL)
       (CL:EQ TEST-VALUE-000 SYM-CPP-OUTPUT-STELLA-CPP_IDENT))
      (CL:RETURN-FROM ILLEGAL-CPP-STATEMENT? CL:T))
     (CL:T))))
  (CL:RETURN-FROM ILLEGAL-CPP-STATEMENT? CL:NIL))

;;; (DEFUN CPP-OUTPUT-STATEMENTS ...)

(CL:DEFUN CPP-OUTPUT-STATEMENTS (STATEMENTLIST)
  (CL:LET* ((STATEMENT NULL) (ITER-000 STATEMENTLIST))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ STATEMENT (%%VALUE ITER-000))
    (CL:WHEN (CL:NOT (ILLEGAL-CPP-STATEMENT? STATEMENT))
     (CL:WHEN (CPP-INDENT-STATEMENT? STATEMENT) (CPP-INDENT))
     (CPP-OUTPUT-STATEMENT STATEMENT)
     (CL:WHEN (CPP-OUTPUT-SEMICOLON? STATEMENT)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ";" EOL)))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ...)

(CL:DEFUN CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (STATEMENT)
  (CL:LET* ((OPERATOR? (CPP-OPERATOR? STATEMENT)))
   (CL:WHEN OPERATOR?
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "("))
   (CPP-OUTPUT-STATEMENT STATEMENT)
   (CL:WHEN OPERATOR?
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")")))
  :VOID)

;;; (DEFUN CPP-OUTPUT-STREAM-PRINT-ITEMS ...)

(CL:DEFUN CPP-OUTPUT-STREAM-PRINT-ITEMS (ITEMS)
  (CL:LET* ((E NULL) (ITER-000 ITEMS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ E (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " << ")
    (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES E)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-PRINT-STREAM ...)

(CL:DEFUN CPP-OUTPUT-PRINT-STREAM (EXPS)
  (CL:LET* ((STREAM (%%VALUE EXPS)))
   (CL:COND
    ((CL:EQ STREAM SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_OUT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "std::cout"))
    ((CL:EQ STREAM SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_ERROR)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "std::cerr"))
    (CL:T
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "get_ostream(")
     (CPP-OUTPUT-STATEMENT STREAM)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ")")))
   (CPP-OUTPUT-STREAM-PRINT-ITEMS (%%REST EXPS)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-PRINT-NATIVE-STREAM ...)

(CL:DEFUN CPP-OUTPUT-PRINT-NATIVE-STREAM (EXPS)
  (CL:LET* ((STREAM (%%VALUE EXPS)))
   (CL:COND
    ((CL:EQ STREAM SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_OUT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "std::cout"))
    ((CL:EQ STREAM SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_ERROR)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "std::cerr"))
    (CL:T
     (CL:WHEN (CL:NOT *OUTPUTTINGDEFPRINT?*)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "*("))
     (CPP-OUTPUT-STATEMENT STREAM)
     (CL:WHEN (CL:NOT *OUTPUTTINGDEFPRINT?*)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ")"))))
   (CPP-OUTPUT-STREAM-PRINT-ITEMS (%%REST EXPS)))
  :VOID)

;;; (DEFUN (CPP-INDENTABLE-BINARY-OPERATOR? BOOLEAN) ...)

(CL:DEFUN CPP-INDENTABLE-BINARY-OPERATOR? (OPERATOR)
  (CL:RETURN-FROM CPP-INDENTABLE-BINARY-OPERATOR?
   (MEMBER? (GET-QUOTED-TREE "((\"||\" \"&&\") \"/STELLA\")" "/STELLA")
    OPERATOR)))

;;; (DEFUN (CPP-COMMUTATIVE-BINARY-OPERATOR? BOOLEAN) ...)

(CL:DEFUN CPP-COMMUTATIVE-BINARY-OPERATOR? (OPERATOR)
  (CL:RETURN-FROM CPP-COMMUTATIVE-BINARY-OPERATOR?
   (MEMBER? (GET-QUOTED-TREE "((\"+\" \"*\") \"/STELLA\")" "/STELLA")
    OPERATOR)))

;;; (DEFUN (CPP-BINARY-OPERATOR? BOOLEAN) ...)

(CL:DEFUN CPP-BINARY-OPERATOR? (STATEMENT)
  (CL:RETURN-FROM CPP-BINARY-OPERATOR?
   (CL:AND (CONS? STATEMENT)
    (CL:EQ SYM-CPP-OUTPUT-STELLA-CPP_BINARY_OP (%%VALUE STATEMENT)))))

;;; (DEFUN (CPP-OPERATOR? BOOLEAN) ...)

(CL:DEFUN CPP-OPERATOR? (STATEMENT)
  (CL:RETURN-FROM CPP-OPERATOR?
   (CL:AND (CONS? STATEMENT)
    (MEMBER?
     (GET-QUOTED-TREE
      "((CPP_UNARY_OP CPP_BINARY_OP CPP_TERNARY_OP CPP_ASSIGN CPP_SLOT_VALUE_SETTER) \"/STELLA\")"
      "/STELLA")
     (%%VALUE STATEMENT)))))

;;; (DEFUN (CPP-ASSIGNMENT? BOOLEAN) ...)

(CL:DEFUN CPP-ASSIGNMENT? (STATEMENT)
  (CL:RETURN-FROM CPP-ASSIGNMENT?
   (CL:EQ (%%VALUE STATEMENT) SYM-CPP-OUTPUT-STELLA-CPP_ASSIGN)))

;;; (DEFUN CPP-OUTPUT-UNARY-OPERATOR ...)

(CL:DEFUN CPP-OUTPUT-UNARY-OPERATOR (EXPRESSION)
  (CL:LET* ((OP NULL) (ARG NULL) (POSTFIX? CL:NIL))
   (CL:COND
    ((SUBTYPE-OF-STRING? (SAFE-PRIMARY-TYPE (%%VALUE EXPRESSION)))
     (CL:SETQ OP (%%VALUE EXPRESSION))
     (CL:SETQ ARG (%%VALUE (%%REST EXPRESSION))))
    (CL:T (CL:SETQ OP (%%VALUE (%%REST EXPRESSION)))
     (CL:SETQ ARG (%%VALUE EXPRESSION)) (CL:SETQ POSTFIX? CL:T)))
   (CL:WHEN (CL:NOT POSTFIX?)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE OP)))
   (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG)
   (CL:WHEN POSTFIX?
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE OP))))
  :VOID)

;;; (DEFUN (CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? BOOLEAN) ...)

(CL:DEFUN CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? (OP NESTED)
  (CL:RETURN-FROM CPP-NESTED-OPERATOR-NEEDS-PARENTHESES?
   (CL:AND (CPP-OPERATOR? NESTED)
    (CL:NOT
     (CL:AND (CPP-COMMUTATIVE-BINARY-OPERATOR? OP)
      (STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE OP)
       (%STRING-WRAPPER.WRAPPER-VALUE
        (%%VALUE (%%REST (%%REST NESTED))))))))))

;;; (DEFUN CPP-HELP-OUTPUT-BINARY-OPERATOR ...)

(CL:DEFUN CPP-HELP-OUTPUT-BINARY-OPERATOR (EXPRESSION NESTLEVEL)
  (CL:DECLARE (CL:TYPE CL:FIXNUM NESTLEVEL))
  #+MCL
  (CL:CHECK-TYPE NESTLEVEL CL:FIXNUM)
  (CL:LET*
   ((ARG1 (%%VALUE EXPRESSION)) (OP (%%VALUE (%%REST EXPRESSION)))
    (ARG2 (%%VALUE (%%REST (%%REST EXPRESSION)))))
   (CL:WHEN (CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG1)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "("))
   (CL:IF (CPP-BINARY-OPERATOR? OP)
    (CPP-HELP-OUTPUT-BINARY-OPERATOR (%%REST ARG1) (CL:1+ NESTLEVEL))
    (CPP-OUTPUT-STATEMENT ARG1))
   (CL:WHEN (CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG1)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")"))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP))
   (CL:IF (CPP-INDENTABLE-BINARY-OPERATOR? OP)
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL)
     (CPP-INDENT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "    ")
     (CL:LET*
      ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 NESTLEVEL)
       (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
      (CL:LOOP WHILE
       (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
       (CL:SETQ I ITER-000) (CL:SETQ I I)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        " ")
       (CL:SETQ ITER-000 (CL:1+ ITER-000)))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " "))
   (CL:WHEN (CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG2)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "("))
   (CL:IF (CPP-BINARY-OPERATOR? ARG2)
    (CPP-HELP-OUTPUT-BINARY-OPERATOR (%%REST ARG2) (CL:1+ NESTLEVEL))
    (CPP-OUTPUT-STATEMENT ARG2))
   (CL:WHEN (CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG2)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")")))
  :VOID)

;;; (DEFUN CPP-OUTPUT-BINARY-OPERATOR ...)

(CL:DEFUN CPP-OUTPUT-BINARY-OPERATOR (EXPRESSION)
  (CPP-HELP-OUTPUT-BINARY-OPERATOR EXPRESSION 0)
  :VOID)

;;; (DEFUN CPP-OUTPUT-TERNARY-OPERATOR ...)

(CL:DEFUN CPP-OUTPUT-TERNARY-OPERATOR (EXPRESSION)
  (CL:LET*
   ((ARG1 (%%VALUE EXPRESSION)) (OP1 (%%VALUE (%%REST EXPRESSION)))
    (ARG2 (%%VALUE (%%REST (%%REST EXPRESSION))))
    (OP2 (FOURTH EXPRESSION)) (ARG3 (FIFTH EXPRESSION))
    (TRANSLATEDARG STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING TRANSLATEDARG))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
   (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG1)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP1))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (CL:LET* ((RESULT-000 STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-000))
    (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG2)
     (CL:SETQ RESULT-000 (THE-STRING-READER *CURRENT-STREAM*)))
    (CL:SETQ TRANSLATEDARG RESULT-000))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    TRANSLATEDARG)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP2))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (CL:LET* ((RESULT-001 STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-001))
    (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG3)
     (CL:SETQ RESULT-001 (THE-STRING-READER *CURRENT-STREAM*)))
    (CL:SETQ TRANSLATEDARG RESULT-001))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    TRANSLATEDARG)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN CPP-OUTPUT-STATEMENT-LINE ...)

(CL:DEFUN CPP-OUTPUT-STATEMENT-LINE (STATEMENT)
  (CPP-OUTPUT-STATEMENT (%%VALUE STATEMENT))
  (CL:LET* ((E NULL) (ITER-000 (%%REST STATEMENT)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ E (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " ")
    (CPP-OUTPUT-STATEMENT E) (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
   EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-RETURN ...)

(CL:DEFUN CPP-OUTPUT-RETURN (RETURNSTATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "return")
  (CL:WHEN (CL:NOT (CL:EQ RETURNSTATEMENT NULL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    " (")
   (CPP-OUTPUT-STATEMENT RETURNSTATEMENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN CPP-OUTPUT-TYPE-EXPRESSION ...)

(CL:DEFUN CPP-OUTPUT-TYPE-EXPRESSION (TYPEEXPRESSION)
  (CL:LET* ((TYPEEXPR NULL) (ITER-000 TYPEEXPRESSION))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ TYPEEXPR (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE TYPEEXPR) " ")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-TYPED-ENTITY ...)

(CL:DEFUN CPP-OUTPUT-TYPED-ENTITY (TYPE ENTITY INITIALVALUE)
  (CL:LET* ((ARRAYTYPE? (CPP-TRANSLATED-ARRAY-TYPE? TYPE)))
   (CL:COND
    (ARRAYTYPE?
     (CL:LET*
      ((TRANSLATEDTYPE STELLA::NULL-STRING)
       (TRANSLATEDENTITY STELLA::NULL-STRING))
      (CL:DECLARE
       (CL:TYPE CL:SIMPLE-STRING TRANSLATEDTYPE TRANSLATEDENTITY))
      (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE TYPE)))
       (CL:COND
        ((CL:EQ TEST-VALUE-000 SGT-CPP-OUTPUT-STELLA-CONS)
         (CL:PROGN
          (CL:WHEN
           (CL:NOT
            (CL:EQ (%%VALUE TYPE) SYM-CPP-OUTPUT-STELLA-CPP_TYPE))
           (CL:SETQ TYPE (CONS SYM-CPP-OUTPUT-STELLA-CPP_TYPE TYPE)))
          (CL:LET* ((RESULT-000 STELLA::NULL-STRING))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-000))
           (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
            (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
            (CPP-OUTPUT-STATEMENT TYPE)
            (CL:SETQ RESULT-000 (THE-STRING-READER *CURRENT-STREAM*)))
           (CL:SETQ TRANSLATEDTYPE RESULT-000))))
        ((SUBTYPE-OF-STRING? TEST-VALUE-000)
         (CL:PROGN
          (CL:SETQ TRANSLATEDTYPE
           (%STRING-WRAPPER.WRAPPER-VALUE TYPE))))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000)))))))
      (CL:LET* ((TEST-VALUE-001 (SAFE-PRIMARY-TYPE ENTITY)))
       (CL:COND
        ((CL:EQ TEST-VALUE-001 SGT-CPP-OUTPUT-STELLA-CONS)
         (CL:PROGN
          (CL:LET* ((RESULT-001 STELLA::NULL-STRING))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-001))
           (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
            (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
            (CPP-OUTPUT-STATEMENT ENTITY)
            (CL:SETQ RESULT-001 (THE-STRING-READER *CURRENT-STREAM*)))
           (CL:SETQ TRANSLATEDENTITY RESULT-001))))
        ((SUBTYPE-OF-STRING? TEST-VALUE-001)
         (CL:PROGN
          (CL:SETQ TRANSLATEDENTITY
           (%STRING-WRAPPER.WRAPPER-VALUE ENTITY))))
        (CL:T
         (CL:LET* ((STREAM-001 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-001) "`"
           TEST-VALUE-001 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-001)))))))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       (CPP-GENERATE-ARRAY-TYPED-ENTITY TRANSLATEDENTITY
        TRANSLATEDTYPE))))
    (CL:T
     (CL:LET* ((TEST-VALUE-002 (SAFE-PRIMARY-TYPE TYPE)))
      (CL:COND
       ((CL:EQ TEST-VALUE-002 SGT-CPP-OUTPUT-STELLA-CONS)
        (CL:PROGN
         (CL:WHEN
          (CL:NOT
           (CL:EQ (%%VALUE TYPE) SYM-CPP-OUTPUT-STELLA-CPP_TYPE))
          (CL:SETQ TYPE (CONS SYM-CPP-OUTPUT-STELLA-CPP_TYPE TYPE)))
         (CPP-OUTPUT-STATEMENT TYPE)))
       ((SUBTYPE-OF-STRING? TEST-VALUE-002)
        (CL:PROGN
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
          (%STRING-WRAPPER.WRAPPER-VALUE TYPE) " ")))
       (CL:T
        (CL:LET* ((STREAM-002 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-002) "`"
          TEST-VALUE-002 "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-002)))))))
     (CL:LET* ((TEST-VALUE-003 (SAFE-PRIMARY-TYPE ENTITY)))
      (CL:COND
       ((CL:EQ TEST-VALUE-003 SGT-CPP-OUTPUT-STELLA-CONS)
        (CL:PROGN (CPP-OUTPUT-STATEMENT ENTITY)))
       ((SUBTYPE-OF-STRING? TEST-VALUE-003)
        (CL:PROGN
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
          (%STRING-WRAPPER.WRAPPER-VALUE ENTITY))))
       (CL:T
        (CL:LET* ((STREAM-003 (NEW-OUTPUT-STRING-STREAM)))
         (%%PRINT-STREAM
          (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-003) "`"
          TEST-VALUE-003 "' is not a valid case option")
         (CL:ERROR
          (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-003)))))))))
   (CL:WHEN (CL:NOT (CL:EQ INITIALVALUE NULL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " = ")
    (CPP-OUTPUT-STATEMENT INITIALVALUE)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-DECLARATIONS ...)

(CL:DEFUN CPP-OUTPUT-DECLARATIONS (ACCESSCONTROLMODE DECLARATIONS)
  (CPP-INDENT)
  (CL:COND
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PUBLIC)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "public:" EOL))
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PRIVATE)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "private:" EOL))
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PROTECTED)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "protected:" EOL))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" ACCESSCONTROLMODE "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:WHEN (CL:NOT (CL:EQ ACCESSCONTROLMODE NULL)) (CPP-BUMP-INDENT))
  (CL:LET* ((DECLARATION NULL) (ITER-000 DECLARATIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ DECLARATION (%%VALUE ITER-000))
    (CL:WHEN
     (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST DECLARATION))) NULL))
     (CPP-INDENT)
     (CPP-OUTPUT-COMMENT (%%VALUE (%%REST (%%REST DECLARATION)))))
    (CPP-INDENT)
    (CPP-OUTPUT-TYPED-ENTITY (%%VALUE DECLARATION)
     (%%VALUE (%%REST DECLARATION)) NULL)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (CL:WHEN (CL:NOT (CL:EQ ACCESSCONTROLMODE NULL)) (CPP-UNBUMP-INDENT))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SIGNATURE ...)

(CL:DEFUN CPP-OUTPUT-SIGNATURE (SIGNATURE OUTPUTMETHODCLASS?)
  (CL:LET*
   ((METHODCLASS (%%VALUE SIGNATURE))
    (RETURNTYPE (%%VALUE (%%REST SIGNATURE)))
    (NAME (%%VALUE (%%REST (%%REST SIGNATURE))))
    (PARAMETERS (FOURTH SIGNATURE)))
   (CL:LET* ((RESULT-000 STELLA::NULL-STRING))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-000))
    (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
     (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
     (CL:PROGN
      (CL:WHEN
       (CL:AND OUTPUTMETHODCLASS? (CL:NOT (CL:EQ METHODCLASS NULL)))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        (%STRING-WRAPPER.WRAPPER-VALUE METHODCLASS))
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "::"))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       (%STRING-WRAPPER.WRAPPER-VALUE NAME))
      (CPP-OUTPUT-FORMAL-PARAMETERS PARAMETERS))
     (CL:SETQ RESULT-000 (THE-STRING-READER *CURRENT-STREAM*)))
    (CL:LET* ((BARESIGNATURE RESULT-000))
     (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BARESIGNATURE))
     (CPP-OUTPUT-TYPED-ENTITY RETURNTYPE (WRAP-STRING BARESIGNATURE)
      NULL))))
  :VOID)

;;; (DEFUN CPP-OUTPUT-SIGNATURES ...)

(CL:DEFUN CPP-OUTPUT-SIGNATURES (ACCESSCONTROLMODE SIGNATURES)
  (CPP-INDENT)
  (CL:COND
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PUBLIC)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "public:" EOL))
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PRIVATE)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "private:" EOL))
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PROTECTED)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "protected:" EOL))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" ACCESSCONTROLMODE "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:WHEN (CL:NOT (CL:EQ ACCESSCONTROLMODE NULL)) (CPP-BUMP-INDENT))
  (CL:LET* ((SIGNATURE NULL) (ITER-000 SIGNATURES))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ SIGNATURE (%%VALUE ITER-000)) (CPP-INDENT)
    (CPP-OUTPUT-SIGNATURE SIGNATURE CL:NIL)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (CL:WHEN (CL:NOT (CL:EQ ACCESSCONTROLMODE NULL)) (CPP-UNBUMP-INDENT))
  :VOID)

;;; (DEFUN CPP-OUTPUT-DEFINITIONS ...)

(CL:DEFUN CPP-OUTPUT-DEFINITIONS (ACCESSCONTROLMODE DEFINITIONS)
  (CPP-INDENT)
  (CL:COND
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PUBLIC)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "public:" EOL))
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PRIVATE)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "private:" EOL))
   ((CL:EQ ACCESSCONTROLMODE KWD-CPP-OUTPUT-PROTECTED)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "protected:" EOL))
   (CL:T
    (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
     (%%PRINT-STREAM (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000)
      "`" ACCESSCONTROLMODE "' is not a valid case option")
     (CL:ERROR (NEW-STELLA-EXCEPTION (THE-STRING-READER STREAM-000))))))
  (CL:WHEN (CL:NOT (CL:EQ ACCESSCONTROLMODE NULL)) (CPP-BUMP-INDENT))
  (CL:LET* ((DEFINITION NULL) (ITER-000 DEFINITIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ DEFINITION (%%VALUE ITER-000)) (CPP-INDENT)
    (CPP-OUTPUT-STATEMENT DEFINITION)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (CL:WHEN (CL:NOT (CL:EQ ACCESSCONTROLMODE NULL)) (CPP-UNBUMP-INDENT))
  :VOID)

;;; (DEFUN CPP-OUTPUT-PROGN ...)

(CL:DEFUN CPP-OUTPUT-PROGN (PROGN)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{"
   EOL)
  (CPP-BUMP-INDENT)
  (CPP-OUTPUT-STATEMENT PROGN)
  (CPP-UNBUMP-INDENT)
  (CPP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-BLOCK ...)

(CL:DEFUN CPP-OUTPUT-BLOCK (BLOCK)
  (CL:LET* ((FIRSTSTATEMENT? CL:T))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "{ ")
   (CPP-BUMP-INDENT)
   (CL:LET* ((DECLARATION NULL) (ITER-000 (%%VALUE BLOCK)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DECLARATION (%%VALUE ITER-000))
     (CL:WHEN (CL:NOT FIRSTSTATEMENT?) (CPP-INDENT))
     (CL:SETQ FIRSTSTATEMENT? CL:NIL)
     (CPP-OUTPUT-TYPED-ENTITY (%%VALUE DECLARATION)
      (%%VALUE (%%REST DECLARATION))
      (%%VALUE (%%REST (%%REST DECLARATION))))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
   (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST BLOCK))) (CPP-UNBUMP-INDENT)
   (CPP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-WITH-PROCESS-LOCK ...)

(CL:DEFUN CPP-OUTPUT-WITH-PROCESS-LOCK (SYNCH)
  (CL:LET* ((S (NEW-OUTPUT-STRING-STREAM)))
   (CL:LET* ((*CURRENT-STREAM* S))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CPP-OUTPUT-STATEMENT (%%VALUE SYNCH)))
   (CPP-OUTPUT-COMMENT
    (WRAP-STRING
     (CONCATENATE "Should be synchronized on process lock "
      (THE-STRING-READER S))))
   (CPP-INDENT))
  (CPP-OUTPUT-PROGN (%%VALUE (%%REST SYNCH)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-STATIC-MEMBER-VARS ...)

(CL:DEFUN CPP-OUTPUT-STATIC-MEMBER-VARS (CLASS DECLARATIONS)
  (CL:LET* ((DECLARATION NULL) (ITER-000 DECLARATIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ DECLARATION (%%VALUE ITER-000)) (CPP-INDENT)
    (CPP-OUTPUT-TYPED-ENTITY (%%VALUE DECLARATION)
     (WRAP-STRING
      (CONCATENATE (%STRING-WRAPPER.WRAPPER-VALUE CLASS) "::"
       (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST DECLARATION)))))
     (%%VALUE (%%REST (%%REST DECLARATION))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (CL:WHEN (CL:NOT (CL:EQ DECLARATIONS NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-DERIVED-CLASSES ...)

(CL:DEFUN CPP-OUTPUT-DERIVED-CLASSES (CLASSLIST)
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE CLASSLIST) NULL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE CLASSLIST))))
  (CL:LET* ((CLASS NULL) (ITER-000 (%%REST CLASSLIST)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ CLASS (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ", public ")
    (CL:COND
     ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-OUTPUT-CPP-STANDALONE)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "virtual "))
     (CL:T))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE CLASS))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
  :VOID)

;;; (DEFUN CPP-OUTPUT-TEMPLATE-PARAMETERS ...)

(CL:DEFUN CPP-OUTPUT-TEMPLATE-PARAMETERS (PARAMETERS)
  (CL:WHEN (CL:NOT (CL:EQ PARAMETERS NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "template <")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "class " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE PARAMETERS)))
   (CL:LET* ((PARAMETER NULL) (ITER-000 (%%REST PARAMETERS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PARAMETER (%%VALUE ITER-000))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "class " PARAMETER ", ")
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ">"
    EOL))
  :VOID)

;;; (DEFUN (CPP-OUTPUT-TEMPLATE-CLASSES? BOOLEAN) ...)

(CL:DEFUN CPP-OUTPUT-TEMPLATE-CLASSES? ()
  (CL:RETURN-FROM CPP-OUTPUT-TEMPLATE-CLASSES?
   (CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-OUTPUT-CPP-STANDALONE)))

;;; (DEFUN CPP-OUTPUT-CLASS ...)

(CL:DEFUN CPP-OUTPUT-CLASS (CLASSDEF)
  (CL:WHEN (CPP-OUTPUT-TEMPLATE-CLASSES?)
   (CPP-OUTPUT-TEMPLATE-PARAMETERS (%%VALUE (%%REST CLASSDEF))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "class " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE CLASSDEF)) " ")
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST CLASSDEF))) NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ": public ")
   (CL:COND
    ((CL:EQ *TRANSLATOROUTPUTLANGUAGE* KWD-CPP-OUTPUT-CPP-STANDALONE)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "virtual "))
    (CL:T))
   (CPP-OUTPUT-DERIVED-CLASSES (%%VALUE (%%REST (%%REST CLASSDEF)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{"
   EOL)
  (CL:LET* ((STATEMENT NULL) (ITER-000 (NTH-REST CLASSDEF 4)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ STATEMENT (%%VALUE ITER-000))
    (CPP-OUTPUT-STATEMENT STATEMENT)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "};"
   EOL EOL)
  (CPP-OUTPUT-STATIC-MEMBER-VARS (%%VALUE CLASSDEF) (FOURTH CLASSDEF))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FORMAL-PARAMETERS ...)

(CL:DEFUN CPP-OUTPUT-FORMAL-PARAMETERS (PARAMETERS)
  (CL:LET*
   ((N-PARAMETERS (LENGTH PARAMETERS)) (VARIABLE-ARGUMENTS? CL:NIL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM N-PARAMETERS))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
   (CL:LET*
    ((PARAMETER NULL) (ITER-000 PARAMETERS) (N NULL-INTEGER)
     (ITER-001 1) (UPPER-BOUND-000 N-PARAMETERS)
     (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
    (CL:DECLARE (CL:TYPE CL:FIXNUM N ITER-001 UPPER-BOUND-000))
    (CL:LOOP WHILE
     (CL:AND (CL:NOT (CL:EQ ITER-000 NIL))
      (CL:OR UNBOUNDED?-000 (CL:<= ITER-001 UPPER-BOUND-000)))
     DO (CL:SETQ PARAMETER (%%VALUE ITER-000)) (CL:SETQ N ITER-001)
     (CL:IF (CL:= N N-PARAMETERS)
      (CL:PROGN
       (CL:SETQ VARIABLE-ARGUMENTS?
        (CL:EQ (%%VALUE PARAMETER) SYM-CPP-OUTPUT-STELLA-CPP_VAR_ARGS))
       (CPP-OUTPUT-TYPED-ENTITY
        (CL:IF VARIABLE-ARGUMENTS? (WRAP-STRING "int")
         (%%VALUE PARAMETER))
        (%%VALUE (%%REST PARAMETER)) NULL)
       (CL:WHEN VARIABLE-ARGUMENTS?
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         ", ...")))
      (CL:PROGN
       (CPP-OUTPUT-TYPED-ENTITY (%%VALUE PARAMETER)
        (%%VALUE (%%REST PARAMETER)) NULL)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        ", ")))
     (CL:SETQ ITER-000 (%%REST ITER-000))
     (CL:SETQ ITER-001 (CL:1+ ITER-001))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN (CPP-ARGUMENT-IS-STREAM? BOOLEAN) ...)

(CL:DEFUN CPP-ARGUMENT-IS-STREAM? (ARG)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE ARG) SGT-CPP-OUTPUT-STELLA-CONS)
    (CL:PROGN
     (CL:RETURN-FROM CPP-ARGUMENT-IS-STREAM?
      (CL:AND (CL:EQ (%%VALUE ARG) SYM-CPP-OUTPUT-STELLA-CPP_IDENT)
       (EQL-TO-STRING? (%%VALUE (%%REST ARG)) "stream")))))
   (CL:T (CL:RETURN-FROM CPP-ARGUMENT-IS-STREAM? CL:NIL))))

;;; (DEFUN CPP-OUTPUT-ONE-ACTUAL-PARAMETER ...)

(CL:DEFUN CPP-OUTPUT-ONE-ACTUAL-PARAMETER (PARAMETER)
  (CL:IF
   (CL:AND *OUTPUTTINGDEFPRINT?* (CPP-ARGUMENT-IS-STREAM? PARAMETER))
   (CL:PROGN
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "&")
    (CPP-OUTPUT-STATEMENT PARAMETER))
   (CPP-OUTPUT-STATEMENT PARAMETER))
  :VOID)

;;; (DEFUN CPP-OUTPUT-ACTUAL-PARAMETERS ...)

(CL:DEFUN CPP-OUTPUT-ACTUAL-PARAMETERS (PARAMETERS)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE PARAMETERS) NULL))
   (CPP-OUTPUT-ONE-ACTUAL-PARAMETER (%%VALUE PARAMETERS)))
  (CL:LET* ((PARAMETER NULL) (ITER-000 (%%REST PARAMETERS)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ PARAMETER (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ", ")
    (CPP-OUTPUT-ONE-ACTUAL-PARAMETER PARAMETER)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFUN CPP-OUTPUT-METHOD-SETTER-CALL ...)

(CL:DEFUN CPP-OUTPUT-METHOD-SETTER-CALL (METHODSETTERCALL)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES
   (%%VALUE (%%REST METHODSETTERCALL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "->")
  (CPP-OUTPUT-STATEMENT (%%VALUE METHODSETTERCALL))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "_setter(")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST METHODSETTERCALL))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFUN CPP-OUTPUT-METHOD-CALL ...)

(CL:DEFUN CPP-OUTPUT-METHOD-CALL (METHODCALL)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES
   (%%VALUE (%%REST (%%REST METHODCALL))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "->")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST METHODCALL)))
  (CPP-OUTPUT-STATEMENT (FOURTH METHODCALL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-REFERENCED-METHOD-CALL ...)

(CL:DEFUN CPP-OUTPUT-REFERENCED-METHOD-CALL (METHODCALL)
  (CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES
   (%%VALUE (%%REST (%%REST METHODCALL))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ".")
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST METHODCALL)))
  (CPP-OUTPUT-STATEMENT (FOURTH METHODCALL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCTION-CALL ...)

(CL:DEFUN CPP-OUTPUT-FUNCTION-CALL (FUNCTIONCALL)
  (CPP-OUTPUT-STATEMENT (%%VALUE FUNCTIONCALL))
  (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST FUNCTIONCALL)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-DEFPRINT-SIGNATURE ...)

(CL:DEFUN CPP-OUTPUT-DEFPRINT-SIGNATURE (DEFPRINT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "std::ostream& operator << (std::ostream& stream, ")
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE DEFPRINT)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   " self)")
  :VOID)

;;; (DEFUN CPP-OUTPUT-DEFPRINT ...)

(CL:DEFUN CPP-OUTPUT-DEFPRINT (DEFPRINT)
  (CPP-OUTPUT-DEFPRINT-SIGNATURE DEFPRINT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " {"
   EOL)
  (CPP-BUMP-INDENT)
  (CL:LET* ((*OUTPUTTINGDEFPRINT?* CL:T))
   (CL:DECLARE (CL:SPECIAL *OUTPUTTINGDEFPRINT?*))
   (CPP-OUTPUT-STATEMENT (%%VALUE (%%REST DEFPRINT))))
  (CPP-UNBUMP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCTION-SIGNATURE ...)

(CL:DEFUN CPP-OUTPUT-FUNCTION-SIGNATURE (FUNCTION)
  (CL:LET* ((RESULT-000 STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING RESULT-000))
   (CL:LET* ((*CURRENT-STREAM* (NEW-OUTPUT-STRING-STREAM)))
    (CL:DECLARE (CL:SPECIAL *CURRENT-STREAM*))
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST FUNCTION))))
     (CPP-OUTPUT-FORMAL-PARAMETERS
      (%%VALUE (%%REST (%%REST FUNCTION)))))
    (CL:SETQ RESULT-000 (THE-STRING-READER *CURRENT-STREAM*)))
   (CL:LET* ((BARESIGNATURE RESULT-000))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING BARESIGNATURE))
    (CPP-OUTPUT-TYPED-ENTITY (%%VALUE FUNCTION)
     (WRAP-STRING BARESIGNATURE) NULL)))
  :VOID)

;;; (DEFUN CPP-OUTPUT-FUNCTION ...)

(CL:DEFUN CPP-OUTPUT-FUNCTION (FUNCTION)
  (CL:LET* ((BODY (FOURTH FUNCTION)) (BASEMEMBERS (FIFTH FUNCTION)))
   (CPP-OUTPUT-FUNCTION-SIGNATURE FUNCTION)
   (CL:WHEN (CL:NOT (CL:EQ BASEMEMBERS NULL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " : ")
    (CL:LET* ((MEMBER NULL) (ITER-000 BASEMEMBERS))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ MEMBER (%%VALUE ITER-000)) (CPP-OUTPUT-STATEMENT MEMBER)
      (CL:SETQ ITER-000 (%%REST ITER-000)))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " {"
    EOL)
   (CPP-BUMP-INDENT) (CPP-OUTPUT-STATEMENT BODY) (CPP-UNBUMP-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
  :VOID)

;;; (DEFUN CPP-OUTPUT-EXTERN-C ...)

(CL:DEFUN CPP-OUTPUT-EXTERN-C (STATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "extern \"C\" ")
  (CPP-OUTPUT-STATEMENT STATEMENT)
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-OUTPUT1 ()
  (CL:PROGN
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-VRLET
    (INTERN-RIGID-SYMBOL-WRT-MODULE "VRLET" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-NULL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NULL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SPECIAL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-*CURRENT-STREAM*
    (INTERN-RIGID-SYMBOL-WRT-MODULE "*CURRENT-STREAM*" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEW" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-OUTPUT-STRING-STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "OUTPUT-STRING-STREAM" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-SETQ
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SETQ" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-THE-STRING
    (INTERN-RIGID-SYMBOL-WRT-MODULE "THE-STRING" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
   (CL:SETQ SGT-CPP-OUTPUT-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_PROGN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_STATEMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STATEMENTS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_COMMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_COMMENT" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CLASS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_HANDLER_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_HANDLER_CASE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CATCH" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SIGNAL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_UNWIND_PROTECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_UNWIND_PROTECT" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_VERBATIM" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CAST" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_GLOBAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_GLOBAL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_SPECIAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SPECIAL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_LOCAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_LOCAL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_TYPE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_DEREFERENCE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DEREFERENCE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_ARRAY_REFERENCE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_ARRAY_REFERENCE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_WITH_PROCESS_LOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_WITH_PROCESS_LOCK" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_BREAK" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CONTINUE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_GOTO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_GOTO" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_GOTO_LABEL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_GOTO_LABEL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_IF" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_SIGNATURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION_SIGNATURE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SIGNATURE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_SIGNATURE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_COND" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_CASE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_WHEN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_UNLESS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_ASSIGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_ASSIGN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_LOOP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_LOOP" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_WHILE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FOREACH" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_BLOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_BLOCK" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_IDENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_IDENT" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_PRINT_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_PRINT_STREAM" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_PRINT_NATIVE_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_PRINT_NATIVE_STREAM" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_LITERAL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_RETURN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SYMBOL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_MAKE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_FUNCALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCALL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CODE_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_CODE_CALL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION_POINTER" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_METHOD_POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_POINTER" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SLOT_VALUE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_SLOT_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_REFERENCED_SLOT_VALUE" NULL
     0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_SLOT_VALUE_SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SLOT_VALUE_SETTER" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-OUTPUT2 ()
  (CL:PROGN
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_DECLARATIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DECLARATIONS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_DEFINITIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DEFINITIONS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_SIGNATURES
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_SIGNATURES" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_UNARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_UNARY_OP" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_BINARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_BINARY_OP" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_TERNARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_TERNARY_OP" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_FUNCTION_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_FUNCTION_CALL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_METHOD_SETTER_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_SETTER_CALL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_METHOD_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_METHOD_CALL" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_REFERENCED_METHOD_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_REFERENCED_METHOD_CALL" NULL
     0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_ACTUALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_ACTUALS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_DEFPRINT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_DEFPRINT" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_EXTERN_C
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_EXTERN_C" NULL 0))
   (CL:SETQ KWD-CPP-OUTPUT-UNBIND-WITH-DESTRUCTORS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UNBIND-WITH-DESTRUCTORS" NULL 2))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-NEWLINE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NEWLINE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_NULL_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_NULL_VALUE" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-ASSIGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "ASSIGN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-SCOLON
    (INTERN-RIGID-SYMBOL-WRT-MODULE "SCOLON" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-LPAREN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "LPAREN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-RPAREN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "RPAREN" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_NEW" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_THROW" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_OUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STANDARD_OUT" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_STANDARD_ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_STANDARD_ERROR" NULL 0))
   (CL:SETQ KWD-CPP-OUTPUT-PUBLIC
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PUBLIC" NULL 2))
   (CL:SETQ KWD-CPP-OUTPUT-PRIVATE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRIVATE" NULL 2))
   (CL:SETQ KWD-CPP-OUTPUT-PROTECTED
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PROTECTED" NULL 2))
   (CL:SETQ KWD-CPP-OUTPUT-CPP-STANDALONE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP-STANDALONE" NULL 2))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-CPP_VAR_ARGS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CPP_VAR_ARGS" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-STARTUP-CPP-OUTPUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-CPP-OUTPUT" NULL 0))
   (CL:SETQ SYM-CPP-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-CPP-OUTPUT3 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-TO-STRING"
    "(DEFUN CPP-OUTPUT-TO-STRING ((STATEMENT CONS)) :TYPE OBJECT :MACRO? TRUE)"
    (CL:FUNCTION CPP-OUTPUT-TO-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-PARSE-TREE"
    "(DEFUN CPP-OUTPUT-PARSE-TREE ((CONSTREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-PARSE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-FLATTEN-STATEMENTS"
    "(DEFUN (CPP-FLATTEN-STATEMENTS CONS) ((STATEMENTS CONS)))"
    (CL:FUNCTION CPP-FLATTEN-STATEMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-PROGNIFY-STATEMENT"
    "(DEFUN (CPP-PROGNIFY-STATEMENT CONS) ((STATEMENT OBJECT)))"
    (CL:FUNCTION CPP-PROGNIFY-STATEMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-STATEMENT-TO-LIST"
    "(DEFUN (CPP-STATEMENT-TO-LIST CONS) ((STATEMENT OBJECT)))"
    (CL:FUNCTION CPP-STATEMENT-TO-LIST) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-STATEMENT"
    "(DEFUN CPP-OUTPUT-STATEMENT ((STATEMENT OBJECT)))"
    (CL:FUNCTION CPP-OUTPUT-STATEMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-VERBATIM"
    "(DEFUN CPP-OUTPUT-VERBATIM ((VERBATIMSTATEMENT STRING-WRAPPER)))"
    (CL:FUNCTION CPP-OUTPUT-VERBATIM) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-COMMENT"
    "(DEFUN CPP-OUTPUT-COMMENT ((TREE STRING-WRAPPER)))"
    (CL:FUNCTION CPP-OUTPUT-COMMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-DEREFERENCE"
    "(DEFUN CPP-OUTPUT-DEREFERENCE ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-DEREFERENCE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ARRAY-REFERENCE"
    "(DEFUN CPP-OUTPUT-ARRAY-REFERENCE ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-ARRAY-REFERENCE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CAST"
    "(DEFUN CPP-OUTPUT-CAST ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-CAST) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SIGNAL"
    "(DEFUN CPP-OUTPUT-SIGNAL ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-SIGNAL) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-HANDLER-CASE"
    "(DEFUN CPP-OUTPUT-HANDLER-CASE ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-HANDLER-CASE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CATCH"
    "(DEFUN CPP-OUTPUT-CATCH ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-CATCH) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-UNWIND-PROTECT"
    "(DEFUN CPP-OUTPUT-UNWIND-PROTECT ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-UNWIND-PROTECT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-GLOBAL-DECLARATION"
    "(DEFUN CPP-OUTPUT-GLOBAL-DECLARATION ((GLOBAL CONS)))"
    (CL:FUNCTION CPP-OUTPUT-GLOBAL-DECLARATION) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-VARIABLE-DEFINITION"
    "(DEFUN CPP-OUTPUT-VARIABLE-DEFINITION ((VARIABLE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-VARIABLE-DEFINITION) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCALL-FUNCTION-SIGNATURE"
    "(DEFUN CPP-OUTPUT-FUNCALL-FUNCTION-SIGNATURE ((SIGNATURE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-FUNCALL-FUNCTION-SIGNATURE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-METHOD-CODE-CALL-SIGNATURE"
    "(DEFUN CPP-OUTPUT-METHOD-CODE-CALL-SIGNATURE ((SIGNATURE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-METHOD-CODE-CALL-SIGNATURE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCALL"
    "(DEFUN CPP-OUTPUT-FUNCALL ((FUNCALL CONS)))"
    (CL:FUNCTION CPP-OUTPUT-FUNCALL) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-METHOD-CODE-CALL"
    "(DEFUN CPP-OUTPUT-METHOD-CODE-CALL ((METHODCALL CONS)))"
    (CL:FUNCTION CPP-OUTPUT-METHOD-CODE-CALL) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-BREAK"
    "(DEFUN CPP-OUTPUT-BREAK ())" (CL:FUNCTION CPP-OUTPUT-BREAK) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CONTINUE"
    "(DEFUN CPP-OUTPUT-CONTINUE ())" (CL:FUNCTION CPP-OUTPUT-CONTINUE)
    NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-GOTO"
    "(DEFUN CPP-OUTPUT-GOTO ((LABEL OBJECT)))"
    (CL:FUNCTION CPP-OUTPUT-GOTO) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-GOTO-LABEL"
    "(DEFUN CPP-OUTPUT-GOTO-LABEL ((LABEL OBJECT)))"
    (CL:FUNCTION CPP-OUTPUT-GOTO-LABEL) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-LAST-STATEMENT-IS-RETURN?"
    "(DEFUN (CPP-LAST-STATEMENT-IS-RETURN? BOOLEAN) ((STATEMENTS CONS)))"
    (CL:FUNCTION CPP-LAST-STATEMENT-IS-RETURN?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CASE"
    "(DEFUN CPP-OUTPUT-CASE ((CASE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-CASE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-COND"
    "(DEFUN CPP-OUTPUT-COND ((COND CONS)))"
    (CL:FUNCTION CPP-OUTPUT-COND) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-PROGN?"
    "(DEFUN (CPP-PROGN? BOOLEAN) ((TREE OBJECT)))"
    (CL:FUNCTION CPP-PROGN?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-BLOCK?"
    "(DEFUN (CPP-BLOCK? BOOLEAN) ((TREE OBJECT)))"
    (CL:FUNCTION CPP-BLOCK?) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-IF"
    "(DEFUN CPP-OUTPUT-IF ((TREE CONS)))" (CL:FUNCTION CPP-OUTPUT-IF)
    NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-WHEN"
    "(DEFUN CPP-OUTPUT-WHEN ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-WHEN) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-UNLESS"
    "(DEFUN CPP-OUTPUT-UNLESS ((TREE CONS)))"
    (CL:FUNCTION CPP-OUTPUT-UNLESS) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ASSIGNMENT"
    "(DEFUN CPP-OUTPUT-ASSIGNMENT ((ASSIGNMENT CONS)))"
    (CL:FUNCTION CPP-OUTPUT-ASSIGNMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-LOOP"
    "(DEFUN CPP-OUTPUT-LOOP ((LOOP CONS)))"
    (CL:FUNCTION CPP-OUTPUT-LOOP) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-WHILE"
    "(DEFUN CPP-OUTPUT-WHILE ((LOOP CONS)))"
    (CL:FUNCTION CPP-OUTPUT-WHILE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FOREACH"
    "(DEFUN CPP-OUTPUT-FOREACH ((LOOP CONS)))"
    (CL:FUNCTION CPP-OUTPUT-FOREACH) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCTION-POINTER"
    "(DEFUN CPP-OUTPUT-FUNCTION-POINTER ((FUNCTIONNAME STRING-WRAPPER)))"
    (CL:FUNCTION CPP-OUTPUT-FUNCTION-POINTER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-METHOD-POINTER"
    "(DEFUN CPP-OUTPUT-METHOD-POINTER ((METHODNAME STRING-WRAPPER)))"
    (CL:FUNCTION CPP-OUTPUT-METHOD-POINTER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SLOT-VALUE"
    "(DEFUN CPP-OUTPUT-SLOT-VALUE ((STATEMENT CONS)))"
    (CL:FUNCTION CPP-OUTPUT-SLOT-VALUE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-REFERENCED-SLOT-VALUE"
    "(DEFUN CPP-OUTPUT-REFERENCED-SLOT-VALUE ((STATEMENT CONS)))"
    (CL:FUNCTION CPP-OUTPUT-REFERENCED-SLOT-VALUE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SLOT-VALUE-SETTER"
    "(DEFUN CPP-OUTPUT-SLOT-VALUE-SETTER ((STATEMENT CONS)))"
    (CL:FUNCTION CPP-OUTPUT-SLOT-VALUE-SETTER) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-MAKE"
    "(DEFUN CPP-OUTPUT-MAKE ((STATEMENT CONS)))"
    (CL:FUNCTION CPP-OUTPUT-MAKE) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-BUMP-INDENT"
    "(DEFUN CPP-BUMP-INDENT ())" (CL:FUNCTION CPP-BUMP-INDENT) NULL)
   (DEFINE-FUNCTION-OBJECT "CPP-UNBUMP-INDENT"
    "(DEFUN CPP-UNBUMP-INDENT ())" (CL:FUNCTION CPP-UNBUMP-INDENT)
    NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((OBJECT OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((CHARACTER CHARACTER-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((INT INTEGER-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((INT LONG-INTEGER-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((FLOAT FLOAT-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((BOOLEAN BOOLEAN-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT "(DEFMETHOD CPP-OUTPUT-LITERAL ((CONS CONS)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-FUNCTION-OBJECT "REPLACE-CHARACTER-WITH-SUBSTRING"
    "(DEFUN (REPLACE-CHARACTER-WITH-SUBSTRING STRING) ((STRING STRING) (NEW STRING) (CHARACTER CHARACTER)) :GLOBALLY-INLINE? TRUE (RETURN (REPLACE-SUBSTRINGS STRING NEW CHARACTER)))"
    (CL:FUNCTION REPLACE-CHARACTER-WITH-SUBSTRING) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((STRING STRING)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((STRING STRING-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((STRING MUTABLE-STRING-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((TREE QUOTED-EXPRESSION)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((SYMBOL SYMBOL)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((SURROGATE SURROGATE)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD CPP-OUTPUT-LITERAL ((KEYWORD KEYWORD)))"
    (WRAP-METHOD-CODE (CL:FUNCTION CPP-OUTPUT-LITERAL)) NULL))
  :VOID)

(CL:DEFUN STARTUP-CPP-OUTPUT ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-CPP-OUTPUT1)
    (HELP-STARTUP-CPP-OUTPUT2))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-CPP-OUTPUT3)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-IDENTIFIER"
     "(DEFUN CPP-OUTPUT-IDENTIFIER ((IDENTIFIER STRING-WRAPPER)))"
     (CL:FUNCTION CPP-OUTPUT-IDENTIFIER) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ATOMIC-EXPRESSION"
     "(DEFUN CPP-OUTPUT-ATOMIC-EXPRESSION ((ATOM OBJECT)))"
     (CL:FUNCTION CPP-OUTPUT-ATOMIC-EXPRESSION) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-INDENT" "(DEFUN CPP-INDENT ())"
     (CL:FUNCTION CPP-INDENT) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SEMICOLON?"
     "(DEFUN (CPP-OUTPUT-SEMICOLON? BOOLEAN) ((STATEMENT CONS)))"
     (CL:FUNCTION CPP-OUTPUT-SEMICOLON?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-INDENT-STATEMENT?"
     "(DEFUN (CPP-INDENT-STATEMENT? BOOLEAN) ((STATEMENT CONS)))"
     (CL:FUNCTION CPP-INDENT-STATEMENT?) NULL)
    (DEFINE-FUNCTION-OBJECT "ILLEGAL-CPP-STATEMENT?"
     "(DEFUN (ILLEGAL-CPP-STATEMENT? BOOLEAN) ((STATEMENT CONS)))"
     (CL:FUNCTION ILLEGAL-CPP-STATEMENT?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-STATEMENTS"
     "(DEFUN CPP-OUTPUT-STATEMENTS ((STATEMENTLIST CONS)))"
     (CL:FUNCTION CPP-OUTPUT-STATEMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT
     "CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES"
     "(DEFUN CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ((STATEMENT OBJECT)))"
     (CL:FUNCTION CPP-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-STREAM-PRINT-ITEMS"
     "(DEFUN CPP-OUTPUT-STREAM-PRINT-ITEMS ((ITEMS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-STREAM-PRINT-ITEMS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-PRINT-STREAM"
     "(DEFUN CPP-OUTPUT-PRINT-STREAM ((EXPS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-PRINT-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-PRINT-NATIVE-STREAM"
     "(DEFUN CPP-OUTPUT-PRINT-NATIVE-STREAM ((EXPS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-PRINT-NATIVE-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-INDENTABLE-BINARY-OPERATOR?"
     "(DEFUN (CPP-INDENTABLE-BINARY-OPERATOR? BOOLEAN) ((OPERATOR STRING-WRAPPER)))"
     (CL:FUNCTION CPP-INDENTABLE-BINARY-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-COMMUTATIVE-BINARY-OPERATOR?"
     "(DEFUN (CPP-COMMUTATIVE-BINARY-OPERATOR? BOOLEAN) ((OPERATOR STRING-WRAPPER)))"
     (CL:FUNCTION CPP-COMMUTATIVE-BINARY-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-BINARY-OPERATOR?"
     "(DEFUN (CPP-BINARY-OPERATOR? BOOLEAN) ((STATEMENT OBJECT)))"
     (CL:FUNCTION CPP-BINARY-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OPERATOR?"
     "(DEFUN (CPP-OPERATOR? BOOLEAN) ((STATEMENT OBJECT)))"
     (CL:FUNCTION CPP-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-ASSIGNMENT?"
     "(DEFUN (CPP-ASSIGNMENT? BOOLEAN) ((STATEMENT CONS)))"
     (CL:FUNCTION CPP-ASSIGNMENT?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-UNARY-OPERATOR"
     "(DEFUN CPP-OUTPUT-UNARY-OPERATOR ((EXPRESSION CONS)))"
     (CL:FUNCTION CPP-OUTPUT-UNARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-NESTED-OPERATOR-NEEDS-PARENTHESES?"
     "(DEFUN (CPP-NESTED-OPERATOR-NEEDS-PARENTHESES? BOOLEAN) ((OP STRING-WRAPPER) (NESTED OBJECT)))"
     (CL:FUNCTION CPP-NESTED-OPERATOR-NEEDS-PARENTHESES?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-HELP-OUTPUT-BINARY-OPERATOR"
     "(DEFUN CPP-HELP-OUTPUT-BINARY-OPERATOR ((EXPRESSION CONS) (NESTLEVEL INTEGER)))"
     (CL:FUNCTION CPP-HELP-OUTPUT-BINARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-BINARY-OPERATOR"
     "(DEFUN CPP-OUTPUT-BINARY-OPERATOR ((EXPRESSION CONS)))"
     (CL:FUNCTION CPP-OUTPUT-BINARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-TERNARY-OPERATOR"
     "(DEFUN CPP-OUTPUT-TERNARY-OPERATOR ((EXPRESSION CONS)))"
     (CL:FUNCTION CPP-OUTPUT-TERNARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-STATEMENT-LINE"
     "(DEFUN CPP-OUTPUT-STATEMENT-LINE ((STATEMENT CONS)))"
     (CL:FUNCTION CPP-OUTPUT-STATEMENT-LINE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-RETURN"
     "(DEFUN CPP-OUTPUT-RETURN ((RETURNSTATEMENT CONS)))"
     (CL:FUNCTION CPP-OUTPUT-RETURN) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-TYPE-EXPRESSION"
     "(DEFUN CPP-OUTPUT-TYPE-EXPRESSION ((TYPEEXPRESSION (CONS OF STRING-WRAPPER))))"
     (CL:FUNCTION CPP-OUTPUT-TYPE-EXPRESSION) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-TYPED-ENTITY"
     "(DEFUN CPP-OUTPUT-TYPED-ENTITY ((TYPE OBJECT) (ENTITY OBJECT) (INITIALVALUE OBJECT)))"
     (CL:FUNCTION CPP-OUTPUT-TYPED-ENTITY) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-DECLARATIONS"
     "(DEFUN CPP-OUTPUT-DECLARATIONS ((ACCESSCONTROLMODE KEYWORD) (DECLARATIONS (CONS OF CONS))))"
     (CL:FUNCTION CPP-OUTPUT-DECLARATIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SIGNATURE"
     "(DEFUN CPP-OUTPUT-SIGNATURE ((SIGNATURE CONS) (OUTPUTMETHODCLASS? BOOLEAN)))"
     (CL:FUNCTION CPP-OUTPUT-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-SIGNATURES"
     "(DEFUN CPP-OUTPUT-SIGNATURES ((ACCESSCONTROLMODE KEYWORD) (SIGNATURES CONS)))"
     (CL:FUNCTION CPP-OUTPUT-SIGNATURES) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-DEFINITIONS"
     "(DEFUN CPP-OUTPUT-DEFINITIONS ((ACCESSCONTROLMODE KEYWORD) (DEFINITIONS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-DEFINITIONS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-PROGN"
     "(DEFUN CPP-OUTPUT-PROGN ((PROGN CONS)))"
     (CL:FUNCTION CPP-OUTPUT-PROGN) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-BLOCK"
     "(DEFUN CPP-OUTPUT-BLOCK ((BLOCK CONS)))"
     (CL:FUNCTION CPP-OUTPUT-BLOCK) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-WITH-PROCESS-LOCK"
     "(DEFUN CPP-OUTPUT-WITH-PROCESS-LOCK ((SYNCH CONS)))"
     (CL:FUNCTION CPP-OUTPUT-WITH-PROCESS-LOCK) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-STATIC-MEMBER-VARS"
     "(DEFUN CPP-OUTPUT-STATIC-MEMBER-VARS ((CLASS STRING-WRAPPER) (DECLARATIONS (CONS OF CONS))))"
     (CL:FUNCTION CPP-OUTPUT-STATIC-MEMBER-VARS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-DERIVED-CLASSES"
     "(DEFUN CPP-OUTPUT-DERIVED-CLASSES ((CLASSLIST CONS)))"
     (CL:FUNCTION CPP-OUTPUT-DERIVED-CLASSES) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-TEMPLATE-PARAMETERS"
     "(DEFUN CPP-OUTPUT-TEMPLATE-PARAMETERS ((PARAMETERS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-TEMPLATE-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-TEMPLATE-CLASSES?"
     "(DEFUN (CPP-OUTPUT-TEMPLATE-CLASSES? BOOLEAN) ())"
     (CL:FUNCTION CPP-OUTPUT-TEMPLATE-CLASSES?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-CLASS"
     "(DEFUN CPP-OUTPUT-CLASS ((CLASSDEF CONS)))"
     (CL:FUNCTION CPP-OUTPUT-CLASS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FORMAL-PARAMETERS"
     "(DEFUN CPP-OUTPUT-FORMAL-PARAMETERS ((PARAMETERS (CONS OF CONS))))"
     (CL:FUNCTION CPP-OUTPUT-FORMAL-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-ARGUMENT-IS-STREAM?"
     "(DEFUN (CPP-ARGUMENT-IS-STREAM? BOOLEAN) ((ARG OBJECT)))"
     (CL:FUNCTION CPP-ARGUMENT-IS-STREAM?) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ONE-ACTUAL-PARAMETER"
     "(DEFUN CPP-OUTPUT-ONE-ACTUAL-PARAMETER ((PARAMETER OBJECT)))"
     (CL:FUNCTION CPP-OUTPUT-ONE-ACTUAL-PARAMETER) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-ACTUAL-PARAMETERS"
     "(DEFUN CPP-OUTPUT-ACTUAL-PARAMETERS ((PARAMETERS CONS)))"
     (CL:FUNCTION CPP-OUTPUT-ACTUAL-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-METHOD-SETTER-CALL"
     "(DEFUN CPP-OUTPUT-METHOD-SETTER-CALL ((METHODSETTERCALL CONS)))"
     (CL:FUNCTION CPP-OUTPUT-METHOD-SETTER-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-METHOD-CALL"
     "(DEFUN CPP-OUTPUT-METHOD-CALL ((METHODCALL CONS)))"
     (CL:FUNCTION CPP-OUTPUT-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-REFERENCED-METHOD-CALL"
     "(DEFUN CPP-OUTPUT-REFERENCED-METHOD-CALL ((METHODCALL CONS)))"
     (CL:FUNCTION CPP-OUTPUT-REFERENCED-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCTION-CALL"
     "(DEFUN CPP-OUTPUT-FUNCTION-CALL ((FUNCTIONCALL CONS)))"
     (CL:FUNCTION CPP-OUTPUT-FUNCTION-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-DEFPRINT-SIGNATURE"
     "(DEFUN CPP-OUTPUT-DEFPRINT-SIGNATURE ((DEFPRINT CONS)))"
     (CL:FUNCTION CPP-OUTPUT-DEFPRINT-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-DEFPRINT"
     "(DEFUN CPP-OUTPUT-DEFPRINT ((DEFPRINT CONS)))"
     (CL:FUNCTION CPP-OUTPUT-DEFPRINT) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCTION-SIGNATURE"
     "(DEFUN CPP-OUTPUT-FUNCTION-SIGNATURE ((FUNCTION CONS)))"
     (CL:FUNCTION CPP-OUTPUT-FUNCTION-SIGNATURE) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-FUNCTION"
     "(DEFUN CPP-OUTPUT-FUNCTION ((FUNCTION CONS)))"
     (CL:FUNCTION CPP-OUTPUT-FUNCTION) NULL)
    (DEFINE-FUNCTION-OBJECT "CPP-OUTPUT-EXTERN-C"
     "(DEFUN CPP-OUTPUT-EXTERN-C ((STATEMENT CONS)))"
     (CL:FUNCTION CPP-OUTPUT-EXTERN-C) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-CPP-OUTPUT"
     "(DEFUN STARTUP-CPP-OUTPUT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-CPP-OUTPUT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-CPP-OUTPUT-STELLA-STARTUP-CPP-OUTPUT)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-CPP-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupCppOutput") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *CPP-INDENT-CHARS* INTEGER 0)" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *OUTPUTTINGDEFPRINT?* BOOLEAN FALSE :DOCUMENTATION \"`true' when outputting a defprint, used to 
            conditionally dereference streams in print-native-stream 
            statements.  Also used to take the address of streams
            when passed to functions inside of a defprint\")" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *CPP-MAX-STRING-LITERAL-LENGTH* INTEGER 1024 :DOCUMENTATION \"C++ string literals longer than this are broken
into multiple pieces to avoid problems with certain MS compilers.\")"
     NULL)))
  :VOID)
