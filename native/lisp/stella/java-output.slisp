;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; java-output.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_CLASS NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_EXCEPTION_CLASS NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_NAMED_STATEMENT NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_STATEMENTS NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_IDENT NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_EOL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_LITERAL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_COMMENT NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_SYMBOL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_CATCH NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_THROW NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_UNWIND_PROTECT NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_HANDLER_CASE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_SIGNAL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_VERBATIM NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_CAST NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_GLOBAL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_TYPE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_PROGN NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_BLOCK NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_WITH_PROCESS_LOCK NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_RETURN NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCALL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CODE_CALL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_ASSIGN NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_BREAK NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_CONTINUE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_COND NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_CASE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_IF NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_WHEN NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_UNLESS NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_LOOP NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_WHILE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_FOREACH NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE_SETTER NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_UNARY_OP NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_BINARY_OP NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_TERNARY_OP NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_CALL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CALL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_ACTUALS NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE_ARRAY NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_ARRAY_INITIALIZER NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_ANONYMOUS_ARRAY NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_AREF NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_STREAM NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_NATIVE_STREAM NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_DECLARATIONS NULL)
(CL:DEFVAR SGT-JAVA-OUTPUT-STELLA-CONS NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_POINTER NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_POINTER NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_SETTER_CALL NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_NEW NULL)
(CL:DEFVAR KWD-JAVA-OUTPUT-NO NULL)
(CL:DEFVAR KWD-JAVA-OUTPUT-PRESERVE NULL)
(CL:DEFVAR KWD-JAVA-OUTPUT-CLEVER NULL)
(CL:DEFVAR KWD-JAVA-OUTPUT-UPCASE NULL)
(CL:DEFVAR KWD-JAVA-OUTPUT-TITLECASEX NULL)
(CL:DEFVAR KWD-JAVA-OUTPUT-WHITE-SPACE NULL)
(CL:DEFVAR SGT-JAVA-OUTPUT-STELLA-STRING-WRAPPER NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_STANDARD_OUT NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-JAVA_STANDARD_ERROR NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-STARTUP-JAVA-OUTPUT NULL)
(CL:DEFVAR SYM-JAVA-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *CHARACTER-TYPE-TABLE* *MODULE* STANDARD-OUTPUT
  STANDARD-WARNING EOL NULL-CHARACTER NIL NULL-INTEGER *CURRENT-STREAM*
  *STELLA-MODULE*))

;;; (DEFSPECIAL *JAVA-INDENT-CHARS* ...)

(CL:DEFVAR *JAVA-INDENT-CHARS* 0)
(CL:DECLAIM (CL:TYPE CL:FIXNUM *JAVA-INDENT-CHARS*))

;;; (DEFGLOBAL *JAVA-STELLA-PACKAGE-MAPPING* ...)

(CL:DEFVAR *JAVA-STELLA-PACKAGE-MAPPING* NULL)

;;; (DEFUN (JAVA-STELLA-PACKAGE STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION () CL:SIMPLE-STRING) JAVA-STELLA-PACKAGE))
(CL:DEFUN JAVA-STELLA-PACKAGE ()
  (CL:LET* ((STELLAPACKAGE (JAVA-PACKAGE *STELLA-MODULE*)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STELLAPACKAGE))
   (CL:IF (CL:NOT (CL:EQ STELLAPACKAGE STELLA::NULL-STRING))
    (CL:RETURN-FROM JAVA-STELLA-PACKAGE STELLAPACKAGE)
    (CL:RETURN-FROM JAVA-STELLA-PACKAGE "edu.isi.stella"))))

;;; (DEFUN JAVA-OUTPUT-PARSE-TREE ...)

(CL:DEFUN JAVA-OUTPUT-PARSE-TREE (CONSTREE)
  (CL:LET* ((*JAVA-INDENT-CHARS* 0))
   (CL:DECLARE (CL:SPECIAL *JAVA-INDENT-CHARS*))
   (CL:DECLARE (CL:TYPE CL:FIXNUM *JAVA-INDENT-CHARS*))
   (INSERT-AT *JAVA-STELLA-PACKAGE-MAPPING* (WRAP-STRING "STELLAROOT")
    (WRAP-STRING (JAVA-STELLA-PACKAGE)))
   (JAVA-OUTPUT-STATEMENT CONSTREE))
  :VOID)

;;; (DEFUN JAVA-BUMP-INDENT ...)

(CL:DEFUN JAVA-BUMP-INDENT ()
  (CL:SETQ *JAVA-INDENT-CHARS* (CL:+ *JAVA-INDENT-CHARS* 2))
  :VOID)

;;; (DEFUN JAVA-UNBUMP-INDENT ...)

(CL:DEFUN JAVA-UNBUMP-INDENT ()
  (CL:SETQ *JAVA-INDENT-CHARS* (CL:- *JAVA-INDENT-CHARS* 2))
  :VOID)

;;; (DEFUN JAVA-INDENT ...)

(CL:DEFUN JAVA-INDENT ()
  (CL:LET*
   ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 *JAVA-INDENT-CHARS*)
    (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
   (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
   (CL:LOOP WHILE
    (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
    (CL:SETQ I ITER-000) (CL:SETQ I I)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " ")
    (CL:SETQ ITER-000 (CL:1+ ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-STATEMENT ...)

(CL:DEFUN JAVA-OUTPUT-STATEMENT (STATEMENT)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE STATEMENT) SGT-JAVA-OUTPUT-STELLA-CONS)
    (CL:PROGN
     (CL:WHEN (CL:EQ STATEMENT NIL)
      (CL:RETURN-FROM JAVA-OUTPUT-STATEMENT))
     (CL:IF
      (CL:OR (CONS? (%%VALUE STATEMENT))
       (CL:EQ (%%VALUE STATEMENT) NULL))
      (CL:PROGN (JAVA-OUTPUT-STATEMENT (%%VALUE STATEMENT))
       (JAVA-OUTPUT-STATEMENT (%%REST STATEMENT)))
      (CL:LET* ((TEST-VALUE-000 (%%VALUE STATEMENT)))
       (CL:COND
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_CLASS)
         (JAVA-OUTPUT-CLASS (%%REST STATEMENT) CL:NIL))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_EXCEPTION_CLASS)
         (JAVA-OUTPUT-CLASS (%%REST STATEMENT) CL:T))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_NAMED_STATEMENT)
         (JAVA-OUTPUT-NAMED-STATEMENT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_STATEMENTS)
         (JAVA-OUTPUT-STATEMENTS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_IDENT)
         (JAVA-OUTPUT-IDENTIFIER (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_EOL)
         (JAVA-OUTPUT-IDENTIFIER (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_LITERAL)
         (JAVA-OUTPUT-LITERAL (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_COMMENT)
         (JAVA-OUTPUT-COMMENT (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_SYMBOL)
         (JAVA-OUTPUT-LITERAL (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_CATCH)
         (JAVA-OUTPUT-CATCH (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_THROW)
         (JAVA-OUTPUT-THROW (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_UNWIND_PROTECT)
         (JAVA-OUTPUT-UNWIND-PROTECT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_HANDLER_CASE)
         (JAVA-OUTPUT-HANDLER-CASE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_SIGNAL)
         (JAVA-OUTPUT-SIGNAL (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_VERBATIM)
         (JAVA-OUTPUT-VERBATIM (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_CAST)
         (JAVA-OUTPUT-CAST (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_GLOBAL)
         (JAVA-OUTPUT-GLOBAL-DEFINITION (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_TYPE)
         (JAVA-OUTPUT-TYPE-EXPRESSION (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_PROGN)
         (JAVA-OUTPUT-PROGN (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_BLOCK)
         (JAVA-OUTPUT-BLOCK (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_WITH_PROCESS_LOCK)
         (JAVA-OUTPUT-WITH-PROCESS-LOCK (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_RETURN)
         (JAVA-OUTPUT-RETURN (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE)
         (JAVA-OUTPUT-MAKE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCALL)
         (JAVA-OUTPUT-FUNCALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CODE_CALL)
         (JAVA-OUTPUT-METHOD-CODE-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_ASSIGN)
         (JAVA-OUTPUT-ASSIGNMENT (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_BREAK)
         (JAVA-OUTPUT-BREAK (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_CONTINUE)
         (JAVA-OUTPUT-CONTINUE (%%VALUE (%%REST STATEMENT))))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_COND)
         (JAVA-OUTPUT-COND (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_CASE)
         (JAVA-OUTPUT-CASE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_IF)
         (JAVA-OUTPUT-IF (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_WHEN)
         (JAVA-OUTPUT-WHEN (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_UNLESS)
         (JAVA-OUTPUT-UNLESS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_LOOP)
         (JAVA-OUTPUT-LOOP (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_WHILE)
         (JAVA-OUTPUT-WHILE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_FOREACH)
         (JAVA-OUTPUT-FOREACH (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE)
         (JAVA-OUTPUT-SLOT-VALUE (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE_SETTER)
         (JAVA-OUTPUT-SLOT-VALUE-SETTER (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_UNARY_OP)
         (JAVA-OUTPUT-UNARY-OPERATOR (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_BINARY_OP)
         (JAVA-OUTPUT-BINARY-OPERATOR (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_TERNARY_OP)
         (JAVA-OUTPUT-TERNARY-OPERATOR (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_CALL)
         (JAVA-OUTPUT-FUNCTION-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CALL)
         (JAVA-OUTPUT-METHOD-CALL (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_ACTUALS)
         (JAVA-OUTPUT-ACTUAL-PARAMETERS (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE_ARRAY)
         (JAVA-OUTPUT-MAKE-ARRAY (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_ARRAY_INITIALIZER)
         (JAVA-OUTPUT-ARRAY (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_ANONYMOUS_ARRAY)
         (JAVA-OUTPUT-ANONYMOUS-ARRAY (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_AREF)
         (JAVA-OUTPUT-AREF (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD)
         (JAVA-OUTPUT-METHOD (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION)
         (JAVA-OUTPUT-METHOD (%%REST STATEMENT)))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_STREAM)
         (JAVA-OUTPUT-PRINT-STREAM (%%REST STATEMENT) CL:NIL))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_NATIVE_STREAM)
         (JAVA-OUTPUT-PRINT-STREAM (%%REST STATEMENT) CL:T))
        ((CL:EQ TEST-VALUE-000
          SYM-JAVA-OUTPUT-STELLA-JAVA_DECLARATIONS)
         (JAVA-OUTPUT-DECLARATIONS (%%REST STATEMENT)))
        (CL:T
         (CL:LET* ((STREAM-000 (NEW-OUTPUT-STRING-STREAM)))
          (%%PRINT-STREAM
           (%OUTPUT-STRING-STREAM.NATIVE-STREAM STREAM-000) "`"
           TEST-VALUE-000 "' is not a valid case option")
          (CL:ERROR
           (NEW-STELLA-EXCEPTION
            (THE-STRING-READER STREAM-000))))))))))
   (CL:T
    (CL:WHEN (CL:EQ STATEMENT NULL)
     (CL:RETURN-FROM JAVA-OUTPUT-STATEMENT))
    (JAVA-OUTPUT-LITERAL STATEMENT)))
  :VOID)

;;; (DEFUN JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ...)

(CL:DEFUN JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (STATEMENT)
  (CL:WHEN (JAVA-OPERATOR? STATEMENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "("))
  (JAVA-OUTPUT-STATEMENT STATEMENT)
  (CL:WHEN (JAVA-OPERATOR? STATEMENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-IDENTIFIER ...)

(CL:DEFUN JAVA-OUTPUT-IDENTIFIER (IDENTIFIER)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE IDENTIFIER))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((OBJECT OBJECT))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((STRING CL:STRING))
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STRING))
  #+MCL
  (CL:CHECK-TYPE STRING CL:SIMPLE-STRING)
  (CL:LET*
   ((MAXSIZE (CL:1- 65535))
    (LENGTH (CL:THE CL:FIXNUM (CL:LENGTH STRING)))
    (TOOLONG? (> LENGTH MAXSIZE)) (CHUNKSIZE 0))
   (CL:DECLARE (CL:TYPE CL:FIXNUM MAXSIZE LENGTH CHUNKSIZE))
   (CL:WHEN TOOLONG?
    (CL:LET* ((*PRINTREADABLY?* CL:T))
     (CL:DECLARE (CL:SPECIAL *PRINTREADABLY?*))
     (SIGNAL-TRANSLATION-WARNING)
     (CL:WHEN (CL:NOT (SUPPRESS-WARNINGS?))
      (PRINT-ERROR-CONTEXT ">> WARNING: " STANDARD-WARNING)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-WARNING)
       EOL " Encountered too long string constant (`"
       (SUBSEQUENCE STRING 0 80)
       "'...), breaking it up which is INEFFICIENT." EOL)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "new String().concat("))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "\"")
   (CL:LET*
    ((CH NULL-CHARACTER) (VECTOR-000 STRING) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CH
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:SETQ CHUNKSIZE (CL:1+ CHUNKSIZE))
     (CL:CASE CH
      (#\Linefeed
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\n")
       (CL:SETQ CHUNKSIZE (CL:1+ CHUNKSIZE)))
      (#\Return
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\r")
       (CL:SETQ CHUNKSIZE (CL:1+ CHUNKSIZE)))
      (#\"
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\\"")
       (CL:SETQ CHUNKSIZE (CL:1+ CHUNKSIZE)))
      (#\\
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "\\\\")
       (CL:SETQ CHUNKSIZE (CL:1+ CHUNKSIZE)))
      (CL:OTHERWISE
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        CH)))
     (CL:WHEN (CL:AND (CL:>= CHUNKSIZE MAXSIZE) TOOLONG?)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "\").concat(\"")
      (CL:SETQ CHUNKSIZE 0))
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "\"")
   (CL:WHEN TOOLONG?
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")")))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((STRING STRING-WRAPPER))
  (JAVA-OUTPUT-LITERAL (%STRING-WRAPPER.WRAPPER-VALUE STRING))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((STRING MUTABLE-STRING-WRAPPER))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "new StringBuffer(")
  (JAVA-OUTPUT-LITERAL
   (CL:LET ((S (%MUTABLE-STRING-WRAPPER.WRAPPER-VALUE STRING)))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
    (CL:THE CL:SIMPLE-STRING S)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((CHARACTER CHARACTER-WRAPPER))
  (CL:CASE (%CHARACTER-WRAPPER.WRAPPER-VALUE CHARACTER)
   (#\'
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\''"))
   (#\\
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\\\'"))
   (#\Linefeed
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\n'"))
   (#\Backspace
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\b'"))
   (#\Tab
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\t'"))
   (#\Return
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\r'"))
   (#\Page
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "'\\f'"))
   (CL:OTHERWISE
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "'"
     (%CHARACTER-WRAPPER.WRAPPER-VALUE CHARACTER) "'")))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((INT INTEGER-WRAPPER))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%INTEGER-WRAPPER.WRAPPER-VALUE INT))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((INT LONG-INTEGER-WRAPPER))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%LONG-INTEGER-WRAPPER.WRAPPER-VALUE INT) "l")
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((FLOAT FLOAT-WRAPPER))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%FLOAT-WRAPPER.WRAPPER-VALUE FLOAT))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((BOOLEAN BOOLEAN-WRAPPER))
  (CL:IF (%BOOLEAN-WRAPPER.WRAPPER-VALUE BOOLEAN)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "true")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "false"))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-MAKE-ARRAY ...)

(CL:DEFUN JAVA-OUTPUT-MAKE-ARRAY (STATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "new ")
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE STATEMENT)))
  (CL:LET* ((DIMENSION NULL) (ITER-000 (%%REST STATEMENT)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ DIMENSION (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "[")
    (JAVA-OUTPUT-STATEMENT DIMENSION)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "]")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-ARRAY ...)

(CL:DEFUN JAVA-OUTPUT-ARRAY (ARRAYELEMENTS)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{")
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE ARRAYELEMENTS) NULL))
   (JAVA-OUTPUT-STATEMENT (%%VALUE ARRAYELEMENTS)))
  (CL:LET* ((ELEMENT NULL) (ITER-000 (%%REST ARRAYELEMENTS)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ ELEMENT (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ", ")
    (JAVA-OUTPUT-STATEMENT ELEMENT)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-ANONYMOUS-ARRAY ...)

(CL:DEFUN JAVA-OUTPUT-ANONYMOUS-ARRAY (STATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "new ")
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE STATEMENT)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   " [] ")
  (JAVA-OUTPUT-ARRAY (%%REST STATEMENT))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-AREF ...)

(CL:DEFUN JAVA-OUTPUT-AREF (STATEMENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE STATEMENT))
  (CL:LET* ((DIMENSION NULL) (ITER-000 (%%REST STATEMENT)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ DIMENSION (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "[")
    (JAVA-OUTPUT-STATEMENT DIMENSION)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "]")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-SLOT-VALUE ...)

(CL:DEFUN JAVA-OUTPUT-SLOT-VALUE (STATEMENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE STATEMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "."
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST STATEMENT))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-SLOT-VALUE-SETTER ...)

(CL:DEFUN JAVA-OUTPUT-SLOT-VALUE-SETTER (STATEMENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE STATEMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "."
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST STATEMENT))) " = ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST STATEMENT))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-IMPLEMENTS-INTERFACES ...)

(CL:DEFUN JAVA-OUTPUT-IMPLEMENTS-INTERFACES (INTERFACELIST)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE INTERFACELIST)))
  (CL:LET* ((INTERFACE NULL) (ITER-000 (%%REST INTERFACELIST)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ INTERFACE (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ", " (%STRING-WRAPPER.WRAPPER-VALUE INTERFACE))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS ...)

(CL:DEFUN JAVA-OUTPUT-CLASS (CLASSDEF EXCEPTIONCLASS?)
  (JAVA-OUTPUT-CLASS-DECLARATION CLASSDEF)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{"
   EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-OUTPUT-CLASS-VARIABLE-DEFINITIONS (NTH CLASSDEF 6))
  (JAVA-OUTPUT-CLASS-CONSTRUCTORS (NTH CLASSDEF 7)
   (%STRING-WRAPPER.WRAPPER-VALUE (FOURTH CLASSDEF)) EXCEPTIONCLASS?)
  (JAVA-OUTPUT-CLASS-METHODS (NTH CLASSDEF 8))
  (JAVA-UNBUMP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS-DECLARATION ...)

(CL:DEFUN JAVA-OUTPUT-CLASS-DECLARATION (CLASSDEF)
  (CL:WHEN
   (CL:NOT
    (CL:EQ (UNWRAP-STRING (%%VALUE CLASSDEF)) STELLA::NULL-STRING))
   (JAVA-OUTPUT-JAVADOC-COMMENT (%%VALUE CLASSDEF) NULL NULL
    "Stella Java Translator" STELLA::NULL-STRING))
  (CL:LET* ((M NULL) (ITER-000 (%%VALUE (%%REST CLASSDEF))))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ M (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE M) " ")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST (%%REST CLASSDEF))))
   " " (%STRING-WRAPPER.WRAPPER-VALUE (FOURTH CLASSDEF)) " ")
  (CL:WHEN (CL:NOT (CL:EQ (FIFTH CLASSDEF) NULL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "extends " (%STRING-WRAPPER.WRAPPER-VALUE (FIFTH CLASSDEF)) " "))
  (CL:WHEN (CL:NOT (CL:EQ (NTH CLASSDEF 5) NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "implements ")
   (JAVA-OUTPUT-IMPLEMENTS-INTERFACES (NTH CLASSDEF 5)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS-VARIABLE-DEFINITIONS ...)

(CL:DEFUN JAVA-OUTPUT-CLASS-VARIABLE-DEFINITIONS (VARIABLETRANSLATIONS)
  (CL:LET* ((STATEMENT NULL) (ITER-000 VARIABLETRANSLATIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ STATEMENT (%%VALUE ITER-000))
    (JAVA-OUTPUT-STATEMENT STATEMENT)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS-CONSTRUCTORS ...)

(CL:DEFUN JAVA-OUTPUT-CLASS-CONSTRUCTORS (CONSTRUCTORS CLASSNAME EXCEPTIONCLASS?)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING CLASSNAME))
  #+MCL
  (CL:CHECK-TYPE CLASSNAME CL:SIMPLE-STRING)
  (CL:WHEN EXCEPTIONCLASS?
   (JAVA-OUTPUT-EXCEPTION-CONSTRUCTOR CLASSNAME))
  (CL:LET* ((STATEMENT NULL) (ITER-000 CONSTRUCTORS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ STATEMENT (%%VALUE ITER-000))
    (JAVA-OUTPUT-STATEMENT (JAVA-TRANSLATE-UNIT STATEMENT))
    (CL:SETF (%TRANSLATION-UNIT.TRANSLATION STATEMENT) NULL)
    (CL:SETF (%TRANSLATION-UNIT.CODE-REGISTER STATEMENT) NULL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CLASS-METHODS ...)

(CL:DEFUN JAVA-OUTPUT-CLASS-METHODS (METHODS)
  (CL:LET* ((STATEMENT NULL) (ITER-000 METHODS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ STATEMENT (%%VALUE ITER-000))
    (JAVA-OUTPUT-STATEMENT (JAVA-TRANSLATE-UNIT STATEMENT))
    (CL:SETF (%TRANSLATION-UNIT.TRANSLATION STATEMENT) NULL)
    (CL:SETF (%TRANSLATION-UNIT.CODE-REGISTER STATEMENT) NULL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-EXCEPTION-CONSTRUCTOR ...)

(CL:DEFUN JAVA-OUTPUT-EXCEPTION-CONSTRUCTOR (EXCEPTIONNAME)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING EXCEPTIONNAME))
  #+MCL
  (CL:CHECK-TYPE EXCEPTIONNAME CL:SIMPLE-STRING)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "public " EXCEPTIONNAME " (String message) {" EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "super(message);" EOL)
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-NAMED-STATEMENT ...)

(CL:DEFUN JAVA-OUTPUT-NAMED-STATEMENT (NAMEDSTATEMENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE NAMEDSTATEMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " : ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST NAMEDSTATEMENT)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-FORMAL-PARAMETERS ...)

(CL:DEFUN JAVA-OUTPUT-FORMAL-PARAMETERS (PARAMETERS)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CL:WHEN (CL:NOT (CL:EQ PARAMETERS NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%VALUE PARAMETERS))) " "
    (%STRING-WRAPPER.WRAPPER-VALUE
     (%%VALUE (%%REST (%%VALUE PARAMETERS)))))
   (CL:LET* ((PARAMETER NULL) (ITER-000 (%%REST PARAMETERS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ PARAMETER (%%VALUE ITER-000))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ", " (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE PARAMETER)) " "
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST PARAMETER))))
     (CL:SETQ ITER-000 (%%REST ITER-000)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-METHOD-SIGNATURE ...)

(CL:DEFUN JAVA-OUTPUT-METHOD-SIGNATURE (METHOD)
  (CL:LET* ((M NULL) (ITER-000 (%%VALUE METHOD)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ M (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE M) " ")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (JAVA-OUTPUT-TYPE-EXPRESSION (%%VALUE (%%REST METHOD)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST (%%REST METHOD)))))
  (JAVA-OUTPUT-FORMAL-PARAMETERS (FOURTH METHOD))
  :VOID)

;;; (DEFUN (JAVA-SEPARATE-COMMENT-FROM-BODY CONS CONS) ...)

(CL:DEFUN JAVA-SEPARATE-COMMENT-FROM-BODY (BODY)
  (CL:IF
   (CL:AND
    (CL:EQ (%%VALUE BODY) SYM-JAVA-OUTPUT-STELLA-JAVA_STATEMENTS)
    (CL:NOT (CL:EQ (%%REST BODY) NIL))
    (ISA? (%%VALUE (%%REST BODY)) SGT-JAVA-OUTPUT-STELLA-CONS)
    (CL:EQ (%%VALUE (%%VALUE (%%REST BODY)))
     SYM-JAVA-OUTPUT-STELLA-JAVA_COMMENT))
   (CL:LET* ((COMMENT (%%VALUE (%%REST BODY))))
    (CL:SETF (%%REST BODY) (%%REST (%%REST BODY)))
    (CL:IF (CL:EQ (%%REST BODY) NIL)
     (CL:RETURN-FROM JAVA-SEPARATE-COMMENT-FROM-BODY
      (CL:VALUES NIL COMMENT))
     (CL:RETURN-FROM JAVA-SEPARATE-COMMENT-FROM-BODY
      (CL:VALUES BODY COMMENT))))
   (CL:RETURN-FROM JAVA-SEPARATE-COMMENT-FROM-BODY
    (CL:VALUES BODY NULL))))

;;; (DEFUN JAVA-OUTPUT-METHOD ...)

(CL:DEFUN JAVA-OUTPUT-METHOD (METHOD)
  (CL:LET* ((BODY NULL) (COMMENT NULL))
   (CL:MULTIPLE-VALUE-SETQ (BODY COMMENT)
    (JAVA-SEPARATE-COMMENT-FROM-BODY (FIFTH METHOD)))
   (CL:WHEN (CL:NOT (CL:EQ COMMENT NULL)) (JAVA-INDENT)
    (JAVA-OUTPUT-JAVADOC-COMMENT (%%VALUE (%%REST COMMENT))
     (FOURTH METHOD) (%%VALUE (%%VALUE (%%REST METHOD)))
     STELLA::NULL-STRING STELLA::NULL-STRING))
   (JAVA-INDENT) (JAVA-OUTPUT-METHOD-SIGNATURE METHOD)
   (CL:COND
    ((CL:NOT (CL:EQ BODY NIL))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      " {" EOL)
     (JAVA-BUMP-INDENT) (JAVA-OUTPUT-STATEMENT BODY)
     (JAVA-UNBUMP-INDENT) (JAVA-INDENT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "}" EOL))
    ((MEMBER? (%%VALUE METHOD) (WRAP-STRING "abstract"))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL))
    ((MEMBER? (%%VALUE (%%REST METHOD)) (WRAP-STRING "void"))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM STANDARD-OUTPUT)
      "Note: Void method `" (%%VALUE (%%REST (%%REST METHOD)))
      "' has an empty body." EOL)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      " {}" EOL))
    (CL:T
     (CL:WARN
      "Method `~A' has an empty body but is not abstract or void!"
      (%%VALUE (%%REST (%%REST METHOD))))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      " {}" EOL)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(%%DEFCONSMETHOD JAVA-OUTPUT-LITERAL ((CONS CL:CONS))
  (CL:IF (CL:EQ CONS NIL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "NIL")
   (CL:PROGN
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "("
     (%%VALUE CONS) " . ")
    (JAVA-OUTPUT-LITERAL (%%REST CONS))))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((TREE QUOTED-EXPRESSION))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "\""
   TREE "\"")
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((SYMBOL SYMBOL))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (JAVA-TRANSLATE-SYMBOL-NAME SYMBOL)))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((SURROGATE SURROGATE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE
    (JAVA-TRANSLATE-SURROGATE-NAME SURROGATE)))
  :VOID)

;;; (DEFMETHOD JAVA-OUTPUT-LITERAL ...)

(CL:DEFMETHOD JAVA-OUTPUT-LITERAL ((KEYWORD KEYWORD))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE
    (JAVA-TRANSLATE-KEYWORD-NAME KEYWORD)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-TYPE-EXPRESSION ...)

(CL:DEFUN JAVA-OUTPUT-TYPE-EXPRESSION (TYPEEXPRESSION)
  (CL:LET* ((TYPEEXPR NULL) (ITER-000 TYPEEXPRESSION))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ TYPEEXPR (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE TYPEEXPR) " ")
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFGLOBAL *JAVA-SEMICOLON-STATEMENTS* ...)

(CL:DEFVAR *JAVA-SEMICOLON-STATEMENTS* NULL)

;;; (DEFUN (JAVA-OUTPUT-SEMICOLON? BOOLEAN) ...)

(CL:DEFUN JAVA-OUTPUT-SEMICOLON? (STATEMENT)
  (CL:IF (CL:NOT (CL:EQ STATEMENT NULL))
   (CL:RETURN-FROM JAVA-OUTPUT-SEMICOLON?
    (MEMBER? *JAVA-SEMICOLON-STATEMENTS* (%%VALUE STATEMENT)))
   (CL:RETURN-FROM JAVA-OUTPUT-SEMICOLON? CL:NIL)))

;;; (DEFUN (JAVA-INDENT-STATEMENT? BOOLEAN) ...)

(CL:DEFUN JAVA-INDENT-STATEMENT? (STATEMENT)
  (CL:IF (CL:NOT (CL:EQ STATEMENT NULL))
   (CL:RETURN-FROM JAVA-INDENT-STATEMENT?
    (CL:NOT
     (MEMBER?
      (GET-QUOTED-TREE "((JAVA_STATEMENTS JAVA_CATCH) \"/STELLA\")"
       "/STELLA")
      (%%VALUE STATEMENT))))
   (CL:RETURN-FROM JAVA-INDENT-STATEMENT? CL:NIL)))

;;; (DEFUN (JAVA-ILLEGAL-STATEMENT? BOOLEAN) ...)

(CL:DEFUN JAVA-ILLEGAL-STATEMENT? (STATEMENT)
  (CL:IF (CL:NOT (CL:EQ STATEMENT NULL))
   (CL:RETURN-FROM JAVA-ILLEGAL-STATEMENT?
    (MEMBER?
     (GET-QUOTED-TREE "((JAVA_LITERAL JAVA_IDENT) \"/STELLA\")"
      "/STELLA")
     (%%VALUE STATEMENT)))
   (CL:RETURN-FROM JAVA-ILLEGAL-STATEMENT? CL:NIL)))

;;; (DEFUN JAVA-OUTPUT-STATEMENTS ...)

(CL:DEFUN JAVA-OUTPUT-STATEMENTS (STATEMENTLIST)
  (CL:LET* ((STATEMENT NULL) (ITER-000 STATEMENTLIST))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ STATEMENT (%%VALUE ITER-000))
    (CL:WHEN (CL:NOT (JAVA-ILLEGAL-STATEMENT? STATEMENT))
     (CL:WHEN (JAVA-INDENT-STATEMENT? STATEMENT) (JAVA-INDENT))
     (JAVA-OUTPUT-STATEMENT STATEMENT)
     (CL:WHEN (JAVA-OUTPUT-SEMICOLON? STATEMENT)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ";" EOL)))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-DECLARATIONS ...)

(CL:DEFUN JAVA-OUTPUT-DECLARATIONS (DECLARATIONS)
  (JAVA-BUMP-INDENT)
  (CL:LET* ((DECLARATION NULL) (ITER-000 DECLARATIONS))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ DECLARATION (%%VALUE ITER-000))
    (CL:WHEN
     (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST DECLARATION))) NULL))
     (JAVA-INDENT)
     (JAVA-OUTPUT-JAVADOC-COMMENT
      (%%VALUE (%%REST (%%REST DECLARATION))) NIL NULL
      STELLA::NULL-STRING STELLA::NULL-STRING))
    (JAVA-INDENT) (JAVA-OUTPUT-TYPE-EXPRESSION (%%VALUE DECLARATION))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST DECLARATION))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  (JAVA-UNBUMP-INDENT)
  :VOID)

;;; (DEFUN (JAVA-HEURISTICALLY-TRANSLATE-NAME STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING CL:T) CL:SIMPLE-STRING)
  JAVA-HEURISTICALLY-TRANSLATE-NAME))
(CL:DEFUN JAVA-HEURISTICALLY-TRANSLATE-NAME (STELLA-NAME CASE-CONVERTED-NAME-LIST)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STELLA-NAME))
  #+MCL
  (CL:CHECK-TYPE STELLA-NAME CL:SIMPLE-STRING)
  (CL:LET* ((PNAME NULL) (ITER-000 CASE-CONVERTED-NAME-LIST))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ PNAME (%%VALUE ITER-000))
    (CL:WHEN
     (STRING-EQUAL? (%STRING-WRAPPER.WRAPPER-VALUE PNAME) STELLA-NAME)
     (CL:RETURN-FROM JAVA-HEURISTICALLY-TRANSLATE-NAME
      (%STRING-WRAPPER.WRAPPER-VALUE PNAME)))
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (CL:LET* ((TEST-VALUE-000 CL:NIL))
   (CL:IF (%MODULE.CASE-SENSITIVE? *MODULE*)
    (CL:SETQ TEST-VALUE-000 CL:T)
    (CL:LET* ((FOUND?-000 CL:NIL))
     (CL:LET*
      ((CH NULL-CHARACTER) (VECTOR-000 STELLA-NAME) (INDEX-000 0)
       (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
      (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
       (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
      (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
       (CL:SETQ CH
        (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
         (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
          (CL:TYPE CL:FIXNUM POSITION))
         (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
          (CL:THE CL:FIXNUM POSITION))))
       (CL:WHEN (UPPER-CASE-CHARACTER? CH) (CL:SETQ FOUND?-000 CL:T)
        (CL:RETURN))
       (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
     (CL:SETQ TEST-VALUE-000 FOUND?-000)))
   (CL:IF TEST-VALUE-000
    (CL:PROGN
     (CL:RETURN-FROM JAVA-HEURISTICALLY-TRANSLATE-NAME
      (JAVA-TRANSLATE-NAMESTRING
       (MAKE-MATCHING-NAME-FULL STELLA-NAME KWD-JAVA-OUTPUT-NO
        KWD-JAVA-OUTPUT-NO "- " "" "" "" "" KWD-JAVA-OUTPUT-PRESERVE
        "_"))))
    (CL:IF (MEMBER? STELLA-NAME #\*)
     (CL:PROGN
      (CL:RETURN-FROM JAVA-HEURISTICALLY-TRANSLATE-NAME
       (JAVA-TRANSLATE-NAMESTRING
        (MAKE-MATCHING-NAME-FULL STELLA-NAME KWD-JAVA-OUTPUT-CLEVER
         KWD-JAVA-OUTPUT-CLEVER "- " "" "" "" "" KWD-JAVA-OUTPUT-UPCASE
         "_"))))
     (CL:PROGN
      (CL:RETURN-FROM JAVA-HEURISTICALLY-TRANSLATE-NAME
       (JAVA-TRANSLATE-NAMESTRING
        (MAKE-MATCHING-NAME-FULL STELLA-NAME KWD-JAVA-OUTPUT-CLEVER
         KWD-JAVA-OUTPUT-CLEVER "- " "" "" "" ""
         KWD-JAVA-OUTPUT-TITLECASEX ""))))))))

;;; (DEFUN JAVA-OUTPUT-COMMENT-STRING ...)

(CL:DEFUN JAVA-OUTPUT-COMMENT-STRING (COMMENT COMMENT-START COMMENT-CONTINUATION COMMENT-END JAVADOC-COMMENT? CASE-CONVERTED-NAME-LIST)
  (CL:DECLARE
   (CL:TYPE CL:SIMPLE-STRING COMMENT COMMENT-START COMMENT-CONTINUATION
    COMMENT-END))
  #+MCL
  (CL:CHECK-TYPE COMMENT CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE COMMENT-START CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE COMMENT-CONTINUATION CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE COMMENT-END CL:SIMPLE-STRING)
  (CL:LET*
   ((RETURN? CL:NIL) (ESCAPE? CL:NIL) (EOL-LAST? CL:NIL)
    (INSIDE-QUOTE? CL:NIL) (SAVED-STREAM *CURRENT-STREAM*)
    (STRING-STREAM NULL) (STELLA-NAME STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING STELLA-NAME))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    COMMENT-START)
   (CL:LET*
    ((CHAR NULL-CHARACTER) (VECTOR-000 COMMENT) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000))))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CHAR
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:TAGBODY
      (CL:CASE CHAR
       (#\Linefeed
        (CL:WHEN (CL:NOT RETURN?)
         (CL:IF (CL:AND EOL-LAST? JAVADOC-COMMENT?)
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "<p>" EOL)
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
         (CL:SETQ EOL-LAST? CL:T) (JAVA-INDENT)
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
          COMMENT-CONTINUATION))
        (CL:SETQ ESCAPE? CL:NIL) (CL:SETQ RETURN? CL:NIL))
       (#\Return
        (CL:IF (CL:AND EOL-LAST? JAVADOC-COMMENT?)
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "<p>" EOL)
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL))
        (JAVA-INDENT)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         COMMENT-CONTINUATION)
        (CL:SETQ EOL-LAST? CL:T) (CL:SETQ RETURN? CL:T)
        (CL:SETQ ESCAPE? CL:NIL) (CL:GO :CONTINUE))
       (#\`
        (CL:COND
         (ESCAPE?
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR))
         (INSIDE-QUOTE?
          (CL:WARN
           "Encountered unescaped ` inside ` form in comment `~A'"
           COMMENT)
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR))
         (CL:T (CL:SETQ STRING-STREAM (NEW-OUTPUT-STRING-STREAM))
          (CL:SETQ *CURRENT-STREAM* STRING-STREAM)
          (CL:SETQ INSIDE-QUOTE? CL:T)))
        (CL:SETQ ESCAPE? CL:NIL) (CL:SETQ RETURN? CL:NIL)
        (CL:SETQ EOL-LAST? CL:NIL))
       (#\'
        (CL:COND
         (ESCAPE?
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR))
         (INSIDE-QUOTE? (CL:SETQ *CURRENT-STREAM* SAVED-STREAM)
          (CL:SETQ STELLA-NAME (THE-STRING-READER STRING-STREAM))
          (CL:IF JAVADOC-COMMENT?
           (%%PRINT-STREAM
            (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "<code>")
           (%%PRINT-STREAM
            (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "`"))
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
           (JAVA-HEURISTICALLY-TRANSLATE-NAME STELLA-NAME
            CASE-CONVERTED-NAME-LIST))
          (CL:IF JAVADOC-COMMENT?
           (%%PRINT-STREAM
            (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "</code>")
           (%%PRINT-STREAM
            (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "'"))
          (CL:SETQ INSIDE-QUOTE? CL:NIL))
         (CL:T
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR)))
        (CL:SETQ ESCAPE? CL:NIL) (CL:SETQ RETURN? CL:NIL)
        (CL:SETQ EOL-LAST? CL:NIL))
       (#\\
        (CL:IF ESCAPE?
         (CL:PROGN
          (%%PRINT-STREAM
           (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR)
          (CL:SETQ ESCAPE? CL:NIL))
         (CL:SETQ ESCAPE? CL:T))
        (CL:SETQ RETURN? CL:NIL) (CL:SETQ EOL-LAST? CL:NIL))
       (CL:OTHERWISE
        (CL:IF (CL:OR INSIDE-QUOTE? (CL:NOT JAVADOC-COMMENT?))
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR)
         (WRITE-HTML-CHARACTER-QUOTING-SPECIAL-CHARACTERS
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) CHAR))
        (CL:SETQ RETURN? CL:NIL) (CL:SETQ ESCAPE? CL:NIL)
        (CL:SETQ EOL-LAST? CL:NIL)))
      :CONTINUE)
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))))
   (CL:WHEN INSIDE-QUOTE?
    (CL:WARN "Comment ended while inside a ` form in comment `~A'"
     COMMENT)
    (CL:SETQ *CURRENT-STREAM* SAVED-STREAM)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "`")
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (THE-STRING-READER STRING-STREAM)))
   (CL:IF
    (CL:AND (CL:NOT (CL:EQ COMMENT-END STELLA::NULL-STRING))
     (CL:NOT (STRING-EQL? COMMENT-END "")))
    (CL:PROGN (JAVA-INDENT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      COMMENT-END))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     EOL)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-COMMENT ...)

(CL:DEFUN JAVA-OUTPUT-COMMENT (TREE)
  (JAVA-OUTPUT-COMMENT-STRING (%STRING-WRAPPER.WRAPPER-VALUE TREE)
   "// " "// " STELLA::NULL-STRING CL:NIL NIL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-JAVADOC-COMMENT ...)

(CL:DEFUN JAVA-OUTPUT-JAVADOC-COMMENT (TREE PARAMETER-NAMES-AND-TYPES RETURN-VALUE AUTHOR VERSION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING AUTHOR VERSION))
  #+MCL
  (CL:CHECK-TYPE AUTHOR CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE VERSION CL:SIMPLE-STRING)
  (CL:LET* ((PARAMETER-NAMES NIL))
   (CL:WHEN (CL:NOT (CL:EQ PARAMETER-NAMES-AND-TYPES NULL))
    (CL:LET*
     ((N NULL) (ITER-000 PARAMETER-NAMES-AND-TYPES) (COLLECT-000 NULL))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ N (%%VALUE ITER-000))
      (CL:IF (CL:EQ COLLECT-000 NULL)
       (CL:PROGN (CL:SETQ COLLECT-000 (CONS (%%VALUE (%%REST N)) NIL))
        (CL:IF (CL:EQ PARAMETER-NAMES NIL)
         (CL:SETQ PARAMETER-NAMES COLLECT-000)
         (ADD-CONS-TO-END-OF-CONS-LIST PARAMETER-NAMES COLLECT-000)))
       (CL:PROGN
        (CL:SETF (%%REST COLLECT-000) (CONS (%%VALUE (%%REST N)) NIL))
        (CL:SETQ COLLECT-000 (%%REST COLLECT-000))))
      (CL:SETQ ITER-000 (%%REST ITER-000)))))
   (JAVA-OUTPUT-COMMENT-STRING (%STRING-WRAPPER.WRAPPER-VALUE TREE)
    "/** " " * " STELLA::NULL-STRING CL:T PARAMETER-NAMES)
   (CL:LET* ((N NULL) (ITER-001 PARAMETER-NAMES))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
     (CL:SETQ N (%%VALUE ITER-001)) (JAVA-INDENT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      " * @param " (%STRING-WRAPPER.WRAPPER-VALUE N) EOL)
     (CL:SETQ ITER-001 (%%REST ITER-001))))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ RETURN-VALUE NULL))
     (CL:NOT
      (STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE RETURN-VALUE)
       "void")))
    (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " * @return " (%STRING-WRAPPER.WRAPPER-VALUE RETURN-VALUE) EOL))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ AUTHOR STELLA::NULL-STRING))
     (CL:NOT (CL:EQ AUTHOR "")))
    (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " * @author " AUTHOR EOL))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ VERSION STELLA::NULL-STRING))
     (CL:NOT (CL:EQ VERSION "")))
    (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " * @version " VERSION EOL))
   (JAVA-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    " */" EOL))
  :VOID)

;;; (DEFUN (FIXUP-DOCUMENTATION-STRING-QUOTING STRING) ...)

(CL:DECLAIM
 (CL:FTYPE (CL:FUNCTION (CL:SIMPLE-STRING) CL:SIMPLE-STRING)
  FIXUP-DOCUMENTATION-STRING-QUOTING))
(CL:DEFUN FIXUP-DOCUMENTATION-STRING-QUOTING (DOCUMENTATION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING DOCUMENTATION))
  #+MCL
  (CL:CHECK-TYPE DOCUMENTATION CL:SIMPLE-STRING)
  (CL:WHEN (CL:EQ DOCUMENTATION STELLA::NULL-STRING)
   (CL:RETURN-FROM FIXUP-DOCUMENTATION-STRING-QUOTING
    STELLA::NULL-STRING))
  (CL:LET*
   ((CLOSINGQUOTEPOSITION NULL-INTEGER)
    (PRECEDINGCHARACTER NULL-CHARACTER) (OPENPARENTHESES "([{")
    (BUFFER (CL:THE CL:SIMPLE-STRING (CL:COPY-SEQ DOCUMENTATION))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM CLOSINGQUOTEPOSITION)
    (CL:TYPE CL:SIMPLE-STRING OPENPARENTHESES BUFFER))
   (CL:LET*
    ((CHAR NULL-CHARACTER) (VECTOR-000 DOCUMENTATION) (INDEX-000 0)
     (LENGTH-000 (CL:THE CL:FIXNUM (CL:LENGTH VECTOR-000)))
     (I NULL-INTEGER) (ITER-000 0))
    (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VECTOR-000)
     (CL:TYPE CL:FIXNUM INDEX-000 LENGTH-000 I ITER-000))
    (CL:LOOP WHILE (CL:< INDEX-000 LENGTH-000) DO
     (CL:SETQ CHAR
      (CL:LET ((SELF VECTOR-000) (POSITION INDEX-000))
       (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
        (CL:TYPE CL:FIXNUM POSITION))
       (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
        (CL:THE CL:FIXNUM POSITION))))
     (CL:SETQ I ITER-000)
     (CL:TAGBODY
      (CL:CASE CHAR
       ((#\` #\')
        (CL:WHEN (CL:= I CLOSINGQUOTEPOSITION) (CL:GO :CONTINUE))
        (CL:IF (CL:= I 0) (CL:SETQ PRECEDINGCHARACTER #\ )
         (CL:SETQ PRECEDINGCHARACTER
          (CL:LET ((SELF DOCUMENTATION) (POSITION (CL:1- I)))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
            (CL:THE CL:FIXNUM POSITION)))))
        (CL:WHEN
         (CL:OR
          (CL:EQ
           (CL:AREF *CHARACTER-TYPE-TABLE*
            (CL:THE CL:FIXNUM (CL:CHAR-CODE PRECEDINGCHARACTER)))
           KWD-JAVA-OUTPUT-WHITE-SPACE)
          (MEMBER? OPENPARENTHESES PRECEDINGCHARACTER))
         (CL:SETQ CLOSINGQUOTEPOSITION
          (POSITION DOCUMENTATION #\' (CL:1+ I)))
         (CL:WHEN (CL:NOT (CL:= CLOSINGQUOTEPOSITION NULL-INTEGER))
          (CL:LET ((SELF BUFFER) (CH #\`) (POSITION I))
           (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SELF)
            (CL:TYPE CL:FIXNUM POSITION))
           (SETF
            (CL:SCHAR (CL:THE CL:SIMPLE-STRING SELF)
             (CL:THE CL:FIXNUM POSITION))
            (CL:THE CL:CHARACTER CH))))))
       (CL:OTHERWISE))
      :CONTINUE)
     (CL:SETQ INDEX-000 (CL:1+ INDEX-000))
     (CL:SETQ ITER-000 (CL:1+ ITER-000))))
   (CL:RETURN-FROM FIXUP-DOCUMENTATION-STRING-QUOTING
    (CL:LET ((S BUFFER)) (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING S))
     (CL:THE CL:SIMPLE-STRING S)))))

;;; (DEFUN JAVA-OUTPUT-VERBATIM ...)

(CL:DEFUN JAVA-OUTPUT-VERBATIM (VERBATIMSTATEMENT)
  (CL:LET*
   ((VSTRING (%STRING-WRAPPER.WRAPPER-VALUE VERBATIMSTATEMENT)))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING VSTRING))
   (CL:IF
    (CL:OR (MEMBER? VSTRING #\Linefeed) (MEMBER? VSTRING #\Return))
    (SUBSTITUTE-TEMPLATE-VARIABLES-TO-STREAM
     (MAKE-TOKENIZER-STRING-STREAM VSTRING) *CURRENT-STREAM*
     *JAVA-STELLA-PACKAGE-MAPPING*)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (SUBSTITUTE-TEMPLATE-VARIABLES-IN-STRING VSTRING
      *JAVA-STELLA-PACKAGE-MAPPING*))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-MAKE ...)

(CL:DEFUN JAVA-OUTPUT-MAKE (STATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "new ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE STATEMENT))
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST STATEMENT)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CAST ...)

(CL:DEFUN JAVA-OUTPUT-CAST (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(("
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST TREE))) ")(")
  (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "))")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-PROGN ...)

(CL:DEFUN JAVA-OUTPUT-PROGN (PROGN)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{"
   EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-OUTPUT-STATEMENT PROGN)
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-BLOCK ...)

(CL:DEFUN JAVA-OUTPUT-BLOCK (BLOCK)
  (CL:LET* ((FIRSTSTATEMENT? CL:T))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "{ ")
   (JAVA-BUMP-INDENT)
   (CL:LET* ((DECLARATION NULL) (ITER-000 (%%VALUE BLOCK)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ DECLARATION (%%VALUE ITER-000))
     (CL:WHEN (CL:NOT FIRSTSTATEMENT?) (JAVA-INDENT))
     (CL:SETQ FIRSTSTATEMENT? CL:NIL)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE DECLARATION)))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      " ")
     (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST DECLARATION)))
     (CL:WHEN
      (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST DECLARATION))) NULL))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       " = ")
      (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST DECLARATION)))))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL)
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
   (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST BLOCK)))
   (JAVA-UNBUMP-INDENT) (JAVA-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-WITH-PROCESS-LOCK ...)

(CL:DEFUN JAVA-OUTPUT-WITH-PROCESS-LOCK (SYNCH)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "synchronized (")
  (JAVA-OUTPUT-STATEMENT (%%VALUE SYNCH))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") ")
  (JAVA-OUTPUT-PROGN (%%VALUE (%%REST SYNCH)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-RETURN ...)

(CL:DEFUN JAVA-OUTPUT-RETURN (RETURNSTATEMENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "return")
  (CL:WHEN (CL:NOT (CL:EQ RETURNSTATEMENT NULL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    " (")
   (JAVA-OUTPUT-STATEMENT RETURNSTATEMENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-THROW ...)

(CL:DEFUN JAVA-OUTPUT-THROW (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "throw new ")
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE TREE)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CATCH ...)

(CL:DEFUN JAVA-OUTPUT-CATCH (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   " catch (")
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%VALUE TREE))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST (%%VALUE TREE)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") {"
   EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-OUTPUT-STATEMENTS (%%REST TREE))
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-UNWIND-PROTECT ...)

(CL:DEFUN JAVA-OUTPUT-UNWIND-PROTECT (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "try {" EOL)
  (JAVA-BUMP-INDENT)
  (CL:COND
   ((JAVA-PROGN? (%%VALUE TREE))
    (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%VALUE TREE)))))
   ((JAVA-INDENT-STATEMENT? (%%VALUE TREE)) (JAVA-INDENT)
    (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))
    (CL:WHEN (JAVA-OUTPUT-SEMICOLON? (%%VALUE TREE))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL)))
   (CL:T (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))))
  (JAVA-UNBUMP-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "} finally {" EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-OUTPUT-STATEMENTS (%%REST TREE))
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-HANDLER-CASE ...)

(CL:DEFUN JAVA-OUTPUT-HANDLER-CASE (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "try {" EOL)
  (JAVA-BUMP-INDENT)
  (CL:IF (JAVA-PROGN? (%%VALUE TREE))
   (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%VALUE TREE))))
   (CL:PROGN (JAVA-INDENT) (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))
    (CL:WHEN (JAVA-OUTPUT-SEMICOLON? (%%VALUE TREE))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL))))
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}")
  (JAVA-OUTPUT-STATEMENTS (%%REST TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-SIGNAL ...)

(CL:DEFUN JAVA-OUTPUT-SIGNAL (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "throw ")
  (JAVA-OUTPUT-STATEMENT TREE)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-GLOBAL-DEFINITION ...)

(CL:DEFUN JAVA-OUTPUT-GLOBAL-DEFINITION (GLOBAL)
  (CL:WHEN
   (CL:NOT
    (CL:EQ (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE GLOBAL))
     STELLA::NULL-STRING))
   (JAVA-INDENT)
   (JAVA-OUTPUT-JAVADOC-COMMENT (%%VALUE GLOBAL) NIL NULL
    STELLA::NULL-STRING STELLA::NULL-STRING))
  (JAVA-INDENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST GLOBAL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST (%%REST GLOBAL)))))
  (CL:WHEN (CL:NOT (CL:EQ (%%REST (%%REST (%%REST GLOBAL))) NIL))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    " = ")
   (JAVA-OUTPUT-STATEMENT (FOURTH GLOBAL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
   EOL EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-ACTUALS-AS-CONS-EXPRESSION ...)

(CL:DEFUN JAVA-OUTPUT-ACTUALS-AS-CONS-EXPRESSION (ARGLIST)
  (CL:IF (CL:EQ ARGLIST NIL)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (JAVA-PREPEND-GLOBAL-CLASS-NAME "NIL" *STELLA-MODULE*))
   (CL:PROGN
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     (LOOKUP *JAVA-STELLA-PACKAGE-MAPPING* (WRAP-STRING "STELLAROOT"))
     ".Stella_Object.cons(")
    (JAVA-OUTPUT-STATEMENT (%%VALUE ARGLIST))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ", ")
    (JAVA-OUTPUT-ACTUALS-AS-CONS-EXPRESSION (%%REST ARGLIST))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")")))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-FUNCALL ...)

(CL:DEFUN JAVA-OUTPUT-FUNCALL (FUNCALL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (JAVA-YIELD-FULL-NATIVE-CLASS-NAME) ".funcall(")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST FUNCALL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   ", null, new java.lang.Object [] ")
  (JAVA-OUTPUT-ARRAY (%%REST (%%VALUE (%%REST (%%REST FUNCALL)))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-METHOD-CODE-CALL ...)

(CL:DEFUN JAVA-OUTPUT-METHOD-CODE-CALL (METHODCALL)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (JAVA-YIELD-FULL-NATIVE-CLASS-NAME) ".funcall(")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST METHODCALL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ", ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST METHODCALL))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   ", new java.lang.Object []")
  (JAVA-OUTPUT-ARRAY (%%REST (FOURTH METHODCALL)))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFUN JAVA-OUTPUT-BREAK ...)

(CL:DEFUN JAVA-OUTPUT-BREAK (TAG)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "break ")
  (JAVA-OUTPUT-STATEMENT TAG)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
   EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-CONTINUE ...)

(CL:DEFUN JAVA-OUTPUT-CONTINUE (TAG)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "continue ")
  (JAVA-OUTPUT-STATEMENT TAG)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
   EOL)
  :VOID)

;;; (DEFUN (JAVA-STATEMENT-RETURNS? BOOLEAN) ...)

(CL:DEFUN JAVA-STATEMENT-RETURNS? (STATEMENT)
  (CL:COND
   ((CL:EQ STATEMENT NULL)
    (CL:RETURN-FROM JAVA-STATEMENT-RETURNS? CL:NIL))
   ((CL:EQ STATEMENT NIL)
    (CL:RETURN-FROM JAVA-STATEMENT-RETURNS? CL:NIL))
   (CL:T
    (CL:LET* ((TEST-VALUE-000 (%%VALUE STATEMENT)))
     (CL:COND
      ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_VERBATIM)
       (CL:RETURN-FROM JAVA-STATEMENT-RETURNS?
        (CL:NOT
         (CL:=
          (STRING-SEARCH
           (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST STATEMENT)))
           "throw new Error" 0)
          NULL-INTEGER))))
      ((CL:OR (CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_RETURN)
        (CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_CONTINUE)
        (CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_BREAK)
        (CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_SIGNAL))
       (CL:RETURN-FROM JAVA-STATEMENT-RETURNS? CL:T))
      ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_STATEMENTS)
       (CL:RETURN-FROM JAVA-STATEMENT-RETURNS?
        (JAVA-LAST-STATEMENT-RETURNS? (%%REST STATEMENT))))
      ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_PROGN)
       (CL:RETURN-FROM JAVA-STATEMENT-RETURNS?
        (JAVA-LAST-STATEMENT-RETURNS? (%%VALUE (%%REST STATEMENT)))))
      ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_BLOCK)
       (CL:RETURN-FROM JAVA-STATEMENT-RETURNS?
        (JAVA-LAST-STATEMENT-RETURNS?
         (%%VALUE (%%REST (%%REST STATEMENT))))))
      ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_IF)
       (CL:RETURN-FROM JAVA-STATEMENT-RETURNS?
        (CL:AND
         (JAVA-STATEMENT-RETURNS?
          (%%VALUE (%%REST (%%REST STATEMENT))))
         (JAVA-STATEMENT-RETURNS? (FOURTH STATEMENT)))))
      ((CL:EQ TEST-VALUE-000 SYM-JAVA-OUTPUT-STELLA-JAVA_COND)
       (CL:LET* ((TEST-VALUE-001 CL:NIL))
        (CL:SETQ TEST-VALUE-001
         (JAVA-STATEMENT-RETURNS? (%%VALUE (%%REST STATEMENT))))
        (CL:WHEN TEST-VALUE-001
         (CL:LET* ((ALWAYS?-000 CL:T))
          (CL:LET*
           ((C NULL) (ITER-000 (%%VALUE (%%REST (%%REST STATEMENT)))))
           (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
            (CL:SETQ C (%%VALUE ITER-000))
            (CL:WHEN (CL:NOT (JAVA-LAST-STATEMENT-RETURNS? C))
             (CL:SETQ ALWAYS?-000 CL:NIL) (CL:RETURN))
            (CL:SETQ ITER-000 (%%REST ITER-000))))
          (CL:SETQ TEST-VALUE-001 ALWAYS?-000)))
        (CL:LET* ((VALUE-000 TEST-VALUE-001))
         (CL:RETURN-FROM JAVA-STATEMENT-RETURNS? VALUE-000))))
      (CL:T (CL:RETURN-FROM JAVA-STATEMENT-RETURNS? CL:NIL)))))))

;;; (DEFUN (JAVA-LAST-STATEMENT-RETURNS? BOOLEAN) ...)

(CL:DEFUN JAVA-LAST-STATEMENT-RETURNS? (STATEMENTS)
  (CL:LET* ((LAST-STATEMENT (LAST STATEMENTS)))
   (CL:RETURN-FROM JAVA-LAST-STATEMENT-RETURNS?
    (CL:AND (ISA? LAST-STATEMENT SGT-JAVA-OUTPUT-STELLA-CONS)
     (JAVA-STATEMENT-RETURNS? LAST-STATEMENT)))))

;;; (DEFUN JAVA-OUTPUT-CASE ...)

(CL:DEFUN JAVA-OUTPUT-CASE (CASE)
  (CL:LET*
   ((KEYFORM (%%VALUE CASE)) (DEFAULTCASE (%%VALUE (%%REST CASE)))
    (CONDITIONS (%%VALUE (%%REST (%%REST CASE)))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "switch (")
   (JAVA-OUTPUT-STATEMENT KEYFORM)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") {" EOL)
   (JAVA-BUMP-INDENT)
   (CL:LET* ((C NULL) (ITER-000 CONDITIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (CL:LET* ((CONDITION C))
      (CL:LET*
       ((COND NULL)
        (ITER-001
         (CL:IF (CONS? (%%VALUE (%%VALUE CONDITION)))
          (%%VALUE CONDITION) (CONS (%%VALUE CONDITION) NIL))))
       (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-001 NIL)) DO
        (CL:SETQ COND (%%VALUE ITER-001)) (JAVA-INDENT)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "case ")
        (JAVA-OUTPUT-STATEMENT COND)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         ": " EOL)
        (CL:SETQ ITER-001 (%%REST ITER-001))))
      (JAVA-BUMP-INDENT)
      (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST CONDITION)))
      (JAVA-UNBUMP-INDENT)
      (CL:WHEN
       (CL:NOT
        (JAVA-LAST-STATEMENT-RETURNS? (%%VALUE (%%REST CONDITION))))
       (JAVA-INDENT)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        "break;" EOL)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN (CL:EQ DEFAULTCASE NULL)
    (CL:ERROR
     "Safety violation: INTERNAL ERROR: `java-output-case' expects an `otherwise' clause."))
   (JAVA-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "default:" EOL)
   (JAVA-BUMP-INDENT) (JAVA-OUTPUT-STATEMENT DEFAULTCASE)
   (JAVA-UNBUMP-INDENT)
   (CL:WHEN (CL:NOT (JAVA-LAST-STATEMENT-RETURNS? DEFAULTCASE))
    (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "break;" EOL))
   (JAVA-UNBUMP-INDENT) (JAVA-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-COND ...)

(CL:DEFUN JAVA-OUTPUT-COND (COND)
  (CL:LET*
   ((DEFAULTCONDITION (%%VALUE COND))
    (CONDITIONS (%%VALUE (%%REST COND)))
    (FIRSTCONDITION (%%VALUE CONDITIONS))
    (RESTCONDITIONS (%%REST CONDITIONS)))
   (CL:WHEN
    (CL:AND (CL:NOT (CL:EQ DEFAULTCONDITION NULL))
     (CL:EQ CONDITIONS NIL))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "if (true) ")
    (JAVA-OUTPUT-STATEMENT DEFAULTCONDITION)
    (CL:RETURN-FROM JAVA-OUTPUT-COND))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "if (")
   (JAVA-OUTPUT-STATEMENT (%%VALUE FIRSTCONDITION))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") ")
   (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST FIRSTCONDITION)))
   (CL:LET* ((C NULL) (ITER-000 RESTCONDITIONS))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ C (%%VALUE ITER-000))
     (CL:LET* ((CONDITION C)) (JAVA-INDENT)
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       "else if (")
      (JAVA-OUTPUT-STATEMENT (%%VALUE CONDITION))
      (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
       ") ")
      (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST CONDITION))))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN (CL:NOT (CL:EQ DEFAULTCONDITION NULL)) (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "else ")
    (JAVA-OUTPUT-STATEMENT DEFAULTCONDITION)))
  :VOID)

;;; (DEFUN (JAVA-PROGN? BOOLEAN) ...)

(CL:DEFUN JAVA-PROGN? (TREE)
  (CL:RETURN-FROM JAVA-PROGN?
   (CL:AND (CONS? TREE)
    (CL:EQ (%%VALUE TREE) SYM-JAVA-OUTPUT-STELLA-JAVA_PROGN))))

;;; (DEFUN (JAVA-BLOCK? BOOLEAN) ...)

(CL:DEFUN JAVA-BLOCK? (TREE)
  (CL:RETURN-FROM JAVA-BLOCK?
   (CL:AND (CONS? TREE)
    (CL:EQ (%%VALUE TREE) SYM-JAVA-OUTPUT-STELLA-JAVA_BLOCK))))

;;; (DEFUN JAVA-OUTPUT-IF ...)

(CL:DEFUN JAVA-OUTPUT-IF (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "if (")
  (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") ")
  (CL:IF
   (CL:OR (JAVA-PROGN? (%%VALUE (%%REST TREE)))
    (JAVA-BLOCK? (%%VALUE (%%REST TREE))))
   (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
   (CL:PROGN
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     EOL)
    (JAVA-BUMP-INDENT) (JAVA-INDENT)
    (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";"
     EOL)
    (JAVA-UNBUMP-INDENT)))
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE (%%REST (%%REST TREE))) NULL))
   (JAVA-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "else ")
   (CL:IF
    (CL:OR (JAVA-PROGN? (%%VALUE (%%REST (%%REST TREE))))
     (JAVA-BLOCK? (%%VALUE (%%REST (%%REST TREE)))))
    (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST TREE))))
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL)
     (JAVA-BUMP-INDENT) (JAVA-INDENT)
     (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST TREE))))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL)
     (JAVA-UNBUMP-INDENT))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-WHEN ...)

(CL:DEFUN JAVA-OUTPUT-WHEN (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "if (")
  (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") {"
   EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-UNLESS ...)

(CL:DEFUN JAVA-OUTPUT-UNLESS (TREE)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "if (!(")
  (JAVA-OUTPUT-STATEMENT (%%VALUE TREE))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   ")) {" EOL)
  (JAVA-BUMP-INDENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST TREE)))
  (JAVA-UNBUMP-INDENT)
  (JAVA-INDENT)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
   EOL)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-ASSIGNMENT ...)

(CL:DEFUN JAVA-OUTPUT-ASSIGNMENT (ASSIGNMENT)
  (JAVA-OUTPUT-STATEMENT (%%VALUE ASSIGNMENT))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " = ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST ASSIGNMENT)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-LOOP ...)

(CL:DEFUN JAVA-OUTPUT-LOOP (LOOP)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "for (;;) ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE LOOP))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-WHILE ...)

(CL:DEFUN JAVA-OUTPUT-WHILE (LOOP)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   "while (")
  (JAVA-OUTPUT-STATEMENT (%%VALUE LOOP))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ") ")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST LOOP)))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-FOREACH ...)

(CL:DEFUN JAVA-OUTPUT-FOREACH (LOOP)
  (CL:LET*
   ((CONTINUATIONTEST (%%VALUE (%%REST LOOP)))
    (VALUEASSIGNMENTS (%%VALUE (%%REST (%%REST LOOP))))
    (NEXTASSIGNMENTS (FOURTH LOOP))
    (NOFNEXTASSIGNMENTS (LENGTH NEXTASSIGNMENTS)) (BODY (FIFTH LOOP))
    (EOLSEPARATEEXPRESSIONS?
     (CL:OR (CL:> NOFNEXTASSIGNMENTS 2)
      (CL:> *JAVA-INDENT-CHARS* 35))))
   (CL:DECLARE (CL:TYPE CL:FIXNUM NOFNEXTASSIGNMENTS))
   (CL:WHEN (CL:= NOFNEXTASSIGNMENTS 0)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "while (")
    (JAVA-OUTPUT-STATEMENT CONTINUATIONTEST)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ") {" EOL)
    (JAVA-BUMP-INDENT)
    (JAVA-OUTPUT-STATEMENTS (CONCATENATE VALUEASSIGNMENTS BODY))
    (JAVA-UNBUMP-INDENT) (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
     EOL)
    (CL:RETURN-FROM JAVA-OUTPUT-FOREACH))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "for (;")
   (JAVA-BUMP-INDENT) (JAVA-BUMP-INDENT) (JAVA-BUMP-INDENT)
   (JAVA-OUTPUT-STATEMENT CONTINUATIONTEST)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    "; ")
   (CL:WHEN (CL:NOT (CL:EQ NEXTASSIGNMENTS NIL))
    (CL:WHEN EOLSEPARATEEXPRESSIONS?
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL))
    (CL:LET*
     ((NEXT NULL) (ITER-000 NEXTASSIGNMENTS) (I NULL-INTEGER)
      (ITER-001 1))
     (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-001))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ NEXT (%%VALUE ITER-000)) (CL:SETQ I ITER-001)
      (CL:WHEN EOLSEPARATEEXPRESSIONS? (JAVA-INDENT))
      (JAVA-OUTPUT-STATEMENT NEXT)
      (CL:WHEN (CL:NOT (CL:= I NOFNEXTASSIGNMENTS))
       (CL:IF EOLSEPARATEEXPRESSIONS?
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         "," EOL)
        (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
         ", ")))
      (CL:SETQ ITER-000 (%%REST ITER-000))
      (CL:SETQ ITER-001 (CL:1+ ITER-001)))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    ") {" EOL)
   (JAVA-UNBUMP-INDENT) (JAVA-UNBUMP-INDENT)
   (JAVA-OUTPUT-STATEMENTS (CONCATENATE VALUEASSIGNMENTS BODY))
   (JAVA-UNBUMP-INDENT) (JAVA-INDENT)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
    EOL))
  :VOID)

;;; (DEFUN (JAVA-END-OF-LINE-TOKEN? BOOLEAN) ...)

(CL:DEFUN JAVA-END-OF-LINE-TOKEN? (TOKEN)
  (CL:COND
   ((CL:EQ (SAFE-PRIMARY-TYPE TOKEN) SGT-JAVA-OUTPUT-STELLA-CONS)
    (CL:PROGN
     (CL:RETURN-FROM JAVA-END-OF-LINE-TOKEN?
      (CL:EQ (%%VALUE TOKEN) SYM-JAVA-OUTPUT-STELLA-JAVA_EOL))))
   (CL:T))
  (CL:RETURN-FROM JAVA-END-OF-LINE-TOKEN? CL:NIL))

;;; (DEFUN JAVA-OUTPUT-PRINT-STREAM ...)

(CL:DEFUN JAVA-OUTPUT-PRINT-STREAM (EXPS NATIVESTREAM?)
  (CL:LET*
   ((STREAM (%%VALUE EXPS)) (FOUNDEOL? CL:NIL) (EMBEDDEDEOL? CL:NIL)
    (PRINTITEMS NIL))
   (CL:LET* ((I NULL) (ITER-000 (%%REST EXPS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ I (%%VALUE ITER-000))
     (CL:WHEN FOUNDEOL? (CL:SETQ EMBEDDEDEOL? CL:T) (CL:RETURN))
     (CL:WHEN (JAVA-END-OF-LINE-TOKEN? I) (CL:SETQ FOUNDEOL? CL:T))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:WHEN EMBEDDEDEOL?
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "{"
     EOL)
    (JAVA-BUMP-INDENT))
   (CL:LET* ((IT (ALLOCATE-ITERATOR (%%REST EXPS))))
    (CL:LOOP WHILE (NEXT? IT) DO
     (CL:LET* ((ITEM (%CONS-ITERATOR.VALUE IT)))
      (CL:IF (JAVA-END-OF-LINE-TOKEN? ITEM)
       (CL:PROGN (CL:WHEN EMBEDDEDEOL? (JAVA-INDENT))
        (JAVA-HELP-OUTPUT-PRINT-STREAM STREAM
         (JAVA-REVERSE-AND-CONSOLIDATE-STRINGS PRINTITEMS)
         NATIVESTREAM? CL:T)
        (CL:WHEN EMBEDDEDEOL?
         (%%PRINT-STREAM
          (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ";" EOL))
        (CL:SETQ PRINTITEMS NIL))
       (CL:SETQ PRINTITEMS (CONS ITEM PRINTITEMS))))))
   (CL:WHEN (CL:NOT (CL:EQ PRINTITEMS NIL))
    (CL:WHEN EMBEDDEDEOL? (JAVA-INDENT))
    (JAVA-HELP-OUTPUT-PRINT-STREAM STREAM
     (JAVA-REVERSE-AND-CONSOLIDATE-STRINGS PRINTITEMS) NATIVESTREAM?
     CL:NIL)
    (CL:WHEN EMBEDDEDEOL?
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ";" EOL)))
   (CL:WHEN EMBEDDEDEOL? (JAVA-UNBUMP-INDENT) (JAVA-INDENT)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "}"
     EOL)))
  :VOID)

;;; (DEFUN (JAVA-LITERAL-STRING? BOOLEAN) ...)

(CL:DEFUN JAVA-LITERAL-STRING? (ITEM)
  (CL:RETURN-FROM JAVA-LITERAL-STRING?
   (CL:AND (CL:EQ (%%VALUE ITEM) SYM-JAVA-OUTPUT-STELLA-JAVA_LITERAL)
    (ISA? (%%VALUE (%%REST ITEM))
     SGT-JAVA-OUTPUT-STELLA-STRING-WRAPPER))))

;;; (DEFUN (JAVA-REVERSE-AND-CONSOLIDATE-STRINGS CONS) ...)

(CL:DEFUN JAVA-REVERSE-AND-CONSOLIDATE-STRINGS (ITEMS)
  (CL:WHEN (CL:EQ ITEMS NIL)
   (CL:RETURN-FROM JAVA-REVERSE-AND-CONSOLIDATE-STRINGS NIL))
  (CL:LET* ((OUTPUT-ITEMS NIL) (LAST-ITEM (%%VALUE ITEMS)))
   (CL:LET* ((NEW-ITEM NULL) (ITER-000 (%%REST ITEMS)))
    (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
     (CL:SETQ NEW-ITEM (%%VALUE ITER-000))
     (CL:IF (JAVA-LITERAL-STRING? NEW-ITEM)
      (CL:IF (JAVA-LITERAL-STRING? LAST-ITEM)
       (CL:SETQ LAST-ITEM
        (LIST* SYM-JAVA-OUTPUT-STELLA-JAVA_LITERAL
         (WRAP-STRING
          (CONCATENATE
           (%STRING-WRAPPER.WRAPPER-VALUE (%%VALUE (%%REST NEW-ITEM)))
           (%STRING-WRAPPER.WRAPPER-VALUE
            (%%VALUE (%%REST LAST-ITEM)))))
         NIL))
       (CL:PROGN (CL:SETQ OUTPUT-ITEMS (CONS LAST-ITEM OUTPUT-ITEMS))
        (CL:SETQ LAST-ITEM NEW-ITEM)))
      (CL:PROGN (CL:SETQ OUTPUT-ITEMS (CONS LAST-ITEM OUTPUT-ITEMS))
       (CL:SETQ LAST-ITEM NEW-ITEM)))
     (CL:SETQ ITER-000 (%%REST ITER-000))))
   (CL:SETQ OUTPUT-ITEMS (CONS LAST-ITEM OUTPUT-ITEMS))
   (CL:RETURN-FROM JAVA-REVERSE-AND-CONSOLIDATE-STRINGS OUTPUT-ITEMS)))

;;; (DEFUN JAVA-HELP-OUTPUT-PRINT-STREAM ...)

(CL:DEFUN JAVA-HELP-OUTPUT-PRINT-STREAM (STREAM EXPS NATIVESTREAM? ENDOFLINE?)
  (CL:COND
   ((CL:EQ STREAM SYM-JAVA-OUTPUT-STELLA-JAVA_STANDARD_OUT)
    (CL:IF
     (CL:OR (CL:NOT (CL:EQ (GET-STELLA-CLASS "SYSTEM" CL:NIL) NULL))
      (INHERITED-CLASS-NAME-CONFLICTS? "SYSTEM"))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "java.lang.System.out")
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "System.out")))
   ((CL:EQ STREAM SYM-JAVA-OUTPUT-STELLA-JAVA_STANDARD_ERROR)
    (CL:IF
     (CL:OR (CL:NOT (CL:EQ (GET-STELLA-CLASS "SYSTEM" CL:NIL) NULL))
      (INHERITED-CLASS-NAME-CONFLICTS? "SYSTEM"))
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "java.lang.System.err")
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "System.err")))
   (CL:T (JAVA-OUTPUT-STATEMENT STREAM)
    (CL:WHEN (CL:NOT NATIVESTREAM?)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      ".nativeStream"))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
   (CL:IF ENDOFLINE? ".println(" ".print("))
  (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (%%VALUE EXPS))
  (CL:LET* ((E NULL) (ITER-000 (%%REST EXPS)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ E (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " + ")
    (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES E)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

;;; (DEFUN (JAVA-INDENTABLE-BINARY-OPERATOR? BOOLEAN) ...)

(CL:DEFUN JAVA-INDENTABLE-BINARY-OPERATOR? (OPERATOR)
  (CL:RETURN-FROM JAVA-INDENTABLE-BINARY-OPERATOR?
   (MEMBER? (GET-QUOTED-TREE "((\"||\" \"&&\") \"/STELLA\")" "/STELLA")
    OPERATOR)))

;;; (DEFUN (JAVA-COMMUTATIVE-BINARY-OPERATOR? BOOLEAN) ...)

(CL:DEFUN JAVA-COMMUTATIVE-BINARY-OPERATOR? (OPERATOR)
  (CL:RETURN-FROM JAVA-COMMUTATIVE-BINARY-OPERATOR?
   (MEMBER? (GET-QUOTED-TREE "((\"+\" \"*\") \"/STELLA\")" "/STELLA")
    OPERATOR)))

;;; (DEFUN (JAVA-BINARY-OPERATOR? BOOLEAN) ...)

(CL:DEFUN JAVA-BINARY-OPERATOR? (STATEMENT)
  (CL:RETURN-FROM JAVA-BINARY-OPERATOR?
   (CL:AND (CONS? STATEMENT)
    (CL:EQ SYM-JAVA-OUTPUT-STELLA-JAVA_BINARY_OP (%%VALUE STATEMENT)))))

;;; (DEFUN (JAVA-OPERATOR? BOOLEAN) ...)

(CL:DEFUN JAVA-OPERATOR? (STATEMENT)
  (CL:RETURN-FROM JAVA-OPERATOR?
   (CL:AND (CONS? STATEMENT)
    (MEMBER?
     (GET-QUOTED-TREE
      "((JAVA_UNARY_OP JAVA_BINARY_OP JAVA_TERNARY_OP JAVA_ASSIGN JAVA_SLOT_VALUE_SETTER) \"/STELLA\")"
      "/STELLA")
     (%%VALUE STATEMENT)))))

;;; (DEFUN JAVA-OUTPUT-UNARY-OPERATOR ...)

(CL:DEFUN JAVA-OUTPUT-UNARY-OPERATOR (EXPRESSION)
  (CL:LET*
   ((OP (%%VALUE EXPRESSION)) (ARG (%%VALUE (%%REST EXPRESSION))))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP))
   (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG))
  :VOID)

;;; (DEFUN (JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? BOOLEAN) ...)

(CL:DEFUN JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? (OP NESTED)
  (CL:RETURN-FROM JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES?
   (CL:AND (JAVA-OPERATOR? NESTED)
    (CL:NOT
     (CL:AND (JAVA-COMMUTATIVE-BINARY-OPERATOR? OP)
      (STRING-EQL? (%STRING-WRAPPER.WRAPPER-VALUE OP)
       (%STRING-WRAPPER.WRAPPER-VALUE
        (%%VALUE (%%REST (%%REST NESTED))))))))))

;;; (DEFUN JAVA-HELP-OUTPUT-BINARY-OPERATOR ...)

(CL:DEFUN JAVA-HELP-OUTPUT-BINARY-OPERATOR (EXPRESSION NESTLEVEL)
  (CL:DECLARE (CL:TYPE CL:FIXNUM NESTLEVEL))
  #+MCL
  (CL:CHECK-TYPE NESTLEVEL CL:FIXNUM)
  (CL:LET*
   ((ARG1 (%%VALUE EXPRESSION)) (OP (%%VALUE (%%REST EXPRESSION)))
    (ARG2 (%%VALUE (%%REST (%%REST EXPRESSION)))))
   (CL:WHEN (JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG1)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "("))
   (CL:IF (JAVA-BINARY-OPERATOR? OP)
    (JAVA-HELP-OUTPUT-BINARY-OPERATOR (%%REST ARG1) (CL:1+ NESTLEVEL))
    (JAVA-OUTPUT-STATEMENT ARG1))
   (CL:WHEN (JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG1)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")"))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP))
   (CL:IF (JAVA-INDENTABLE-BINARY-OPERATOR? OP)
    (CL:PROGN
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      EOL)
     (JAVA-INDENT)
     (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
      "    ")
     (CL:LET*
      ((I NULL-INTEGER) (ITER-000 1) (UPPER-BOUND-000 NESTLEVEL)
       (UNBOUNDED?-000 (CL:= UPPER-BOUND-000 NULL-INTEGER)))
      (CL:DECLARE (CL:TYPE CL:FIXNUM I ITER-000 UPPER-BOUND-000))
      (CL:LOOP WHILE
       (CL:OR UNBOUNDED?-000 (CL:<= ITER-000 UPPER-BOUND-000)) DO
       (CL:SETQ I ITER-000) (CL:SETQ I I)
       (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
        " ")
       (CL:SETQ ITER-000 (CL:1+ ITER-000)))))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     " "))
   (CL:WHEN (JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG2)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     "("))
   (CL:IF (JAVA-BINARY-OPERATOR? ARG2)
    (JAVA-HELP-OUTPUT-BINARY-OPERATOR (%%REST ARG2) (CL:1+ NESTLEVEL))
    (JAVA-OUTPUT-STATEMENT ARG2))
   (CL:WHEN (JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? OP ARG2)
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ")")))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-BINARY-OPERATOR ...)

(CL:DEFUN JAVA-OUTPUT-BINARY-OPERATOR (EXPRESSION)
  (JAVA-HELP-OUTPUT-BINARY-OPERATOR EXPRESSION 0)
  :VOID)

;;; (DEFUN JAVA-OUTPUT-TERNARY-OPERATOR ...)

(CL:DEFUN JAVA-OUTPUT-TERNARY-OPERATOR (EXPRESSION)
  (CL:LET*
   ((ARG1 (%%VALUE EXPRESSION)) (OP1 (%%VALUE (%%REST EXPRESSION)))
    (ARG2 (%%VALUE (%%REST (%%REST EXPRESSION))))
    (OP2 (FOURTH EXPRESSION)) (ARG3 (FIFTH EXPRESSION)))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
   (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG1)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP1))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG2)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
    (%STRING-WRAPPER.WRAPPER-VALUE OP2))
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) " ")
   (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ARG3)
   (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")"))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-METHOD-CALL ...)

(CL:DEFUN JAVA-OUTPUT-METHOD-CALL (METHODCALL)
  (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES
   (%%VALUE (%%REST (%%REST METHODCALL))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ".")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST METHODCALL)))
  (JAVA-OUTPUT-STATEMENT (FOURTH METHODCALL))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-FUNCTION-CALL ...)

(CL:DEFUN JAVA-OUTPUT-FUNCTION-CALL (FUNCTIONCALL)
  (JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES (%%VALUE FUNCTIONCALL))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ".")
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST FUNCTIONCALL)))
  (JAVA-OUTPUT-STATEMENT (%%VALUE (%%REST (%%REST FUNCTIONCALL))))
  :VOID)

;;; (DEFUN JAVA-OUTPUT-ACTUAL-PARAMETERS ...)

(CL:DEFUN JAVA-OUTPUT-ACTUAL-PARAMETERS (PARAMETERS)
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) "(")
  (CL:WHEN (CL:NOT (CL:EQ (%%VALUE PARAMETERS) NULL))
   (JAVA-OUTPUT-STATEMENT (%%VALUE PARAMETERS)))
  (CL:LET* ((PARAMETER NULL) (ITER-000 (%%REST PARAMETERS)))
   (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
    (CL:SETQ PARAMETER (%%VALUE ITER-000))
    (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*)
     ", ")
    (JAVA-OUTPUT-STATEMENT PARAMETER)
    (CL:SETQ ITER-000 (%%REST ITER-000))))
  (%%PRINT-STREAM (%OUTPUT-STREAM.NATIVE-STREAM *CURRENT-STREAM*) ")")
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-OUTPUT1 ()
  (CL:PROGN
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CLASS" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_EXCEPTION_CLASS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_EXCEPTION_CLASS" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_NAMED_STATEMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_NAMED_STATEMENT" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_STATEMENTS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_STATEMENTS" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_IDENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_IDENT" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_EOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_EOL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_LITERAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_LITERAL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_COMMENT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_COMMENT" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_SYMBOL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SYMBOL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_CATCH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CATCH" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_THROW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_THROW" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_UNWIND_PROTECT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_UNWIND_PROTECT" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_HANDLER_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_HANDLER_CASE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_SIGNAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SIGNAL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_VERBATIM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_VERBATIM" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_CAST
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CAST" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_GLOBAL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_GLOBAL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_TYPE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_TYPE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_PROGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_PROGN" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_BLOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_BLOCK" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_WITH_PROCESS_LOCK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_WITH_PROCESS_LOCK" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_RETURN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_RETURN" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_MAKE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCALL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CODE_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD_CODE_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_ASSIGN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ASSIGN" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_BREAK
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_BREAK" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_CONTINUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CONTINUE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_COND
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_COND" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_CASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_CASE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_IF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_IF" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_WHEN
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_WHEN" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_UNLESS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_UNLESS" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_LOOP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_LOOP" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_WHILE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_WHILE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_FOREACH
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FOREACH" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SLOT_VALUE" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE_SETTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_SLOT_VALUE_SETTER" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_UNARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_UNARY_OP" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_BINARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_BINARY_OP" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_TERNARY_OP
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_TERNARY_OP" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCTION_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_ACTUALS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ACTUALS" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE_ARRAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_MAKE_ARRAY" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_ARRAY_INITIALIZER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ARRAY_INITIALIZER" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_ANONYMOUS_ARRAY
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_ANONYMOUS_ARRAY" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_AREF
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_AREF" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCTION" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_PRINT_STREAM" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_NATIVE_STREAM
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_PRINT_NATIVE_STREAM" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_DECLARATIONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_DECLARATIONS" NULL 0))
   (CL:SETQ SGT-JAVA-OUTPUT-STELLA-CONS
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_FUNCTION_POINTER" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_POINTER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD_POINTER" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_SETTER_CALL
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_METHOD_SETTER_CALL" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_NEW
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_NEW" NULL 0))
   (CL:SETQ KWD-JAVA-OUTPUT-NO
    (INTERN-RIGID-SYMBOL-WRT-MODULE "NO" NULL 2))
   (CL:SETQ KWD-JAVA-OUTPUT-PRESERVE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "PRESERVE" NULL 2)))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-OUTPUT2 ()
  (CL:PROGN
   (CL:SETQ KWD-JAVA-OUTPUT-CLEVER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "CLEVER" NULL 2))
   (CL:SETQ KWD-JAVA-OUTPUT-UPCASE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "UPCASE" NULL 2))
   (CL:SETQ KWD-JAVA-OUTPUT-TITLECASEX
    (INTERN-RIGID-SYMBOL-WRT-MODULE "TITLECASEX" NULL 2))
   (CL:SETQ KWD-JAVA-OUTPUT-WHITE-SPACE
    (INTERN-RIGID-SYMBOL-WRT-MODULE "WHITE-SPACE" NULL 2))
   (CL:SETQ SGT-JAVA-OUTPUT-STELLA-STRING-WRAPPER
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STRING-WRAPPER" NULL 1))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_STANDARD_OUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_STANDARD_OUT" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-JAVA_STANDARD_ERROR
    (INTERN-RIGID-SYMBOL-WRT-MODULE "JAVA_STANDARD_ERROR" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-STARTUP-JAVA-OUTPUT
    (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-JAVA-OUTPUT" NULL 0))
   (CL:SETQ SYM-JAVA-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME
    (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL 0)))
  :VOID)

(CL:DEFUN HELP-STARTUP-JAVA-OUTPUT3 ()
  (CL:PROGN
   (DEFINE-FUNCTION-OBJECT "JAVA-STELLA-PACKAGE"
    "(DEFUN (JAVA-STELLA-PACKAGE STRING) ())"
    (CL:FUNCTION JAVA-STELLA-PACKAGE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-PARSE-TREE"
    "(DEFUN JAVA-OUTPUT-PARSE-TREE ((CONSTREE CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-PARSE-TREE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-BUMP-INDENT"
    "(DEFUN JAVA-BUMP-INDENT ())" (CL:FUNCTION JAVA-BUMP-INDENT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-UNBUMP-INDENT"
    "(DEFUN JAVA-UNBUMP-INDENT ())" (CL:FUNCTION JAVA-UNBUMP-INDENT)
    NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-INDENT" "(DEFUN JAVA-INDENT ())"
    (CL:FUNCTION JAVA-INDENT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-STATEMENT"
    "(DEFUN JAVA-OUTPUT-STATEMENT ((STATEMENT OBJECT)))"
    (CL:FUNCTION JAVA-OUTPUT-STATEMENT) NULL)
   (DEFINE-FUNCTION-OBJECT
    "JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES"
    "(DEFUN JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES ((STATEMENT OBJECT)))"
    (CL:FUNCTION JAVA-MAYBE-OUTPUT-STATEMENT-WITH-PARENTHESES) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-IDENTIFIER"
    "(DEFUN JAVA-OUTPUT-IDENTIFIER ((IDENTIFIER STRING-WRAPPER)))"
    (CL:FUNCTION JAVA-OUTPUT-IDENTIFIER) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((OBJECT OBJECT)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((STRING STRING)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((STRING STRING-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((STRING MUTABLE-STRING-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((CHARACTER CHARACTER-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((INT INTEGER-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((INT LONG-INTEGER-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((FLOAT FLOAT-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((BOOLEAN BOOLEAN-WRAPPER)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-MAKE-ARRAY"
    "(DEFUN JAVA-OUTPUT-MAKE-ARRAY ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-MAKE-ARRAY) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-ARRAY"
    "(DEFUN JAVA-OUTPUT-ARRAY ((ARRAYELEMENTS CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-ARRAY) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-ANONYMOUS-ARRAY"
    "(DEFUN JAVA-OUTPUT-ANONYMOUS-ARRAY ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-ANONYMOUS-ARRAY) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-AREF"
    "(DEFUN JAVA-OUTPUT-AREF ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-AREF) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-SLOT-VALUE"
    "(DEFUN JAVA-OUTPUT-SLOT-VALUE ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-SLOT-VALUE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-SLOT-VALUE-SETTER"
    "(DEFUN JAVA-OUTPUT-SLOT-VALUE-SETTER ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-SLOT-VALUE-SETTER) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-IMPLEMENTS-INTERFACES"
    "(DEFUN JAVA-OUTPUT-IMPLEMENTS-INTERFACES ((INTERFACELIST (CONS OF STRING-WRAPPER))))"
    (CL:FUNCTION JAVA-OUTPUT-IMPLEMENTS-INTERFACES) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS"
    "(DEFUN JAVA-OUTPUT-CLASS ((CLASSDEF CONS) (EXCEPTIONCLASS? BOOLEAN)))"
    (CL:FUNCTION JAVA-OUTPUT-CLASS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS-DECLARATION"
    "(DEFUN JAVA-OUTPUT-CLASS-DECLARATION ((CLASSDEF CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-CLASS-DECLARATION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS-VARIABLE-DEFINITIONS"
    "(DEFUN JAVA-OUTPUT-CLASS-VARIABLE-DEFINITIONS ((VARIABLETRANSLATIONS CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-CLASS-VARIABLE-DEFINITIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS-CONSTRUCTORS"
    "(DEFUN JAVA-OUTPUT-CLASS-CONSTRUCTORS ((CONSTRUCTORS (CONS OF TRANSLATION-UNIT)) (CLASSNAME STRING) (EXCEPTIONCLASS? BOOLEAN)))"
    (CL:FUNCTION JAVA-OUTPUT-CLASS-CONSTRUCTORS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CLASS-METHODS"
    "(DEFUN JAVA-OUTPUT-CLASS-METHODS ((METHODS (CONS OF TRANSLATION-UNIT))))"
    (CL:FUNCTION JAVA-OUTPUT-CLASS-METHODS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-EXCEPTION-CONSTRUCTOR"
    "(DEFUN JAVA-OUTPUT-EXCEPTION-CONSTRUCTOR ((EXCEPTIONNAME STRING)))"
    (CL:FUNCTION JAVA-OUTPUT-EXCEPTION-CONSTRUCTOR) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-NAMED-STATEMENT"
    "(DEFUN JAVA-OUTPUT-NAMED-STATEMENT ((NAMEDSTATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-NAMED-STATEMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FORMAL-PARAMETERS"
    "(DEFUN JAVA-OUTPUT-FORMAL-PARAMETERS ((PARAMETERS (CONS OF CONS))))"
    (CL:FUNCTION JAVA-OUTPUT-FORMAL-PARAMETERS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-METHOD-SIGNATURE"
    "(DEFUN JAVA-OUTPUT-METHOD-SIGNATURE ((METHOD CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-METHOD-SIGNATURE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-SEPARATE-COMMENT-FROM-BODY"
    "(DEFUN (JAVA-SEPARATE-COMMENT-FROM-BODY CONS CONS) ((BODY CONS)))"
    (CL:FUNCTION JAVA-SEPARATE-COMMENT-FROM-BODY) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-METHOD"
    "(DEFUN JAVA-OUTPUT-METHOD ((METHOD CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-METHOD) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((CONS CONS)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((TREE QUOTED-EXPRESSION)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((SYMBOL SYMBOL)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((SURROGATE SURROGATE)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-METHOD-OBJECT
    "(DEFMETHOD JAVA-OUTPUT-LITERAL ((KEYWORD KEYWORD)))"
    (WRAP-METHOD-CODE (CL:FUNCTION JAVA-OUTPUT-LITERAL)) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-TYPE-EXPRESSION"
    "(DEFUN JAVA-OUTPUT-TYPE-EXPRESSION ((TYPEEXPRESSION (CONS OF STRING-WRAPPER))))"
    (CL:FUNCTION JAVA-OUTPUT-TYPE-EXPRESSION) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-SEMICOLON?"
    "(DEFUN (JAVA-OUTPUT-SEMICOLON? BOOLEAN) ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-SEMICOLON?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-INDENT-STATEMENT?"
    "(DEFUN (JAVA-INDENT-STATEMENT? BOOLEAN) ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-INDENT-STATEMENT?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-ILLEGAL-STATEMENT?"
    "(DEFUN (JAVA-ILLEGAL-STATEMENT? BOOLEAN) ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-ILLEGAL-STATEMENT?) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-STATEMENTS"
    "(DEFUN JAVA-OUTPUT-STATEMENTS ((STATEMENTLIST CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-STATEMENTS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-DECLARATIONS"
    "(DEFUN JAVA-OUTPUT-DECLARATIONS ((DECLARATIONS (CONS OF CONS))))"
    (CL:FUNCTION JAVA-OUTPUT-DECLARATIONS) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-HEURISTICALLY-TRANSLATE-NAME"
    "(DEFUN (JAVA-HEURISTICALLY-TRANSLATE-NAME STRING) ((STELLA-NAME STRING) (CASE-CONVERTED-NAME-LIST (CONS OF STRING-WRAPPER))))"
    (CL:FUNCTION JAVA-HEURISTICALLY-TRANSLATE-NAME) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-COMMENT-STRING"
    "(DEFUN JAVA-OUTPUT-COMMENT-STRING ((COMMENT STRING) (COMMENT-START STRING) (COMMENT-CONTINUATION STRING) (COMMENT-END STRING) (JAVADOC-COMMENT? BOOLEAN) (CASE-CONVERTED-NAME-LIST (CONS OF STRING-WRAPPER))))"
    (CL:FUNCTION JAVA-OUTPUT-COMMENT-STRING) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-COMMENT"
    "(DEFUN JAVA-OUTPUT-COMMENT ((TREE STRING-WRAPPER)))"
    (CL:FUNCTION JAVA-OUTPUT-COMMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-JAVADOC-COMMENT"
    "(DEFUN JAVA-OUTPUT-JAVADOC-COMMENT ((TREE STRING-WRAPPER) (PARAMETER-NAMES-AND-TYPES (CONS OF (CONS OF STRING-WRAPPER))) (RETURN-VALUE STRING-WRAPPER) (AUTHOR STRING) (VERSION STRING)))"
    (CL:FUNCTION JAVA-OUTPUT-JAVADOC-COMMENT) NULL)
   (DEFINE-FUNCTION-OBJECT "FIXUP-DOCUMENTATION-STRING-QUOTING"
    "(DEFUN (FIXUP-DOCUMENTATION-STRING-QUOTING STRING) ((DOCUMENTATION STRING)))"
    (CL:FUNCTION FIXUP-DOCUMENTATION-STRING-QUOTING) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-VERBATIM"
    "(DEFUN JAVA-OUTPUT-VERBATIM ((VERBATIMSTATEMENT STRING-WRAPPER)))"
    (CL:FUNCTION JAVA-OUTPUT-VERBATIM) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-MAKE"
    "(DEFUN JAVA-OUTPUT-MAKE ((STATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-MAKE) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CAST"
    "(DEFUN JAVA-OUTPUT-CAST ((TREE CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-CAST) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-PROGN"
    "(DEFUN JAVA-OUTPUT-PROGN ((PROGN CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-PROGN) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-BLOCK"
    "(DEFUN JAVA-OUTPUT-BLOCK ((BLOCK CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-BLOCK) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-WITH-PROCESS-LOCK"
    "(DEFUN JAVA-OUTPUT-WITH-PROCESS-LOCK ((SYNCH CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-WITH-PROCESS-LOCK) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-RETURN"
    "(DEFUN JAVA-OUTPUT-RETURN ((RETURNSTATEMENT CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-RETURN) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-THROW"
    "(DEFUN JAVA-OUTPUT-THROW ((TREE CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-THROW) NULL)
   (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CATCH"
    "(DEFUN JAVA-OUTPUT-CATCH ((TREE CONS)))"
    (CL:FUNCTION JAVA-OUTPUT-CATCH) NULL))
  :VOID)

(CL:DEFUN STARTUP-JAVA-OUTPUT ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2) (HELP-STARTUP-JAVA-OUTPUT1)
    (HELP-STARTUP-JAVA-OUTPUT2))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 4)
    (CL:SETQ *JAVA-STELLA-PACKAGE-MAPPING* (NEW-KEY-VALUE-LIST))
    (CL:SETQ *JAVA-SEMICOLON-STATEMENTS*
     (LIST* SYM-JAVA-OUTPUT-STELLA-JAVA_ASSIGN
      SYM-JAVA-OUTPUT-STELLA-JAVA_UNARY_OP
      SYM-JAVA-OUTPUT-STELLA-JAVA_BINARY_OP
      SYM-JAVA-OUTPUT-STELLA-JAVA_TERNARY_OP
      SYM-JAVA-OUTPUT-STELLA-JAVA_CAST
      SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCALL
      SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_CALL
      SYM-JAVA-OUTPUT-STELLA-JAVA_FUNCTION_POINTER
      SYM-JAVA-OUTPUT-STELLA-JAVA_MAKE
      SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CALL
      SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_CODE_CALL
      SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_POINTER
      SYM-JAVA-OUTPUT-STELLA-JAVA_METHOD_SETTER_CALL
      SYM-JAVA-OUTPUT-STELLA-JAVA_NEW
      SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_NATIVE_STREAM
      SYM-JAVA-OUTPUT-STELLA-JAVA_PRINT_STREAM
      SYM-JAVA-OUTPUT-STELLA-JAVA_RETURN
      SYM-JAVA-OUTPUT-STELLA-JAVA_SIGNAL
      SYM-JAVA-OUTPUT-STELLA-JAVA_SLOT_VALUE_SETTER
      SYM-JAVA-OUTPUT-STELLA-JAVA_THROW
      SYM-JAVA-OUTPUT-STELLA-JAVA_VERBATIM NIL)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7) (HELP-STARTUP-JAVA-OUTPUT3)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-UNWIND-PROTECT"
     "(DEFUN JAVA-OUTPUT-UNWIND-PROTECT ((TREE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-UNWIND-PROTECT) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-HANDLER-CASE"
     "(DEFUN JAVA-OUTPUT-HANDLER-CASE ((TREE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-HANDLER-CASE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-SIGNAL"
     "(DEFUN JAVA-OUTPUT-SIGNAL ((TREE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-SIGNAL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-GLOBAL-DEFINITION"
     "(DEFUN JAVA-OUTPUT-GLOBAL-DEFINITION ((GLOBAL CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-GLOBAL-DEFINITION) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-ACTUALS-AS-CONS-EXPRESSION"
     "(DEFUN JAVA-OUTPUT-ACTUALS-AS-CONS-EXPRESSION ((ARGLIST CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-ACTUALS-AS-CONS-EXPRESSION) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FUNCALL"
     "(DEFUN JAVA-OUTPUT-FUNCALL ((FUNCALL CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-FUNCALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-METHOD-CODE-CALL"
     "(DEFUN JAVA-OUTPUT-METHOD-CODE-CALL ((METHODCALL CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-METHOD-CODE-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-BREAK"
     "(DEFUN JAVA-OUTPUT-BREAK ((TAG CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-BREAK) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CONTINUE"
     "(DEFUN JAVA-OUTPUT-CONTINUE ((TAG CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-CONTINUE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-STATEMENT-RETURNS?"
     "(DEFUN (JAVA-STATEMENT-RETURNS? BOOLEAN) ((STATEMENT CONS)))"
     (CL:FUNCTION JAVA-STATEMENT-RETURNS?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-LAST-STATEMENT-RETURNS?"
     "(DEFUN (JAVA-LAST-STATEMENT-RETURNS? BOOLEAN) ((STATEMENTS CONS)))"
     (CL:FUNCTION JAVA-LAST-STATEMENT-RETURNS?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-CASE"
     "(DEFUN JAVA-OUTPUT-CASE ((CASE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-CASE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-COND"
     "(DEFUN JAVA-OUTPUT-COND ((COND CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-COND) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-PROGN?"
     "(DEFUN (JAVA-PROGN? BOOLEAN) ((TREE OBJECT)))"
     (CL:FUNCTION JAVA-PROGN?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-BLOCK?"
     "(DEFUN (JAVA-BLOCK? BOOLEAN) ((TREE OBJECT)))"
     (CL:FUNCTION JAVA-BLOCK?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-IF"
     "(DEFUN JAVA-OUTPUT-IF ((TREE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-IF) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-WHEN"
     "(DEFUN JAVA-OUTPUT-WHEN ((TREE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-WHEN) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-UNLESS"
     "(DEFUN JAVA-OUTPUT-UNLESS ((TREE CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-UNLESS) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-ASSIGNMENT"
     "(DEFUN JAVA-OUTPUT-ASSIGNMENT ((ASSIGNMENT CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-ASSIGNMENT) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-LOOP"
     "(DEFUN JAVA-OUTPUT-LOOP ((LOOP CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-LOOP) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-WHILE"
     "(DEFUN JAVA-OUTPUT-WHILE ((LOOP CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-WHILE) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FOREACH"
     "(DEFUN JAVA-OUTPUT-FOREACH ((LOOP CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-FOREACH) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-END-OF-LINE-TOKEN?"
     "(DEFUN (JAVA-END-OF-LINE-TOKEN? BOOLEAN) ((TOKEN OBJECT)))"
     (CL:FUNCTION JAVA-END-OF-LINE-TOKEN?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-PRINT-STREAM"
     "(DEFUN JAVA-OUTPUT-PRINT-STREAM ((EXPS CONS) (NATIVESTREAM? BOOLEAN)))"
     (CL:FUNCTION JAVA-OUTPUT-PRINT-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-LITERAL-STRING?"
     "(DEFUN (JAVA-LITERAL-STRING? BOOLEAN) ((ITEM CONS)))"
     (CL:FUNCTION JAVA-LITERAL-STRING?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-REVERSE-AND-CONSOLIDATE-STRINGS"
     "(DEFUN (JAVA-REVERSE-AND-CONSOLIDATE-STRINGS CONS) ((ITEMS (CONS OF CONS))))"
     (CL:FUNCTION JAVA-REVERSE-AND-CONSOLIDATE-STRINGS) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-HELP-OUTPUT-PRINT-STREAM"
     "(DEFUN JAVA-HELP-OUTPUT-PRINT-STREAM ((STREAM OBJECT) (EXPS CONS) (NATIVESTREAM? BOOLEAN) (ENDOFLINE? BOOLEAN)))"
     (CL:FUNCTION JAVA-HELP-OUTPUT-PRINT-STREAM) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-INDENTABLE-BINARY-OPERATOR?"
     "(DEFUN (JAVA-INDENTABLE-BINARY-OPERATOR? BOOLEAN) ((OPERATOR STRING-WRAPPER)))"
     (CL:FUNCTION JAVA-INDENTABLE-BINARY-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-COMMUTATIVE-BINARY-OPERATOR?"
     "(DEFUN (JAVA-COMMUTATIVE-BINARY-OPERATOR? BOOLEAN) ((OPERATOR STRING-WRAPPER)))"
     (CL:FUNCTION JAVA-COMMUTATIVE-BINARY-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-BINARY-OPERATOR?"
     "(DEFUN (JAVA-BINARY-OPERATOR? BOOLEAN) ((STATEMENT OBJECT)))"
     (CL:FUNCTION JAVA-BINARY-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OPERATOR?"
     "(DEFUN (JAVA-OPERATOR? BOOLEAN) ((STATEMENT OBJECT)))"
     (CL:FUNCTION JAVA-OPERATOR?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-UNARY-OPERATOR"
     "(DEFUN JAVA-OUTPUT-UNARY-OPERATOR ((EXPRESSION CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-UNARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES?"
     "(DEFUN (JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES? BOOLEAN) ((OP STRING-WRAPPER) (NESTED OBJECT)))"
     (CL:FUNCTION JAVA-NESTED-OPERATOR-NEEDS-PARENTHESES?) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-HELP-OUTPUT-BINARY-OPERATOR"
     "(DEFUN JAVA-HELP-OUTPUT-BINARY-OPERATOR ((EXPRESSION CONS) (NESTLEVEL INTEGER)))"
     (CL:FUNCTION JAVA-HELP-OUTPUT-BINARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-BINARY-OPERATOR"
     "(DEFUN JAVA-OUTPUT-BINARY-OPERATOR ((EXPRESSION CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-BINARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-TERNARY-OPERATOR"
     "(DEFUN JAVA-OUTPUT-TERNARY-OPERATOR ((EXPRESSION CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-TERNARY-OPERATOR) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-METHOD-CALL"
     "(DEFUN JAVA-OUTPUT-METHOD-CALL ((METHODCALL CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-METHOD-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-FUNCTION-CALL"
     "(DEFUN JAVA-OUTPUT-FUNCTION-CALL ((FUNCTIONCALL CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-FUNCTION-CALL) NULL)
    (DEFINE-FUNCTION-OBJECT "JAVA-OUTPUT-ACTUAL-PARAMETERS"
     "(DEFUN JAVA-OUTPUT-ACTUAL-PARAMETERS ((PARAMETERS CONS)))"
     (CL:FUNCTION JAVA-OUTPUT-ACTUAL-PARAMETERS) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-JAVA-OUTPUT"
     "(DEFUN STARTUP-JAVA-OUTPUT () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-JAVA-OUTPUT) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-JAVA-OUTPUT-STELLA-STARTUP-JAVA-OUTPUT)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-JAVA-OUTPUT-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupJavaOutput") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFSPECIAL *JAVA-INDENT-CHARS* INTEGER 0)" NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-STELLA-PACKAGE-MAPPING* (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER) (NEW (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER)))"
     NULL)
    (DEFINE-GLOBAL-VARIABLE-OBJECT
     "(DEFGLOBAL *JAVA-SEMICOLON-STATEMENTS* (CONS OF SYMBOL) (BQUOTE (JAVA_ASSIGN JAVA_UNARY_OP JAVA_BINARY_OP JAVA_TERNARY_OP JAVA_CAST JAVA_FUNCALL JAVA_FUNCTION_CALL JAVA_FUNCTION_POINTER JAVA_MAKE JAVA_METHOD_CALL JAVA_METHOD_CODE_CALL JAVA_METHOD_POINTER JAVA_METHOD_SETTER_CALL JAVA_NEW JAVA_PRINT_NATIVE_STREAM JAVA_PRINT_STREAM JAVA_RETURN JAVA_SIGNAL JAVA_SLOT_VALUE_SETTER JAVA_THROW JAVA_VERBATIM)))"
     NULL)))
  :VOID)
