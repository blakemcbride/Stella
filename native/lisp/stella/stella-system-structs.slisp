;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; stella-system-structs.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")


(CL:DEFSTRUCT (LISP-CODE (:CONC-NAME %LISP-CODE.) (:INCLUDE CLSYS-ROOT-STRUCT) (:CONSTRUCTOR %MAKE-LISP-CODE ()) (:COPIER ()) (:PREDICATE ())) "Used to indicate variables that input or output Common Lisp~
      structures.")

(CL:DEFINE-CONDITION STELLA-EXCEPTION (CL:SIMPLE-ERROR)
  ())

(CL:DEFINE-CONDITION TIMEOUT-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION INCOMPATIBLE-QUANTITY-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION BAD-ARGUMENT-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION OBJECT-NOT-CLASS-EXCEPTION (BAD-ARGUMENT-EXCEPTION)
  ())

(CL:DEFINE-CONDITION NO-SUCH-OBJECT-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION UNDEFINED-CLASS-EXCEPTION (NO-SUCH-OBJECT-EXCEPTION)
  ())

(CL:DEFINE-CONDITION NO-SUCH-CONTEXT-EXCEPTION (NO-SUCH-OBJECT-EXCEPTION)
  ())

(CL:DEFINE-CONDITION EVALUATION-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION UNHANDLED-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION INPUT-OUTPUT-EXCEPTION (STELLA-EXCEPTION)
  ())

(CL:DEFINE-CONDITION FILE-ALREADY-EXISTS-EXCEPTION (INPUT-OUTPUT-EXCEPTION)
  ((FILENAME :TYPE CL:SIMPLE-STRING :INITFORM STELLA::NULL-STRING
    :ALLOCATION :INSTANCE :ACCESSOR %FILENAME)))

(CL:DEFINE-CONDITION NO-SUCH-FILE-EXCEPTION (INPUT-OUTPUT-EXCEPTION)
  ((FILENAME :TYPE CL:SIMPLE-STRING :INITFORM STELLA::NULL-STRING
    :ALLOCATION :INSTANCE :ACCESSOR %FILENAME)))

(CL:DEFINE-CONDITION END-OF-FILE-EXCEPTION (INPUT-OUTPUT-EXCEPTION)
  ())

(CL:DEFINE-CONDITION READ-EXCEPTION (INPUT-OUTPUT-EXCEPTION)
  ())

(CL:DEFSTRUCT
 (UNKNOWN (:CONC-NAME %UNKNOWN.) (:INCLUDE CLSYS-ROOT-STRUCT)
  (:CONSTRUCTOR %MAKE-UNKNOWN ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT
 (VOID (:CONC-NAME %VOID.) (:INCLUDE CLSYS-ROOT-STRUCT)
  (:CONSTRUCTOR %MAKE-VOID ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (OBJECT (:CONC-NAME %OBJECT.) (:INCLUDE CLSYS-ROOT-STRUCT) (:CONSTRUCTOR %MAKE-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "A reflective object that can participate in dynamically-typed
contexts.  Either a STANDARD-OBJECT or a WRAPPER or a GENERIC-OBJECT.
Also, either an OBJECT-WITH-INHERITED-TYPE or an OBJECT-WITH-OWN-TYPE.")

(CL:DEFSTRUCT (QUANTITY (:CONC-NAME %QUANTITY.) (:INCLUDE OBJECT) (:CONSTRUCTOR %MAKE-QUANTITY ()) (:COPIER ()) (:PREDICATE ())) "General superclass for extensible quantity objects")

(CL:DEFSTRUCT
 (DATE-TIME-OBJECT (:CONC-NAME %DATE-TIME-OBJECT.) (:INCLUDE QUANTITY)
  (:CONSTRUCTOR %MAKE-DATE-TIME-OBJECT ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT (TIME-DURATION (:CONC-NAME %TIME-DURATION.) (:INCLUDE DATE-TIME-OBJECT) (:CONSTRUCTOR %MAKE-TIME-DURATION ()) (:COPIER ()) (:PREDICATE ())) "Representation of Relative Days and Time with the date represented
as a number of days and the time in milliseconds."
  (DAYS NULL-INTEGER :TYPE CL:FIXNUM)
  (MILLIS NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (CALENDAR-DATE (:CONC-NAME %CALENDAR-DATE.) (:INCLUDE DATE-TIME-OBJECT) (:CONSTRUCTOR %MAKE-CALENDAR-DATE ()) (:COPIER ()) (:PREDICATE ())) "Representation of Date and Time with the date represented
as a modified Julian day (starting at midnight instead of noon) and the
time as the offset in milliseconds from midnight, UTC"
  (MODIFIED-JULIAN-DAY NULL-INTEGER :TYPE CL:FIXNUM)
  (TIME-MILLIS NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (STANDARD-OBJECT (:CONC-NAME %STANDARD-OBJECT.) (:INCLUDE OBJECT) (:CONSTRUCTOR %MAKE-STANDARD-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "Object that used to find its type stored in a :class slot.
By reimplementing `primary-type' as a method, the justification for this
class went away, but we'll keep it for now to keep things working.")

(CL:DEFSTRUCT (DECODED-TIME-DURATION (:CONC-NAME %DECODED-TIME-DURATION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-DECODED-TIME-DURATION ()) (:COPIER ()) (:PREDICATE ())) "A data structure for holding decoded time duration values with
fields for easy access of the components.  Note that all non-zero values
should have the same sign."
  (DURATION-MILLIS NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (DURATION-SECONDS NULL-INTEGER :TYPE CL:FIXNUM)
  (DURATION-MINUTES NULL-INTEGER :TYPE CL:FIXNUM)
  (DURATION-HOURS NULL-INTEGER :TYPE CL:FIXNUM)
  (DURATION-DAYS NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (DECODED-DATE-TIME (:CONC-NAME %DECODED-DATE-TIME.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-DECODED-DATE-TIME ()) (:COPIER ()) (:PREDICATE ())) "A data structure for holding decoded time values with fields
for easy access of the components."
  (DATE-TIME-MILLIS NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (DATE-TIME-SECOND NULL-INTEGER :TYPE CL:FIXNUM)
  (DATE-TIME-MINUTE NULL-INTEGER :TYPE CL:FIXNUM)
  (DATE-TIME-HOUR NULL-INTEGER :TYPE CL:FIXNUM)
  (DATE-TIME-DAY NULL-INTEGER :TYPE CL:FIXNUM)
  (DATE-TIME-MONTH NULL-INTEGER :TYPE CL:FIXNUM)
  (DATE-TIME-YEAR NULL-INTEGER :TYPE CL:FIXNUM)
  (DATE-TIME-ZONE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (DATE-TIME-DOW NULL))

(CL:DEFSTRUCT (ABSTRACT-ITERATOR (:CONC-NAME %ABSTRACT-ITERATOR.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-ABSTRACT-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Instances of ABSTRACT-ITERATOR support iteration over collections."
  (FIRST-ITERATION? NULL))

(CL:DEFSTRUCT (STREAM-ITERATOR (:CONC-NAME %STREAM-ITERATOR.) (:INCLUDE ABSTRACT-ITERATOR) (:CONSTRUCTOR %MAKE-STREAM-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields tokens from an input stream."
  (THE-STREAM NULL))

(CL:DEFSTRUCT (XML-EXPRESSION-ITERATOR (:CONC-NAME %XML-EXPRESSION-ITERATOR.) (:INCLUDE STREAM-ITERATOR) (:CONSTRUCTOR %MAKE-XML-EXPRESSION-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields XML expressions from an input stream.
If the value of `region-tag' is non-`null', only XML expressions enclosed within
matching region tags will be returned (there can be multiple such regions).
What is a match is determined by `region-match-function'.  Usually, region tags
will/should be at the top level, but this is not necessarily so and also not
enforced by the iterator."
  (VALUE NULL)
  (REGION-TAG NULL)
  (REGION-MATCH-FUNCTION NULL)
  (DOCTYPE NULL)
  (DOCTYPE-ITERATOR? NULL))

(CL:DEFSTRUCT (CHARACTER-ITERATOR (:CONC-NAME %CHARACTER-ITERATOR.) (:INCLUDE STREAM-ITERATOR) (:CONSTRUCTOR %MAKE-CHARACTER-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields characters from an input stream."
  (VALUE NULL))

(CL:DEFSTRUCT (NATIVE-LINE-ITERATOR (:CONC-NAME %NATIVE-LINE-ITERATOR.) (:INCLUDE STREAM-ITERATOR) (:CONSTRUCTOR %MAKE-NATIVE-LINE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields lines from an input stream."
  (VALUE NULL))

(CL:DEFSTRUCT (LINE-ITERATOR (:CONC-NAME %LINE-ITERATOR.) (:INCLUDE STREAM-ITERATOR) (:CONSTRUCTOR %MAKE-LINE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields lines with any line terminator sequence from an input stream."
  (VALUE NULL))

(CL:DEFSTRUCT (S-EXPRESSION-ITERATOR (:CONC-NAME %S-EXPRESSION-ITERATOR.) (:INCLUDE STREAM-ITERATOR) (:CONSTRUCTOR %MAKE-S-EXPRESSION-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields s-expressions from an input stream."
  (VALUE NULL))

(CL:DEFSTRUCT (ITERATOR (:CONC-NAME %ITERATOR.) (:INCLUDE ABSTRACT-ITERATOR) (:CONSTRUCTOR %MAKE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Instances of ITERATOR support iteration over 
collections of OBJECTs."
  (VALUE NULL))

(CL:DEFSTRUCT (STREAM-TOKENIZER (:CONC-NAME %STREAM-TOKENIZER.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-STREAM-TOKENIZER ()) (:COPIER ()) (:PREDICATE ())) "Iterator that generates tokens by tokenizing a `stream'
according to a particular tokenization `table'."
  (STREAM NULL)
  (TABLE NULL))

(CL:DEFSTRUCT (MEMOIZABLE-ITERATOR (:CONC-NAME %MEMOIZABLE-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-MEMOIZABLE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class with value buffering that can be used to memoize some
`base-iterator' without having to generate all its values first.  The
memoized iterator needs to be cloned to allow multiple iterations over
the collection represented by the memoized iterator.  Use the following
idiom to memoize some arbitrary iterator and return a properly cloned value:
	 
 (clone-memoized-iterator
   (memoize (...) <options>*
            (new MEMOIZABLE-ITERATOR
                 :base-iterator <base-iterator>)))
	
This will ensure that <base-iterator> is exhausted exactly once even if
there are multiple clones for the same memoized value, and that each value
is generated as late as absolutely possible.  THIS IS NOT YET THREAD SAFE!"
  (BASE-ITERATOR NULL)
  (ITERATOR-AND-VALUES NULL)
  (CURSOR NULL))

(CL:DEFSTRUCT (ALL-CLASS-SLOTS-ITERATOR (:CONC-NAME %ALL-CLASS-SLOTS-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-ALL-CLASS-SLOTS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (ITERATOR-CONS-LIST NULL)
  (ITERATOR-OBJECT NULL))

(CL:DEFSTRUCT (CROSS-PRODUCT-ITERATOR (:CONC-NAME %CROSS-PRODUCT-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-CROSS-PRODUCT-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class that generates the cross product of a list of domains.
Each value tuple is represented as a CONS.  CAUTION: the value tuple will be modified
destructively, hence, it needs to be copied in case it needs to persist beyond a single
iteration."
  (DOMAINS NULL)
  (CURSORS NULL))

(CL:DEFSTRUCT (TYPES-TO-CLASSES-ITERATOR (:CONC-NAME %TYPES-TO-CLASSES-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-TYPES-TO-CLASSES-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that returns a class for each type
in a cons list of types."
  (ITERATOR-CURSOR NULL))

(CL:DEFSTRUCT (ALL-PURPOSE-ITERATOR (:CONC-NAME %ALL-PURPOSE-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-ALL-PURPOSE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "The all-purpose iterator works by storing a `next?'
function within itself during iterator allocation.  The method
`ALL-PURPOSE-ITERAOR.next?' funcalls the stored `next?' function.
An assortment of storage slots are provided for constructing different
kinds of iterators."
  (KEY NULL)
  (ITERATOR-NEXT-CODE NULL)
  (ITERATOR-FILTER-CODE NULL)
  (ITERATOR-EMPTY-CODE NULL)
  (ITERATOR-NESTED-ITERATOR NULL)
  (ITERATOR-CONS-LIST NULL)
  (ITERATOR-OBJECT NULL)
  (ITERATOR-SECOND-OBJECT NULL)
  (ITERATOR-INTEGER NULL-INTEGER :TYPE CL:FIXNUM)
  (ITERATOR-SECOND-INTEGER NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (DESTRUCTIVE-LIST-ITERATOR (:CONC-NAME %DESTRUCTIVE-LIST-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-DESTRUCTIVE-LIST-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "An iterator that contains a cons list.  Iterates over
the stored list, and destroys it when the iterator is free'd."
  (THE-CONS-LIST NULL)
  (LIST-ITERATOR-CURSOR NULL))

(CL:DEFSTRUCT (LIST-ITERATOR (:CONC-NAME %LIST-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-LIST-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class for the collection LIST."
  (LIST-ITERATOR-CURSOR NULL)
  (LIST-ITERATOR-COLLECTION NULL))

(CL:DEFSTRUCT (CONS-ITERATOR (:CONC-NAME %CONS-ITERATOR.) (:INCLUDE ITERATOR) (:CONSTRUCTOR %MAKE-CONS-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class for the class CONS."
  (CONS-ITERATOR-CURSOR NULL))

(CL:DEFSTRUCT (ABSTRACT-DICTIONARY-ITERATOR (:CONC-NAME %ABSTRACT-DICTIONARY-ITERATOR.) (:INCLUDE ABSTRACT-ITERATOR) (:CONSTRUCTOR %MAKE-ABSTRACT-DICTIONARY-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Instances of ABSTRACT-DICTIONARY-ITERATOR support iteration
over dictionaries.")

(CL:DEFSTRUCT (DICTIONARY-ITERATOR (:CONC-NAME %DICTIONARY-ITERATOR.) (:INCLUDE ABSTRACT-DICTIONARY-ITERATOR) (:CONSTRUCTOR %MAKE-DICTIONARY-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Instances of DICTIONARY-ITERATOR support iteration
over dictionaries with keys and values of type OBJECT."
  (VALUE NULL)
  (KEY NULL))

(CL:DEFSTRUCT (STELLA-HASH-TABLE-ITERATOR (:CONC-NAME %STELLA-HASH-TABLE-ITERATOR.) (:INCLUDE DICTIONARY-ITERATOR) (:CONSTRUCTOR %MAKE-STELLA-HASH-TABLE-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class for STELLA-HASH-TABLE's.  The only modifying
operations allowed during iteration are removal of the current element or
changing its value.  All other removal or insertion operations might lead
to corruption or undefined results."
  (SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (BUCKET-TABLE NULL)
  (BUCKET-INDEX NULL-INTEGER :TYPE CL:FIXNUM)
  (BUCKET-CURSOR NULL))

(CL:DEFSTRUCT (KV-LIST-ITERATOR (:CONC-NAME %KV-LIST-ITERATOR.) (:INCLUDE DICTIONARY-ITERATOR) (:CONSTRUCTOR %MAKE-KV-LIST-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (THE-KV-LIST NULL)
  (KV-LIST-ITERATOR-CURSOR NULL))

(CL:DEFSTRUCT (PROPERTY-LIST-ITERATOR (:CONC-NAME %PROPERTY-LIST-ITERATOR.) (:INCLUDE DICTIONARY-ITERATOR) (:CONSTRUCTOR %MAKE-PROPERTY-LIST-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator class for the collection PROPERTY-LIST."
  (PLIST-ITERATOR-CURSOR NULL)
  (PLIST-ITERATOR-COLLECTION NULL))

(CL:DEFSTRUCT (STRING-ITERATOR (:CONC-NAME %STRING-ITERATOR.) (:INCLUDE ABSTRACT-ITERATOR) (:CONSTRUCTOR %MAKE-STRING-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "Iterator that yields characters from a string."
  (VALUE NULL)
  (THE-STRING STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (CURSOR NULL-INTEGER :TYPE CL:FIXNUM)
  (END NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (INTERVAL-ITERATOR (:CONC-NAME %INTERVAL-ITERATOR.) (:INCLUDE ABSTRACT-ITERATOR) (:CONSTRUCTOR %MAKE-INTERVAL-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) "An iterator that specifies a (possibly infinite) range of
values.  Supports `member?' test as well as iteration methods.")

(CL:DEFSTRUCT (REVERSE-INTEGER-INTERVAL-ITERATOR (:CONC-NAME %REVERSE-INTEGER-INTERVAL-ITERATOR.) (:INCLUDE INTERVAL-ITERATOR) (:CONSTRUCTOR %MAKE-REVERSE-INTEGER-INTERVAL-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (VALUE NULL)
  (INTERVAL-CURSOR NULL-INTEGER :TYPE CL:FIXNUM)
  (LOWER-BOUND NULL-INTEGER :TYPE CL:FIXNUM)
  (UPPER-BOUND NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (INTEGER-INTERVAL-ITERATOR (:CONC-NAME %INTEGER-INTERVAL-ITERATOR.) (:INCLUDE INTERVAL-ITERATOR) (:CONSTRUCTOR %MAKE-INTEGER-INTERVAL-ITERATOR ()) (:COPIER ()) (:PREDICATE ())) (VALUE NULL)
  (INTERVAL-CURSOR NULL-INTEGER :TYPE CL:FIXNUM)
  (LOWER-BOUND NULL-INTEGER :TYPE CL:FIXNUM)
  (UPPER-BOUND NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (XML-DOCTYPE (:CONC-NAME %XML-DOCTYPE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-XML-DOCTYPE ()) (:COPIER ()) (:PREDICATE ())) (NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (ENTITY-TABLE NULL)
  (PARAMETER-ENTITY-TABLE NULL))

(CL:DEFSTRUCT (XML-OBJECT (:CONC-NAME %XML-OBJECT.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-XML-OBJECT ()) (:COPIER ()) (:PREDICATE ())) (NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (SURFACE-FORM STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT
 (XML-COMMENT (:CONC-NAME %XML-COMMENT.) (:INCLUDE XML-OBJECT)
  (:CONSTRUCTOR %MAKE-XML-COMMENT ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (XML-SPECIAL (:CONC-NAME %XML-SPECIAL.) (:INCLUDE XML-OBJECT) (:CONSTRUCTOR %MAKE-XML-SPECIAL ()) (:COPIER ()) (:PREDICATE ())) (DATA STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (XML-DECLARATION (:CONC-NAME %XML-DECLARATION.) (:INCLUDE XML-OBJECT) (:CONSTRUCTOR %MAKE-XML-DECLARATION ()) (:COPIER ()) (:PREDICATE ())) (DATA STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT
 (XML-DOCTYPE-DECLARATION (:CONC-NAME %XML-DOCTYPE-DECLARATION.)
  (:INCLUDE XML-DECLARATION)
  (:CONSTRUCTOR %MAKE-XML-DOCTYPE-DECLARATION ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT (XML-PROCESSING-INSTRUCTION (:CONC-NAME %XML-PROCESSING-INSTRUCTION.) (:INCLUDE XML-OBJECT) (:CONSTRUCTOR %MAKE-XML-PROCESSING-INSTRUCTION ()) (:COPIER ()) (:PREDICATE ())) (DATA STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT
 (XML-ATTRIBUTE (:CONC-NAME %XML-ATTRIBUTE.) (:INCLUDE XML-OBJECT)
  (:CONSTRUCTOR %MAKE-XML-ATTRIBUTE ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (XML-GLOBAL-ATTRIBUTE (:CONC-NAME %XML-GLOBAL-ATTRIBUTE.) (:INCLUDE XML-ATTRIBUTE) (:CONSTRUCTOR %MAKE-XML-GLOBAL-ATTRIBUTE ()) (:COPIER ()) (:PREDICATE ())) (NAMESPACE-NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (NAMESPACE-URI STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (XML-LOCAL-ATTRIBUTE (:CONC-NAME %XML-LOCAL-ATTRIBUTE.) (:INCLUDE XML-ATTRIBUTE) (:CONSTRUCTOR %MAKE-XML-LOCAL-ATTRIBUTE ()) (:COPIER ()) (:PREDICATE ())) (PARENT-ELEMENT NULL))

(CL:DEFSTRUCT (XML-ELEMENT (:CONC-NAME %XML-ELEMENT.) (:INCLUDE XML-OBJECT) (:CONSTRUCTOR %MAKE-XML-ELEMENT ()) (:COPIER ()) (:PREDICATE ())) (NAMESPACE-NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (NAMESPACE-URI STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (ELEMENT-DICTIONARY NULL))

(CL:DEFSTRUCT (TOKENIZER-TOKEN (:CONC-NAME %TOKENIZER-TOKEN.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TOKENIZER-TOKEN ()) (:COPIER ()) (:PREDICATE ())) (TYPE NULL)
  (CONTENT STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (NEXT NULL))

(CL:DEFSTRUCT (STELLA-TOKEN (:CONC-NAME %STELLA-TOKEN.) (:INCLUDE TOKENIZER-TOKEN) (:CONSTRUCTOR %MAKE-STELLA-TOKEN ()) (:COPIER ()) (:PREDICATE ())) (LOGICAL-TOKEN-TYPE NULL)
  (MODULE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (ESCAPE-MODE NULL))

(CL:DEFSTRUCT (TOKENIZER-STREAM-STATE (:CONC-NAME %TOKENIZER-STREAM-STATE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TOKENIZER-STREAM-STATE ()) (:COPIER ()) (:PREDICATE ())) (BUFFER NULL)
  (BUFFER-SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (CURSOR NULL-INTEGER :TYPE CL:FIXNUM)
  (END NULL-INTEGER :TYPE CL:FIXNUM)
  (STATE NULL-INTEGER :TYPE CL:FIXNUM)
  (TABLE NULL)
  (STATE-DICTIONARY NULL)
  (TOKEN-LIST NULL))

(CL:DEFSTRUCT (TOKENIZER-TABLE (:CONC-NAME %TOKENIZER-TABLE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TOKENIZER-TABLE ()) (:COPIER ()) (:PREDICATE ())) (TRANSITIONS STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (UNIQUE-STATE-NAMES NULL)
  (STATE-NAMES NULL)
  (LEGAL-EOF-STATES NULL))

(CL:DEFSTRUCT
 (ABSTRACT-COLLECTION (:CONC-NAME %ABSTRACT-COLLECTION.)
  (:INCLUDE STANDARD-OBJECT)
  (:CONSTRUCTOR %MAKE-ABSTRACT-COLLECTION ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (ABSTRACT-DICTIONARY (:CONC-NAME %ABSTRACT-DICTIONARY.)
  (:INCLUDE ABSTRACT-COLLECTION)
  (:CONSTRUCTOR %MAKE-ABSTRACT-DICTIONARY ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (DICTIONARY (:CONC-NAME %DICTIONARY.) (:INCLUDE ABSTRACT-DICTIONARY)
  (:CONSTRUCTOR %MAKE-DICTIONARY ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (KEY-VALUE-LIST (:CONC-NAME %KEY-VALUE-LIST.) (:INCLUDE DICTIONARY) (:CONSTRUCTOR %MAKE-KEY-VALUE-LIST ()) (:COPIER ()) (:PREDICATE ())) (THE-KV-LIST NULL))

(CL:DEFSTRUCT (HOOK-LIST (:CONC-NAME %HOOK-LIST.) (:INCLUDE KEY-VALUE-LIST) (:CONSTRUCTOR %MAKE-HOOK-LIST ()) (:COPIER ()) (:PREDICATE ())) "Each HOOK-LIST object contains a list of zero or
more function codes that get funcall'd some procedure."
  (SIGNATURE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (DOCUMENTATION STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (CS-VALUE (:CONC-NAME %CS-VALUE.) (:INCLUDE KEY-VALUE-LIST) (:CONSTRUCTOR %MAKE-CS-VALUE ()) (:COPIER ()) (:PREDICATE ())) "Contextualized value.  Contains a sorted kv-cons list indexed
by context. The kv-cons list is never null.  Newer (higher numbered) contexts
appear first.")

(CL:DEFSTRUCT
 (KEYWORD-KEY-VALUE-LIST (:CONC-NAME %KEYWORD-KEY-VALUE-LIST.)
  (:INCLUDE KEY-VALUE-LIST)
  (:CONSTRUCTOR %MAKE-KEYWORD-KEY-VALUE-LIST ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT (KEY-VALUE-MAP (:CONC-NAME %KEY-VALUE-MAP.) (:INCLUDE DICTIONARY) (:CONSTRUCTOR %MAKE-KEY-VALUE-MAP ()) (:COPIER ()) (:PREDICATE ())) "Full-featured dictionary class that supports `eql?' or
`equal?' equality tests, O(1) access operations even for large numbers
of entries by using a hash table, light-weight KV-CONS representation for
small tables and iteration even if the dictionary is represented by a
hash table."
  (THE-MAP NULL)
  (EQUAL-TEST? NULL)
  (INITIAL-SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (CROSSOVER-POINT NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (HASH-SET (:CONC-NAME %HASH-SET.) (:INCLUDE KEY-VALUE-MAP) (:CONSTRUCTOR %MAKE-HASH-SET ()) (:COPIER ()) (:PREDICATE ())) "Full-featured set class that supports `eql?' or `equal?'
equality tests, O(1) insert and `member?' operations & O(N) `intersection'
etc. operations even for large numbers of entries by using a hash table,
light-weight KV-CONS representation for small sets and iteration even if the
set is represented by a hash table.  The only minor drawback right now is that
this wastes a value slot per entry, since we piggy-back off KEY-VALUE-MAP's,
however, that wastes at most 25% space.")

(CL:DEFSTRUCT (PROPERTY-LIST (:CONC-NAME %PROPERTY-LIST.) (:INCLUDE DICTIONARY) (:CONSTRUCTOR %MAKE-PROPERTY-LIST ()) (:COPIER ()) (:PREDICATE ())) (THE-PLIST NULL))

(CL:DEFSTRUCT (ABSTRACT-HASH-TABLE (:CONC-NAME %ABSTRACT-HASH-TABLE.) (:INCLUDE ABSTRACT-DICTIONARY) (:CONSTRUCTOR %MAKE-ABSTRACT-HASH-TABLE ()) (:COPIER ()) (:PREDICATE ())) (THE-HASH-TABLE NULL)
  (THE-STELLA-HASH-TABLE NULL))

(CL:DEFSTRUCT (STELLA-HASH-TABLE (:CONC-NAME %STELLA-HASH-TABLE.) (:INCLUDE ABSTRACT-HASH-TABLE) (:CONSTRUCTOR %MAKE-STELLA-HASH-TABLE ()) (:COPIER ()) (:PREDICATE ())) (THE-TABLE NULL)
  (SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (INITIAL-SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (FREE-ELEMENTS NULL-INTEGER :TYPE CL:FIXNUM)
  (EQUAL-TEST? NULL))

(CL:DEFSTRUCT
 (STRING-TO-INTEGER-HASH-TABLE
  (:CONC-NAME %STRING-TO-INTEGER-HASH-TABLE.)
  (:INCLUDE ABSTRACT-HASH-TABLE)
  (:CONSTRUCTOR %MAKE-STRING-TO-INTEGER-HASH-TABLE ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (STRING-HASH-TABLE (:CONC-NAME %STRING-HASH-TABLE.)
  (:INCLUDE ABSTRACT-HASH-TABLE)
  (:CONSTRUCTOR %MAKE-STRING-HASH-TABLE ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (FLOAT-HASH-TABLE (:CONC-NAME %FLOAT-HASH-TABLE.)
  (:INCLUDE ABSTRACT-HASH-TABLE)
  (:CONSTRUCTOR %MAKE-FLOAT-HASH-TABLE ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (INTEGER-HASH-TABLE (:CONC-NAME %INTEGER-HASH-TABLE.)
  (:INCLUDE ABSTRACT-HASH-TABLE)
  (:CONSTRUCTOR %MAKE-INTEGER-HASH-TABLE ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (HASH-TABLE (:CONC-NAME %HASH-TABLE.) (:INCLUDE ABSTRACT-HASH-TABLE)
  (:CONSTRUCTOR %MAKE-HASH-TABLE ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (ABSTRACT-DIMENSIONAL-ARRAY (:CONC-NAME %ABSTRACT-DIMENSIONAL-ARRAY.) (:INCLUDE ABSTRACT-COLLECTION) (:CONSTRUCTOR %MAKE-ABSTRACT-DIMENSIONAL-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "Array objects that are aware of their dimensions.")

(CL:DEFSTRUCT (2D-FLOAT-ARRAY (:CONC-NAME %2D-FLOAT-ARRAY.) (:INCLUDE ABSTRACT-DIMENSIONAL-ARRAY) (:CONSTRUCTOR %MAKE-2D-FLOAT-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "2-dimensional array with float values."
  (DIM2 NULL-INTEGER :TYPE CL:FIXNUM)
  (DIM1 NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY NULL))

(CL:DEFSTRUCT (2D-ARRAY (:CONC-NAME %2D-ARRAY.) (:INCLUDE ABSTRACT-DIMENSIONAL-ARRAY) (:CONSTRUCTOR %MAKE-2D-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "2-dimensional array with object values."
  (DIM2 NULL-INTEGER :TYPE CL:FIXNUM)
  (DIM1 NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY NULL))

(CL:DEFSTRUCT (1D-FLOAT-ARRAY (:CONC-NAME %1D-FLOAT-ARRAY.) (:INCLUDE ABSTRACT-DIMENSIONAL-ARRAY) (:CONSTRUCTOR %MAKE-1D-FLOAT-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "1-dimensional array with float values."
  (DIM1 NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY NULL))

(CL:DEFSTRUCT (1D-ARRAY (:CONC-NAME %1D-ARRAY.) (:INCLUDE ABSTRACT-DIMENSIONAL-ARRAY) (:CONSTRUCTOR %MAKE-1D-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "1-dimensional array with OBJECT values.  This is more or
less equivalent to VECTOR (fewer methods) but kept here for symmetry."
  (DIM1 NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY NULL))

(CL:DEFSTRUCT
 (COLLECTION (:CONC-NAME %COLLECTION.) (:INCLUDE ABSTRACT-COLLECTION)
  (:CONSTRUCTOR %MAKE-COLLECTION ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT
 (SEQUENCE (:CONC-NAME %SEQUENCE.) (:INCLUDE COLLECTION)
  (:CONSTRUCTOR %MAKE-SEQUENCE ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (VECTOR (:CONC-NAME %VECTOR.) (:INCLUDE SEQUENCE) (:CONSTRUCTOR %MAKE-VECTOR ()) (:COPIER ()) (:PREDICATE ())) (ARRAY-SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (THE-ARRAY STELLA::NULL-NATIVE-VECTOR :TYPE CL:SIMPLE-VECTOR))

(CL:DEFSTRUCT (HEAP (:CONC-NAME %HEAP.) (:INCLUDE VECTOR) (:CONSTRUCTOR %MAKE-HEAP ()) (:COPIER ()) (:PREDICATE ())) "Implements a Min or Max heap depending on the semantics
of `predicate' (Min if `predicate' has a `<' semantics).  This is useful
for in-place sorting (even though we have specialzed sort routines for that)
or to maintain top-N lists with log(N) insertion time.  We place this under
VECTOR instead of VECTOR-SEQUENCE for now, since sequential order isn't
really maintained or accessible until we sort the heap."
  (PREDICATE NULL)
  (FILL-POINTER NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT
 (INTEGER-VECTOR (:CONC-NAME %INTEGER-VECTOR.) (:INCLUDE VECTOR)
  (:CONSTRUCTOR %MAKE-INTEGER-VECTOR ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT
 (BOOLEAN-VECTOR (:CONC-NAME %BOOLEAN-VECTOR.) (:INCLUDE VECTOR)
  (:CONSTRUCTOR %MAKE-BOOLEAN-VECTOR ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (VECTOR-SEQUENCE (:CONC-NAME %VECTOR-SEQUENCE.) (:INCLUDE VECTOR) (:CONSTRUCTOR %MAKE-VECTOR-SEQUENCE ()) (:COPIER ()) (:PREDICATE ())) "Extensible sequence implemented by a vector.  Whenever we run
out of room, we grow the sequence by a factor of two.  Note that this keeps the
average insertion cost per element constant.  This is generally preferable over
linked lists unless we need within-list insertions or removals, since it uses
less space and has better cache locality."
  (SEQUENCE-LENGTH NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (CUSTOM-VECTOR-SEQUENCE (:CONC-NAME %CUSTOM-VECTOR-SEQUENCE.) (:INCLUDE VECTOR-SEQUENCE) (:CONSTRUCTOR %MAKE-CUSTOM-VECTOR-SEQUENCE ()) (:COPIER ()) (:PREDICATE ())) "VECTOR-SEQUENCE (which see) with a customizable resize factor.
The resize factor needs to be > 1."
  (RESIZE-FACTOR NULL-FLOAT :TYPE CL:DOUBLE-FLOAT))

(CL:DEFSTRUCT
 (EXTENSIBLE-VECTOR (:CONC-NAME %EXTENSIBLE-VECTOR.) (:INCLUDE VECTOR)
  (:CONSTRUCTOR %MAKE-EXTENSIBLE-VECTOR ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT (EXTENSIBLE-SYMBOL-ARRAY (:CONC-NAME %EXTENSIBLE-SYMBOL-ARRAY.) (:INCLUDE EXTENSIBLE-VECTOR) (:CONSTRUCTOR %MAKE-EXTENSIBLE-SYMBOL-ARRAY ()) (:COPIER ()) (:PREDICATE ())) "Self-extending array with methods for storing and
accessing symbols within it."
  (TOP-SYMBOL-OFFSET NULL-INTEGER :TYPE CL:FIXNUM)
  (POTENTIAL-FREE-SYMBOL-OFFSET NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (LIST (:CONC-NAME %LIST.) (:INCLUDE SEQUENCE) (:CONSTRUCTOR %MAKE-LIST ()) (:COPIER ()) (:PREDICATE ())) (THE-CONS-LIST NULL))

(CL:DEFSTRUCT (ACTIVE-SET (:CONC-NAME %ACTIVE-SET.) (:INCLUDE LIST) (:CONSTRUCTOR %MAKE-ACTIVE-SET ()) (:COPIER ()) (:PREDICATE ())) (ACTIVE-SLOT NULL)
  (OWNER-INSTANCE NULL))

(CL:DEFSTRUCT (ACTIVE-LIST (:CONC-NAME %ACTIVE-LIST.) (:INCLUDE LIST) (:CONSTRUCTOR %MAKE-ACTIVE-LIST ()) (:COPIER ()) (:PREDICATE ())) (ACTIVE-SLOT NULL)
  (OWNER-INSTANCE NULL))

(CL:DEFSTRUCT
 (CLASS-EXTENSION (:CONC-NAME %CLASS-EXTENSION.) (:INCLUDE LIST)
  (:CONSTRUCTOR %MAKE-CLASS-EXTENSION ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT
 (SET (:CONC-NAME %SET.) (:INCLUDE LIST) (:CONSTRUCTOR %MAKE-SET ())
  (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (RECYCLE-LIST (:CONC-NAME %RECYCLE-LIST.) (:INCLUDE SEQUENCE) (:CONSTRUCTOR %MAKE-RECYCLE-LIST ()) (:COPIER ()) (:PREDICATE ())) (RECYCLE-LIST-OF NULL)
  (RECYCLED-ITEMS NULL)
  (LIST-OF-RECYCLED-ITEMS NULL)
  (ALL-ITEMS NULL)
  (UNUSED-ITEMS NULL)
  (CURRENT-LENGTH NULL-INTEGER :TYPE CL:FIXNUM)
  (ITEM-SIZE NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (MEMOIZATION-TABLE (:CONC-NAME %MEMOIZATION-TABLE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-MEMOIZATION-TABLE ()) (:COPIER ()) (:PREDICATE ())) "Table that maps argument values onto computed results for
one individual memoization site."
  (HASH-TABLE NULL)
  (TABLE-NAME NULL)
  (CURRENT-TIMESTAMP NULL)
  (TIMESTAMPS NULL))

(CL:DEFSTRUCT (MRU-MEMOIZATION-TABLE (:CONC-NAME %MRU-MEMOIZATION-TABLE.) (:INCLUDE MEMOIZATION-TABLE) (:CONSTRUCTOR %MAKE-MRU-MEMOIZATION-TABLE ()) (:COPIER ()) (:PREDICATE ())) (MRU-BUCKETS-VECTOR NULL)
  (LRU-BUCKETS-VECTOR NULL)
  (MRU-BUCKETS STELLA::NULL-NATIVE-VECTOR :TYPE CL:SIMPLE-VECTOR)
  (LRU-BUCKETS STELLA::NULL-NATIVE-VECTOR :TYPE CL:SIMPLE-VECTOR)
  (MRU-TIMESTAMP NULL)
  (LRU-TIMESTAMP NULL)
  (NOF-BUCKETS NULL-INTEGER :TYPE CL:FIXNUM)
  (FREE-ENTRIES NULL-INTEGER :TYPE CL:FIXNUM)
  (MAX-ENTRIES NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (CMD-LINE-OPTION (:CONC-NAME %CMD-LINE-OPTION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CMD-LINE-OPTION ()) (:COPIER ()) (:PREDICATE ())) (DOCUMENTATION STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (KEYS NULL)
  (VALUE-TYPE NULL)
  (MULTI-VALUED? NULL)
  (N-ARGUMENTS NULL-INTEGER :TYPE CL:FIXNUM)
  (DEFAULT-VALUE NULL)
  (CONFIGURATION-PROPERTY STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (HANDLER NULL)
  (ERROR-ACTION NULL))

(CL:DEFSTRUCT (TRANSLATION-UNIT (:CONC-NAME %TRANSLATION-UNIT.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TRANSLATION-UNIT ()) (:COPIER ()) (:PREDICATE ())) (TU-HOME-MODULE NULL)
  (THE-OBJECT NULL)
  (CATEGORY NULL)
  (ANNOTATION STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (AUXILIARY? NULL)
  (CODE-REGISTER NULL)
  (TRANSLATION NULL)
  (REFERENCED-GLOBALS NULL))

(CL:DEFSTRUCT (BUFFERED-STRING (:CONC-NAME %BUFFERED-STRING.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-BUFFERED-STRING ()) (:COPIER ()) (:PREDICATE ())) (BUFFER STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (BUFFER-SIZE NULL-INTEGER :TYPE CL:FIXNUM)
  (FILL-POINTER NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (STREAM (:CONC-NAME %STREAM.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-STREAM ()) (:COPIER ()) (:PREDICATE ())) (STATE NULL))

(CL:DEFSTRUCT (INPUT-STREAM (:CONC-NAME %INPUT-STREAM.) (:INCLUDE STREAM) (:CONSTRUCTOR %MAKE-INPUT-STREAM ()) (:COPIER ()) (:PREDICATE ())) (NATIVE-STREAM NULL)
  (ECHO-STREAM NULL)
  (TOKENIZER-STATE NULL)
  (BUFFERING-SCHEME NULL))

(CL:DEFSTRUCT (INPUT-STRING-STREAM (:CONC-NAME %INPUT-STRING-STREAM.) (:INCLUDE INPUT-STREAM) (:CONSTRUCTOR %MAKE-INPUT-STRING-STREAM ()) (:COPIER ()) (:PREDICATE ())) (THE-STRING STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (INPUT-FILE-STREAM (:CONC-NAME %INPUT-FILE-STREAM.) (:INCLUDE INPUT-STREAM) (:CONSTRUCTOR %MAKE-INPUT-FILE-STREAM ()) (:COPIER ()) (:PREDICATE ())) (FILENAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (IF-NOT-EXISTS-ACTION NULL))

(CL:DEFSTRUCT (OUTPUT-STREAM (:CONC-NAME %OUTPUT-STREAM.) (:INCLUDE STREAM) (:CONSTRUCTOR %MAKE-OUTPUT-STREAM ()) (:COPIER ()) (:PREDICATE ())) (NATIVE-STREAM NULL))

(CL:DEFSTRUCT (OUTPUT-STRING-STREAM (:CONC-NAME %OUTPUT-STRING-STREAM.) (:INCLUDE OUTPUT-STREAM) (:CONSTRUCTOR %MAKE-OUTPUT-STRING-STREAM ()) (:COPIER ()) (:PREDICATE ())) (THE-STRING STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (OUTPUT-FILE-STREAM (:CONC-NAME %OUTPUT-FILE-STREAM.) (:INCLUDE OUTPUT-STREAM) (:CONSTRUCTOR %MAKE-OUTPUT-FILE-STREAM ()) (:COPIER ()) (:PREDICATE ())) (FILENAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (IF-EXISTS-ACTION NULL)
  (IF-NOT-EXISTS-ACTION NULL))

(CL:DEFSTRUCT (SYSTEM-DEFINITION (:CONC-NAME %SYSTEM-DEFINITION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-SYSTEM-DEFINITION ()) (:COPIER ()) (:PREDICATE ())) "The System-Definition class is used to define systems of files
that constitute STELLA applications."
  (DYNAMIC-SLOTS NULL)
  (NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (DEFINITION-FILE NULL)
  (DIRECTORY NULL)
  (FILES NULL)
  (LISP-ONLY-FILES NULL)
  (CPP-ONLY-FILES NULL)
  (JAVA-ONLY-FILES NULL)
  (DATA-FILES NULL)
  (PREPROCESSED-FILES NULL)
  (REQUIRED-SYSTEMS NULL)
  (LOADED? NULL)
  (UP-TO-DATE? NULL)
  (CARDINAL-MODULE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (SOURCE-ROOT-DIRECTORY NULL)
  (NATIVE-ROOT-DIRECTORY NULL)
  (BINARY-ROOT-DIRECTORY NULL)
  (BANNER STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (PRODUCTION-SETTINGS NULL)
  (DEVELOPMENT-SETTINGS NULL)
  (FINALIZATION-FUNCTION NULL))

(CL:DEFSTRUCT (TAXONOMY-GRAPH (:CONC-NAME %TAXONOMY-GRAPH.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TAXONOMY-GRAPH ()) (:COPIER ()) (:PREDICATE ())) (RENUMBER-IF-OUT-OF-NUMBERS? NULL)
  (RENUMBER-RATIO NULL-FLOAT :TYPE CL:DOUBLE-FLOAT)
  (INCREMENTAL-MODE? NULL)
  (LARGEST-POSTORDER-NUMBER NULL-INTEGER :TYPE CL:FIXNUM)
  (NUMBER-OF-NODES NULL-INTEGER :TYPE CL:FIXNUM)
  (NUMBER-OF-FOREIGN-INTERVAL-NODES NULL-INTEGER :TYPE CL:FIXNUM)
  (ROOTS NULL)
  (BROKEN-LINKS NULL)
  (ADDED-LINKS NULL)
  (REMOVED-LINKS NULL))

(CL:DEFSTRUCT (TAXONOMY-NODE (:CONC-NAME %TAXONOMY-NODE.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-TAXONOMY-NODE ()) (:COPIER ()) (:PREDICATE ())) (NATIVE-OBJECT NULL)
  (LABEL NULL-INTEGER :TYPE CL:FIXNUM)
  (INTERVALS NULL)
  (INITIAL-INTERVAL NULL)
  (FIRST-INTERVAL-LOWER-BOUND NULL-INTEGER :TYPE CL:FIXNUM)
  (FIRST-INTERVAL-UPPER-BOUND NULL-INTEGER :TYPE CL:FIXNUM)
  (PARENTS NULL)
  (CHILDREN NULL)
  (TOTAL-ANCESTORS NULL-INTEGER :TYPE CL:FIXNUM)
  (TREE-CHILDREN NULL)
  (MARKER NULL))

(CL:DEFSTRUCT (INTERVAL (:CONC-NAME %INTERVAL.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-INTERVAL ()) (:COPIER ()) (:PREDICATE ())) (LOWER-BOUND NULL-INTEGER :TYPE CL:FIXNUM)
  (UPPER-BOUND NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (THING (:CONC-NAME %THING.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-THING ()) (:COPIER ()) (:PREDICATE ())) "Defines a class that must be inherited by any
class that participates in the PowerLoom side of things."
  (DYNAMIC-SLOTS NULL)
  (SURROGATE-VALUE-INVERSE NULL))

(CL:DEFSTRUCT (CONTEXT (:CONC-NAME %CONTEXT.) (:INCLUDE THING) (:CONSTRUCTOR %MAKE-CONTEXT ()) (:COPIER ()) (:PREDICATE ())) (CHILD-CONTEXTS NULL)
  (BASE-MODULE NULL)
  (ALL-SUPER-CONTEXTS NULL)
  (CONTEXT-NUMBER NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (WORLD (:CONC-NAME %WORLD.) (:INCLUDE CONTEXT) (:CONSTRUCTOR %MAKE-WORLD ()) (:COPIER ()) (:PREDICATE ())) (PARENT-CONTEXT NULL))

(CL:DEFSTRUCT (MODULE (:CONC-NAME %MODULE.) (:INCLUDE CONTEXT) (:CONSTRUCTOR %MAKE-MODULE ()) (:COPIER ()) (:PREDICATE ())) (PARENT-MODULES NULL)
  (DOCUMENTATION STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (NICKNAMES NULL)
  (USES NULL)
  (USED-BY NULL)
  (REQUIRES NULL)
  (CASE-SENSITIVE? NULL)
  (MODULE-FULL-NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (MODULE-NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (MODULE-STRINGIFIED-SOURCE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (STRINGIFIED-OPTIONS STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (CARDINAL-MODULE NULL)
  (SYMBOL-OFFSET-TABLE NULL)
  (SURROGATE-OFFSET-TABLE NULL)
  (STRICT-INFERENCE-CACHE NULL)
  (DEFAULT-INFERENCE-CACHE NULL)
  (PROTOTYPE-INFERENCE-CACHE NULL))

(CL:DEFSTRUCT (QUOTED-EXPRESSION (:CONC-NAME %QUOTED-EXPRESSION.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-QUOTED-EXPRESSION ()) (:COPIER ()) (:PREDICATE ())) (QUOTATION-TABLE-OFFSET NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (MAPPABLE-OBJECT (:CONC-NAME %MAPPABLE-OBJECT.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-MAPPABLE-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "The class MAPPABLE-OBJECT enables the definition of projections
from a Stella class, slot, global variable, etc. onto a corresponding native
entity."
  (DYNAMIC-SLOTS NULL))

(CL:DEFSTRUCT (GLOBAL-VARIABLE (:CONC-NAME %GLOBAL-VARIABLE.) (:INCLUDE MAPPABLE-OBJECT) (:CONSTRUCTOR %MAKE-GLOBAL-VARIABLE ()) (:COPIER ()) (:PREDICATE ())) (DOCUMENTATION STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (VARIABLE-NAME NULL)
  (VARIABLE-TYPE NULL)
  (VARIABLE-SPECIAL? NULL)
  (VARIABLE-CONSTANT? NULL)
  (VARIABLE-PUBLIC? NULL)
  (VARIABLE-AUXILIARY? NULL)
  (VARIABLE-NATIVE-OBJECT NULL)
  (VARIABLE-STRINGIFIED-SOURCE STELLA::NULL-STRING :TYPE
   CL:SIMPLE-STRING))

(CL:DEFSTRUCT (RELATION (:CONC-NAME %RELATION.) (:INCLUDE MAPPABLE-OBJECT) (:CONSTRUCTOR %MAKE-RELATION ()) (:COPIER ()) (:PREDICATE ())) (ABSTRACT? NULL))

(CL:DEFSTRUCT (POLYMORPHIC-RELATION (:CONC-NAME %POLYMORPHIC-RELATION.) (:INCLUDE RELATION) (:CONSTRUCTOR %MAKE-POLYMORPHIC-RELATION ()) (:COPIER ()) (:PREDICATE ())) (SLOT-DIRECT-EQUIVALENT NULL))

(CL:DEFSTRUCT (SLOT (:CONC-NAME %SLOT.) (:INCLUDE POLYMORPHIC-RELATION) (:CONSTRUCTOR %MAKE-SLOT ()) (:COPIER ()) (:PREDICATE ())) (SLOT-NAME NULL)
  (SLOT-OWNER NULL)
  (SLOT-BASE-TYPE NULL)
  (SLOT-SLOTREF NULL)
  (SLOT-PUBLIC? NULL)
  (SLOT-RENAMED? NULL)
  (SLOT-EXTERNAL? NULL)
  (SLOT-MARKED? NULL))

(CL:DEFSTRUCT (TABLE (:CONC-NAME %TABLE.) (:INCLUDE SLOT) (:CONSTRUCTOR %MAKE-TABLE ()) (:COPIER ()) (:PREDICATE ())) (TUPLE-DOMAINS NULL))

(CL:DEFSTRUCT (METHOD-SLOT (:CONC-NAME %METHOD-SLOT.) (:INCLUDE SLOT) (:CONSTRUCTOR %MAKE-METHOD-SLOT ()) (:COPIER ()) (:PREDICATE ())) (METHOD-SETTER? NULL)
  (METHOD-PARAMETER-NAMES NULL)
  (METHOD-PARAMETER-TYPE-SPECIFIERS NULL)
  (METHOD-RETURN-TYPE-SPECIFIERS NULL)
  (METHOD-STRINGIFIED-SOURCE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (METHOD-CODE NULL)
  (FUNCTION-CODE NULL)
  (METHOD-FUNCTION? NULL))

(CL:DEFSTRUCT (STORAGE-SLOT (:CONC-NAME %STORAGE-SLOT.) (:INCLUDE SLOT) (:CONSTRUCTOR %MAKE-STORAGE-SLOT ()) (:COPIER ()) (:PREDICATE ())) (SLOT-REQUIRED? NULL)
  (SLOT-COMPONENT? NULL)
  (SLOT-READ-ONLY? NULL)
  (SLOT-HARDWIRED? NULL)
  (SLOT-CONTEXT-SENSITIVE? NULL))

(CL:DEFSTRUCT (CLASS (:CONC-NAME %CLASS.) (:INCLUDE RELATION) (:CONSTRUCTOR %MAKE-CLASS ()) (:COPIER ()) (:PREDICATE ())) (CL-STRUCT? NULL)
  (MIXIN? NULL)
  (CLASS-TYPE NULL)
  (CLASS-DIRECT-SUPERS NULL)
  (CLASS-DIRECT-SUBS NULL)
  (CLASS-ALL-SUPER-CLASSES NULL)
  (CLASS-ALL-SLOTS NULL)
  (CLASS-LOCAL-SLOTS NULL)
  (CLASS-SLOT-AND-METHOD-CACHE NULL)
  (CLASS-COLLECTION? NULL)
  (CLASS-PUBLIC? NULL)
  (CLASS-FINALIZED? NULL)
  (CLASS-SLOTS-FINALIZED? NULL)
  (CLASS-STRINGIFIED-SOURCE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (CLASS-CONSTRUCTOR-CODE NULL)
  (CLASS-SLOT-ACCESSOR-CODE NULL)
  (CLASS-MARKED? NULL)
  (CLASS-TAXONOMY-NODE NULL))

(CL:DEFSTRUCT
 (COMPOUND-TYPE-SPECIFIER (:CONC-NAME %COMPOUND-TYPE-SPECIFIER.)
  (:INCLUDE STANDARD-OBJECT)
  (:CONSTRUCTOR %MAKE-COMPOUND-TYPE-SPECIFIER ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT (ANCHORED-TYPE-SPECIFIER (:CONC-NAME %ANCHORED-TYPE-SPECIFIER.) (:INCLUDE COMPOUND-TYPE-SPECIFIER) (:CONSTRUCTOR %MAKE-ANCHORED-TYPE-SPECIFIER ()) (:COPIER ()) (:PREDICATE ())) (SPECIFIER-PARAMETER-NAME NULL))

(CL:DEFSTRUCT (PARAMETRIC-TYPE-SPECIFIER (:CONC-NAME %PARAMETRIC-TYPE-SPECIFIER.) (:INCLUDE COMPOUND-TYPE-SPECIFIER) (:CONSTRUCTOR %MAKE-PARAMETRIC-TYPE-SPECIFIER ()) (:COPIER ()) (:PREDICATE ())) (SPECIFIER-BASE-TYPE NULL)
  (SPECIFIER-PARAMETER-TYPES NULL)
  (SPECIFIER-DIMENSIONS NULL))

(CL:DEFSTRUCT (CONTEXT-SENSITIVE-OBJECT (:CONC-NAME %CONTEXT-SENSITIVE-OBJECT.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CONTEXT-SENSITIVE-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "Context sensitive objects inherit a slot `home-context'
that enables context-dependent access machinery to determine the
visibility of objects from modules."
  (HOME-CONTEXT NULL))

(CL:DEFSTRUCT (GENERALIZED-SYMBOL (:CONC-NAME %GENERALIZED-SYMBOL.) (:INCLUDE CONTEXT-SENSITIVE-OBJECT) (:CONSTRUCTOR %MAKE-GENERALIZED-SYMBOL ()) (:COPIER ()) (:PREDICATE ())) (SYMBOL-NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (SYMBOL-ID NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (SYMBOL (:CONC-NAME %SYMBOL.) (:INCLUDE GENERALIZED-SYMBOL) (:CONSTRUCTOR %MAKE-SYMBOL ()) (:COPIER ()) (:PREDICATE ())) (SYMBOL-SLOT-OFFSET NULL-INTEGER :TYPE CL:FIXNUM)
  (SYMBOL-VALUE-AND-PLIST NULL))

(CL:DEFSTRUCT
 (TRANSIENT-SYMBOL (:CONC-NAME %TRANSIENT-SYMBOL.) (:INCLUDE SYMBOL)
  (:CONSTRUCTOR %MAKE-TRANSIENT-SYMBOL ()) (:COPIER ())
  (:PREDICATE ())))

(CL:DEFSTRUCT
 (KEYWORD (:CONC-NAME %KEYWORD.) (:INCLUDE GENERALIZED-SYMBOL)
  (:CONSTRUCTOR %MAKE-KEYWORD ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (SURROGATE (:CONC-NAME %SURROGATE.) (:INCLUDE GENERALIZED-SYMBOL) (:CONSTRUCTOR %MAKE-SURROGATE ()) (:COPIER ()) (:PREDICATE ())) "Rigid surrogate."
  (SURROGATE-VALUE NULL))

(CL:DEFSTRUCT (ACTIVE-OBJECT (:CONC-NAME %ACTIVE-OBJECT.) (:INCLUDE CONTEXT-SENSITIVE-OBJECT) (:CONSTRUCTOR %MAKE-ACTIVE-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "Active objects call class and slot triggers in response
to instance creation/destruction and slot updates.  They include internal
storage slots needed for class extensions, dynamic storage, and home context."
  (DYNAMIC-SLOTS NULL))

(CL:DEFSTRUCT (DEMON (:CONC-NAME %DEMON.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-DEMON ()) (:COPIER ()) (:PREDICATE ())) (DEMON-NAME STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (DEMON-ACTION NULL)
  (DEMON-CLASS-REFS NULL)
  (DEMON-SLOT-REFS NULL)
  (DEMON-CODE NULL)
  (DEMON-METHOD NULL)
  (DEMON-DOCUMENTATION STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING)
  (DEMON-GUARD? NULL)
  (DEMON-ALL? NULL)
  (DEMON-INHERIT? NULL))

(CL:DEFSTRUCT (KV-CONS (:CONC-NAME %KV-CONS.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-KV-CONS ()) (:COPIER ()) (:PREDICATE ())) (KEY NULL)
  (VALUE NULL)
  (REST NULL))

(CL:DEFSTRUCT (CONS (:CONC-NAME %CONS.) (:INCLUDE STANDARD-OBJECT) (:CONSTRUCTOR %MAKE-CONS ()) (:COPIER ()) (:PREDICATE ())) (VALUE NULL)
  (REST NULL))

(CL:DEFSTRUCT
 (WRAPPER (:CONC-NAME %WRAPPER.) (:INCLUDE OBJECT)
  (:CONSTRUCTOR %MAKE-WRAPPER ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (EXCEPTION-WRAPPER (:CONC-NAME %EXCEPTION-WRAPPER.) (:INCLUDE WRAPPER) (:CONSTRUCTOR %MAKE-EXCEPTION-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) "Wrapper class for exceptions so they can be stored in standard
collection classes as well as in dynamic slots.  NOTE: in order to determine the
exact type of the wrapped native exception, it has to be signaled and caught in
an `exception-case' statement, a normal `type-case' will not work here."
  (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT (NATIVE-OBJECT-POINTER-WRAPPER (:CONC-NAME %NATIVE-OBJECT-POINTER-WRAPPER.) (:INCLUDE WRAPPER) (:CONSTRUCTOR %MAKE-NATIVE-OBJECT-POINTER-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) "Wrapper class for native object pointers so that they can be
stored in standard collection classes as well as in dynamic slots."
  (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT
 (LITERAL-WRAPPER (:CONC-NAME %LITERAL-WRAPPER.) (:INCLUDE WRAPPER)
  (:CONSTRUCTOR %MAKE-LITERAL-WRAPPER ()) (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (STRING-WRAPPER (:CONC-NAME %STRING-WRAPPER.) (:INCLUDE LITERAL-WRAPPER) (:CONSTRUCTOR %MAKE-STRING-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT (VERBATIM-STRING-WRAPPER (:CONC-NAME %VERBATIM-STRING-WRAPPER.) (:INCLUDE STRING-WRAPPER) (:CONSTRUCTOR %MAKE-VERBATIM-STRING-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) "Wrapper class used to hold verbatim native code strings.")

(CL:DEFSTRUCT (BOOLEAN-WRAPPER (:CONC-NAME %BOOLEAN-WRAPPER.) (:INCLUDE LITERAL-WRAPPER) (:CONSTRUCTOR %MAKE-BOOLEAN-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) "Objectified version of the BOOLEAN data type.  The NULL
value can be used for a 3-valued semantics (see THREE-VALUED-BOOLEAN)."
  (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT (CHARACTER-WRAPPER (:CONC-NAME %CHARACTER-WRAPPER.) (:INCLUDE LITERAL-WRAPPER) (:CONSTRUCTOR %MAKE-CHARACTER-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT (MUTABLE-STRING-WRAPPER (:CONC-NAME %MUTABLE-STRING-WRAPPER.) (:INCLUDE LITERAL-WRAPPER) (:CONSTRUCTOR %MAKE-MUTABLE-STRING-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE STELLA::NULL-STRING :TYPE CL:SIMPLE-STRING))

(CL:DEFSTRUCT
 (NUMBER-WRAPPER (:CONC-NAME %NUMBER-WRAPPER.)
  (:INCLUDE LITERAL-WRAPPER) (:CONSTRUCTOR %MAKE-NUMBER-WRAPPER ())
  (:COPIER ()) (:PREDICATE ())))

(CL:DEFSTRUCT (FLOAT-WRAPPER (:CONC-NAME %FLOAT-WRAPPER.) (:INCLUDE NUMBER-WRAPPER) (:CONSTRUCTOR %MAKE-FLOAT-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL-FLOAT :TYPE CL:DOUBLE-FLOAT))

(CL:DEFSTRUCT (LONG-INTEGER-WRAPPER (:CONC-NAME %LONG-INTEGER-WRAPPER.) (:INCLUDE NUMBER-WRAPPER) (:CONSTRUCTOR %MAKE-LONG-INTEGER-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT (INTEGER-WRAPPER (:CONC-NAME %INTEGER-WRAPPER.) (:INCLUDE NUMBER-WRAPPER) (:CONSTRUCTOR %MAKE-INTEGER-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL-INTEGER :TYPE CL:FIXNUM))

(CL:DEFSTRUCT (CODE-WRAPPER (:CONC-NAME %CODE-WRAPPER.) (:INCLUDE WRAPPER) (:CONSTRUCTOR %MAKE-CODE-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (METHOD-CODE? NULL))

(CL:DEFSTRUCT (METHOD-CODE-WRAPPER (:CONC-NAME %METHOD-CODE-WRAPPER.) (:INCLUDE CODE-WRAPPER) (:CONSTRUCTOR %MAKE-METHOD-CODE-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT (FUNCTION-CODE-WRAPPER (:CONC-NAME %FUNCTION-CODE-WRAPPER.) (:INCLUDE CODE-WRAPPER) (:CONSTRUCTOR %MAKE-FUNCTION-CODE-WRAPPER ()) (:COPIER ()) (:PREDICATE ())) (WRAPPER-VALUE NULL))

(CL:DEFSTRUCT (REFERENCE-COUNT-OBJECT (:CONC-NAME %REFERENCE-COUNT-OBJECT.) (:INCLUDE OBJECT) (:CONSTRUCTOR %MAKE-REFERENCE-COUNT-OBJECT ()) (:COPIER ()) (:PREDICATE ())) "A reference count objects contains a slot `reference-count' 
that is incremented whenever the object is assigned to a slot, and decremented
whenever it is deassigned from a slot."
  (REFERENCE-COUNT NULL-INTEGER :TYPE CL:FIXNUM))
