;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; stella-to-cl.slisp

#|
+---------------------------- BEGIN LICENSE BLOCK ---------------------------+
|                                                                            |
| Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          |
|                                                                            |
| The contents of this file are subject to the Mozilla Public License        |
| Version 1.1 (the "License"); you may not use this file except in           |
| compliance with the License. You may obtain a copy of the License at       |
| http://www.mozilla.org/MPL/                                                |
|                                                                            |
| Software distributed under the License is distributed on an "AS IS" basis, |
| WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   |
| for the specific language governing rights and limitations under the       |
| License.                                                                   |
|                                                                            |
| The Original Code is the STELLA Programming Language.                      |
|                                                                            |
| The Initial Developer of the Original Code is                              |
| UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          |
| 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               |
|                                                                            |
| Portions created by the Initial Developer are Copyright (C) 1996-2023      |
| the Initial Developer. All Rights Reserved.                                |
|                                                                            |
| Contributor(s):                                                            |
|                                                                            |
| Alternatively, the contents of this file may be used under the terms of    |
| either the GNU General Public License Version 2 or later (the "GPL"), or   |
| the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   |
| in which case the provisions of the GPL or the LGPL are applicable instead |
| of those above. If you wish to allow use of your version of this file only |
| under the terms of either the GPL or the LGPL, and not to allow others to  |
| use your version of this file under the terms of the MPL, indicate your    |
| decision by deleting the provisions above and replace them with the notice |
| and other provisions required by the GPL or the LGPL. If you do not delete |
| the provisions above, a recipient may use your version of this file under  |
| the terms of any one of the MPL, the GPL or the LGPL.                      |
|                                                                            |
+---------------------------- END LICENSE BLOCK -----------------------------+
|#

(CL:IN-PACKAGE "STELLA")

;;; Auxiliary variables:

(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-UNKNOWN NULL)
(CL:DEFVAR SYM-STELLA-TO-CL-STELLA-VERBATIM NULL)
(CL:DEFVAR KWD-STELLA-TO-CL-COMMON-LISP NULL)
(CL:DEFVAR SYM-STELLA-TO-CL-STELLA-CAST NULL)
(CL:DEFVAR KWD-STELLA-TO-CL-STELLA NULL)
(CL:DEFVAR KWD-STELLA-TO-CL-LISP NULL)
(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-CONS NULL)
(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-LIST NULL)
(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-KEY-VALUE-LIST NULL)
(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-ITERATOR NULL)
(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-BOOLEAN NULL)
(CL:DEFVAR SGT-STELLA-TO-CL-STELLA-WRAPPED-BOOLEAN NULL)
(CL:DEFVAR SYM-STELLA-TO-CL-STELLA-STARTUP-STELLA-TO-CL NULL)
(CL:DEFVAR SYM-STELLA-TO-CL-STELLA-METHOD-STARTUP-CLASSNAME NULL)

;;; Forward declarations:

(CL:DECLAIM
 (CL:SPECIAL *STELLA-MODULE* EOL TRUE-WRAPPER FALSE-WRAPPER CL-NIL
  *MODULE* NIL))

;;; (DEFUN (CL-INCREMENTALLY-TRANSLATE LISP-CODE) ...)

(CL:DEFUN CL-INCREMENTALLY-TRANSLATE (EXPRESSION)
  (CL:LET* ((TREE NULL))
   (CL:LET* ((*TRANSIENTOBJECTS?* CL:T))
    (CL:DECLARE (CL:SPECIAL *TRANSIENTOBJECTS?*))
    (CL:SETQ TREE (STELLA-CODE-TO-CONS-TREE EXPRESSION)))
   (CL:RETURN-FROM CL-INCREMENTALLY-TRANSLATE
    (CONS-TREE-TO-LISP-CODE (INCREMENTALLY-TRANSLATE TREE)))))

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFUN SAFELY-EXPAND-MACRO (FORM)
  "Run the translator over 'form' to obtain its expansion.
Guard against expansions that expand repeatedly
due to the head of the result matching the head of 'form'."
  (CL:LET
   ((HEAD (CL:AND (CL:CONSP FORM) (CL:CAR FORM)))
    (EXPANDEDFORM (CL-INCREMENTALLY-TRANSLATE FORM)))
   (CL:IF
    (CL:AND (CL:CONSP EXPANDEDFORM) (CL:EQ HEAD (CL:CAR EXPANDEDFORM)))
    (CL:PROGN (CL:FORMAT CL:T "Can't expand the macro ~A~%" HEAD)
     (CL:RETURN-FROM SAFELY-EXPAND-MACRO NULL))
    (CL:RETURN-FROM SAFELY-EXPAND-MACRO EXPANDEDFORM))))

;;; (DEFUN (BI-MODAL-TRANSLATE LISP-CODE) ...)

(CL:DEFUN BI-MODAL-TRANSLATE (STATEMENT)
  (CL:RETURN-FROM BI-MODAL-TRANSLATE
   (HELP-BI-MODAL-TRANSLATE STATEMENT)))

;;; (DEFUN (HELP-BI-MODAL-TRANSLATE LISP-CODE) ...)

(CL:DEFUN HELP-BI-MODAL-TRANSLATE (STATEMENT)
  (CL:RETURN-FROM HELP-BI-MODAL-TRANSLATE
   (CL-INCREMENTALLY-TRANSLATE STATEMENT)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro eval (statement)
    "Translate and evaluate a STELLA statement or expression."
    (CL:list
     'CL:eval (CL:list 'bi-modal-translate (CL:list 'CL:quote statement))))

;;; (DEFMACRO CLV ...)

(CL:DEFUN CLV (CODE)
  "Convenience macro to splice Lisp expressions into STELLA expressions
without upsetting the translator during interactive sessions.
If `code' is a currently bound Lisp variable, this tries to infer the
type of the resulting expression from the object `code' is bound to
and generates an appropriate cast.  `clv' stands for Common-Lisp Value
or Verbatim."
  (CL:LET*
   ((TYPE SGT-STELLA-TO-CL-STELLA-UNKNOWN)
    (LISPCODE STELLA::NULL-STRING))
   (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING LISPCODE))
   (CL:WHEN (SYMBOL? CODE) (CL:let ((lispSymbol (lispify code)))
           ;; if the symbol is unbound and we are in a module with a Lisp pkg
           ;; different from the current pkg, also look in the current pkg:
           (CL:when (CL:and (CL:not (CL:boundp lispSymbol))
                            (CL:find-symbol (CL:symbol-name lispSymbol)))
             (CL:setq lispSymbol (CL:find-symbol (CL:symbol-name lispSymbol))))
           (CL:when (CL:boundp lispSymbol)
             (CL:setq type (safe-primary-type (CL:eval lispSymbol)))
             ;; this qualifies the symbol with a package:
             (CL:let ((CL:*package* (cl:find-package "KEYWORD")))
               (CL:setq lispCode (CL:prin1-to-string lispSymbol))))))
   (CL:WHEN (UNKNOWN-TYPE? TYPE)
    (CL:RETURN-FROM CLV
     (LIST* SYM-STELLA-TO-CL-STELLA-VERBATIM
      KWD-STELLA-TO-CL-COMMON-LISP CODE NIL)))
   (CL:SETQ CODE (NEW-VERBATIM-STRING-WRAPPER LISPCODE))
   (CL:RETURN-FROM CLV
    (LIST* SYM-STELLA-TO-CL-STELLA-CAST
     (LIST* SYM-STELLA-TO-CL-STELLA-VERBATIM
      KWD-STELLA-TO-CL-COMMON-LISP CODE NIL)
     TYPE NIL))))

;;; (DEFUN (EMACS-REGION-TO-STATEMENTS (CONS OF CONS)) ...)

(CL:DEFUN EMACS-REGION-TO-STATEMENTS (REGION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING REGION))
  #+MCL
  (CL:CHECK-TYPE REGION CL:SIMPLE-STRING)
  (CL:LET*
   ((START 0) (NEWSTART 0) (LISPSTATEMENT NULL) (STELLASTATEMENT NULL)
    (EOFVALUE *MODULE*) (RESULT NIL))
   (CL:DECLARE (CL:TYPE CL:FIXNUM START NEWSTART))
   (CL:LOOP (CL:multiple-value-setq (lispStatement newStart)
           (CL:read-from-string region CL:NIL eofValue :start start))
    (CL:WHEN (CL:EQ LISPSTATEMENT EOFVALUE) (CL:RETURN))
    (CL:HANDLER-CASE
     (CL:SETQ STELLASTATEMENT
      (READ-S-EXPRESSION-FROM-STRING
       (SUBSEQUENCE REGION START NEWSTART)))
     (READ-EXCEPTION () (CL:SETQ STELLASTATEMENT NULL)))
    (CL:IF
     (CL:AND (CONS? STELLASTATEMENT)
      (CL:OR (DECLARATION-TREE? STELLASTATEMENT)
       (CL:AND (SYMBOL? (%%VALUE STELLASTATEMENT))
        (CL:NOT
         (CL:EQ (LOOKUP-COMMAND (%%VALUE STELLASTATEMENT)) NULL)))))
     (CL:SETQ RESULT
      (CONS (CONS-LIST KWD-STELLA-TO-CL-STELLA STELLASTATEMENT)
       RESULT))
     (CL:SETQ RESULT
      (CONS (CONS-LIST KWD-STELLA-TO-CL-LISP LISPSTATEMENT) RESULT)))
    (CL:SETQ START NEWSTART))
   (CL:RETURN-FROM EMACS-REGION-TO-STATEMENTS (REVERSE RESULT))))

;;; (DEFUN (TRANSLATE-EMACS-REGION-IN-MODULE LISP-CODE) ...)

(CL:DEFUN TRANSLATE-EMACS-REGION-IN-MODULE (MODULENAME REGION)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME REGION))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  #+MCL
  (CL:CHECK-TYPE REGION CL:SIMPLE-STRING)
  (CL:LET* ((RESULT CL:NIL))
   (CL:LET*
    ((*MODULE* (GET-STELLA-MODULE MODULENAME CL:T))
     (*CONTEXT* *MODULE*))
    (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
    (CL:LET*
     ((STATEMENT NULL) (ITER-000 (EMACS-REGION-TO-STATEMENTS REGION)))
     (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NIL)) DO
      (CL:SETQ STATEMENT (%%VALUE ITER-000))
      (CL:COND
       ((CL:EQ (%%VALUE STATEMENT) KWD-STELLA-TO-CL-STELLA)
        (CL:PUSH
         (CONS-TREE-TO-LISP-CODE
          (INCREMENTALLY-TRANSLATE (%%VALUE (%%REST STATEMENT))))
         RESULT))
       (CL:T (CL:PUSH (%%VALUE (%%REST STATEMENT)) RESULT)))
      (CL:SETQ ITER-000 (%%REST ITER-000))))
    (CL:RETURN-FROM TRANSLATE-EMACS-REGION-IN-MODULE
     (CL:REVERSE RESULT)))))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro lisp-eval-emacs-region-in-module (moduleName region)
     ;; Read and evaluate each statement in `region' relative to module
     ;;    `moduleName' and return the result of the last evaluation.
     ;; Does do slightly different things depending on whether a statement is
     ;;    a STELLA command or arbitrary Lisp code, so case-sensitive modules
     ;;    and special STELLA read syntax are taken care of appropriately.
     ;; This needs to be a macro to do the right thing in the Allegro Emacs
     ;;    interface (e.g., to get functions compiled).
     (CL:let* ((translatedStatements
                (translate-emacs-region-in-module moduleName region)))
      `(CL:let* ((*module* (get-stella-module ',moduleName TRUE))
                 (*context* *module*))
         ,@translatedStatements)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFMACRO LISP-MACROEXPAND-EMACS-REGION-IN-MODULE (EXPANDER MODULENAME REGION)
  (CL:LET*
   ((TRANSLATEDSTATEMENTS
     (TRANSLATE-EMACS-REGION-IN-MODULE MODULENAME REGION))
    (EXPANSIONS
     (CL:LOOP FOR STATEMENT IN TRANSLATEDSTATEMENTS COLLECT
      (CL:FUNCALL EXPANDER STATEMENT))))
   (CL:IF (CL:= (CL:LENGTH EXPANSIONS) 1) (CL:FIRST EXPANSIONS)
    (CL:CONS (CL:QUOTE CL:PROGN) EXPANSIONS))))

;;; (DEFUN (LISP-EVAL-FORM-IN-MODULE LISP-CODE) ...)

(CL:DEFUN LISP-EVAL-FORM-IN-MODULE (MODULENAME FORM)
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING MODULENAME))
  #+MCL
  (CL:CHECK-TYPE MODULENAME CL:SIMPLE-STRING)
  (CL:LET*
   ((*MODULE* (GET-STELLA-MODULE MODULENAME CL:T))
    (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:RETURN-FROM LISP-EVAL-FORM-IN-MODULE (CL:EVAL FORM))))

;;; (DEFUN (LISPIFY LISP-CODE) ...)

(CL:DEFUN LISPIFY (THING)
  "Convert a Stella 'thing' as much as possible into a
Common-Lisp analogue.  The currently supported 'thing' types are CONS, LIST,
KEY-VALUE-LIST, ITERATOR, SYMBOL, KEYWORD, and all wrapped and unwrapped
literal types.  BOOLEANs are translated into Lisp's CL:T and CL:NIL logic.
Unsupported types are left unchanged."
  (CL:IF
   (CL:EQ
    (CL:OR (CL:TYPEP THING (CL:QUOTE OBJECT))
     (CL:AND (CL:LISTP NIL) (CL:LISTP THING)))
    CL-NIL)
   (CL:IF (DEFINED? THING) (CL:RETURN-FROM LISPIFY THING)
    (CL:RETURN-FROM LISPIFY CL-NIL))
   (CL:LET* ((TEST-VALUE-000 (SAFE-PRIMARY-TYPE THING)))
    (CL:COND
     ((CL:EQ TEST-VALUE-000 SGT-STELLA-TO-CL-STELLA-CONS)
      (CL:PROGN
       (CL:WHEN (CL:EQ THING NIL)
        (CL:RETURN-FROM LISPIFY (CL:IDENTITY CL-NIL)))
       (CL:LET*
        ((FIRST (LISPIFY (%%VALUE THING)))
         (REST (LISPIFY (%%REST THING))))
        (CL:RETURN-FROM LISPIFY (CL:CONS FIRST REST)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-STELLA-TO-CL-STELLA-LIST)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY (LISPIFY (%LIST.THE-CONS-LIST THING)))))
     ((SUBTYPE-OF? TEST-VALUE-000
       SGT-STELLA-TO-CL-STELLA-KEY-VALUE-LIST)
      (CL:PROGN
       (CL:LET* ((RESULT CL-NIL))
        (CL:LET*
         ((KEY NULL) (VALUE NULL)
          (ITER-000 (%KEY-VALUE-LIST.THE-KV-LIST THING)))
         (CL:LOOP WHILE (CL:NOT (CL:EQ ITER-000 NULL)) DO
          (CL:SETQ KEY (%KV-CONS.KEY ITER-000))
          (CL:SETQ VALUE (%KV-CONS.VALUE ITER-000))
          (CL:PUSH (CL:CONS (LISPIFY KEY) (LISPIFY VALUE)) RESULT)
          (CL:SETQ ITER-000 (%KV-CONS.REST ITER-000))))
        (CL:RETURN-FROM LISPIFY (CL:NREVERSE RESULT)))))
     ((SUBTYPE-OF? TEST-VALUE-000 SGT-STELLA-TO-CL-STELLA-ITERATOR)
      (CL:PROGN (CL:RETURN-FROM LISPIFY (LISPIFY (LISTIFY THING)))))
     ((SUBTYPE-OF-SYMBOL? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY
        (CONS-TREE-TO-LISP-CODE (CL-TRANSLATE-GLOBAL-SYMBOL THING)))))
     ((SUBTYPE-OF-KEYWORD? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY (CONS-TREE-TO-LISP-CODE THING))))
     ((SUBTYPE-OF-BOOLEAN? TEST-VALUE-000)
      (CL:PROGN
       (CL:LET* ((TRUTHVALUE (%BOOLEAN-WRAPPER.WRAPPER-VALUE THING)))
        (CL:RETURN-FROM LISPIFY TRUTHVALUE))))
     ((SUBTYPE-OF-VERBATIM-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY (CONS-TREE-TO-LISP-CODE THING))))
     ((SUBTYPE-OF-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY
        (%INTEGER-WRAPPER.WRAPPER-VALUE THING))))
     ((SUBTYPE-OF-LONG-INTEGER? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY
        (%LONG-INTEGER-WRAPPER.WRAPPER-VALUE THING))))
     ((SUBTYPE-OF-FLOAT? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY (%FLOAT-WRAPPER.WRAPPER-VALUE THING))))
     ((SUBTYPE-OF-STRING? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY (%STRING-WRAPPER.WRAPPER-VALUE THING))))
     ((SUBTYPE-OF-CHARACTER? TEST-VALUE-000)
      (CL:PROGN
       (CL:RETURN-FROM LISPIFY
        (%CHARACTER-WRAPPER.WRAPPER-VALUE THING))))
     (CL:T (CL:RETURN-FROM LISPIFY THING))))))

;;; (DEFUN (LISPIFY-BOOLEAN LISP-CODE) ...)

(CL:DEFUN LISPIFY-BOOLEAN (THING)
  "Lispify 'thing' which is assumed to be a (possibly wrapped) 
Stella boolean."
  (CL:IF (CL:NOT (CL:typep thing 'OBJECT))
   (CL:RETURN-FROM LISPIFY-BOOLEAN THING)
   (CL:RETURN-FROM LISPIFY-BOOLEAN (LISPIFY THING))))

;;; (DEFUN (STELLAFY OBJECT) ...)

(CL:DEFUN STELLAFY (THING TARGETTYPE)
  "Partial inverse to 'lispify'.  Convert the Lisp object 
'thing' into a Stella analogue of type 'targetType'.
Note: See also 'stellify'. it is similar, but guesses 'targetType' on its own,
and makes somewhat different translations."
  (CL:COND
   ((CL:OR (CL:EQ TARGETTYPE SGT-STELLA-TO-CL-STELLA-BOOLEAN)
     (CL:EQ TARGETTYPE SGT-STELLA-TO-CL-STELLA-WRAPPED-BOOLEAN))
    (CL:RETURN-FROM STELLAFY
     (CL:IF (CL:NOT (CL:EQ THING CL-NIL)) TRUE-WRAPPER FALSE-WRAPPER)))
   ((CL:EQ TARGETTYPE SGT-STELLA-TO-CL-STELLA-CONS)
    (CL:RETURN-FROM STELLAFY (STELLA-CODE-TO-CONS-TREE THING)))
   (CL:T
    (CL:IF (CL:EQ THING CL-NIL) (CL:RETURN-FROM STELLAFY NULL)
     (CL:RETURN-FROM STELLAFY (STELLA-CODE-TO-CONS-TREE THING))))))

;;; (DEFUN (CL-SLOT-VALUE LISP-CODE) ...)

(CL:DEFUN CL-SLOT-VALUE (OBJECT SLOTNAME DONTCONVERT?)
  "Lookup slot 'slotName' on 'object' and return the lispified
slot value (see 'lispify').  If 'dontConvert?' is TRUE, the returned slot value
will not be lispified.  Generate a warning if no such slot exists on 'object'.
In a call directly from Lisp 'slotName' can also be supplied as a Lisp symbol."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SLOTNAME))
  #+MCL
  (CL:CHECK-TYPE SLOTNAME CL:SIMPLE-STRING)
  (SETQ SLOTNAME (CL:STRING SLOTNAME))
  (CL:LET*
   ((OBJECTTYPE (PRIMARY-TYPE OBJECT))
    (SLOT
     (LOOKUP-SLOT (TYPE-TO-CLASS OBJECTTYPE)
      (INTERN-DERIVED-SYMBOL OBJECTTYPE SLOTNAME)))
    (VALUE NULL))
   (CL:WHEN (CL:EQ SLOT NULL)
    (CL:WARN "slot-value: Slot `~A' does not exist on object `~A'."
     SLOTNAME OBJECT)
    (CL:RETURN-FROM CL-SLOT-VALUE NULL))
   (CL:COND
    ((SUBTYPE-OF-STORAGE-SLOT? (SAFE-PRIMARY-TYPE SLOT))
     (CL:PROGN (CL:SETQ VALUE (READ-SLOT-VALUE OBJECT SLOT))
      (CL:IF (CL:EQ DONTCONVERT? CL:T)
       (CL:RETURN-FROM CL-SLOT-VALUE VALUE)
       (CL:IF (CL:EQ (TYPE SLOT) SGT-STELLA-TO-CL-STELLA-BOOLEAN)
        (CL:RETURN-FROM CL-SLOT-VALUE (LISPIFY-BOOLEAN VALUE))
        (CL:RETURN-FROM CL-SLOT-VALUE (LISPIFY VALUE))))))
    (CL:T (CL:WARN "slot-value: Cannot read method slots.")
     (CL:RETURN-FROM CL-SLOT-VALUE NULL)))))

;;; (DEFUN (CL-SLOT-VALUE-SETTER LISP-CODE) ...)

(CL:DEFUN CL-SLOT-VALUE-SETTER (OBJECT SLOTNAME VALUE DONTCONVERT?)
  "Lookup slot 'slotName' on 'object' and set its value to
the stellafied 'value' (see 'stellafy').  If 'dontConvert?' is TRUE, 'value'
will not be stellafied before it gets assigned.  Generate a warning if no
such slot exists on 'object', or if 'value' has the wrong type.  In a call
directly from Lisp 'slotName' can also be supplied as a Lisp symbol."
  (CL:DECLARE (CL:TYPE CL:SIMPLE-STRING SLOTNAME))
  #+MCL
  (CL:CHECK-TYPE SLOTNAME CL:SIMPLE-STRING)
  (SETQ SLOTNAME (CL:STRING SLOTNAME))
  (CL:LET*
   ((OBJECTTYPE (PRIMARY-TYPE OBJECT))
    (SLOT
     (LOOKUP-SLOT (TYPE-TO-CLASS OBJECTTYPE)
      (INTERN-DERIVED-SYMBOL OBJECTTYPE SLOTNAME)))
    (STELLAVALUE VALUE))
   (CL:WHEN (CL:EQ SLOT NULL)
    (CL:WARN
     "slot-value-setter: Slot `~A' does not exist on object `~A'."
     SLOTNAME OBJECT)
    (CL:RETURN-FROM CL-SLOT-VALUE-SETTER NULL))
   (CL:WHEN (CL:NOT (CL:EQ DONTCONVERT? CL:T))
    (CL:SETQ STELLAVALUE (STELLAFY VALUE (TYPE SLOT))))
   (CL:WHEN
    (CL:NOT
     (CL:AND
      (CL:NOT (CL:EQ (CL:TYPEP STELLAVALUE (CL:QUOTE OBJECT)) CL-NIL))
      (SUBTYPE-OF? (PRIMARY-TYPE STELLAVALUE)
       (TYPE-TO-WRAPPED-TYPE (TYPE SLOT)))))
    (CL:WARN
     "slot-value-setter: Illegal value type for slot `~A'~% on object `~A'.  Type `~A' expected."
     SLOTNAME OBJECT (TYPE SLOT))
    (CL:RETURN-FROM CL-SLOT-VALUE-SETTER NULL))
   (CL:COND
    ((SUBTYPE-OF-STORAGE-SLOT? (SAFE-PRIMARY-TYPE SLOT))
     (CL:PROGN (WRITE-SLOT-VALUE OBJECT SLOT STELLAVALUE)))
    (CL:T (CL:WARN "slot-value-setter: Cannot write method slots.")
     (CL:RETURN-FROM CL-SLOT-VALUE-SETTER NULL)))
   (CL:RETURN-FROM CL-SLOT-VALUE-SETTER VALUE)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFUN SLOT-VALUE (OBJECT SLOTNAME CL:&OPTIONAL DONTCONVERT?)
  "See 'cl-slot-value'."
  (CL:IF (CL:OR (CL:NOT DONTCONVERT?) (CL:EQL DONTCONVERT? FALSE))
   (CL-SLOT-VALUE OBJECT SLOTNAME FALSE)
   (CL-SLOT-VALUE OBJECT SLOTNAME TRUE)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFUN SLOT-VALUE-SETTER (OBJECT SLOTNAME VALUE CL:&OPTIONAL DONTCONVERT?)
  "See 'cl-slot-value-setter'."
  (CL:IF (CL:OR (CL:NOT DONTCONVERT?) (CL:EQL DONTCONVERT? FALSE))
   (CL-SLOT-VALUE-SETTER OBJECT SLOTNAME VALUE FALSE)
   (CL-SLOT-VALUE-SETTER OBJECT SLOTNAME VALUE TRUE)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defsetf slot-value (object slot CL:&optional dontConvert?) (value)
     `(slot-value-setter ,object ,slot ,value ,dontConvert?))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defmethod (name parameters CL:&body body)
    "Define a method and a method object named 'name'.  Keyword
options are :public? :native? :globally-inline? :inline :auxiliary?
:documentation :type :return-types :storage-slot :inherits-through."
    (bi-modal-translate (CL:list* '/stella/defmethod name parameters body)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defun (name parameters CL:&body body)
    "Define a method and a method object named 'name'."
    (bi-modal-translate (CL:list* '/stella/defun name parameters body)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defclass (name (CL::&rest supers) CL::&rest options)
    "Define a native (Lisp/C++) class and create a Stella class object.
   Class options:
     :slots :methods :abstract? :documentation
     :creator :initializer :terminator :destructor
     :recycle-method :cl-native-type :cpp-native-type
   Storage slot options:
     :type :initially :default :allocation :public?
   Method slot options:
     :abstract?"
    ;; Create a Stella class for use during preprocessing.
    ;; Expand to native code that, at initialize time, defines a native CLOS
    ;;    class, class creator, slot accessors, etc., and also redefines
    ;;    the Stella class.
    (bi-modal-translate (CL:list* '/stella/defclass name supers options)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defslot (class name CL:&rest options)
    "Define an external storage slot with 'name' on the class named 'class'."
    (bi-modal-translate (CL:list* '/stella/defslot class name options)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defglobal (variable type initialValue CL::&rest options)
    "Define a global variable 'variable' of type 'type' and initial value
'initialValue'.  Legal options are ':documentation' and ':public?'."
    (cl-incrementally-translate
     (CL:list* '/stella/defglobal variable type initialValue options)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defconstant (variable type initialValue CL::&rest options)
    "Define a constant variable 'variable' of type 'type' and initial value
'initialValue'.  Legal options are ':documentation' and ':public?'."
    (cl-incrementally-translate
     (CL:list* '/stella/defconstant variable type initialValue options)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defspecial (variable type CL:&optional initialValue
                           CL::&rest options)
    "Define a special variable 'variable' of type 'type' and initial value
'initialValue'.  Legal options are ':documentation' and ':public?'."
    (cl-incrementally-translate
     (CL:list* '/stella/defspecial variable type initialValue options)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro deftype (type definition CL::&rest options)
    "Define 'type' to be equivalent to 'definition'."
    (cl-incrementally-translate
     (CL:list* '/stella/deftype type definition options)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro defmacro (name parameters CL:&body body)
    "Define a Stella macro.  The macro expands into a function that
returns a cons tree representing a STELLA expression or statement.
The operators 'bquote', '&' and '&&' (corresponding to the Common Lisp
backquote, ',' and '.@' respectively) can be used to splice together code
expressions.  Just as '.@', '&&' operates using destructive concatenation
rather than an append."
    (cl-incrementally-translate
     (CL:list* '/stella/defmacro name parameters body)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:defmacro startup-time-progn (CL:&body body)
    "Translate 'body' into a 'progn' executed at startup time."
    (bi-modal-translate (CL:list* '/stella/startup-time-progn body)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:loop for operator in '(defmethod defun defclass defslot
                             defglobal defconstant defspecial deftype
                             defmacro defmodule defdemon
                             startup-time-progn)
      do (CL:setf (CL:macro-function
                   (CL:intern
                    (CL:concatenate
                      'CL:string "/STELLA/" (CL:symbol-name operator))
                    "STELLA"))
           (CL:macro-function operator)))

;;; (VERBATIM :COMMON-LISP ...)

(CL:DEFUN CREATE-NATIVE-CLASS-P (SUPERS OPTIONS)
  (CL:DECLARE (CL:IGNORE SUPERS OPTIONS)
   (CL:SPECIAL *CREATE-NATIVE-CLASS-ENABLED*))
  *CREATE-NATIVE-CLASS-ENABLED*)

;;; (VERBATIM :COMMON-LISP ...)

(CL:progn
    (CL:defmacro verbatim (CL:&body body)
      "Translate 'body' into a 'verbatim' statement."
      (bi-modal-translate (CL:list* '/stella/verbatim body)))
    (CL:setf (CL:macro-function '/stella/verbatim)
      (CL:macro-function 'verbatim)))

(CL:DEFUN STARTUP-STELLA-TO-CL ()
  (CL:LET* ((*MODULE* *STELLA-MODULE*) (*CONTEXT* *MODULE*))
   (CL:DECLARE (CL:SPECIAL *MODULE* *CONTEXT*))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 2)
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-UNKNOWN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "UNKNOWN" NULL 1))
    (CL:SETQ SYM-STELLA-TO-CL-STELLA-VERBATIM
     (INTERN-RIGID-SYMBOL-WRT-MODULE "VERBATIM" NULL 0))
    (CL:SETQ KWD-STELLA-TO-CL-COMMON-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "COMMON-LISP" NULL 2))
    (CL:SETQ SYM-STELLA-TO-CL-STELLA-CAST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CAST" NULL 0))
    (CL:SETQ KWD-STELLA-TO-CL-STELLA
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STELLA" NULL 2))
    (CL:SETQ KWD-STELLA-TO-CL-LISP
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LISP" NULL 2))
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-CONS
     (INTERN-RIGID-SYMBOL-WRT-MODULE "CONS" NULL 1))
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-LIST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "LIST" NULL 1))
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-KEY-VALUE-LIST
     (INTERN-RIGID-SYMBOL-WRT-MODULE "KEY-VALUE-LIST" NULL 1))
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-ITERATOR
     (INTERN-RIGID-SYMBOL-WRT-MODULE "ITERATOR" NULL 1))
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "BOOLEAN" NULL 1))
    (CL:SETQ SGT-STELLA-TO-CL-STELLA-WRAPPED-BOOLEAN
     (INTERN-RIGID-SYMBOL-WRT-MODULE "WRAPPED-BOOLEAN" NULL 1))
    (CL:SETQ SYM-STELLA-TO-CL-STELLA-STARTUP-STELLA-TO-CL
     (INTERN-RIGID-SYMBOL-WRT-MODULE "STARTUP-STELLA-TO-CL" NULL 0))
    (CL:SETQ SYM-STELLA-TO-CL-STELLA-METHOD-STARTUP-CLASSNAME
     (INTERN-RIGID-SYMBOL-WRT-MODULE "METHOD-STARTUP-CLASSNAME" NULL
      0)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 6) (FINALIZE-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 7)
    (DEFINE-FUNCTION-OBJECT "CL-INCREMENTALLY-TRANSLATE"
     "(DEFUN (CL-INCREMENTALLY-TRANSLATE LISP-CODE) ((EXPRESSION LISP-CODE)))"
     (CL:FUNCTION CL-INCREMENTALLY-TRANSLATE) NULL)
    (DEFINE-FUNCTION-OBJECT "BI-MODAL-TRANSLATE"
     "(DEFUN (BI-MODAL-TRANSLATE LISP-CODE) ((STATEMENT LISP-CODE)))"
     (CL:FUNCTION BI-MODAL-TRANSLATE) NULL)
    (DEFINE-FUNCTION-OBJECT "HELP-BI-MODAL-TRANSLATE"
     "(DEFUN (HELP-BI-MODAL-TRANSLATE LISP-CODE) ((STATEMENT LISP-CODE)))"
     (CL:FUNCTION HELP-BI-MODAL-TRANSLATE) NULL)
    (DEFINE-FUNCTION-OBJECT "CLV"
     "(DEFUN CLV ((CODE OBJECT)) :TYPE OBJECT :MACRO? TRUE :DOCUMENTATION \"Convenience macro to splice Lisp expressions into STELLA expressions
without upsetting the translator during interactive sessions.
If `code' is a currently bound Lisp variable, this tries to infer the
type of the resulting expression from the object `code' is bound to
and generates an appropriate cast.  `clv' stands for Common-Lisp Value
or Verbatim.\" :PUBLIC? TRUE)" (CL:FUNCTION CLV) NULL)
    (DEFINE-FUNCTION-OBJECT "EMACS-REGION-TO-STATEMENTS"
     "(DEFUN (EMACS-REGION-TO-STATEMENTS (CONS OF CONS)) ((REGION STRING)))"
     (CL:FUNCTION EMACS-REGION-TO-STATEMENTS) NULL)
    (DEFINE-FUNCTION-OBJECT "TRANSLATE-EMACS-REGION-IN-MODULE"
     "(DEFUN (TRANSLATE-EMACS-REGION-IN-MODULE LISP-CODE) ((MODULENAME STRING) (REGION STRING)))"
     (CL:FUNCTION TRANSLATE-EMACS-REGION-IN-MODULE) NULL)
    (DEFINE-FUNCTION-OBJECT "LISP-EVAL-FORM-IN-MODULE"
     "(DEFUN (LISP-EVAL-FORM-IN-MODULE LISP-CODE) ((MODULENAME STRING) (FORM LISP-CODE)))"
     (CL:FUNCTION LISP-EVAL-FORM-IN-MODULE) NULL)
    (DEFINE-FUNCTION-OBJECT "LISPIFY"
     "(DEFUN (LISPIFY LISP-CODE) ((THING UNKNOWN)) :DOCUMENTATION \"Convert a Stella 'thing' as much as possible into a
Common-Lisp analogue.  The currently supported 'thing' types are CONS, LIST,
KEY-VALUE-LIST, ITERATOR, SYMBOL, KEYWORD, and all wrapped and unwrapped
literal types.  BOOLEANs are translated into Lisp's CL:T and CL:NIL logic.
Unsupported types are left unchanged.\" :PUBLIC? TRUE)"
     (CL:FUNCTION LISPIFY) NULL)
    (DEFINE-FUNCTION-OBJECT "LISPIFY-BOOLEAN"
     "(DEFUN (LISPIFY-BOOLEAN LISP-CODE) ((THING UNKNOWN)) :DOCUMENTATION \"Lispify 'thing' which is assumed to be a (possibly wrapped) 
Stella boolean.\" :PUBLIC? TRUE)" (CL:FUNCTION LISPIFY-BOOLEAN) NULL)
    (DEFINE-FUNCTION-OBJECT "STELLAFY"
     "(DEFUN (STELLAFY OBJECT) ((THING LISP-CODE) (TARGETTYPE TYPE)) :DOCUMENTATION \"Partial inverse to 'lispify'.  Convert the Lisp object 
'thing' into a Stella analogue of type 'targetType'.
Note: See also 'stellify'. it is similar, but guesses 'targetType' on its own,
and makes somewhat different translations.\" :PUBLIC? TRUE)"
     (CL:FUNCTION STELLAFY) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-SLOT-VALUE"
     "(DEFUN (CL-SLOT-VALUE LISP-CODE) ((OBJECT OBJECT) (SLOTNAME STRING) (DONTCONVERT? BOOLEAN)) :DOCUMENTATION \"Lookup slot 'slotName' on 'object' and return the lispified
slot value (see 'lispify').  If 'dontConvert?' is TRUE, the returned slot value
will not be lispified.  Generate a warning if no such slot exists on 'object'.
In a call directly from Lisp 'slotName' can also be supplied as a Lisp symbol.\" :PUBLIC? TRUE)"
     (CL:FUNCTION CL-SLOT-VALUE) NULL)
    (DEFINE-FUNCTION-OBJECT "CL-SLOT-VALUE-SETTER"
     "(DEFUN (CL-SLOT-VALUE-SETTER LISP-CODE) ((OBJECT OBJECT) (SLOTNAME STRING) (VALUE LISP-CODE) (DONTCONVERT? BOOLEAN)) :DOCUMENTATION \"Lookup slot 'slotName' on 'object' and set its value to
the stellafied 'value' (see 'stellafy').  If 'dontConvert?' is TRUE, 'value'
will not be stellafied before it gets assigned.  Generate a warning if no
such slot exists on 'object', or if 'value' has the wrong type.  In a call
directly from Lisp 'slotName' can also be supplied as a Lisp symbol.\" :PUBLIC? TRUE)"
     (CL:FUNCTION CL-SLOT-VALUE-SETTER) NULL)
    (DEFINE-FUNCTION-OBJECT "STARTUP-STELLA-TO-CL"
     "(DEFUN STARTUP-STELLA-TO-CL () :PUBLIC? TRUE)"
     (CL:FUNCTION STARTUP-STELLA-TO-CL) NULL)
    (CL:LET*
     ((FUNCTION
       (LOOKUP-FUNCTION SYM-STELLA-TO-CL-STELLA-STARTUP-STELLA-TO-CL)))
     (SET-DYNAMIC-SLOT-VALUE (%METHOD-SLOT.DYNAMIC-SLOTS FUNCTION)
      SYM-STELLA-TO-CL-STELLA-METHOD-STARTUP-CLASSNAME
      (WRAP-STRING "_StartupStellaToCl") NULL-STRING-WRAPPER)))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 8) (FINALIZE-SLOTS)
    (CLEANUP-UNFINALIZED-CLASSES))
   (CL:WHEN (CURRENT-STARTUP-TIME-PHASE? 9)
    (%IN-MODULE (COPY-CONS-TREE (WRAP-STRING "/STELLA")))))
  :VOID)
